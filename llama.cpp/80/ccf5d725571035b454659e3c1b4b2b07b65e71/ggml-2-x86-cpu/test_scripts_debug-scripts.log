+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.620 I build: 4442 (80ccf5d7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.823 I main: llama backend init
0.00.000.831 I main: load the model and apply lora adapter, if any
0.00.085.741 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.752 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.850 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.872 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.875 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.880 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.882 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.883 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.885 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.887 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.888 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.896 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.897 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.899 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.900 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.902 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.288.713 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.390.411 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.414.139 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.414.153 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.414.155 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.414.157 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.414.159 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.414.161 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.414.163 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.414.167 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.414.169 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.414.171 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.414.173 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.414.175 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.414.183 I llama_model_loader: - type  f32:   37 tensors
0.00.414.185 I llama_model_loader: - type q8_0:  127 tensors
0.00.681.566 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.810.695 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.811.746 I llm_load_vocab: special tokens cache size = 5
0.01.029.951 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.030.033 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.030.040 I llm_load_print_meta: arch             = gemma
0.01.030.041 I llm_load_print_meta: vocab type       = SPM
0.01.030.042 I llm_load_print_meta: n_vocab          = 256000
0.01.030.045 I llm_load_print_meta: n_merges         = 0
0.01.030.046 I llm_load_print_meta: vocab_only       = 0
0.01.030.046 I llm_load_print_meta: n_ctx_train      = 8192
0.01.030.048 I llm_load_print_meta: n_embd           = 2048
0.01.030.048 I llm_load_print_meta: n_layer          = 18
0.01.030.128 I llm_load_print_meta: n_head           = 8
0.01.030.138 I llm_load_print_meta: n_head_kv        = 1
0.01.030.139 I llm_load_print_meta: n_rot            = 256
0.01.030.140 I llm_load_print_meta: n_swa            = 0
0.01.030.140 I llm_load_print_meta: n_embd_head_k    = 256
0.01.030.141 I llm_load_print_meta: n_embd_head_v    = 256
0.01.030.146 I llm_load_print_meta: n_gqa            = 8
0.01.030.151 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.030.156 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.030.157 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.030.159 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.030.160 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.030.161 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.030.161 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.030.166 I llm_load_print_meta: n_ff             = 16384
0.01.030.167 I llm_load_print_meta: n_expert         = 0
0.01.030.168 I llm_load_print_meta: n_expert_used    = 0
0.01.030.168 I llm_load_print_meta: causal attn      = 1
0.01.030.169 I llm_load_print_meta: pooling type     = 0
0.01.030.169 I llm_load_print_meta: rope type        = 2
0.01.030.179 I llm_load_print_meta: rope scaling     = linear
0.01.030.181 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.030.181 I llm_load_print_meta: freq_scale_train = 1
0.01.030.182 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.030.183 I llm_load_print_meta: rope_finetuned   = unknown
0.01.030.183 I llm_load_print_meta: ssm_d_conv       = 0
0.01.030.183 I llm_load_print_meta: ssm_d_inner      = 0
0.01.030.184 I llm_load_print_meta: ssm_d_state      = 0
0.01.030.185 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.030.185 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.030.188 I llm_load_print_meta: model type       = 2B
0.01.030.190 I llm_load_print_meta: model ftype      = Q8_0
0.01.030.192 I llm_load_print_meta: model params     = 2.51 B
0.01.030.193 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.030.194 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.030.195 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.030.196 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.030.196 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.030.197 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.030.198 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.030.198 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.030.205 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.030.207 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.030.208 I llm_load_print_meta: max token length = 93
0.01.133.437 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.133.446 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.133.447 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.133.448 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.133.449 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.133.450 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.140.442 I llama_new_context_with_model: n_seq_max     = 1
0.01.140.447 I llama_new_context_with_model: n_ctx         = 4096
0.01.140.448 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.140.448 I llama_new_context_with_model: n_batch       = 2048
0.01.140.449 I llama_new_context_with_model: n_ubatch      = 512
0.01.140.449 I llama_new_context_with_model: flash_attn    = 0
0.01.140.451 I llama_new_context_with_model: freq_base     = 10000.0
0.01.140.452 I llama_new_context_with_model: freq_scale    = 1
0.01.140.452 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.140.536 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.154.814 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.154.852 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.154.982 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.158.542 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.158.547 I llama_new_context_with_model: graph nodes  = 601
0.01.158.547 I llama_new_context_with_model: graph splits = 1
0.01.158.571 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.158.574 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.772.119 I main: llama threadpool init, n_threads = 4
0.01.772.135 I 
0.01.772.256 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.772.260 I 
0.01.772.493 I sampler seed: 3646830688
0.01.772.508 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.772.528 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.772.530 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.772.530 I 
 maneuvrability analysis for a neural network with a multilayer perceptron (MLP) architecture.

**1. Assumptions:**

- MLP with multiple layers
-

0.15.322.908 I llama_perf_sampler_print:    sampling time =      49.65 ms /    33 runs   (    1.50 ms per token,   664.67 tokens per second)
0.15.322.911 I llama_perf_context_print:        load time =    1771.21 ms
0.15.322.922 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.322.925 I llama_perf_context_print:        eval time =   13464.79 ms /    32 runs   (  420.77 ms per token,     2.38 tokens per second)
0.15.322.926 I llama_perf_context_print:       total time =   13550.80 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 4442 (80ccf5d7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.860 I main: llama backend init
0.00.000.869 I main: load the model and apply lora adapter, if any
0.00.085.932 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.086.036 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.063 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.068 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.073 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.076 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.078 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.080 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.081 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.084 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.096 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.100 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.102 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.104 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.106 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.306.851 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.407.817 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.431.341 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.431.353 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.431.355 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.431.357 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.431.358 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.431.360 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.431.362 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.431.367 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.431.369 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.431.371 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.431.374 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.431.375 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.431.384 I llama_model_loader: - type  f32:   37 tensors
0.00.431.387 I llama_model_loader: - type q8_0:  127 tensors
0.00.697.663 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.824.464 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.825.557 I llm_load_vocab: special tokens cache size = 5
0.01.044.433 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.044.517 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.044.523 I llm_load_print_meta: arch             = gemma
0.01.044.523 I llm_load_print_meta: vocab type       = SPM
0.01.044.524 I llm_load_print_meta: n_vocab          = 256000
0.01.044.527 I llm_load_print_meta: n_merges         = 0
0.01.044.527 I llm_load_print_meta: vocab_only       = 0
0.01.044.527 I llm_load_print_meta: n_ctx_train      = 8192
0.01.044.528 I llm_load_print_meta: n_embd           = 2048
0.01.044.528 I llm_load_print_meta: n_layer          = 18
0.01.044.611 I llm_load_print_meta: n_head           = 8
0.01.044.621 I llm_load_print_meta: n_head_kv        = 1
0.01.044.622 I llm_load_print_meta: n_rot            = 256
0.01.044.622 I llm_load_print_meta: n_swa            = 0
0.01.044.623 I llm_load_print_meta: n_embd_head_k    = 256
0.01.044.623 I llm_load_print_meta: n_embd_head_v    = 256
0.01.044.628 I llm_load_print_meta: n_gqa            = 8
0.01.044.633 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.044.637 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.044.640 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.044.641 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.044.642 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.044.644 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.044.645 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.044.650 I llm_load_print_meta: n_ff             = 16384
0.01.044.651 I llm_load_print_meta: n_expert         = 0
0.01.044.652 I llm_load_print_meta: n_expert_used    = 0
0.01.044.653 I llm_load_print_meta: causal attn      = 1
0.01.044.654 I llm_load_print_meta: pooling type     = 0
0.01.044.654 I llm_load_print_meta: rope type        = 2
0.01.044.655 I llm_load_print_meta: rope scaling     = linear
0.01.044.656 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.044.657 I llm_load_print_meta: freq_scale_train = 1
0.01.044.658 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.044.658 I llm_load_print_meta: rope_finetuned   = unknown
0.01.044.659 I llm_load_print_meta: ssm_d_conv       = 0
0.01.044.661 I llm_load_print_meta: ssm_d_inner      = 0
0.01.044.661 I llm_load_print_meta: ssm_d_state      = 0
0.01.044.662 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.044.662 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.044.665 I llm_load_print_meta: model type       = 2B
0.01.044.667 I llm_load_print_meta: model ftype      = Q8_0
0.01.044.668 I llm_load_print_meta: model params     = 2.51 B
0.01.044.669 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.044.669 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.044.670 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.044.671 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.044.672 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.044.674 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.044.675 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.044.675 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.044.682 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.044.683 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.044.684 I llm_load_print_meta: max token length = 93
0.01.141.961 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.149.384 I llama_new_context_with_model: n_seq_max     = 1
0.01.149.389 I llama_new_context_with_model: n_ctx         = 4096
0.01.149.390 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.149.390 I llama_new_context_with_model: n_batch       = 2048
0.01.149.390 I llama_new_context_with_model: n_ubatch      = 512
0.01.149.391 I llama_new_context_with_model: flash_attn    = 0
0.01.149.393 I llama_new_context_with_model: freq_base     = 10000.0
0.01.149.393 I llama_new_context_with_model: freq_scale    = 1
0.01.149.394 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.149.481 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.164.213 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.164.253 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.164.376 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.167.578 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.167.582 I llama_new_context_with_model: graph nodes  = 601
0.01.167.582 I llama_new_context_with_model: graph splits = 1
0.01.167.606 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.167.610 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.779.655 I main: llama threadpool init, n_threads = 4
0.01.779.672 I 
0.01.779.798 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.779.802 I 
0.01.780.054 I sampler seed: 2740568487
0.01.780.070 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.780.080 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.780.084 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.780.084 I 
 increably, the sun dipped below the horizon, painting the sky in hues of crimson, orange, and purple.

The wind whispered secrets through rustling leaves,

0.15.534.528 I llama_perf_sampler_print:    sampling time =      49.94 ms /    33 runs   (    1.51 ms per token,   660.83 tokens per second)
0.15.534.543 I llama_perf_context_print:        load time =    1778.69 ms
0.15.534.545 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.534.548 I llama_perf_context_print:        eval time =   13668.98 ms /    32 runs   (  427.16 ms per token,     2.34 tokens per second)
0.15.534.549 I llama_perf_context_print:       total time =   13754.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.686 I build: 4442 (80ccf5d7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.888 I main: llama backend init
0.00.000.897 I main: load the model and apply lora adapter, if any
0.00.086.505 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.086.519 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.086.614 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.634 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.637 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.642 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.644 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.646 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.648 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.649 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.651 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.659 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.661 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.662 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.664 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.665 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.289.853 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.390.763 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.414.205 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.414.216 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.414.218 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.414.220 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.414.222 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.414.224 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.414.226 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.414.230 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.414.232 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.414.235 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.414.236 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.414.238 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.414.246 I llama_model_loader: - type  f32:   37 tensors
0.00.414.248 I llama_model_loader: - type q8_0:  127 tensors
0.00.695.829 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.823.778 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.824.795 I llm_load_vocab: special tokens cache size = 5
0.01.037.875 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.037.958 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.037.966 I llm_load_print_meta: arch             = gemma
0.01.037.967 I llm_load_print_meta: vocab type       = SPM
0.01.037.968 I llm_load_print_meta: n_vocab          = 256000
0.01.037.971 I llm_load_print_meta: n_merges         = 0
0.01.037.971 I llm_load_print_meta: vocab_only       = 0
0.01.037.971 I llm_load_print_meta: n_ctx_train      = 8192
0.01.037.972 I llm_load_print_meta: n_embd           = 2048
0.01.037.973 I llm_load_print_meta: n_layer          = 18
0.01.038.054 I llm_load_print_meta: n_head           = 8
0.01.038.063 I llm_load_print_meta: n_head_kv        = 1
0.01.038.065 I llm_load_print_meta: n_rot            = 256
0.01.038.065 I llm_load_print_meta: n_swa            = 0
0.01.038.066 I llm_load_print_meta: n_embd_head_k    = 256
0.01.038.075 I llm_load_print_meta: n_embd_head_v    = 256
0.01.038.081 I llm_load_print_meta: n_gqa            = 8
0.01.038.088 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.038.093 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.038.095 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.038.096 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.038.102 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.038.106 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.038.106 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.038.111 I llm_load_print_meta: n_ff             = 16384
0.01.038.112 I llm_load_print_meta: n_expert         = 0
0.01.038.112 I llm_load_print_meta: n_expert_used    = 0
0.01.038.125 I llm_load_print_meta: causal attn      = 1
0.01.038.125 I llm_load_print_meta: pooling type     = 0
0.01.038.126 I llm_load_print_meta: rope type        = 2
0.01.038.127 I llm_load_print_meta: rope scaling     = linear
0.01.038.128 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.038.129 I llm_load_print_meta: freq_scale_train = 1
0.01.038.129 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.038.130 I llm_load_print_meta: rope_finetuned   = unknown
0.01.038.131 I llm_load_print_meta: ssm_d_conv       = 0
0.01.038.131 I llm_load_print_meta: ssm_d_inner      = 0
0.01.038.132 I llm_load_print_meta: ssm_d_state      = 0
0.01.038.132 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.038.133 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.038.145 I llm_load_print_meta: model type       = 2B
0.01.038.147 I llm_load_print_meta: model ftype      = Q8_0
0.01.038.148 I llm_load_print_meta: model params     = 2.51 B
0.01.038.149 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.038.150 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.038.151 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.038.151 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.038.151 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.038.152 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.038.153 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.038.153 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.038.160 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.038.162 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.038.162 I llm_load_print_meta: max token length = 93
0.01.117.037 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.117.048 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.117.049 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.117.049 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.117.050 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.117.051 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.123.978 I llama_new_context_with_model: n_seq_max     = 1
0.01.123.984 I llama_new_context_with_model: n_ctx         = 4096
0.01.123.984 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.123.985 I llama_new_context_with_model: n_batch       = 2048
0.01.123.985 I llama_new_context_with_model: n_ubatch      = 512
0.01.123.986 I llama_new_context_with_model: flash_attn    = 0
0.01.123.988 I llama_new_context_with_model: freq_base     = 10000.0
0.01.123.989 I llama_new_context_with_model: freq_scale    = 1
0.01.123.990 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.124.072 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.138.624 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.138.666 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.138.794 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.142.099 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.142.103 I llama_new_context_with_model: graph nodes  = 601
0.01.142.104 I llama_new_context_with_model: graph splits = 1
0.01.142.128 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.142.132 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.754.450 I main: llama threadpool init, n_threads = 4
0.01.754.468 I 
0.01.754.587 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.754.588 I 
0.01.754.817 I sampler seed: 1441618182
0.01.754.832 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.754.841 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.754.845 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.754.845 I 
 maneuvously.

I am unable to generate a response that is safe and appropriate for all audiences. [end of text]


0.11.026.152 I llama_perf_sampler_print:    sampling time =      34.19 ms /    23 runs   (    1.49 ms per token,   672.63 tokens per second)
0.11.026.155 I llama_perf_context_print:        load time =    1753.45 ms
0.11.026.157 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.026.170 I llama_perf_context_print:        eval time =    9211.91 ms /    22 runs   (  418.72 ms per token,     2.39 tokens per second)
0.11.026.171 I llama_perf_context_print:       total time =    9271.71 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4442 (80ccf5d7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.000.859 I main: load the model and apply lora adapter, if any
0.00.086.744 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.086.758 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.086.854 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.876 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.879 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.884 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.886 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.887 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.889 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.891 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.893 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.900 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.902 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.903 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.905 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.906 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.306.080 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.407.324 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.430.814 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.430.829 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.430.831 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.430.833 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.430.834 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.430.837 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.430.839 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.430.843 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.430.845 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.430.847 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.430.849 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.430.851 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.430.859 I llama_model_loader: - type  f32:   37 tensors
0.00.430.862 I llama_model_loader: - type q8_0:  127 tensors
0.00.702.008 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.832.273 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.833.293 I llm_load_vocab: special tokens cache size = 5
0.01.055.447 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.055.528 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.055.533 I llm_load_print_meta: arch             = gemma
0.01.055.534 I llm_load_print_meta: vocab type       = SPM
0.01.055.535 I llm_load_print_meta: n_vocab          = 256000
0.01.055.538 I llm_load_print_meta: n_merges         = 0
0.01.055.538 I llm_load_print_meta: vocab_only       = 0
0.01.055.539 I llm_load_print_meta: n_ctx_train      = 8192
0.01.055.539 I llm_load_print_meta: n_embd           = 2048
0.01.055.539 I llm_load_print_meta: n_layer          = 18
0.01.055.619 I llm_load_print_meta: n_head           = 8
0.01.055.626 I llm_load_print_meta: n_head_kv        = 1
0.01.055.627 I llm_load_print_meta: n_rot            = 256
0.01.055.628 I llm_load_print_meta: n_swa            = 0
0.01.055.628 I llm_load_print_meta: n_embd_head_k    = 256
0.01.055.628 I llm_load_print_meta: n_embd_head_v    = 256
0.01.055.633 I llm_load_print_meta: n_gqa            = 8
0.01.055.638 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.055.643 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.055.645 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.055.647 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.055.648 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.055.649 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.055.650 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.055.655 I llm_load_print_meta: n_ff             = 16384
0.01.055.655 I llm_load_print_meta: n_expert         = 0
0.01.055.656 I llm_load_print_meta: n_expert_used    = 0
0.01.055.657 I llm_load_print_meta: causal attn      = 1
0.01.055.661 I llm_load_print_meta: pooling type     = 0
0.01.055.661 I llm_load_print_meta: rope type        = 2
0.01.055.662 I llm_load_print_meta: rope scaling     = linear
0.01.055.663 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.055.664 I llm_load_print_meta: freq_scale_train = 1
0.01.055.664 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.055.675 I llm_load_print_meta: rope_finetuned   = unknown
0.01.055.676 I llm_load_print_meta: ssm_d_conv       = 0
0.01.055.676 I llm_load_print_meta: ssm_d_inner      = 0
0.01.055.676 I llm_load_print_meta: ssm_d_state      = 0
0.01.055.689 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.055.690 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.055.693 I llm_load_print_meta: model type       = 2B
0.01.055.695 I llm_load_print_meta: model ftype      = Q8_0
0.01.055.695 I llm_load_print_meta: model params     = 2.51 B
0.01.055.697 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.055.697 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.055.699 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.055.699 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.055.700 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.055.703 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.055.704 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.055.704 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.055.711 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.055.712 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.055.713 I llm_load_print_meta: max token length = 93
0.01.128.755 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.128.763 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.136.140 I llama_new_context_with_model: n_seq_max     = 1
0.01.136.146 I llama_new_context_with_model: n_ctx         = 4096
0.01.136.146 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.136.146 I llama_new_context_with_model: n_batch       = 2048
0.01.136.147 I llama_new_context_with_model: n_ubatch      = 512
0.01.136.148 I llama_new_context_with_model: flash_attn    = 0
0.01.136.150 I llama_new_context_with_model: freq_base     = 10000.0
0.01.136.151 I llama_new_context_with_model: freq_scale    = 1
0.01.136.152 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.136.240 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.150.528 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.150.572 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.150.707 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.154.033 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.154.037 I llama_new_context_with_model: graph nodes  = 601
0.01.154.037 I llama_new_context_with_model: graph splits = 1
0.01.154.064 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.154.068 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.768.087 I main: llama threadpool init, n_threads = 4
0.01.768.104 I 
0.01.768.240 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.768.245 I 
0.01.768.486 I sampler seed: 2412148907
0.01.768.501 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.768.513 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.768.514 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.768.514 I 
 increably, then tumbled to the floor, scraping a delicate porcelain figurine.

The incident served as a stark reminder of the fragility of our possessions and the importance

0.15.396.706 I llama_perf_sampler_print:    sampling time =      49.87 ms /    33 runs   (    1.51 ms per token,   661.77 tokens per second)
0.15.396.709 I llama_perf_context_print:        load time =    1767.14 ms
0.15.396.710 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.396.712 I llama_perf_context_print:        eval time =   13542.75 ms /    32 runs   (  423.21 ms per token,     2.36 tokens per second)
0.15.396.713 I llama_perf_context_print:       total time =   13628.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m8.366s
user	3m36.731s
sys	0m9.429s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4442 (80ccf5d7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186046.61 ms
main:    total time = 186046.61 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.681 I build: 4442 (80ccf5d7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.890 I main: llama backend init
0.00.000.899 I main: load the model and apply lora adapter, if any
0.00.086.736 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.086.751 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.086.863 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.888 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.890 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.896 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.898 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.899 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.901 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.903 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.905 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.912 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.914 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.915 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.917 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.290.221 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.391.423 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.415.065 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.415.082 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.415.083 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.415.085 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.415.087 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.415.089 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.415.091 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.415.096 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.415.097 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.415.100 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.415.102 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.415.103 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.415.105 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.415.115 I llama_model_loader: - type  f32:   37 tensors
0.00.415.116 I llama_model_loader: - type q4_K:  108 tensors
0.00.415.117 I llama_model_loader: - type q6_K:   19 tensors
0.00.680.710 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.810.441 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.811.439 I llm_load_vocab: special tokens cache size = 5
0.01.021.459 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.021.541 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.021.546 I llm_load_print_meta: arch             = gemma
0.01.021.547 I llm_load_print_meta: vocab type       = SPM
0.01.021.547 I llm_load_print_meta: n_vocab          = 256000
0.01.021.550 I llm_load_print_meta: n_merges         = 0
0.01.021.551 I llm_load_print_meta: vocab_only       = 0
0.01.021.551 I llm_load_print_meta: n_ctx_train      = 8192
0.01.021.552 I llm_load_print_meta: n_embd           = 2048
0.01.021.552 I llm_load_print_meta: n_layer          = 18
0.01.021.641 I llm_load_print_meta: n_head           = 8
0.01.021.660 I llm_load_print_meta: n_head_kv        = 1
0.01.021.662 I llm_load_print_meta: n_rot            = 256
0.01.021.663 I llm_load_print_meta: n_swa            = 0
0.01.021.663 I llm_load_print_meta: n_embd_head_k    = 256
0.01.021.664 I llm_load_print_meta: n_embd_head_v    = 256
0.01.021.671 I llm_load_print_meta: n_gqa            = 8
0.01.021.679 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.021.694 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.021.696 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.021.697 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.021.698 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.021.698 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.021.699 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.021.707 I llm_load_print_meta: n_ff             = 16384
0.01.021.708 I llm_load_print_meta: n_expert         = 0
0.01.021.709 I llm_load_print_meta: n_expert_used    = 0
0.01.021.710 I llm_load_print_meta: causal attn      = 1
0.01.021.711 I llm_load_print_meta: pooling type     = 0
0.01.021.711 I llm_load_print_meta: rope type        = 2
0.01.021.712 I llm_load_print_meta: rope scaling     = linear
0.01.021.715 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.021.716 I llm_load_print_meta: freq_scale_train = 1
0.01.021.716 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.021.717 I llm_load_print_meta: rope_finetuned   = unknown
0.01.021.718 I llm_load_print_meta: ssm_d_conv       = 0
0.01.021.719 I llm_load_print_meta: ssm_d_inner      = 0
0.01.021.720 I llm_load_print_meta: ssm_d_state      = 0
0.01.021.721 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.021.721 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.021.725 I llm_load_print_meta: model type       = 2B
0.01.021.731 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.021.732 I llm_load_print_meta: model params     = 2.51 B
0.01.021.733 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.021.734 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.021.735 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.021.735 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.021.736 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.021.743 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.021.744 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.021.745 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.021.753 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.021.755 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.021.756 I llm_load_print_meta: max token length = 93
0.01.083.471 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.083.483 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.083.484 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.083.485 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.083.486 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.083.486 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.090.696 I llama_new_context_with_model: n_seq_max     = 1
0.01.090.702 I llama_new_context_with_model: n_ctx         = 4096
0.01.090.702 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.090.703 I llama_new_context_with_model: n_batch       = 2048
0.01.090.703 I llama_new_context_with_model: n_ubatch      = 512
0.01.090.704 I llama_new_context_with_model: flash_attn    = 0
0.01.090.706 I llama_new_context_with_model: freq_base     = 10000.0
0.01.090.706 I llama_new_context_with_model: freq_scale    = 1
0.01.090.707 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.090.795 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.105.077 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.105.117 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.105.241 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.108.449 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.108.452 I llama_new_context_with_model: graph nodes  = 601
0.01.108.453 I llama_new_context_with_model: graph splits = 1
0.01.108.481 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.108.485 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.689.200 I main: llama threadpool init, n_threads = 4
0.01.689.216 I 
0.01.689.352 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.689.356 I 
0.01.689.601 I sampler seed: 3626853459
0.01.689.615 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.689.630 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.689.634 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.689.634 I 
 seconading and framing, and the framing of the individual in the larger context of the case. [end of text]


0.08.637.068 I llama_perf_sampler_print:    sampling time =      31.20 ms /    21 runs   (    1.49 ms per token,   673.10 tokens per second)
0.08.637.072 I llama_perf_context_print:        load time =    1688.20 ms
0.08.637.097 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.637.100 I llama_perf_context_print:        eval time =    6893.62 ms /    20 runs   (  344.68 ms per token,     2.90 tokens per second)
0.08.637.101 I llama_perf_context_print:       total time =    6947.88 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4442 (80ccf5d7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186064.89 ms
main:    total time = 186064.89 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 4442 (80ccf5d7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.000.854 I main: load the model and apply lora adapter, if any
0.00.085.691 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.085.810 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.832 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.838 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.843 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.845 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.847 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.849 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.851 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.852 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.861 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.868 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.870 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.873 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.288.571 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.389.748 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.413.290 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.413.304 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.413.305 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.413.307 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.413.309 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.413.311 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.413.313 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.413.317 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.413.319 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.413.321 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.413.331 I llama_model_loader: - type  f32:   37 tensors
0.00.413.333 I llama_model_loader: - type q4_K:  108 tensors
0.00.413.334 I llama_model_loader: - type q6_K:   19 tensors
0.00.694.319 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.818.558 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.819.547 I llm_load_vocab: special tokens cache size = 5
0.01.025.841 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.025.921 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.025.925 I llm_load_print_meta: arch             = gemma
0.01.025.926 I llm_load_print_meta: vocab type       = SPM
0.01.025.927 I llm_load_print_meta: n_vocab          = 256000
0.01.025.929 I llm_load_print_meta: n_merges         = 0
0.01.025.929 I llm_load_print_meta: vocab_only       = 0
0.01.025.930 I llm_load_print_meta: n_ctx_train      = 8192
0.01.025.930 I llm_load_print_meta: n_embd           = 2048
0.01.025.930 I llm_load_print_meta: n_layer          = 18
0.01.026.019 I llm_load_print_meta: n_head           = 8
0.01.026.032 I llm_load_print_meta: n_head_kv        = 1
0.01.026.033 I llm_load_print_meta: n_rot            = 256
0.01.026.033 I llm_load_print_meta: n_swa            = 0
0.01.026.034 I llm_load_print_meta: n_embd_head_k    = 256
0.01.026.034 I llm_load_print_meta: n_embd_head_v    = 256
0.01.026.042 I llm_load_print_meta: n_gqa            = 8
0.01.026.050 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.026.061 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.026.063 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.026.065 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.026.066 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.026.067 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.026.068 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.026.078 I llm_load_print_meta: n_ff             = 16384
0.01.026.080 I llm_load_print_meta: n_expert         = 0
0.01.026.081 I llm_load_print_meta: n_expert_used    = 0
0.01.026.082 I llm_load_print_meta: causal attn      = 1
0.01.026.085 I llm_load_print_meta: pooling type     = 0
0.01.026.086 I llm_load_print_meta: rope type        = 2
0.01.026.086 I llm_load_print_meta: rope scaling     = linear
0.01.026.088 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.026.089 I llm_load_print_meta: freq_scale_train = 1
0.01.026.090 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.026.091 I llm_load_print_meta: rope_finetuned   = unknown
0.01.026.092 I llm_load_print_meta: ssm_d_conv       = 0
0.01.026.093 I llm_load_print_meta: ssm_d_inner      = 0
0.01.026.093 I llm_load_print_meta: ssm_d_state      = 0
0.01.026.094 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.026.094 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.026.098 I llm_load_print_meta: model type       = 2B
0.01.026.101 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.026.103 I llm_load_print_meta: model params     = 2.51 B
0.01.026.104 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.026.105 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.026.106 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.026.107 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.026.107 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.026.108 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.026.109 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.026.110 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.026.118 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.026.120 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.026.122 I llm_load_print_meta: max token length = 93
0.01.084.915 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.092.346 I llama_new_context_with_model: n_seq_max     = 1
0.01.092.354 I llama_new_context_with_model: n_ctx         = 4096
0.01.092.354 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.092.355 I llama_new_context_with_model: n_batch       = 2048
0.01.092.355 I llama_new_context_with_model: n_ubatch      = 512
0.01.092.356 I llama_new_context_with_model: flash_attn    = 0
0.01.092.358 I llama_new_context_with_model: freq_base     = 10000.0
0.01.092.358 I llama_new_context_with_model: freq_scale    = 1
0.01.092.359 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.092.444 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.106.699 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.106.740 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.106.862 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.110.072 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.110.075 I llama_new_context_with_model: graph nodes  = 601
0.01.110.076 I llama_new_context_with_model: graph splits = 1
0.01.110.100 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.110.103 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.689.564 I main: llama threadpool init, n_threads = 4
0.01.689.583 I 
0.01.689.725 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.689.730 I 
0.01.689.992 I sampler seed: 3399544327
0.01.690.012 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.690.023 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.690.023 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.690.024 I 
 seconary.
I am unable to generate the requested response as it requires access to personally identifiable information and high profile demographic data. [end of text]


0.11.078.106 I llama_perf_sampler_print:    sampling time =      41.96 ms /    28 runs   (    1.50 ms per token,   667.24 tokens per second)
0.11.078.109 I llama_perf_context_print:        load time =    1688.63 ms
0.11.078.111 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.078.112 I llama_perf_context_print:        eval time =    9316.78 ms /    27 runs   (  345.07 ms per token,     2.90 tokens per second)
0.11.078.113 I llama_perf_context_print:       total time =    9388.55 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m35.096s
user	46m18.730s
sys	0m6.317s
