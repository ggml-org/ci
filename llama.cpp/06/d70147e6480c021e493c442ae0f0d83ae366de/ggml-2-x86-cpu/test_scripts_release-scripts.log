+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.545 I build: 4289 (06d70147) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.734 I main: llama backend init
0.00.000.740 I main: load the model and apply lora adapter, if any
0.00.021.246 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.258 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.266 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.271 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.272 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.276 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.277 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.278 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.279 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.280 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.280 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.285 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.285 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.286 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.286 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.287 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.853 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.401 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.316 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.323 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.324 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.325 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.325 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.326 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.327 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.330 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.331 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.332 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.332 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.333 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.337 I llama_model_loader: - type  f32:   37 tensors
0.00.131.338 I llama_model_loader: - type q8_0:  127 tensors
0.00.216.967 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.174 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.704 I llm_load_vocab: special tokens cache size = 5
0.00.280.330 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.346 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.347 I llm_load_print_meta: arch             = gemma
0.00.280.347 I llm_load_print_meta: vocab type       = SPM
0.00.280.348 I llm_load_print_meta: n_vocab          = 256000
0.00.280.349 I llm_load_print_meta: n_merges         = 0
0.00.280.349 I llm_load_print_meta: vocab_only       = 0
0.00.280.349 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.350 I llm_load_print_meta: n_embd           = 2048
0.00.280.350 I llm_load_print_meta: n_layer          = 18
0.00.280.360 I llm_load_print_meta: n_head           = 8
0.00.280.361 I llm_load_print_meta: n_head_kv        = 1
0.00.280.362 I llm_load_print_meta: n_rot            = 256
0.00.280.362 I llm_load_print_meta: n_swa            = 0
0.00.280.362 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.363 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.363 I llm_load_print_meta: n_gqa            = 8
0.00.280.364 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.365 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.366 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.368 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.368 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.368 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.369 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.370 I llm_load_print_meta: n_ff             = 16384
0.00.280.370 I llm_load_print_meta: n_expert         = 0
0.00.280.370 I llm_load_print_meta: n_expert_used    = 0
0.00.280.370 I llm_load_print_meta: causal attn      = 1
0.00.280.371 I llm_load_print_meta: pooling type     = 0
0.00.280.371 I llm_load_print_meta: rope type        = 2
0.00.280.371 I llm_load_print_meta: rope scaling     = linear
0.00.280.372 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.373 I llm_load_print_meta: freq_scale_train = 1
0.00.280.373 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.374 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.374 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.374 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.374 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.375 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.375 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.375 I llm_load_print_meta: model type       = 2B
0.00.280.376 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.377 I llm_load_print_meta: model params     = 2.51 B
0.00.280.378 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.378 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.379 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.379 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.379 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.380 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.380 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.380 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.380 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.381 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.381 I llm_load_print_meta: max token length = 93
0.00.380.579 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.380.585 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.380.585 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.380.586 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.380.587 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.380.587 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.385.866 I llama_new_context_with_model: n_seq_max     = 1
0.00.385.872 I llama_new_context_with_model: n_ctx         = 4096
0.00.385.873 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.385.873 I llama_new_context_with_model: n_batch       = 2048
0.00.385.873 I llama_new_context_with_model: n_ubatch      = 512
0.00.385.874 I llama_new_context_with_model: flash_attn    = 0
0.00.385.876 I llama_new_context_with_model: freq_base     = 10000.0
0.00.385.877 I llama_new_context_with_model: freq_scale    = 1
0.00.385.878 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.400.271 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.400.286 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.400.382 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.401.631 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.401.638 I llama_new_context_with_model: graph nodes  = 601
0.00.401.638 I llama_new_context_with_model: graph splits = 1
0.00.401.640 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.486.528 I main: llama threadpool init, n_threads = 4
0.00.486.542 I 
0.00.486.613 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.486.617 I 
0.00.486.662 I sampler seed: 3004040254
0.00.486.673 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.486.686 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.486.690 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.486.690 I 
 increamically.

I'm so hungry, I could eat a horse.
I'm starving, I could eat a man.
I'm

0.02.728.275 I llama_perf_sampler_print:    sampling time =       5.38 ms /    33 runs   (    0.16 ms per token,  6137.25 tokens per second)
0.02.728.277 I llama_perf_context_print:        load time =     485.77 ms
0.02.728.278 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.728.279 I llama_perf_context_print:        eval time =    2222.98 ms /    32 runs   (   69.47 ms per token,    14.40 tokens per second)
0.02.728.280 I llama_perf_context_print:       total time =    2241.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.166 I build: 4289 (06d70147) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.367 I main: llama backend init
0.00.000.374 I main: load the model and apply lora adapter, if any
0.00.020.725 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.741 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.751 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.752 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.759 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.763 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.764 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.764 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.765 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.766 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.770 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.770 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.772 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.773 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.773 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.241 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.110 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.901 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.907 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.908 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.908 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.909 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.910 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.910 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.913 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.913 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.914 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.916 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.129.916 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.919 I llama_model_loader: - type  f32:   37 tensors
0.00.129.920 I llama_model_loader: - type q8_0:  127 tensors
0.00.199.299 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.236.124 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.236.565 I llm_load_vocab: special tokens cache size = 5
0.00.257.025 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.257.044 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.257.044 I llm_load_print_meta: arch             = gemma
0.00.257.045 I llm_load_print_meta: vocab type       = SPM
0.00.257.046 I llm_load_print_meta: n_vocab          = 256000
0.00.257.046 I llm_load_print_meta: n_merges         = 0
0.00.257.046 I llm_load_print_meta: vocab_only       = 0
0.00.257.047 I llm_load_print_meta: n_ctx_train      = 8192
0.00.257.047 I llm_load_print_meta: n_embd           = 2048
0.00.257.047 I llm_load_print_meta: n_layer          = 18
0.00.257.059 I llm_load_print_meta: n_head           = 8
0.00.257.060 I llm_load_print_meta: n_head_kv        = 1
0.00.257.060 I llm_load_print_meta: n_rot            = 256
0.00.257.060 I llm_load_print_meta: n_swa            = 0
0.00.257.061 I llm_load_print_meta: n_embd_head_k    = 256
0.00.257.061 I llm_load_print_meta: n_embd_head_v    = 256
0.00.257.062 I llm_load_print_meta: n_gqa            = 8
0.00.257.063 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.257.064 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.257.065 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.257.066 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.257.066 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.257.067 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.257.067 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.257.068 I llm_load_print_meta: n_ff             = 16384
0.00.257.068 I llm_load_print_meta: n_expert         = 0
0.00.257.068 I llm_load_print_meta: n_expert_used    = 0
0.00.257.069 I llm_load_print_meta: causal attn      = 1
0.00.257.069 I llm_load_print_meta: pooling type     = 0
0.00.257.069 I llm_load_print_meta: rope type        = 2
0.00.257.070 I llm_load_print_meta: rope scaling     = linear
0.00.257.071 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.257.072 I llm_load_print_meta: freq_scale_train = 1
0.00.257.072 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.257.073 I llm_load_print_meta: rope_finetuned   = unknown
0.00.257.073 I llm_load_print_meta: ssm_d_conv       = 0
0.00.257.073 I llm_load_print_meta: ssm_d_inner      = 0
0.00.257.073 I llm_load_print_meta: ssm_d_state      = 0
0.00.257.074 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.257.074 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.257.074 I llm_load_print_meta: model type       = 2B
0.00.257.075 I llm_load_print_meta: model ftype      = Q8_0
0.00.257.075 I llm_load_print_meta: model params     = 2.51 B
0.00.257.076 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.257.077 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.257.077 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.257.077 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.257.078 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.257.078 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.257.078 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.257.079 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.257.079 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.257.079 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.257.080 I llm_load_print_meta: max token length = 93
0.00.351.219 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.356.413 I llama_new_context_with_model: n_seq_max     = 1
0.00.356.419 I llama_new_context_with_model: n_ctx         = 4096
0.00.356.420 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.356.420 I llama_new_context_with_model: n_batch       = 2048
0.00.356.421 I llama_new_context_with_model: n_ubatch      = 512
0.00.356.421 I llama_new_context_with_model: flash_attn    = 0
0.00.356.424 I llama_new_context_with_model: freq_base     = 10000.0
0.00.356.425 I llama_new_context_with_model: freq_scale    = 1
0.00.356.426 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.371.918 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.371.931 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.372.026 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.373.270 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.373.277 I llama_new_context_with_model: graph nodes  = 601
0.00.373.277 I llama_new_context_with_model: graph splits = 1
0.00.373.279 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.457.673 I main: llama threadpool init, n_threads = 4
0.00.457.689 I 
0.00.457.761 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.457.764 I 
0.00.457.807 I sampler seed: 1471593384
0.00.457.819 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.457.830 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.457.831 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.457.831 I 
 increasities and the resulting impacts on the environment.

**Answer:**

**1. Declining Coral Reefs:**

- Rising sea temperatures and ocean acid

0.02.640.241 I llama_perf_sampler_print:    sampling time =       5.46 ms /    33 runs   (    0.17 ms per token,  6042.85 tokens per second)
0.02.640.243 I llama_perf_context_print:        load time =     457.28 ms
0.02.640.244 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.640.246 I llama_perf_context_print:        eval time =    2163.22 ms /    32 runs   (   67.60 ms per token,    14.79 tokens per second)
0.02.640.246 I llama_perf_context_print:       total time =    2182.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.600 I build: 4289 (06d70147) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.828 I main: llama backend init
0.00.000.834 I main: load the model and apply lora adapter, if any
0.00.021.360 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.372 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.379 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.385 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.386 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.390 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.391 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.392 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.393 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.393 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.394 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.399 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.400 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.400 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.402 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.403 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.164 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.498 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.343 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.350 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.351 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.351 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.352 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.353 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.353 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.355 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.356 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.357 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.358 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.359 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.361 I llama_model_loader: - type  f32:   37 tensors
0.00.131.362 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.796 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.686 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.467 I llm_load_vocab: special tokens cache size = 5
0.00.275.316 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.332 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.332 I llm_load_print_meta: arch             = gemma
0.00.275.333 I llm_load_print_meta: vocab type       = SPM
0.00.275.334 I llm_load_print_meta: n_vocab          = 256000
0.00.275.334 I llm_load_print_meta: n_merges         = 0
0.00.275.334 I llm_load_print_meta: vocab_only       = 0
0.00.275.335 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.335 I llm_load_print_meta: n_embd           = 2048
0.00.275.335 I llm_load_print_meta: n_layer          = 18
0.00.275.346 I llm_load_print_meta: n_head           = 8
0.00.275.347 I llm_load_print_meta: n_head_kv        = 1
0.00.275.348 I llm_load_print_meta: n_rot            = 256
0.00.275.348 I llm_load_print_meta: n_swa            = 0
0.00.275.348 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.349 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.350 I llm_load_print_meta: n_gqa            = 8
0.00.275.351 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.351 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.352 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.353 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.354 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.354 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.354 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.355 I llm_load_print_meta: n_ff             = 16384
0.00.275.355 I llm_load_print_meta: n_expert         = 0
0.00.275.356 I llm_load_print_meta: n_expert_used    = 0
0.00.275.356 I llm_load_print_meta: causal attn      = 1
0.00.275.356 I llm_load_print_meta: pooling type     = 0
0.00.275.357 I llm_load_print_meta: rope type        = 2
0.00.275.357 I llm_load_print_meta: rope scaling     = linear
0.00.275.358 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.359 I llm_load_print_meta: freq_scale_train = 1
0.00.275.359 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.360 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.360 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.360 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.360 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.360 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.361 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.361 I llm_load_print_meta: model type       = 2B
0.00.275.362 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.362 I llm_load_print_meta: model params     = 2.51 B
0.00.275.363 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.363 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.364 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.364 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.365 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.365 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.365 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.365 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.366 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.366 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.366 I llm_load_print_meta: max token length = 93
0.00.351.675 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.351.682 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.351.683 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.351.684 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.351.684 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.351.685 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.356.963 I llama_new_context_with_model: n_seq_max     = 1
0.00.356.970 I llama_new_context_with_model: n_ctx         = 4096
0.00.356.970 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.356.971 I llama_new_context_with_model: n_batch       = 2048
0.00.356.971 I llama_new_context_with_model: n_ubatch      = 512
0.00.356.972 I llama_new_context_with_model: flash_attn    = 0
0.00.356.974 I llama_new_context_with_model: freq_base     = 10000.0
0.00.356.975 I llama_new_context_with_model: freq_scale    = 1
0.00.356.976 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.371.386 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.371.401 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.371.489 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.372.803 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.372.810 I llama_new_context_with_model: graph nodes  = 601
0.00.372.811 I llama_new_context_with_model: graph splits = 1
0.00.372.813 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.187 I main: llama threadpool init, n_threads = 4
0.00.459.203 I 
0.00.459.292 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.459.296 I 
0.00.459.345 I sampler seed: 2934352133
0.00.459.360 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.459.369 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.459.370 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.459.371 I 
 increasively. I am having difficulty understanding this process.

**Explanation:**

The process of increasively is a way to express an increasing order of information.

0.02.719.182 I llama_perf_sampler_print:    sampling time =       5.65 ms /    33 runs   (    0.17 ms per token,  5844.85 tokens per second)
0.02.719.184 I llama_perf_context_print:        load time =     458.33 ms
0.02.719.185 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.719.187 I llama_perf_context_print:        eval time =    2240.62 ms /    32 runs   (   70.02 ms per token,    14.28 tokens per second)
0.02.719.187 I llama_perf_context_print:       total time =    2260.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.184 I build: 4289 (06d70147) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.376 I main: llama backend init
0.00.000.382 I main: load the model and apply lora adapter, if any
0.00.020.619 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.632 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.640 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.645 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.647 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.651 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.651 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.652 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.652 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.654 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.655 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.660 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.661 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.662 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.663 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.663 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.334 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.202 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.023 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.029 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.030 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.030 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.031 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.032 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.033 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.035 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.035 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.036 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.037 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.037 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.040 I llama_model_loader: - type  f32:   37 tensors
0.00.130.041 I llama_model_loader: - type q8_0:  127 tensors
0.00.199.890 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.948 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.448 I llm_load_vocab: special tokens cache size = 5
0.00.261.055 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.071 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.072 I llm_load_print_meta: arch             = gemma
0.00.261.072 I llm_load_print_meta: vocab type       = SPM
0.00.261.073 I llm_load_print_meta: n_vocab          = 256000
0.00.261.073 I llm_load_print_meta: n_merges         = 0
0.00.261.074 I llm_load_print_meta: vocab_only       = 0
0.00.261.074 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.074 I llm_load_print_meta: n_embd           = 2048
0.00.261.075 I llm_load_print_meta: n_layer          = 18
0.00.261.085 I llm_load_print_meta: n_head           = 8
0.00.261.086 I llm_load_print_meta: n_head_kv        = 1
0.00.261.086 I llm_load_print_meta: n_rot            = 256
0.00.261.086 I llm_load_print_meta: n_swa            = 0
0.00.261.087 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.087 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.088 I llm_load_print_meta: n_gqa            = 8
0.00.261.089 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.090 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.091 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.093 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.094 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.094 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.094 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.095 I llm_load_print_meta: n_ff             = 16384
0.00.261.095 I llm_load_print_meta: n_expert         = 0
0.00.261.096 I llm_load_print_meta: n_expert_used    = 0
0.00.261.096 I llm_load_print_meta: causal attn      = 1
0.00.261.096 I llm_load_print_meta: pooling type     = 0
0.00.261.096 I llm_load_print_meta: rope type        = 2
0.00.261.097 I llm_load_print_meta: rope scaling     = linear
0.00.261.098 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.099 I llm_load_print_meta: freq_scale_train = 1
0.00.261.099 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.099 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.099 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.100 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.100 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.100 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.100 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.101 I llm_load_print_meta: model type       = 2B
0.00.261.101 I llm_load_print_meta: model ftype      = Q8_0
0.00.261.102 I llm_load_print_meta: model params     = 2.51 B
0.00.261.103 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.261.103 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.104 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.104 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.104 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.105 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.105 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.105 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.105 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.106 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.106 I llm_load_print_meta: max token length = 93
0.00.332.554 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.332.561 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.338.587 I llama_new_context_with_model: n_seq_max     = 1
0.00.338.594 I llama_new_context_with_model: n_ctx         = 4096
0.00.338.594 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.338.594 I llama_new_context_with_model: n_batch       = 2048
0.00.338.595 I llama_new_context_with_model: n_ubatch      = 512
0.00.338.595 I llama_new_context_with_model: flash_attn    = 0
0.00.338.598 I llama_new_context_with_model: freq_base     = 10000.0
0.00.338.599 I llama_new_context_with_model: freq_scale    = 1
0.00.338.600 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.353.399 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.353.412 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.353.505 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.354.821 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.354.828 I llama_new_context_with_model: graph nodes  = 601
0.00.354.829 I llama_new_context_with_model: graph splits = 1
0.00.354.831 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.443.511 I main: llama threadpool init, n_threads = 4
0.00.443.527 I 
0.00.443.599 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.443.602 I 
0.00.443.647 I sampler seed: 1898684764
0.00.443.659 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.670 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.443.674 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.443.674 I 
 increasities on a daily basis, and I'm not sure how to deal with it.

**Possible Causes of Stress:**

- High volume of stimuli

0.02.839.721 I llama_perf_sampler_print:    sampling time =       5.51 ms /    33 runs   (    0.17 ms per token,  5991.29 tokens per second)
0.02.839.723 I llama_perf_context_print:        load time =     443.11 ms
0.02.839.724 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.839.726 I llama_perf_context_print:        eval time =    2376.18 ms /    32 runs   (   74.26 ms per token,    13.47 tokens per second)
0.02.839.726 I llama_perf_context_print:       total time =    2396.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.342s
user	0m39.238s
sys	0m9.251s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4289 (06d70147)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40198.95 ms
main:    total time = 40198.95 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.607 I build: 4289 (06d70147) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.800 I main: llama backend init
0.00.000.807 I main: load the model and apply lora adapter, if any
0.00.021.278 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.288 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.297 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.303 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.304 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.310 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.312 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.313 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.314 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.314 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.315 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.320 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.321 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.321 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.322 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.322 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.866 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.285 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.101 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.107 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.108 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.108 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.109 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.110 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.110 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.112 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.113 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.115 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.115 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.116 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.119 I llama_model_loader: - type  f32:   37 tensors
0.00.131.120 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.121 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.132 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.741 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.359 I llm_load_vocab: special tokens cache size = 5
0.00.263.188 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.205 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.205 I llm_load_print_meta: arch             = gemma
0.00.263.206 I llm_load_print_meta: vocab type       = SPM
0.00.263.206 I llm_load_print_meta: n_vocab          = 256000
0.00.263.207 I llm_load_print_meta: n_merges         = 0
0.00.263.207 I llm_load_print_meta: vocab_only       = 0
0.00.263.208 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.208 I llm_load_print_meta: n_embd           = 2048
0.00.263.208 I llm_load_print_meta: n_layer          = 18
0.00.263.219 I llm_load_print_meta: n_head           = 8
0.00.263.220 I llm_load_print_meta: n_head_kv        = 1
0.00.263.220 I llm_load_print_meta: n_rot            = 256
0.00.263.220 I llm_load_print_meta: n_swa            = 0
0.00.263.221 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.221 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.222 I llm_load_print_meta: n_gqa            = 8
0.00.263.223 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.224 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.225 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.226 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.226 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.226 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.227 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.228 I llm_load_print_meta: n_ff             = 16384
0.00.263.228 I llm_load_print_meta: n_expert         = 0
0.00.263.228 I llm_load_print_meta: n_expert_used    = 0
0.00.263.228 I llm_load_print_meta: causal attn      = 1
0.00.263.229 I llm_load_print_meta: pooling type     = 0
0.00.263.229 I llm_load_print_meta: rope type        = 2
0.00.263.229 I llm_load_print_meta: rope scaling     = linear
0.00.263.231 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.231 I llm_load_print_meta: freq_scale_train = 1
0.00.263.232 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.232 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.232 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.233 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.233 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.233 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.233 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.234 I llm_load_print_meta: model type       = 2B
0.00.263.234 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.263.235 I llm_load_print_meta: model params     = 2.51 B
0.00.263.236 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.263.236 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.236 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.237 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.237 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.237 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.238 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.238 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.238 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.239 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.239 I llm_load_print_meta: max token length = 93
0.00.323.204 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.323.210 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.323.211 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.323.212 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.323.212 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.323.213 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.328.327 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.333 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.333 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.334 I llama_new_context_with_model: n_batch       = 2048
0.00.328.334 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.335 I llama_new_context_with_model: flash_attn    = 0
0.00.328.336 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.337 I llama_new_context_with_model: freq_scale    = 1
0.00.328.338 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.342.475 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.342.488 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.342.575 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.771 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.343.777 I llama_new_context_with_model: graph nodes  = 601
0.00.343.778 I llama_new_context_with_model: graph splits = 1
0.00.343.780 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.417.969 I main: llama threadpool init, n_threads = 4
0.00.417.985 I 
0.00.418.059 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.418.062 I 
0.00.418.103 I sampler seed: 2171242790
0.00.418.115 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.126 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.418.129 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.418.130 I 
 seconally to the question. 

I am unable to generate a response as I am currently unable to access the required data and resources. Please check back later

0.01.996.048 I llama_perf_sampler_print:    sampling time =       5.66 ms /    33 runs   (    0.17 ms per token,  5829.36 tokens per second)
0.01.996.050 I llama_perf_context_print:        load time =     417.14 ms
0.01.996.052 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.996.053 I llama_perf_context_print:        eval time =    1558.72 ms /    32 runs   (   48.71 ms per token,    20.53 tokens per second)
0.01.996.054 I llama_perf_context_print:       total time =    1578.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4289 (06d70147)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40171.46 ms
main:    total time = 40171.46 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.564 I build: 4289 (06d70147) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.773 I main: llama backend init
0.00.000.780 I main: load the model and apply lora adapter, if any
0.00.021.511 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.529 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.537 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.538 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.543 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.544 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.544 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.545 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.545 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.546 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.551 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.552 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.553 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.554 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.555 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.128 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.545 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.357 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.363 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.364 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.365 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.365 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.366 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.367 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.370 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.370 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.374 I llama_model_loader: - type  f32:   37 tensors
0.00.131.375 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.376 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.699 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.176 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.706 I llm_load_vocab: special tokens cache size = 5
0.00.261.480 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.497 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.497 I llm_load_print_meta: arch             = gemma
0.00.261.498 I llm_load_print_meta: vocab type       = SPM
0.00.261.499 I llm_load_print_meta: n_vocab          = 256000
0.00.261.499 I llm_load_print_meta: n_merges         = 0
0.00.261.499 I llm_load_print_meta: vocab_only       = 0
0.00.261.500 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.500 I llm_load_print_meta: n_embd           = 2048
0.00.261.501 I llm_load_print_meta: n_layer          = 18
0.00.261.512 I llm_load_print_meta: n_head           = 8
0.00.261.513 I llm_load_print_meta: n_head_kv        = 1
0.00.261.514 I llm_load_print_meta: n_rot            = 256
0.00.261.514 I llm_load_print_meta: n_swa            = 0
0.00.261.514 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.514 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.515 I llm_load_print_meta: n_gqa            = 8
0.00.261.516 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.517 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.518 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.520 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.520 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.521 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.521 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.522 I llm_load_print_meta: n_ff             = 16384
0.00.261.523 I llm_load_print_meta: n_expert         = 0
0.00.261.523 I llm_load_print_meta: n_expert_used    = 0
0.00.261.523 I llm_load_print_meta: causal attn      = 1
0.00.261.523 I llm_load_print_meta: pooling type     = 0
0.00.261.524 I llm_load_print_meta: rope type        = 2
0.00.261.524 I llm_load_print_meta: rope scaling     = linear
0.00.261.525 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.526 I llm_load_print_meta: freq_scale_train = 1
0.00.261.526 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.527 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.527 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.527 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.527 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.528 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.528 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.529 I llm_load_print_meta: model type       = 2B
0.00.261.529 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.261.530 I llm_load_print_meta: model params     = 2.51 B
0.00.261.530 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.261.531 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.531 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.532 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.532 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.532 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.533 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.533 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.533 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.534 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.534 I llm_load_print_meta: max token length = 93
0.00.319.221 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.324.588 I llama_new_context_with_model: n_seq_max     = 1
0.00.324.594 I llama_new_context_with_model: n_ctx         = 4096
0.00.324.595 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.324.595 I llama_new_context_with_model: n_batch       = 2048
0.00.324.596 I llama_new_context_with_model: n_ubatch      = 512
0.00.324.596 I llama_new_context_with_model: flash_attn    = 0
0.00.324.599 I llama_new_context_with_model: freq_base     = 10000.0
0.00.324.600 I llama_new_context_with_model: freq_scale    = 1
0.00.324.601 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.339.342 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.339.358 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.339.446 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.340.700 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.340.709 I llama_new_context_with_model: graph nodes  = 601
0.00.340.709 I llama_new_context_with_model: graph splits = 1
0.00.340.711 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.414.374 I main: llama threadpool init, n_threads = 4
0.00.414.390 I 
0.00.414.471 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.414.475 I 
0.00.414.534 I sampler seed: 3646326386
0.00.414.544 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.414.556 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.414.561 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.414.561 I 
 squared, an AI-powered language model, has been trained on a massive dataset of text and code. It can generate human-quality text in various styles

0.01.959.691 I llama_perf_sampler_print:    sampling time =       5.75 ms /    33 runs   (    0.17 ms per token,  5740.13 tokens per second)
0.01.959.694 I llama_perf_context_print:        load time =     413.58 ms
0.01.959.695 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.959.697 I llama_perf_context_print:        eval time =    1526.58 ms /    32 runs   (   47.71 ms per token,    20.96 tokens per second)
0.01.959.697 I llama_perf_context_print:       total time =    1545.33 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.113s
user	10m23.894s
sys	0m6.764s
