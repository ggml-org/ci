+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 4289 (06d70147) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.840 I main: llama backend init
0.00.000.847 I main: load the model and apply lora adapter, if any
0.00.023.316 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.324 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.412 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.424 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.426 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.431 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.433 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.434 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.435 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.438 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.440 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.450 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.455 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.457 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.459 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.462 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.884 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.131 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.107 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.116 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.118 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.119 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.120 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.122 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.124 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.128 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.129 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.131 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.132 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.348.133 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.141 I llama_model_loader: - type  f32:   37 tensors
0.00.348.143 I llama_model_loader: - type q8_0:  127 tensors
0.00.564.129 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.626.028 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.626.997 I llm_load_vocab: special tokens cache size = 5
0.00.830.317 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.830.394 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.830.395 I llm_load_print_meta: arch             = gemma
0.00.830.396 I llm_load_print_meta: vocab type       = SPM
0.00.830.397 I llm_load_print_meta: n_vocab          = 256000
0.00.830.399 I llm_load_print_meta: n_merges         = 0
0.00.830.400 I llm_load_print_meta: vocab_only       = 0
0.00.830.400 I llm_load_print_meta: n_ctx_train      = 8192
0.00.830.401 I llm_load_print_meta: n_embd           = 2048
0.00.830.401 I llm_load_print_meta: n_layer          = 18
0.00.830.466 I llm_load_print_meta: n_head           = 8
0.00.830.473 I llm_load_print_meta: n_head_kv        = 1
0.00.830.474 I llm_load_print_meta: n_rot            = 256
0.00.830.474 I llm_load_print_meta: n_swa            = 0
0.00.830.475 I llm_load_print_meta: n_embd_head_k    = 256
0.00.830.476 I llm_load_print_meta: n_embd_head_v    = 256
0.00.830.480 I llm_load_print_meta: n_gqa            = 8
0.00.830.486 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.830.492 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.830.496 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.830.498 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.830.498 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.830.498 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.830.499 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.830.504 I llm_load_print_meta: n_ff             = 16384
0.00.830.504 I llm_load_print_meta: n_expert         = 0
0.00.830.505 I llm_load_print_meta: n_expert_used    = 0
0.00.830.506 I llm_load_print_meta: causal attn      = 1
0.00.830.506 I llm_load_print_meta: pooling type     = 0
0.00.830.507 I llm_load_print_meta: rope type        = 2
0.00.830.510 I llm_load_print_meta: rope scaling     = linear
0.00.830.512 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.830.513 I llm_load_print_meta: freq_scale_train = 1
0.00.830.513 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.830.513 I llm_load_print_meta: rope_finetuned   = unknown
0.00.830.514 I llm_load_print_meta: ssm_d_conv       = 0
0.00.830.514 I llm_load_print_meta: ssm_d_inner      = 0
0.00.830.514 I llm_load_print_meta: ssm_d_state      = 0
0.00.830.514 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.830.515 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.830.515 I llm_load_print_meta: model type       = 2B
0.00.830.517 I llm_load_print_meta: model ftype      = Q8_0
0.00.830.517 I llm_load_print_meta: model params     = 2.51 B
0.00.830.518 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.830.520 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.830.520 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.830.532 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.830.534 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.830.534 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.830.535 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.830.535 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.830.543 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.830.545 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.830.545 I llm_load_print_meta: max token length = 93
0.00.934.869 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.934.881 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.934.882 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.934.882 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.934.883 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.934.884 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.941.146 I llama_new_context_with_model: n_seq_max     = 1
0.00.941.154 I llama_new_context_with_model: n_ctx         = 4096
0.00.941.154 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.941.155 I llama_new_context_with_model: n_batch       = 2048
0.00.941.155 I llama_new_context_with_model: n_ubatch      = 512
0.00.941.155 I llama_new_context_with_model: flash_attn    = 0
0.00.941.158 I llama_new_context_with_model: freq_base     = 10000.0
0.00.941.158 I llama_new_context_with_model: freq_scale    = 1
0.00.941.159 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.955.875 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.955.917 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.956.042 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.958.718 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.958.722 I llama_new_context_with_model: graph nodes  = 601
0.00.958.722 I llama_new_context_with_model: graph splits = 1
0.00.958.746 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.568.957 I main: llama threadpool init, n_threads = 4
0.01.568.974 I 
0.01.569.094 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.569.098 I 
0.01.569.349 I sampler seed: 2396556041
0.01.569.364 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.569.375 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.569.376 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.569.377 I 
 increasities.

I am unable to generate a response that meets your request because it contains sexually suggestive content. [end of text]


0.11.400.274 I llama_perf_sampler_print:    sampling time =      35.55 ms /    24 runs   (    1.48 ms per token,   675.20 tokens per second)
0.11.400.277 I llama_perf_context_print:        load time =    1568.01 ms
0.11.400.299 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.400.301 I llama_perf_context_print:        eval time =    9767.46 ms /    23 runs   (  424.67 ms per token,     2.35 tokens per second)
0.11.400.302 I llama_perf_context_print:       total time =    9831.33 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.652 I build: 4289 (06d70147) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.895 I main: llama backend init
0.00.000.904 I main: load the model and apply lora adapter, if any
0.00.023.175 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.290 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.304 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.310 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.317 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.323 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.325 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.327 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.331 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.333 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.344 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.350 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.352 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.354 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.356 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.883 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.679 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.704 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.716 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.717 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.718 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.720 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.722 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.723 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.727 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.729 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.730 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.731 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.349.733 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.742 I llama_model_loader: - type  f32:   37 tensors
0.00.349.744 I llama_model_loader: - type q8_0:  127 tensors
0.00.575.365 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.635.266 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.636.201 I llm_load_vocab: special tokens cache size = 5
0.00.826.697 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.826.772 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.826.773 I llm_load_print_meta: arch             = gemma
0.00.826.774 I llm_load_print_meta: vocab type       = SPM
0.00.826.775 I llm_load_print_meta: n_vocab          = 256000
0.00.826.777 I llm_load_print_meta: n_merges         = 0
0.00.826.778 I llm_load_print_meta: vocab_only       = 0
0.00.826.778 I llm_load_print_meta: n_ctx_train      = 8192
0.00.826.778 I llm_load_print_meta: n_embd           = 2048
0.00.826.779 I llm_load_print_meta: n_layer          = 18
0.00.826.844 I llm_load_print_meta: n_head           = 8
0.00.826.853 I llm_load_print_meta: n_head_kv        = 1
0.00.826.854 I llm_load_print_meta: n_rot            = 256
0.00.826.856 I llm_load_print_meta: n_swa            = 0
0.00.826.856 I llm_load_print_meta: n_embd_head_k    = 256
0.00.826.857 I llm_load_print_meta: n_embd_head_v    = 256
0.00.826.864 I llm_load_print_meta: n_gqa            = 8
0.00.826.870 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.826.887 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.826.890 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.826.892 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.826.893 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.826.894 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.826.894 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.826.903 I llm_load_print_meta: n_ff             = 16384
0.00.826.904 I llm_load_print_meta: n_expert         = 0
0.00.826.904 I llm_load_print_meta: n_expert_used    = 0
0.00.826.905 I llm_load_print_meta: causal attn      = 1
0.00.826.906 I llm_load_print_meta: pooling type     = 0
0.00.826.907 I llm_load_print_meta: rope type        = 2
0.00.826.911 I llm_load_print_meta: rope scaling     = linear
0.00.826.913 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.826.913 I llm_load_print_meta: freq_scale_train = 1
0.00.826.914 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.826.914 I llm_load_print_meta: rope_finetuned   = unknown
0.00.826.915 I llm_load_print_meta: ssm_d_conv       = 0
0.00.826.915 I llm_load_print_meta: ssm_d_inner      = 0
0.00.826.916 I llm_load_print_meta: ssm_d_state      = 0
0.00.826.917 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.826.917 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.826.919 I llm_load_print_meta: model type       = 2B
0.00.826.922 I llm_load_print_meta: model ftype      = Q8_0
0.00.826.923 I llm_load_print_meta: model params     = 2.51 B
0.00.826.925 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.826.926 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.826.927 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.826.928 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.826.929 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.826.930 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.826.931 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.826.932 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.826.939 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.826.941 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.826.941 I llm_load_print_meta: max token length = 93
0.00.924.790 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.930.858 I llama_new_context_with_model: n_seq_max     = 1
0.00.930.865 I llama_new_context_with_model: n_ctx         = 4096
0.00.930.866 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.930.866 I llama_new_context_with_model: n_batch       = 2048
0.00.930.867 I llama_new_context_with_model: n_ubatch      = 512
0.00.930.867 I llama_new_context_with_model: flash_attn    = 0
0.00.930.870 I llama_new_context_with_model: freq_base     = 10000.0
0.00.930.870 I llama_new_context_with_model: freq_scale    = 1
0.00.930.871 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.945.996 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.946.041 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.946.158 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.948.849 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.948.853 I llama_new_context_with_model: graph nodes  = 601
0.00.948.853 I llama_new_context_with_model: graph splits = 1
0.00.948.879 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.558.777 I main: llama threadpool init, n_threads = 4
0.01.558.793 I 
0.01.558.932 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.558.937 I 
0.01.559.182 I sampler seed: 22803984
0.01.559.196 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.559.210 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.559.214 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.559.215 I 
 seconded,
**Answer:** 
I understand. I will assist you with your request. Please provide me with more information about the issue you are experiencing

0.15.267.882 I llama_perf_sampler_print:    sampling time =      48.94 ms /    33 runs   (    1.48 ms per token,   674.24 tokens per second)
0.15.267.887 I llama_perf_context_print:        load time =    1557.77 ms
0.15.267.889 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.267.891 I llama_perf_context_print:        eval time =   13620.72 ms /    32 runs   (  425.65 ms per token,     2.35 tokens per second)
0.15.267.892 I llama_perf_context_print:       total time =   13709.11 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.679 I build: 4289 (06d70147) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.899 I main: llama backend init
0.00.000.908 I main: load the model and apply lora adapter, if any
0.00.023.642 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.657 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.753 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.766 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.769 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.779 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.786 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.788 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.789 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.791 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.792 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.803 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.805 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.806 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.807 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.809 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.092 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.062 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.998 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.006 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.008 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.009 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.010 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.012 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.013 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.017 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.019 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.021 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.022 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.349.024 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.031 I llama_model_loader: - type  f32:   37 tensors
0.00.349.033 I llama_model_loader: - type q8_0:  127 tensors
0.00.572.118 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.633.962 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.634.865 I llm_load_vocab: special tokens cache size = 5
0.00.829.479 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.829.550 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.829.551 I llm_load_print_meta: arch             = gemma
0.00.829.552 I llm_load_print_meta: vocab type       = SPM
0.00.829.552 I llm_load_print_meta: n_vocab          = 256000
0.00.829.555 I llm_load_print_meta: n_merges         = 0
0.00.829.556 I llm_load_print_meta: vocab_only       = 0
0.00.829.556 I llm_load_print_meta: n_ctx_train      = 8192
0.00.829.556 I llm_load_print_meta: n_embd           = 2048
0.00.829.557 I llm_load_print_meta: n_layer          = 18
0.00.829.621 I llm_load_print_meta: n_head           = 8
0.00.829.628 I llm_load_print_meta: n_head_kv        = 1
0.00.829.629 I llm_load_print_meta: n_rot            = 256
0.00.829.630 I llm_load_print_meta: n_swa            = 0
0.00.829.630 I llm_load_print_meta: n_embd_head_k    = 256
0.00.829.630 I llm_load_print_meta: n_embd_head_v    = 256
0.00.829.635 I llm_load_print_meta: n_gqa            = 8
0.00.829.640 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.829.645 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.829.646 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.829.648 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.829.649 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.829.649 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.829.650 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.829.655 I llm_load_print_meta: n_ff             = 16384
0.00.829.656 I llm_load_print_meta: n_expert         = 0
0.00.829.656 I llm_load_print_meta: n_expert_used    = 0
0.00.829.657 I llm_load_print_meta: causal attn      = 1
0.00.829.659 I llm_load_print_meta: pooling type     = 0
0.00.829.660 I llm_load_print_meta: rope type        = 2
0.00.829.661 I llm_load_print_meta: rope scaling     = linear
0.00.829.663 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.829.664 I llm_load_print_meta: freq_scale_train = 1
0.00.829.670 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.829.670 I llm_load_print_meta: rope_finetuned   = unknown
0.00.829.671 I llm_load_print_meta: ssm_d_conv       = 0
0.00.829.671 I llm_load_print_meta: ssm_d_inner      = 0
0.00.829.671 I llm_load_print_meta: ssm_d_state      = 0
0.00.829.672 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.829.672 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.829.672 I llm_load_print_meta: model type       = 2B
0.00.829.673 I llm_load_print_meta: model ftype      = Q8_0
0.00.829.674 I llm_load_print_meta: model params     = 2.51 B
0.00.829.675 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.829.675 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.829.676 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.829.676 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.829.677 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.829.698 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.829.699 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.829.706 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.829.714 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.829.715 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.829.716 I llm_load_print_meta: max token length = 93
0.00.907.489 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.907.500 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.907.502 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.907.502 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.907.503 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.907.504 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.913.426 I llama_new_context_with_model: n_seq_max     = 1
0.00.913.433 I llama_new_context_with_model: n_ctx         = 4096
0.00.913.434 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.913.434 I llama_new_context_with_model: n_batch       = 2048
0.00.913.435 I llama_new_context_with_model: n_ubatch      = 512
0.00.913.435 I llama_new_context_with_model: flash_attn    = 0
0.00.913.438 I llama_new_context_with_model: freq_base     = 10000.0
0.00.913.439 I llama_new_context_with_model: freq_scale    = 1
0.00.913.440 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.928.062 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.928.104 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.928.225 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.931.040 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.931.044 I llama_new_context_with_model: graph nodes  = 601
0.00.931.045 I llama_new_context_with_model: graph splits = 1
0.00.931.068 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.543.276 I main: llama threadpool init, n_threads = 4
0.01.543.293 I 
0.01.543.414 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.543.418 I 
0.01.543.660 I sampler seed: 3595392355
0.01.543.675 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.543.685 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.543.688 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.543.689 I 
 increasities with the new update, and I'm curious to see how they'll impact the game.

I'm not sure if you're

0.15.213.175 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.71 tokens per second)
0.15.213.178 I llama_perf_context_print:        load time =    1542.25 ms
0.15.213.193 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.213.195 I llama_perf_context_print:        eval time =   13581.67 ms /    32 runs   (  424.43 ms per token,     2.36 tokens per second)
0.15.213.196 I llama_perf_context_print:       total time =   13669.91 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.645 I build: 4289 (06d70147) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.000.853 I main: load the model and apply lora adapter, if any
0.00.023.607 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.620 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.718 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.731 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.733 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.739 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.741 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.743 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.744 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.746 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.747 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.757 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.760 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.761 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.762 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.764 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.548 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.505 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.440 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.450 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.451 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.452 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.454 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.455 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.457 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.460 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.462 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.464 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.465 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.349.466 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.475 I llama_model_loader: - type  f32:   37 tensors
0.00.349.477 I llama_model_loader: - type q8_0:  127 tensors
0.00.569.454 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.635.454 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.636.394 I llm_load_vocab: special tokens cache size = 5
0.00.825.917 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.825.993 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.825.998 I llm_load_print_meta: arch             = gemma
0.00.825.998 I llm_load_print_meta: vocab type       = SPM
0.00.825.999 I llm_load_print_meta: n_vocab          = 256000
0.00.826.002 I llm_load_print_meta: n_merges         = 0
0.00.826.002 I llm_load_print_meta: vocab_only       = 0
0.00.826.003 I llm_load_print_meta: n_ctx_train      = 8192
0.00.826.004 I llm_load_print_meta: n_embd           = 2048
0.00.826.005 I llm_load_print_meta: n_layer          = 18
0.00.826.072 I llm_load_print_meta: n_head           = 8
0.00.826.083 I llm_load_print_meta: n_head_kv        = 1
0.00.826.086 I llm_load_print_meta: n_rot            = 256
0.00.826.086 I llm_load_print_meta: n_swa            = 0
0.00.826.087 I llm_load_print_meta: n_embd_head_k    = 256
0.00.826.087 I llm_load_print_meta: n_embd_head_v    = 256
0.00.826.091 I llm_load_print_meta: n_gqa            = 8
0.00.826.097 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.826.102 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.826.103 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.826.106 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.826.106 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.826.106 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.826.107 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.826.112 I llm_load_print_meta: n_ff             = 16384
0.00.826.113 I llm_load_print_meta: n_expert         = 0
0.00.826.114 I llm_load_print_meta: n_expert_used    = 0
0.00.826.115 I llm_load_print_meta: causal attn      = 1
0.00.826.115 I llm_load_print_meta: pooling type     = 0
0.00.826.115 I llm_load_print_meta: rope type        = 2
0.00.826.116 I llm_load_print_meta: rope scaling     = linear
0.00.826.117 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.826.118 I llm_load_print_meta: freq_scale_train = 1
0.00.826.118 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.826.119 I llm_load_print_meta: rope_finetuned   = unknown
0.00.826.119 I llm_load_print_meta: ssm_d_conv       = 0
0.00.826.120 I llm_load_print_meta: ssm_d_inner      = 0
0.00.826.120 I llm_load_print_meta: ssm_d_state      = 0
0.00.826.120 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.826.121 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.826.121 I llm_load_print_meta: model type       = 2B
0.00.826.124 I llm_load_print_meta: model ftype      = Q8_0
0.00.826.124 I llm_load_print_meta: model params     = 2.51 B
0.00.826.126 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.826.126 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.826.127 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.826.140 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.826.143 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.826.144 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.826.144 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.826.145 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.826.164 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.826.174 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.826.174 I llm_load_print_meta: max token length = 93
0.00.899.349 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.899.361 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.905.320 I llama_new_context_with_model: n_seq_max     = 1
0.00.905.327 I llama_new_context_with_model: n_ctx         = 4096
0.00.905.328 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.905.328 I llama_new_context_with_model: n_batch       = 2048
0.00.905.329 I llama_new_context_with_model: n_ubatch      = 512
0.00.905.329 I llama_new_context_with_model: flash_attn    = 0
0.00.905.331 I llama_new_context_with_model: freq_base     = 10000.0
0.00.905.332 I llama_new_context_with_model: freq_scale    = 1
0.00.905.333 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.920.581 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.920.623 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.920.744 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.923.322 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.923.326 I llama_new_context_with_model: graph nodes  = 601
0.00.923.326 I llama_new_context_with_model: graph splits = 1
0.00.923.349 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.533.281 I main: llama threadpool init, n_threads = 4
0.01.533.298 I 
0.01.533.416 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.533.420 I 
0.01.533.658 I sampler seed: 2370404251
0.01.533.672 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.533.685 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.533.686 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.533.687 I 
 increably. [end of text]


0.03.253.199 I llama_perf_sampler_print:    sampling time =       6.22 ms /     5 runs   (    1.24 ms per token,   803.47 tokens per second)
0.03.253.202 I llama_perf_context_print:        load time =    1532.33 ms
0.03.253.204 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.253.205 I llama_perf_context_print:        eval time =    1707.04 ms /     4 runs   (  426.76 ms per token,     2.34 tokens per second)
0.03.253.206 I llama_perf_context_print:       total time =    1719.93 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m54.755s
user	2m49.303s
sys	0m9.363s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4289 (06d70147)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185741.32 ms
main:    total time = 185741.32 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.661 I build: 4289 (06d70147) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.868 I main: llama backend init
0.00.000.875 I main: load the model and apply lora adapter, if any
0.00.023.136 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.147 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.236 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.248 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.249 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.255 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.256 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.258 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.259 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.260 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.261 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.276 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.281 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.283 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.285 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.287 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.354 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.583 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.588 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.597 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.599 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.600 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.602 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.603 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.605 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.609 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.628 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.640 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.642 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.644 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.653 I llama_model_loader: - type  f32:   37 tensors
0.00.350.656 I llama_model_loader: - type q4_K:  108 tensors
0.00.350.657 I llama_model_loader: - type q6_K:   19 tensors
0.00.573.392 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.635.630 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.636.577 I llm_load_vocab: special tokens cache size = 5
0.00.838.094 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.838.173 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.838.177 I llm_load_print_meta: arch             = gemma
0.00.838.178 I llm_load_print_meta: vocab type       = SPM
0.00.838.178 I llm_load_print_meta: n_vocab          = 256000
0.00.838.181 I llm_load_print_meta: n_merges         = 0
0.00.838.181 I llm_load_print_meta: vocab_only       = 0
0.00.838.182 I llm_load_print_meta: n_ctx_train      = 8192
0.00.838.182 I llm_load_print_meta: n_embd           = 2048
0.00.838.182 I llm_load_print_meta: n_layer          = 18
0.00.838.246 I llm_load_print_meta: n_head           = 8
0.00.838.256 I llm_load_print_meta: n_head_kv        = 1
0.00.838.257 I llm_load_print_meta: n_rot            = 256
0.00.838.258 I llm_load_print_meta: n_swa            = 0
0.00.838.258 I llm_load_print_meta: n_embd_head_k    = 256
0.00.838.259 I llm_load_print_meta: n_embd_head_v    = 256
0.00.838.263 I llm_load_print_meta: n_gqa            = 8
0.00.838.268 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.838.273 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.838.275 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.838.276 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.838.277 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.838.277 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.838.277 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.838.282 I llm_load_print_meta: n_ff             = 16384
0.00.838.283 I llm_load_print_meta: n_expert         = 0
0.00.838.284 I llm_load_print_meta: n_expert_used    = 0
0.00.838.284 I llm_load_print_meta: causal attn      = 1
0.00.838.284 I llm_load_print_meta: pooling type     = 0
0.00.838.285 I llm_load_print_meta: rope type        = 2
0.00.838.287 I llm_load_print_meta: rope scaling     = linear
0.00.838.288 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.838.298 I llm_load_print_meta: freq_scale_train = 1
0.00.838.299 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.838.313 I llm_load_print_meta: rope_finetuned   = unknown
0.00.838.314 I llm_load_print_meta: ssm_d_conv       = 0
0.00.838.315 I llm_load_print_meta: ssm_d_inner      = 0
0.00.838.316 I llm_load_print_meta: ssm_d_state      = 0
0.00.838.316 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.838.316 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.838.318 I llm_load_print_meta: model type       = 2B
0.00.838.320 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.838.321 I llm_load_print_meta: model params     = 2.51 B
0.00.838.322 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.838.323 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.838.324 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.838.324 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.838.325 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.838.325 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.838.326 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.838.326 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.838.334 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.838.336 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.838.336 I llm_load_print_meta: max token length = 93
0.00.899.638 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.899.650 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.899.651 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.899.651 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.899.652 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.899.653 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.905.607 I llama_new_context_with_model: n_seq_max     = 1
0.00.905.614 I llama_new_context_with_model: n_ctx         = 4096
0.00.905.615 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.905.615 I llama_new_context_with_model: n_batch       = 2048
0.00.905.615 I llama_new_context_with_model: n_ubatch      = 512
0.00.905.616 I llama_new_context_with_model: flash_attn    = 0
0.00.905.618 I llama_new_context_with_model: freq_base     = 10000.0
0.00.905.619 I llama_new_context_with_model: freq_scale    = 1
0.00.905.619 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.920.771 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.920.810 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.920.928 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.923.593 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.923.598 I llama_new_context_with_model: graph nodes  = 601
0.00.923.598 I llama_new_context_with_model: graph splits = 1
0.00.923.620 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.502.315 I main: llama threadpool init, n_threads = 4
0.01.502.331 I 
0.01.502.468 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.502.472 I 
0.01.502.718 I sampler seed: 1259451580
0.01.502.732 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.502.742 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.502.746 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.502.746 I 
 increasities. 
I cannot answer this question as it contains inappropriate language and promotes harmful stereotypes. [end of text]


0.08.802.785 I llama_perf_sampler_print:    sampling time =      32.27 ms /    22 runs   (    1.47 ms per token,   681.83 tokens per second)
0.08.802.798 I llama_perf_context_print:        load time =    1501.35 ms
0.08.802.800 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.802.802 I llama_perf_context_print:        eval time =    7242.21 ms /    21 runs   (  344.87 ms per token,     2.90 tokens per second)
0.08.802.803 I llama_perf_context_print:       total time =    7300.48 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4289 (06d70147)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185773.61 ms
main:    total time = 185773.61 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 4289 (06d70147) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.000.844 I main: load the model and apply lora adapter, if any
0.00.023.420 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.538 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.552 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.554 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.560 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.564 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.566 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.567 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.569 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.570 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.576 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.577 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.579 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.580 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.581 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.164 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.296 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.246 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.256 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.257 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.258 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.261 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.262 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.264 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.268 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.270 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.279 I llama_model_loader: - type  f32:   37 tensors
0.00.349.281 I llama_model_loader: - type q4_K:  108 tensors
0.00.349.282 I llama_model_loader: - type q6_K:   19 tensors
0.00.583.362 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.641.079 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.641.928 I llm_load_vocab: special tokens cache size = 5
0.00.847.937 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.848.009 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.848.013 I llm_load_print_meta: arch             = gemma
0.00.848.014 I llm_load_print_meta: vocab type       = SPM
0.00.848.015 I llm_load_print_meta: n_vocab          = 256000
0.00.848.017 I llm_load_print_meta: n_merges         = 0
0.00.848.018 I llm_load_print_meta: vocab_only       = 0
0.00.848.018 I llm_load_print_meta: n_ctx_train      = 8192
0.00.848.019 I llm_load_print_meta: n_embd           = 2048
0.00.848.019 I llm_load_print_meta: n_layer          = 18
0.00.848.084 I llm_load_print_meta: n_head           = 8
0.00.848.094 I llm_load_print_meta: n_head_kv        = 1
0.00.848.095 I llm_load_print_meta: n_rot            = 256
0.00.848.096 I llm_load_print_meta: n_swa            = 0
0.00.848.096 I llm_load_print_meta: n_embd_head_k    = 256
0.00.848.096 I llm_load_print_meta: n_embd_head_v    = 256
0.00.848.101 I llm_load_print_meta: n_gqa            = 8
0.00.848.106 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.848.112 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.848.113 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.848.115 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.848.116 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.848.116 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.848.116 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.848.121 I llm_load_print_meta: n_ff             = 16384
0.00.848.122 I llm_load_print_meta: n_expert         = 0
0.00.848.122 I llm_load_print_meta: n_expert_used    = 0
0.00.848.123 I llm_load_print_meta: causal attn      = 1
0.00.848.123 I llm_load_print_meta: pooling type     = 0
0.00.848.123 I llm_load_print_meta: rope type        = 2
0.00.848.124 I llm_load_print_meta: rope scaling     = linear
0.00.848.126 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.848.127 I llm_load_print_meta: freq_scale_train = 1
0.00.848.128 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.848.128 I llm_load_print_meta: rope_finetuned   = unknown
0.00.848.129 I llm_load_print_meta: ssm_d_conv       = 0
0.00.848.130 I llm_load_print_meta: ssm_d_inner      = 0
0.00.848.130 I llm_load_print_meta: ssm_d_state      = 0
0.00.848.130 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.848.131 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.848.132 I llm_load_print_meta: model type       = 2B
0.00.848.133 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.848.134 I llm_load_print_meta: model params     = 2.51 B
0.00.848.134 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.848.135 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.848.136 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.848.136 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.848.137 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.848.137 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.848.138 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.848.145 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.848.162 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.848.164 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.848.172 I llm_load_print_meta: max token length = 93
0.00.907.263 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.913.115 I llama_new_context_with_model: n_seq_max     = 1
0.00.913.122 I llama_new_context_with_model: n_ctx         = 4096
0.00.913.122 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.913.123 I llama_new_context_with_model: n_batch       = 2048
0.00.913.123 I llama_new_context_with_model: n_ubatch      = 512
0.00.913.124 I llama_new_context_with_model: flash_attn    = 0
0.00.913.126 I llama_new_context_with_model: freq_base     = 10000.0
0.00.913.126 I llama_new_context_with_model: freq_scale    = 1
0.00.913.127 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.928.152 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.928.194 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.928.318 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.930.868 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.930.872 I llama_new_context_with_model: graph nodes  = 601
0.00.930.873 I llama_new_context_with_model: graph splits = 1
0.00.930.895 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.511.313 I main: llama threadpool init, n_threads = 4
0.01.511.330 I 
0.01.511.449 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.511.453 I 
0.01.511.708 I sampler seed: 4085731094
0.01.511.722 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.511.734 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.511.735 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.511.735 I 
 squaRED.

**Instructions:**

1. Read the instructions carefully.
2. Follow the instructions to create a complete and accurate response.
3.

0.12.618.662 I llama_perf_sampler_print:    sampling time =      49.09 ms /    33 runs   (    1.49 ms per token,   672.18 tokens per second)
0.12.618.666 I llama_perf_context_print:        load time =    1510.37 ms
0.12.618.668 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.618.673 I llama_perf_context_print:        eval time =   11018.80 ms /    32 runs   (  344.34 ms per token,     2.90 tokens per second)
0.12.618.675 I llama_perf_context_print:       total time =   11107.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m35.823s
user	46m27.947s
sys	0m6.263s
