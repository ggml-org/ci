+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4303 (4b4d92b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.000.845 I main: load the model and apply lora adapter, if any
0.00.023.317 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.328 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.421 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.433 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.435 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.441 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.446 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.448 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.449 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.450 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.452 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.462 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.463 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.465 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.466 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.467 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.960 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.332.262 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.356.626 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.356.637 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.356.638 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.356.639 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.356.641 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.356.653 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.356.657 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.356.662 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.356.664 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.356.670 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.356.681 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.356.688 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.356.700 I llama_model_loader: - type  f32:   37 tensors
0.00.356.702 I llama_model_loader: - type q8_0:  127 tensors
0.00.587.481 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.656.093 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.657.001 I llm_load_vocab: special tokens cache size = 5
0.00.847.264 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.847.336 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.847.337 I llm_load_print_meta: arch             = gemma
0.00.847.338 I llm_load_print_meta: vocab type       = SPM
0.00.847.339 I llm_load_print_meta: n_vocab          = 256000
0.00.847.342 I llm_load_print_meta: n_merges         = 0
0.00.847.342 I llm_load_print_meta: vocab_only       = 0
0.00.847.343 I llm_load_print_meta: n_ctx_train      = 8192
0.00.847.343 I llm_load_print_meta: n_embd           = 2048
0.00.847.343 I llm_load_print_meta: n_layer          = 18
0.00.847.408 I llm_load_print_meta: n_head           = 8
0.00.847.415 I llm_load_print_meta: n_head_kv        = 1
0.00.847.420 I llm_load_print_meta: n_rot            = 256
0.00.847.420 I llm_load_print_meta: n_swa            = 0
0.00.847.421 I llm_load_print_meta: n_embd_head_k    = 256
0.00.847.422 I llm_load_print_meta: n_embd_head_v    = 256
0.00.847.427 I llm_load_print_meta: n_gqa            = 8
0.00.847.436 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.847.440 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.847.441 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.847.443 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.847.443 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.847.444 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.847.444 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.847.449 I llm_load_print_meta: n_ff             = 16384
0.00.847.450 I llm_load_print_meta: n_expert         = 0
0.00.847.450 I llm_load_print_meta: n_expert_used    = 0
0.00.847.453 I llm_load_print_meta: causal attn      = 1
0.00.847.453 I llm_load_print_meta: pooling type     = 0
0.00.847.453 I llm_load_print_meta: rope type        = 2
0.00.847.454 I llm_load_print_meta: rope scaling     = linear
0.00.847.455 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.847.456 I llm_load_print_meta: freq_scale_train = 1
0.00.847.456 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.847.456 I llm_load_print_meta: rope_finetuned   = unknown
0.00.847.457 I llm_load_print_meta: ssm_d_conv       = 0
0.00.847.457 I llm_load_print_meta: ssm_d_inner      = 0
0.00.847.458 I llm_load_print_meta: ssm_d_state      = 0
0.00.847.458 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.847.458 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.847.459 I llm_load_print_meta: model type       = 2B
0.00.847.460 I llm_load_print_meta: model ftype      = Q8_0
0.00.847.461 I llm_load_print_meta: model params     = 2.51 B
0.00.847.462 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.847.463 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.847.464 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.847.464 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.847.465 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.847.465 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.847.466 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.847.466 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.847.472 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.847.474 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.847.474 I llm_load_print_meta: max token length = 93
0.00.951.477 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.951.488 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.951.488 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.951.489 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.951.490 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.951.491 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.957.431 I llama_new_context_with_model: n_seq_max     = 1
0.00.957.437 I llama_new_context_with_model: n_ctx         = 4096
0.00.957.438 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.957.438 I llama_new_context_with_model: n_batch       = 2048
0.00.957.438 I llama_new_context_with_model: n_ubatch      = 512
0.00.957.439 I llama_new_context_with_model: flash_attn    = 0
0.00.957.441 I llama_new_context_with_model: freq_base     = 10000.0
0.00.957.442 I llama_new_context_with_model: freq_scale    = 1
0.00.957.443 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.971.997 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.972.039 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.972.155 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.974.899 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.974.903 I llama_new_context_with_model: graph nodes  = 601
0.00.974.903 I llama_new_context_with_model: graph splits = 1
0.00.974.927 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.592.849 I main: llama threadpool init, n_threads = 4
0.01.592.868 I 
0.01.592.989 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.592.993 I 
0.01.593.267 I sampler seed: 4247435473
0.01.593.282 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.593.291 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.593.294 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.593.294 I 
 increasities:

**a.** The city councilman's wife is suing him for financial damages after he was diagnosed with a terminal illness.
**b

0.15.202.792 I llama_perf_sampler_print:    sampling time =      49.26 ms /    33 runs   (    1.49 ms per token,   669.94 tokens per second)
0.15.202.794 I llama_perf_context_print:        load time =    1591.90 ms
0.15.202.809 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.202.810 I llama_perf_context_print:        eval time =   13521.00 ms /    32 runs   (  422.53 ms per token,     2.37 tokens per second)
0.15.202.811 I llama_perf_context_print:       total time =   13609.95 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4303 (4b4d92b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.000.836 I main: load the model and apply lora adapter, if any
0.00.026.469 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.026.564 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.577 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.579 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.584 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.591 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.592 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.594 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.595 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.596 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.602 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.603 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.604 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.606 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.607 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.232.961 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.335.945 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.360.419 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.360.430 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.360.431 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.360.432 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.360.434 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.360.436 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.360.437 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.360.441 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.360.442 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.360.444 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.360.445 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.360.447 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.360.457 I llama_model_loader: - type  f32:   37 tensors
0.00.360.459 I llama_model_loader: - type q8_0:  127 tensors
0.00.573.786 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.630.887 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.631.748 I llm_load_vocab: special tokens cache size = 5
0.00.828.475 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.828.549 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.828.550 I llm_load_print_meta: arch             = gemma
0.00.828.550 I llm_load_print_meta: vocab type       = SPM
0.00.828.551 I llm_load_print_meta: n_vocab          = 256000
0.00.828.554 I llm_load_print_meta: n_merges         = 0
0.00.828.555 I llm_load_print_meta: vocab_only       = 0
0.00.828.555 I llm_load_print_meta: n_ctx_train      = 8192
0.00.828.555 I llm_load_print_meta: n_embd           = 2048
0.00.828.556 I llm_load_print_meta: n_layer          = 18
0.00.828.622 I llm_load_print_meta: n_head           = 8
0.00.828.629 I llm_load_print_meta: n_head_kv        = 1
0.00.828.630 I llm_load_print_meta: n_rot            = 256
0.00.828.630 I llm_load_print_meta: n_swa            = 0
0.00.828.631 I llm_load_print_meta: n_embd_head_k    = 256
0.00.828.631 I llm_load_print_meta: n_embd_head_v    = 256
0.00.828.649 I llm_load_print_meta: n_gqa            = 8
0.00.828.655 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.828.660 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.828.661 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.828.662 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.828.663 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.828.664 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.828.674 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.828.680 I llm_load_print_meta: n_ff             = 16384
0.00.828.681 I llm_load_print_meta: n_expert         = 0
0.00.828.681 I llm_load_print_meta: n_expert_used    = 0
0.00.828.682 I llm_load_print_meta: causal attn      = 1
0.00.828.682 I llm_load_print_meta: pooling type     = 0
0.00.828.682 I llm_load_print_meta: rope type        = 2
0.00.828.683 I llm_load_print_meta: rope scaling     = linear
0.00.828.685 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.828.685 I llm_load_print_meta: freq_scale_train = 1
0.00.828.686 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.828.686 I llm_load_print_meta: rope_finetuned   = unknown
0.00.828.686 I llm_load_print_meta: ssm_d_conv       = 0
0.00.828.687 I llm_load_print_meta: ssm_d_inner      = 0
0.00.828.687 I llm_load_print_meta: ssm_d_state      = 0
0.00.828.692 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.828.692 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.828.692 I llm_load_print_meta: model type       = 2B
0.00.828.693 I llm_load_print_meta: model ftype      = Q8_0
0.00.828.694 I llm_load_print_meta: model params     = 2.51 B
0.00.828.695 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.828.695 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.828.696 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.828.697 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.828.698 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.828.706 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.828.706 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.828.707 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.828.713 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.828.715 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.828.715 I llm_load_print_meta: max token length = 93
0.00.927.639 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.933.584 I llama_new_context_with_model: n_seq_max     = 1
0.00.933.592 I llama_new_context_with_model: n_ctx         = 4096
0.00.933.592 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.933.592 I llama_new_context_with_model: n_batch       = 2048
0.00.933.593 I llama_new_context_with_model: n_ubatch      = 512
0.00.933.593 I llama_new_context_with_model: flash_attn    = 0
0.00.933.595 I llama_new_context_with_model: freq_base     = 10000.0
0.00.933.596 I llama_new_context_with_model: freq_scale    = 1
0.00.933.597 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.948.371 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.948.414 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.948.527 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.951.174 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.951.178 I llama_new_context_with_model: graph nodes  = 601
0.00.951.178 I llama_new_context_with_model: graph splits = 1
0.00.951.202 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.572.416 I main: llama threadpool init, n_threads = 4
0.01.572.433 I 
0.01.572.559 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.572.563 I 
0.01.572.804 I sampler seed: 3858894313
0.01.572.817 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.572.827 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.572.831 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.572.831 I 
 maneuvously.

I am unable to generate the requested text due to the limitations of my current programming capabilities. [end of text]


0.11.861.991 I llama_perf_sampler_print:    sampling time =      36.99 ms /    25 runs   (    1.48 ms per token,   675.77 tokens per second)
0.11.861.994 I llama_perf_context_print:        load time =    1571.48 ms
0.11.861.995 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.862.010 I llama_perf_context_print:        eval time =   10222.01 ms /    24 runs   (  425.92 ms per token,     2.35 tokens per second)
0.11.862.011 I llama_perf_context_print:       total time =   10289.58 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.678 I build: 4303 (4b4d92b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.888 I main: llama backend init
0.00.000.895 I main: load the model and apply lora adapter, if any
0.00.023.263 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.270 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.359 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.372 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.374 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.379 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.383 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.385 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.386 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.388 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.389 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.398 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.399 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.401 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.402 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.403 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.231.781 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.820 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.358.244 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.358.252 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.358.254 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.358.255 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.358.256 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.258 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.259 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.263 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.264 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.266 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.358.267 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.358.269 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.358.276 I llama_model_loader: - type  f32:   37 tensors
0.00.358.279 I llama_model_loader: - type q8_0:  127 tensors
0.00.599.057 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.658.238 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.659.206 I llm_load_vocab: special tokens cache size = 5
0.00.866.567 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.866.644 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.866.645 I llm_load_print_meta: arch             = gemma
0.00.866.646 I llm_load_print_meta: vocab type       = SPM
0.00.866.647 I llm_load_print_meta: n_vocab          = 256000
0.00.866.649 I llm_load_print_meta: n_merges         = 0
0.00.866.650 I llm_load_print_meta: vocab_only       = 0
0.00.866.650 I llm_load_print_meta: n_ctx_train      = 8192
0.00.866.651 I llm_load_print_meta: n_embd           = 2048
0.00.866.651 I llm_load_print_meta: n_layer          = 18
0.00.866.714 I llm_load_print_meta: n_head           = 8
0.00.866.721 I llm_load_print_meta: n_head_kv        = 1
0.00.866.721 I llm_load_print_meta: n_rot            = 256
0.00.866.722 I llm_load_print_meta: n_swa            = 0
0.00.866.723 I llm_load_print_meta: n_embd_head_k    = 256
0.00.866.724 I llm_load_print_meta: n_embd_head_v    = 256
0.00.866.729 I llm_load_print_meta: n_gqa            = 8
0.00.866.734 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.866.739 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.866.740 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.866.742 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.866.743 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.866.753 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.866.754 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.866.758 I llm_load_print_meta: n_ff             = 16384
0.00.866.759 I llm_load_print_meta: n_expert         = 0
0.00.866.759 I llm_load_print_meta: n_expert_used    = 0
0.00.866.760 I llm_load_print_meta: causal attn      = 1
0.00.866.761 I llm_load_print_meta: pooling type     = 0
0.00.866.761 I llm_load_print_meta: rope type        = 2
0.00.866.761 I llm_load_print_meta: rope scaling     = linear
0.00.866.763 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.866.763 I llm_load_print_meta: freq_scale_train = 1
0.00.866.764 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.866.764 I llm_load_print_meta: rope_finetuned   = unknown
0.00.866.765 I llm_load_print_meta: ssm_d_conv       = 0
0.00.866.765 I llm_load_print_meta: ssm_d_inner      = 0
0.00.866.765 I llm_load_print_meta: ssm_d_state      = 0
0.00.866.766 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.866.766 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.866.767 I llm_load_print_meta: model type       = 2B
0.00.866.768 I llm_load_print_meta: model ftype      = Q8_0
0.00.866.769 I llm_load_print_meta: model params     = 2.51 B
0.00.866.770 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.866.770 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.866.771 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.866.771 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.866.772 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.866.773 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.866.773 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.866.773 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.866.780 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.866.781 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.866.781 I llm_load_print_meta: max token length = 93
0.00.945.020 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.945.030 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.945.031 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.945.032 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.945.032 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.945.033 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.950.892 I llama_new_context_with_model: n_seq_max     = 1
0.00.950.900 I llama_new_context_with_model: n_ctx         = 4096
0.00.950.900 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.950.901 I llama_new_context_with_model: n_batch       = 2048
0.00.950.901 I llama_new_context_with_model: n_ubatch      = 512
0.00.950.901 I llama_new_context_with_model: flash_attn    = 0
0.00.950.904 I llama_new_context_with_model: freq_base     = 10000.0
0.00.950.905 I llama_new_context_with_model: freq_scale    = 1
0.00.950.905 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.966.658 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.966.697 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.966.813 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.969.505 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.969.509 I llama_new_context_with_model: graph nodes  = 601
0.00.969.510 I llama_new_context_with_model: graph splits = 1
0.00.969.532 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.582.238 I main: llama threadpool init, n_threads = 4
0.01.582.254 I 
0.01.582.388 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.582.400 I 
0.01.582.655 I sampler seed: 279744741
0.01.582.669 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.582.678 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.582.682 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.582.682 I 
 increamically, a vibrant young woman with cascading blonde curls and a contagious smile. Her laughter echoed through the bustling market square, blending with the lively chatter of the

0.15.199.045 I llama_perf_sampler_print:    sampling time =      49.30 ms /    33 runs   (    1.49 ms per token,   669.40 tokens per second)
0.15.199.048 I llama_perf_context_print:        load time =    1581.24 ms
0.15.199.050 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.199.051 I llama_perf_context_print:        eval time =   13528.21 ms /    32 runs   (  422.76 ms per token,     2.37 tokens per second)
0.15.199.052 I llama_perf_context_print:       total time =   13616.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4303 (4b4d92b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.000.854 I main: load the model and apply lora adapter, if any
0.00.023.435 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.447 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.540 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.552 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.554 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.559 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.564 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.565 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.566 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.567 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.569 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.579 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.580 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.590 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.594 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.595 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.231.053 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.179 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.357.723 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.357.735 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.357.737 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.357.738 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.357.739 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.357.741 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.357.742 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.357.747 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.357.748 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.357.750 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.357.751 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.357.752 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.357.763 I llama_model_loader: - type  f32:   37 tensors
0.00.357.765 I llama_model_loader: - type q8_0:  127 tensors
0.00.575.932 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.633.662 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.634.543 I llm_load_vocab: special tokens cache size = 5
0.00.830.512 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.830.584 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.830.588 I llm_load_print_meta: arch             = gemma
0.00.830.588 I llm_load_print_meta: vocab type       = SPM
0.00.830.589 I llm_load_print_meta: n_vocab          = 256000
0.00.830.592 I llm_load_print_meta: n_merges         = 0
0.00.830.593 I llm_load_print_meta: vocab_only       = 0
0.00.830.593 I llm_load_print_meta: n_ctx_train      = 8192
0.00.830.593 I llm_load_print_meta: n_embd           = 2048
0.00.830.594 I llm_load_print_meta: n_layer          = 18
0.00.830.658 I llm_load_print_meta: n_head           = 8
0.00.830.669 I llm_load_print_meta: n_head_kv        = 1
0.00.830.670 I llm_load_print_meta: n_rot            = 256
0.00.830.671 I llm_load_print_meta: n_swa            = 0
0.00.830.672 I llm_load_print_meta: n_embd_head_k    = 256
0.00.830.672 I llm_load_print_meta: n_embd_head_v    = 256
0.00.830.677 I llm_load_print_meta: n_gqa            = 8
0.00.830.682 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.830.687 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.830.690 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.830.692 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.830.693 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.830.693 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.830.693 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.830.698 I llm_load_print_meta: n_ff             = 16384
0.00.830.699 I llm_load_print_meta: n_expert         = 0
0.00.830.700 I llm_load_print_meta: n_expert_used    = 0
0.00.830.700 I llm_load_print_meta: causal attn      = 1
0.00.830.700 I llm_load_print_meta: pooling type     = 0
0.00.830.701 I llm_load_print_meta: rope type        = 2
0.00.830.702 I llm_load_print_meta: rope scaling     = linear
0.00.830.703 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.830.704 I llm_load_print_meta: freq_scale_train = 1
0.00.830.704 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.830.705 I llm_load_print_meta: rope_finetuned   = unknown
0.00.830.706 I llm_load_print_meta: ssm_d_conv       = 0
0.00.830.706 I llm_load_print_meta: ssm_d_inner      = 0
0.00.830.716 I llm_load_print_meta: ssm_d_state      = 0
0.00.830.717 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.830.717 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.830.718 I llm_load_print_meta: model type       = 2B
0.00.830.720 I llm_load_print_meta: model ftype      = Q8_0
0.00.830.723 I llm_load_print_meta: model params     = 2.51 B
0.00.830.724 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.830.725 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.830.725 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.830.726 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.830.727 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.830.727 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.830.727 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.830.728 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.830.733 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.830.735 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.830.735 I llm_load_print_meta: max token length = 93
0.00.904.122 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.904.133 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.910.006 I llama_new_context_with_model: n_seq_max     = 1
0.00.910.013 I llama_new_context_with_model: n_ctx         = 4096
0.00.910.013 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.910.014 I llama_new_context_with_model: n_batch       = 2048
0.00.910.014 I llama_new_context_with_model: n_ubatch      = 512
0.00.910.015 I llama_new_context_with_model: flash_attn    = 0
0.00.910.017 I llama_new_context_with_model: freq_base     = 10000.0
0.00.910.018 I llama_new_context_with_model: freq_scale    = 1
0.00.910.019 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.924.774 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.924.813 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.924.931 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.927.612 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.927.616 I llama_new_context_with_model: graph nodes  = 601
0.00.927.616 I llama_new_context_with_model: graph splits = 1
0.00.927.638 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.536.915 I main: llama threadpool init, n_threads = 4
0.01.536.931 I 
0.01.537.050 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.537.054 I 
0.01.537.293 I sampler seed: 2300028691
0.01.537.307 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.537.317 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.537.318 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.537.320 I 
 increasities, and the general lack of information about this type of research. [end of text]


0.08.334.700 I llama_perf_sampler_print:    sampling time =      24.73 ms /    17 runs   (    1.46 ms per token,   687.29 tokens per second)
0.08.334.704 I llama_perf_context_print:        load time =    1535.95 ms
0.08.334.705 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.334.706 I llama_perf_context_print:        eval time =    6751.90 ms /    16 runs   (  421.99 ms per token,     2.37 tokens per second)
0.08.334.708 I llama_perf_context_print:       total time =    6797.79 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m0.199s
user	3m11.059s
sys	0m9.253s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4303 (4b4d92b0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185885.84 ms
main:    total time = 185885.84 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4303 (4b4d92b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.811 I main: llama backend init
0.00.000.815 I main: load the model and apply lora adapter, if any
0.00.022.953 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.964 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.052 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.063 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.065 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.070 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.074 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.075 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.077 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.081 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.082 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.091 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.092 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.094 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.096 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.097 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.466 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.332.780 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.357.161 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.357.169 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.357.171 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.357.172 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.357.174 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.357.175 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.357.177 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.357.181 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.357.182 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.357.184 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.357.185 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.357.187 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.357.196 I llama_model_loader: - type  f32:   37 tensors
0.00.357.198 I llama_model_loader: - type q4_K:  108 tensors
0.00.357.199 I llama_model_loader: - type q6_K:   19 tensors
0.00.576.111 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.634.173 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.635.041 I llm_load_vocab: special tokens cache size = 5
0.00.837.603 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.837.674 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.837.675 I llm_load_print_meta: arch             = gemma
0.00.837.676 I llm_load_print_meta: vocab type       = SPM
0.00.837.677 I llm_load_print_meta: n_vocab          = 256000
0.00.837.680 I llm_load_print_meta: n_merges         = 0
0.00.837.680 I llm_load_print_meta: vocab_only       = 0
0.00.837.681 I llm_load_print_meta: n_ctx_train      = 8192
0.00.837.681 I llm_load_print_meta: n_embd           = 2048
0.00.837.681 I llm_load_print_meta: n_layer          = 18
0.00.837.747 I llm_load_print_meta: n_head           = 8
0.00.837.775 I llm_load_print_meta: n_head_kv        = 1
0.00.837.777 I llm_load_print_meta: n_rot            = 256
0.00.837.778 I llm_load_print_meta: n_swa            = 0
0.00.837.778 I llm_load_print_meta: n_embd_head_k    = 256
0.00.837.778 I llm_load_print_meta: n_embd_head_v    = 256
0.00.837.785 I llm_load_print_meta: n_gqa            = 8
0.00.837.790 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.837.795 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.837.796 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.837.798 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.837.799 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.837.799 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.837.800 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.837.805 I llm_load_print_meta: n_ff             = 16384
0.00.837.806 I llm_load_print_meta: n_expert         = 0
0.00.837.806 I llm_load_print_meta: n_expert_used    = 0
0.00.837.807 I llm_load_print_meta: causal attn      = 1
0.00.837.807 I llm_load_print_meta: pooling type     = 0
0.00.837.808 I llm_load_print_meta: rope type        = 2
0.00.837.808 I llm_load_print_meta: rope scaling     = linear
0.00.837.810 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.837.811 I llm_load_print_meta: freq_scale_train = 1
0.00.837.811 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.837.812 I llm_load_print_meta: rope_finetuned   = unknown
0.00.837.812 I llm_load_print_meta: ssm_d_conv       = 0
0.00.837.813 I llm_load_print_meta: ssm_d_inner      = 0
0.00.837.813 I llm_load_print_meta: ssm_d_state      = 0
0.00.837.814 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.837.814 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.837.815 I llm_load_print_meta: model type       = 2B
0.00.837.816 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.837.817 I llm_load_print_meta: model params     = 2.51 B
0.00.837.818 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.837.819 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.837.824 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.837.825 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.837.825 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.837.825 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.837.825 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.837.834 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.837.840 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.837.842 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.837.842 I llm_load_print_meta: max token length = 93
0.00.901.808 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.901.816 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.901.818 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.901.818 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.901.819 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.901.820 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.907.512 I llama_new_context_with_model: n_seq_max     = 1
0.00.907.520 I llama_new_context_with_model: n_ctx         = 4096
0.00.907.520 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.907.521 I llama_new_context_with_model: n_batch       = 2048
0.00.907.521 I llama_new_context_with_model: n_ubatch      = 512
0.00.907.521 I llama_new_context_with_model: flash_attn    = 0
0.00.907.524 I llama_new_context_with_model: freq_base     = 10000.0
0.00.907.525 I llama_new_context_with_model: freq_scale    = 1
0.00.907.525 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.922.247 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.922.285 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.922.402 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.925.078 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.925.082 I llama_new_context_with_model: graph nodes  = 601
0.00.925.082 I llama_new_context_with_model: graph splits = 1
0.00.925.104 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.507.238 I main: llama threadpool init, n_threads = 4
0.01.507.253 I 
0.01.507.374 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.507.377 I 
0.01.507.612 I sampler seed: 619267162
0.01.507.625 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.507.634 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.507.638 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.507.639 I 
 increably!

I'm not sure if you heard, but there's a new trend in the workplace where employees are demanding higher salaries, better benefits

0.12.655.223 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.53 tokens per second)
0.12.655.227 I llama_perf_context_print:        load time =    1506.32 ms
0.12.655.241 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.655.243 I llama_perf_context_print:        eval time =   11059.07 ms /    32 runs   (  345.60 ms per token,     2.89 tokens per second)
0.12.655.245 I llama_perf_context_print:       total time =   11147.99 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4303 (4b4d92b0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185775.67 ms
main:    total time = 185775.67 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.685 I build: 4303 (4b4d92b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.880 I main: llama backend init
0.00.000.889 I main: load the model and apply lora adapter, if any
0.00.023.515 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.627 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.643 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.645 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.653 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.657 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.659 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.660 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.661 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.663 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.670 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.672 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.673 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.675 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.676 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.234.336 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.335.787 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.360.273 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.360.281 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.360.282 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.360.283 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.360.285 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.360.286 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.360.287 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.360.291 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.360.292 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.360.302 I llama_model_loader: - type  f32:   37 tensors
0.00.360.304 I llama_model_loader: - type q4_K:  108 tensors
0.00.360.305 I llama_model_loader: - type q6_K:   19 tensors
0.00.576.585 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.635.745 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.636.651 I llm_load_vocab: special tokens cache size = 5
0.00.828.584 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.828.659 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.828.663 I llm_load_print_meta: arch             = gemma
0.00.828.664 I llm_load_print_meta: vocab type       = SPM
0.00.828.665 I llm_load_print_meta: n_vocab          = 256000
0.00.828.669 I llm_load_print_meta: n_merges         = 0
0.00.828.669 I llm_load_print_meta: vocab_only       = 0
0.00.828.669 I llm_load_print_meta: n_ctx_train      = 8192
0.00.828.670 I llm_load_print_meta: n_embd           = 2048
0.00.828.670 I llm_load_print_meta: n_layer          = 18
0.00.828.734 I llm_load_print_meta: n_head           = 8
0.00.828.743 I llm_load_print_meta: n_head_kv        = 1
0.00.828.744 I llm_load_print_meta: n_rot            = 256
0.00.828.744 I llm_load_print_meta: n_swa            = 0
0.00.828.745 I llm_load_print_meta: n_embd_head_k    = 256
0.00.828.746 I llm_load_print_meta: n_embd_head_v    = 256
0.00.828.751 I llm_load_print_meta: n_gqa            = 8
0.00.828.756 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.828.762 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.828.763 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.828.765 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.828.765 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.828.766 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.828.766 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.828.771 I llm_load_print_meta: n_ff             = 16384
0.00.828.772 I llm_load_print_meta: n_expert         = 0
0.00.828.772 I llm_load_print_meta: n_expert_used    = 0
0.00.828.772 I llm_load_print_meta: causal attn      = 1
0.00.828.773 I llm_load_print_meta: pooling type     = 0
0.00.828.776 I llm_load_print_meta: rope type        = 2
0.00.828.776 I llm_load_print_meta: rope scaling     = linear
0.00.828.778 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.828.778 I llm_load_print_meta: freq_scale_train = 1
0.00.828.779 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.828.779 I llm_load_print_meta: rope_finetuned   = unknown
0.00.828.779 I llm_load_print_meta: ssm_d_conv       = 0
0.00.828.780 I llm_load_print_meta: ssm_d_inner      = 0
0.00.828.780 I llm_load_print_meta: ssm_d_state      = 0
0.00.828.780 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.828.781 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.828.781 I llm_load_print_meta: model type       = 2B
0.00.828.782 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.828.783 I llm_load_print_meta: model params     = 2.51 B
0.00.828.784 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.828.784 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.828.785 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.828.785 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.828.787 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.828.787 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.828.796 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.828.797 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.828.804 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.828.805 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.828.806 I llm_load_print_meta: max token length = 93
0.00.889.471 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.895.115 I llama_new_context_with_model: n_seq_max     = 1
0.00.895.121 I llama_new_context_with_model: n_ctx         = 4096
0.00.895.121 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.895.122 I llama_new_context_with_model: n_batch       = 2048
0.00.895.122 I llama_new_context_with_model: n_ubatch      = 512
0.00.895.123 I llama_new_context_with_model: flash_attn    = 0
0.00.895.125 I llama_new_context_with_model: freq_base     = 10000.0
0.00.895.126 I llama_new_context_with_model: freq_scale    = 1
0.00.895.126 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.910.200 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.910.241 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.910.351 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.912.941 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.912.945 I llama_new_context_with_model: graph nodes  = 601
0.00.912.946 I llama_new_context_with_model: graph splits = 1
0.00.912.967 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.493.202 I main: llama threadpool init, n_threads = 4
0.01.493.217 I 
0.01.493.339 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.493.344 I 
0.01.493.581 I sampler seed: 3212364591
0.01.493.595 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.493.607 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.493.607 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.493.607 I 
 squaRED TEXT

## The Importance of Sleep

**Sleep is more than just rest; it's a crucial process for physical and mental health.**

*

0.12.572.874 I llama_perf_sampler_print:    sampling time =      48.95 ms /    33 runs   (    1.48 ms per token,   674.10 tokens per second)
0.12.572.877 I llama_perf_context_print:        load time =    1492.20 ms
0.12.572.879 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.572.880 I llama_perf_context_print:        eval time =   10991.28 ms /    32 runs   (  343.48 ms per token,     2.91 tokens per second)
0.12.572.882 I llama_perf_context_print:       total time =   11079.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.773s
user	46m43.196s
sys	0m6.259s
