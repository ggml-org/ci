+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.541 I build: 4303 (4b4d92b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.729 I main: llama backend init
0.00.000.737 I main: load the model and apply lora adapter, if any
0.00.021.162 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.172 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.180 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.184 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.185 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.189 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.190 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.190 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.191 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.191 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.192 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.196 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.196 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.197 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.197 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.198 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.819 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.759 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.575 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.581 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.582 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.583 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.584 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.585 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.586 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.590 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.591 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.592 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.592 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.594 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.597 I llama_model_loader: - type  f32:   37 tensors
0.00.130.598 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.571 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.851 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.485 I llm_load_vocab: special tokens cache size = 5
0.00.268.266 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.282 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.283 I llm_load_print_meta: arch             = gemma
0.00.268.283 I llm_load_print_meta: vocab type       = SPM
0.00.268.284 I llm_load_print_meta: n_vocab          = 256000
0.00.268.284 I llm_load_print_meta: n_merges         = 0
0.00.268.285 I llm_load_print_meta: vocab_only       = 0
0.00.268.285 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.285 I llm_load_print_meta: n_embd           = 2048
0.00.268.286 I llm_load_print_meta: n_layer          = 18
0.00.268.298 I llm_load_print_meta: n_head           = 8
0.00.268.299 I llm_load_print_meta: n_head_kv        = 1
0.00.268.299 I llm_load_print_meta: n_rot            = 256
0.00.268.299 I llm_load_print_meta: n_swa            = 0
0.00.268.300 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.300 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.301 I llm_load_print_meta: n_gqa            = 8
0.00.268.302 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.303 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.304 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.305 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.306 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.306 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.306 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.307 I llm_load_print_meta: n_ff             = 16384
0.00.268.307 I llm_load_print_meta: n_expert         = 0
0.00.268.308 I llm_load_print_meta: n_expert_used    = 0
0.00.268.308 I llm_load_print_meta: causal attn      = 1
0.00.268.308 I llm_load_print_meta: pooling type     = 0
0.00.268.309 I llm_load_print_meta: rope type        = 2
0.00.268.309 I llm_load_print_meta: rope scaling     = linear
0.00.268.311 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.311 I llm_load_print_meta: freq_scale_train = 1
0.00.268.311 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.312 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.312 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.312 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.313 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.313 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.313 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.313 I llm_load_print_meta: model type       = 2B
0.00.268.314 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.315 I llm_load_print_meta: model params     = 2.51 B
0.00.268.315 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.316 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.316 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.317 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.317 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.317 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.317 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.318 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.318 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.318 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.319 I llm_load_print_meta: max token length = 93
0.00.374.024 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.374.033 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.374.034 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.374.034 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.374.035 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.374.036 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.379.204 I llama_new_context_with_model: n_seq_max     = 1
0.00.379.210 I llama_new_context_with_model: n_ctx         = 4096
0.00.379.210 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.379.210 I llama_new_context_with_model: n_batch       = 2048
0.00.379.211 I llama_new_context_with_model: n_ubatch      = 512
0.00.379.211 I llama_new_context_with_model: flash_attn    = 0
0.00.379.214 I llama_new_context_with_model: freq_base     = 10000.0
0.00.379.215 I llama_new_context_with_model: freq_scale    = 1
0.00.379.215 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.393.635 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.393.650 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.393.746 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.395.010 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.395.017 I llama_new_context_with_model: graph nodes  = 601
0.00.395.017 I llama_new_context_with_model: graph splits = 1
0.00.395.019 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.481.014 I main: llama threadpool init, n_threads = 4
0.00.481.032 I 
0.00.481.102 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.481.106 I 
0.00.481.150 I sampler seed: 2980992456
0.00.481.161 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.481.164 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.481.166 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.481.168 I 
 increasities with a smile,
But hold the razor tight, for secrets she conceals.

Who is this woman?

The answer is a cat.

0.02.743.489 I llama_perf_sampler_print:    sampling time =       5.40 ms /    33 runs   (    0.16 ms per token,  6108.85 tokens per second)
0.02.743.492 I llama_perf_context_print:        load time =     480.26 ms
0.02.743.493 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.743.495 I llama_perf_context_print:        eval time =    2243.10 ms /    32 runs   (   70.10 ms per token,    14.27 tokens per second)
0.02.743.496 I llama_perf_context_print:       total time =    2262.48 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.176 I build: 4303 (4b4d92b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.366 I main: llama backend init
0.00.000.372 I main: load the model and apply lora adapter, if any
0.00.020.802 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.817 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.824 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.825 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.829 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.829 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.830 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.831 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.832 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.832 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.837 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.839 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.840 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.840 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.841 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.333 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.324 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.122 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.128 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.129 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.129 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.130 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.131 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.132 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.134 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.135 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.135 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.136 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.138 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.140 I llama_model_loader: - type  f32:   37 tensors
0.00.130.141 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.067 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.159 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.237.647 I llm_load_vocab: special tokens cache size = 5
0.00.258.142 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.258.159 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.258.159 I llm_load_print_meta: arch             = gemma
0.00.258.160 I llm_load_print_meta: vocab type       = SPM
0.00.258.160 I llm_load_print_meta: n_vocab          = 256000
0.00.258.161 I llm_load_print_meta: n_merges         = 0
0.00.258.161 I llm_load_print_meta: vocab_only       = 0
0.00.258.161 I llm_load_print_meta: n_ctx_train      = 8192
0.00.258.162 I llm_load_print_meta: n_embd           = 2048
0.00.258.162 I llm_load_print_meta: n_layer          = 18
0.00.258.173 I llm_load_print_meta: n_head           = 8
0.00.258.174 I llm_load_print_meta: n_head_kv        = 1
0.00.258.174 I llm_load_print_meta: n_rot            = 256
0.00.258.175 I llm_load_print_meta: n_swa            = 0
0.00.258.175 I llm_load_print_meta: n_embd_head_k    = 256
0.00.258.176 I llm_load_print_meta: n_embd_head_v    = 256
0.00.258.177 I llm_load_print_meta: n_gqa            = 8
0.00.258.178 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.258.179 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.258.180 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.258.182 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.258.182 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.258.183 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.258.183 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.258.184 I llm_load_print_meta: n_ff             = 16384
0.00.258.184 I llm_load_print_meta: n_expert         = 0
0.00.258.185 I llm_load_print_meta: n_expert_used    = 0
0.00.258.185 I llm_load_print_meta: causal attn      = 1
0.00.258.186 I llm_load_print_meta: pooling type     = 0
0.00.258.186 I llm_load_print_meta: rope type        = 2
0.00.258.186 I llm_load_print_meta: rope scaling     = linear
0.00.258.188 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.258.188 I llm_load_print_meta: freq_scale_train = 1
0.00.258.189 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.258.189 I llm_load_print_meta: rope_finetuned   = unknown
0.00.258.190 I llm_load_print_meta: ssm_d_conv       = 0
0.00.258.190 I llm_load_print_meta: ssm_d_inner      = 0
0.00.258.191 I llm_load_print_meta: ssm_d_state      = 0
0.00.258.191 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.258.191 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.258.191 I llm_load_print_meta: model type       = 2B
0.00.258.192 I llm_load_print_meta: model ftype      = Q8_0
0.00.258.193 I llm_load_print_meta: model params     = 2.51 B
0.00.258.194 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.258.195 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.258.195 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.258.195 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.258.196 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.258.196 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.258.197 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.258.197 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.258.198 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.258.198 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.258.198 I llm_load_print_meta: max token length = 93
0.00.353.763 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.358.820 I llama_new_context_with_model: n_seq_max     = 1
0.00.358.825 I llama_new_context_with_model: n_ctx         = 4096
0.00.358.825 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.358.826 I llama_new_context_with_model: n_batch       = 2048
0.00.358.826 I llama_new_context_with_model: n_ubatch      = 512
0.00.358.827 I llama_new_context_with_model: flash_attn    = 0
0.00.358.829 I llama_new_context_with_model: freq_base     = 10000.0
0.00.358.830 I llama_new_context_with_model: freq_scale    = 1
0.00.358.831 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.373.564 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.373.578 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.373.682 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.941 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.374.947 I llama_new_context_with_model: graph nodes  = 601
0.00.374.948 I llama_new_context_with_model: graph splits = 1
0.00.374.950 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.456.055 I main: llama threadpool init, n_threads = 4
0.00.456.072 I 
0.00.456.144 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.456.148 I 
0.00.456.190 I sampler seed: 2780573003
0.00.456.200 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.213 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.456.217 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.456.217 I 
 increasities, and sexual harassment.

Sexual harassment is a form of gender-based violence that can have significant consequences for victims. It is important to be aware

0.02.631.838 I llama_perf_sampler_print:    sampling time =       5.43 ms /    33 runs   (    0.16 ms per token,  6078.47 tokens per second)
0.02.631.840 I llama_perf_context_print:        load time =     455.67 ms
0.02.631.842 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.631.843 I llama_perf_context_print:        eval time =    2156.75 ms /    32 runs   (   67.40 ms per token,    14.84 tokens per second)
0.02.631.844 I llama_perf_context_print:       total time =    2175.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.532 I build: 4303 (4b4d92b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.733 I main: llama backend init
0.00.000.740 I main: load the model and apply lora adapter, if any
0.00.020.969 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.980 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.987 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.996 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.996 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.000 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.001 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.002 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.003 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.004 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.005 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.009 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.009 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.010 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.010 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.012 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.081 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.110 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.927 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.933 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.934 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.935 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.935 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.936 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.937 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.939 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.940 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.940 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.942 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.943 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.946 I llama_model_loader: - type  f32:   37 tensors
0.00.130.947 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.477 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.675 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.396 I llm_load_vocab: special tokens cache size = 5
0.00.277.363 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.383 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.384 I llm_load_print_meta: arch             = gemma
0.00.277.385 I llm_load_print_meta: vocab type       = SPM
0.00.277.385 I llm_load_print_meta: n_vocab          = 256000
0.00.277.386 I llm_load_print_meta: n_merges         = 0
0.00.277.386 I llm_load_print_meta: vocab_only       = 0
0.00.277.386 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.387 I llm_load_print_meta: n_embd           = 2048
0.00.277.387 I llm_load_print_meta: n_layer          = 18
0.00.277.398 I llm_load_print_meta: n_head           = 8
0.00.277.399 I llm_load_print_meta: n_head_kv        = 1
0.00.277.400 I llm_load_print_meta: n_rot            = 256
0.00.277.400 I llm_load_print_meta: n_swa            = 0
0.00.277.400 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.401 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.402 I llm_load_print_meta: n_gqa            = 8
0.00.277.403 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.404 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.405 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.406 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.407 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.407 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.407 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.408 I llm_load_print_meta: n_ff             = 16384
0.00.277.408 I llm_load_print_meta: n_expert         = 0
0.00.277.409 I llm_load_print_meta: n_expert_used    = 0
0.00.277.409 I llm_load_print_meta: causal attn      = 1
0.00.277.409 I llm_load_print_meta: pooling type     = 0
0.00.277.409 I llm_load_print_meta: rope type        = 2
0.00.277.410 I llm_load_print_meta: rope scaling     = linear
0.00.277.411 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.412 I llm_load_print_meta: freq_scale_train = 1
0.00.277.412 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.413 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.413 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.413 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.413 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.413 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.414 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.414 I llm_load_print_meta: model type       = 2B
0.00.277.415 I llm_load_print_meta: model ftype      = Q8_0
0.00.277.416 I llm_load_print_meta: model params     = 2.51 B
0.00.277.417 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.417 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.417 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.418 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.418 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.418 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.419 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.419 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.419 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.420 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.420 I llm_load_print_meta: max token length = 93
0.00.354.897 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.354.903 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.354.904 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.354.904 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.354.905 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.354.906 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.359.994 I llama_new_context_with_model: n_seq_max     = 1
0.00.360.001 I llama_new_context_with_model: n_ctx         = 4096
0.00.360.001 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.360.002 I llama_new_context_with_model: n_batch       = 2048
0.00.360.002 I llama_new_context_with_model: n_ubatch      = 512
0.00.360.003 I llama_new_context_with_model: flash_attn    = 0
0.00.360.005 I llama_new_context_with_model: freq_base     = 10000.0
0.00.360.006 I llama_new_context_with_model: freq_scale    = 1
0.00.360.007 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.375.417 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.375.431 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.375.521 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.800 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.376.808 I llama_new_context_with_model: graph nodes  = 601
0.00.376.808 I llama_new_context_with_model: graph splits = 1
0.00.376.810 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.370 I main: llama threadpool init, n_threads = 4
0.00.462.387 I 
0.00.462.462 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.462.465 I 
0.00.462.507 I sampler seed: 2766285025
0.00.462.518 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.521 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.522 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.523 I 
 increasities of the past, including the Crusades, inquires into the nature of faith and its relationship to power.

**Discuss the relationship between faith and

0.02.712.063 I llama_perf_sampler_print:    sampling time =       5.85 ms /    33 runs   (    0.18 ms per token,  5637.17 tokens per second)
0.02.712.066 I llama_perf_context_print:        load time =     461.61 ms
0.02.712.068 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.712.070 I llama_perf_context_print:        eval time =    2228.86 ms /    32 runs   (   69.65 ms per token,    14.36 tokens per second)
0.02.712.071 I llama_perf_context_print:       total time =    2249.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.637 I build: 4303 (4b4d92b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.831 I main: llama backend init
0.00.000.838 I main: load the model and apply lora adapter, if any
0.00.021.094 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.105 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.113 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.118 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.119 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.123 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.124 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.125 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.126 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.126 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.127 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.131 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.132 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.132 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.134 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.134 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.275 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.447 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.289 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.295 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.296 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.296 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.297 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.298 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.299 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.302 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.302 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.304 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.304 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.306 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.309 I llama_model_loader: - type  f32:   37 tensors
0.00.131.309 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.984 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.807 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.379 I llm_load_vocab: special tokens cache size = 5
0.00.272.317 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.334 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.335 I llm_load_print_meta: arch             = gemma
0.00.272.335 I llm_load_print_meta: vocab type       = SPM
0.00.272.336 I llm_load_print_meta: n_vocab          = 256000
0.00.272.336 I llm_load_print_meta: n_merges         = 0
0.00.272.337 I llm_load_print_meta: vocab_only       = 0
0.00.272.337 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.337 I llm_load_print_meta: n_embd           = 2048
0.00.272.338 I llm_load_print_meta: n_layer          = 18
0.00.272.349 I llm_load_print_meta: n_head           = 8
0.00.272.350 I llm_load_print_meta: n_head_kv        = 1
0.00.272.351 I llm_load_print_meta: n_rot            = 256
0.00.272.351 I llm_load_print_meta: n_swa            = 0
0.00.272.351 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.352 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.353 I llm_load_print_meta: n_gqa            = 8
0.00.272.354 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.355 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.356 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.357 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.358 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.358 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.358 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.360 I llm_load_print_meta: n_ff             = 16384
0.00.272.361 I llm_load_print_meta: n_expert         = 0
0.00.272.361 I llm_load_print_meta: n_expert_used    = 0
0.00.272.361 I llm_load_print_meta: causal attn      = 1
0.00.272.361 I llm_load_print_meta: pooling type     = 0
0.00.272.362 I llm_load_print_meta: rope type        = 2
0.00.272.363 I llm_load_print_meta: rope scaling     = linear
0.00.272.364 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.364 I llm_load_print_meta: freq_scale_train = 1
0.00.272.365 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.365 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.366 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.366 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.366 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.367 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.367 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.367 I llm_load_print_meta: model type       = 2B
0.00.272.368 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.370 I llm_load_print_meta: model params     = 2.51 B
0.00.272.370 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.371 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.371 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.372 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.372 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.372 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.372 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.374 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.374 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.375 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.375 I llm_load_print_meta: max token length = 93
0.00.343.344 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.343.351 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.348.424 I llama_new_context_with_model: n_seq_max     = 1
0.00.348.430 I llama_new_context_with_model: n_ctx         = 4096
0.00.348.431 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.348.431 I llama_new_context_with_model: n_batch       = 2048
0.00.348.432 I llama_new_context_with_model: n_ubatch      = 512
0.00.348.432 I llama_new_context_with_model: flash_attn    = 0
0.00.348.434 I llama_new_context_with_model: freq_base     = 10000.0
0.00.348.435 I llama_new_context_with_model: freq_scale    = 1
0.00.348.436 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.646 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.660 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.761 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.123 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.129 I llama_new_context_with_model: graph nodes  = 601
0.00.364.129 I llama_new_context_with_model: graph splits = 1
0.00.364.131 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.183 I main: llama threadpool init, n_threads = 4
0.00.475.200 I 
0.00.475.273 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.475.277 I 
0.00.475.319 I sampler seed: 377771317
0.00.475.330 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.334 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.335 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.335 I 
 increasities. [end of text]


0.00.784.068 I llama_perf_sampler_print:    sampling time =       0.74 ms /     5 runs   (    0.15 ms per token,  6793.48 tokens per second)
0.00.784.070 I llama_perf_context_print:        load time =     474.33 ms
0.00.784.071 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.784.073 I llama_perf_context_print:        eval time =     305.51 ms /     4 runs   (   76.38 ms per token,    13.09 tokens per second)
0.00.784.073 I llama_perf_context_print:       total time =     308.89 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.138s
user	0m30.916s
sys	0m9.423s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4303 (4b4d92b0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40201.88 ms
main:    total time = 40201.88 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.172 I build: 4303 (4b4d92b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.362 I main: llama backend init
0.00.000.368 I main: load the model and apply lora adapter, if any
0.00.020.693 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.703 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.711 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.716 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.717 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.721 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.722 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.723 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.723 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.724 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.725 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.728 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.729 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.730 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.730 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.731 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.090 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.236 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.036 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.042 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.043 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.044 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.044 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.045 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.046 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.048 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.049 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.050 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.051 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.052 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.056 I llama_model_loader: - type  f32:   37 tensors
0.00.130.057 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.058 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.308 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.112 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.666 I llm_load_vocab: special tokens cache size = 5
0.00.265.274 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.289 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.290 I llm_load_print_meta: arch             = gemma
0.00.265.290 I llm_load_print_meta: vocab type       = SPM
0.00.265.291 I llm_load_print_meta: n_vocab          = 256000
0.00.265.291 I llm_load_print_meta: n_merges         = 0
0.00.265.291 I llm_load_print_meta: vocab_only       = 0
0.00.265.292 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.292 I llm_load_print_meta: n_embd           = 2048
0.00.265.292 I llm_load_print_meta: n_layer          = 18
0.00.265.305 I llm_load_print_meta: n_head           = 8
0.00.265.306 I llm_load_print_meta: n_head_kv        = 1
0.00.265.306 I llm_load_print_meta: n_rot            = 256
0.00.265.307 I llm_load_print_meta: n_swa            = 0
0.00.265.307 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.307 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.308 I llm_load_print_meta: n_gqa            = 8
0.00.265.309 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.310 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.311 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.313 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.313 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.313 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.314 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.314 I llm_load_print_meta: n_ff             = 16384
0.00.265.315 I llm_load_print_meta: n_expert         = 0
0.00.265.315 I llm_load_print_meta: n_expert_used    = 0
0.00.265.315 I llm_load_print_meta: causal attn      = 1
0.00.265.316 I llm_load_print_meta: pooling type     = 0
0.00.265.316 I llm_load_print_meta: rope type        = 2
0.00.265.316 I llm_load_print_meta: rope scaling     = linear
0.00.265.318 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.318 I llm_load_print_meta: freq_scale_train = 1
0.00.265.319 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.319 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.319 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.320 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.320 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.320 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.320 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.321 I llm_load_print_meta: model type       = 2B
0.00.265.321 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.322 I llm_load_print_meta: model params     = 2.51 B
0.00.265.323 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.323 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.324 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.324 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.324 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.325 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.325 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.325 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.325 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.326 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.326 I llm_load_print_meta: max token length = 93
0.00.325.150 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.325.156 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.325.157 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.325.157 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.325.158 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.325.159 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.330.253 I llama_new_context_with_model: n_seq_max     = 1
0.00.330.259 I llama_new_context_with_model: n_ctx         = 4096
0.00.330.260 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.330.260 I llama_new_context_with_model: n_batch       = 2048
0.00.330.260 I llama_new_context_with_model: n_ubatch      = 512
0.00.330.261 I llama_new_context_with_model: flash_attn    = 0
0.00.330.263 I llama_new_context_with_model: freq_base     = 10000.0
0.00.330.264 I llama_new_context_with_model: freq_scale    = 1
0.00.330.264 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.923 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.344.939 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.345.030 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.346.282 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.346.288 I llama_new_context_with_model: graph nodes  = 601
0.00.346.288 I llama_new_context_with_model: graph splits = 1
0.00.346.290 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.635 I main: llama threadpool init, n_threads = 4
0.00.421.650 I 
0.00.421.723 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.421.726 I 
0.00.421.768 I sampler seed: 3757331620
0.00.421.781 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.783 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.421.793 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.421.795 I 
 increasities and have a child. [end of text]


0.00.821.603 I llama_perf_sampler_print:    sampling time =       1.42 ms /     9 runs   (    0.16 ms per token,  6351.45 tokens per second)
0.00.821.605 I llama_perf_context_print:        load time =     421.25 ms
0.00.821.606 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.821.608 I llama_perf_context_print:        eval time =     393.88 ms /     8 runs   (   49.23 ms per token,    20.31 tokens per second)
0.00.821.608 I llama_perf_context_print:       total time =     399.97 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4303 (4b4d92b0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40181.49 ms
main:    total time = 40181.49 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.574 I build: 4303 (4b4d92b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.789 I main: llama backend init
0.00.000.796 I main: load the model and apply lora adapter, if any
0.00.021.532 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.549 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.557 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.558 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.562 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.563 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.564 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.564 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.565 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.566 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.570 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.571 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.572 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.572 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.573 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.544 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.392 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.205 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.212 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.212 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.213 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.213 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.214 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.215 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.218 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.220 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.223 I llama_model_loader: - type  f32:   37 tensors
0.00.132.224 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.225 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.849 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.941 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.602 I llm_load_vocab: special tokens cache size = 5
0.00.269.430 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.447 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.447 I llm_load_print_meta: arch             = gemma
0.00.269.448 I llm_load_print_meta: vocab type       = SPM
0.00.269.449 I llm_load_print_meta: n_vocab          = 256000
0.00.269.449 I llm_load_print_meta: n_merges         = 0
0.00.269.449 I llm_load_print_meta: vocab_only       = 0
0.00.269.450 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.450 I llm_load_print_meta: n_embd           = 2048
0.00.269.451 I llm_load_print_meta: n_layer          = 18
0.00.269.462 I llm_load_print_meta: n_head           = 8
0.00.269.463 I llm_load_print_meta: n_head_kv        = 1
0.00.269.464 I llm_load_print_meta: n_rot            = 256
0.00.269.464 I llm_load_print_meta: n_swa            = 0
0.00.269.464 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.465 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.465 I llm_load_print_meta: n_gqa            = 8
0.00.269.466 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.467 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.468 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.469 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.470 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.471 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.471 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.472 I llm_load_print_meta: n_ff             = 16384
0.00.269.472 I llm_load_print_meta: n_expert         = 0
0.00.269.473 I llm_load_print_meta: n_expert_used    = 0
0.00.269.473 I llm_load_print_meta: causal attn      = 1
0.00.269.473 I llm_load_print_meta: pooling type     = 0
0.00.269.473 I llm_load_print_meta: rope type        = 2
0.00.269.474 I llm_load_print_meta: rope scaling     = linear
0.00.269.476 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.477 I llm_load_print_meta: freq_scale_train = 1
0.00.269.477 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.478 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.478 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.478 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.478 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.479 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.479 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.479 I llm_load_print_meta: model type       = 2B
0.00.269.480 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.481 I llm_load_print_meta: model params     = 2.51 B
0.00.269.481 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.482 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.483 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.483 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.483 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.484 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.484 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.484 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.485 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.485 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.485 I llm_load_print_meta: max token length = 93
0.00.327.499 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.332.698 I llama_new_context_with_model: n_seq_max     = 1
0.00.332.703 I llama_new_context_with_model: n_ctx         = 4096
0.00.332.703 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.332.704 I llama_new_context_with_model: n_batch       = 2048
0.00.332.704 I llama_new_context_with_model: n_ubatch      = 512
0.00.332.705 I llama_new_context_with_model: flash_attn    = 0
0.00.332.707 I llama_new_context_with_model: freq_base     = 10000.0
0.00.332.708 I llama_new_context_with_model: freq_scale    = 1
0.00.332.709 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.347.922 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.347.936 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.348.026 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.246 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.349.252 I llama_new_context_with_model: graph nodes  = 601
0.00.349.252 I llama_new_context_with_model: graph splits = 1
0.00.349.254 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.424.094 I main: llama threadpool init, n_threads = 4
0.00.424.109 I 
0.00.424.186 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.424.189 I 
0.00.424.234 I sampler seed: 2690156402
0.00.424.246 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.424.249 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.424.249 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.424.250 I 
 squaRE, an AI language model, designed to provide comprehensive and unbiased information to users.

## Question:

Discuss the potential consequences of using AI language models

0.01.978.410 I llama_perf_sampler_print:    sampling time =       5.77 ms /    33 runs   (    0.17 ms per token,  5717.26 tokens per second)
0.01.978.412 I llama_perf_context_print:        load time =     423.28 ms
0.01.978.413 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.978.415 I llama_perf_context_print:        eval time =    1534.34 ms /    32 runs   (   47.95 ms per token,    20.86 tokens per second)
0.01.978.416 I llama_perf_context_print:       total time =    1554.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m25.966s
user	10m18.953s
sys	0m6.788s
