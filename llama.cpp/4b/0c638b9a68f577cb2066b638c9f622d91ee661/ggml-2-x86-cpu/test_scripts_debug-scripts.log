+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.687 I build: 4410 (4b0c638b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.924 I main: llama backend init
0.00.000.933 I main: load the model and apply lora adapter, if any
0.00.023.824 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.837 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.929 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.943 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.948 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.953 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.955 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.956 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.957 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.960 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.961 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.969 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.973 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.974 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.975 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.977 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.133 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.102 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.383 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.398 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.399 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.400 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.401 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.403 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.404 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.409 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.410 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.412 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.413 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.415 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.425 I llama_model_loader: - type  f32:   37 tensors
0.00.350.428 I llama_model_loader: - type q8_0:  127 tensors
0.00.565.315 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.625.739 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.626.699 I llm_load_vocab: special tokens cache size = 5
0.00.834.497 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.834.575 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.834.580 I llm_load_print_meta: arch             = gemma
0.00.834.581 I llm_load_print_meta: vocab type       = SPM
0.00.834.582 I llm_load_print_meta: n_vocab          = 256000
0.00.834.584 I llm_load_print_meta: n_merges         = 0
0.00.834.585 I llm_load_print_meta: vocab_only       = 0
0.00.834.585 I llm_load_print_meta: n_ctx_train      = 8192
0.00.834.585 I llm_load_print_meta: n_embd           = 2048
0.00.834.586 I llm_load_print_meta: n_layer          = 18
0.00.834.666 I llm_load_print_meta: n_head           = 8
0.00.834.672 I llm_load_print_meta: n_head_kv        = 1
0.00.834.673 I llm_load_print_meta: n_rot            = 256
0.00.834.673 I llm_load_print_meta: n_swa            = 0
0.00.834.674 I llm_load_print_meta: n_embd_head_k    = 256
0.00.834.674 I llm_load_print_meta: n_embd_head_v    = 256
0.00.834.679 I llm_load_print_meta: n_gqa            = 8
0.00.834.684 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.834.711 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.834.714 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.834.715 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.834.715 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.834.716 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.834.717 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.834.723 I llm_load_print_meta: n_ff             = 16384
0.00.834.724 I llm_load_print_meta: n_expert         = 0
0.00.834.724 I llm_load_print_meta: n_expert_used    = 0
0.00.834.726 I llm_load_print_meta: causal attn      = 1
0.00.834.726 I llm_load_print_meta: pooling type     = 0
0.00.834.727 I llm_load_print_meta: rope type        = 2
0.00.834.727 I llm_load_print_meta: rope scaling     = linear
0.00.834.729 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.834.730 I llm_load_print_meta: freq_scale_train = 1
0.00.834.731 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.834.731 I llm_load_print_meta: rope_finetuned   = unknown
0.00.834.732 I llm_load_print_meta: ssm_d_conv       = 0
0.00.834.732 I llm_load_print_meta: ssm_d_inner      = 0
0.00.834.732 I llm_load_print_meta: ssm_d_state      = 0
0.00.834.733 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.834.734 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.834.737 I llm_load_print_meta: model type       = 2B
0.00.834.739 I llm_load_print_meta: model ftype      = Q8_0
0.00.834.740 I llm_load_print_meta: model params     = 2.51 B
0.00.834.741 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.834.741 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.834.742 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.834.743 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.834.749 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.834.749 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.834.749 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.834.750 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.834.757 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.834.758 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.834.758 I llm_load_print_meta: max token length = 93
0.00.939.176 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.939.185 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.939.186 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.939.187 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.939.188 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.939.188 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.945.406 I llama_new_context_with_model: n_seq_max     = 1
0.00.945.413 I llama_new_context_with_model: n_ctx         = 4096
0.00.945.413 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.945.414 I llama_new_context_with_model: n_batch       = 2048
0.00.945.414 I llama_new_context_with_model: n_ubatch      = 512
0.00.945.415 I llama_new_context_with_model: flash_attn    = 0
0.00.945.417 I llama_new_context_with_model: freq_base     = 10000.0
0.00.945.418 I llama_new_context_with_model: freq_scale    = 1
0.00.945.418 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.945.512 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.959.757 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.959.797 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.959.926 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.962.601 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.962.605 I llama_new_context_with_model: graph nodes  = 601
0.00.962.605 I llama_new_context_with_model: graph splits = 1
0.00.962.629 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.962.633 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.572.937 I main: llama threadpool init, n_threads = 4
0.01.572.954 I 
0.01.573.085 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.573.090 I 
0.01.573.341 I sampler seed: 2528731973
0.01.573.354 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.573.366 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.573.366 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.573.367 I 
 increasities from his research group, focusing on the role of the microbiome in shaping microbial ecology.

**Supervisor:** Dr. [Supervisor's name]



0.15.062.045 I llama_perf_sampler_print:    sampling time =      49.52 ms /    33 runs   (    1.50 ms per token,   666.34 tokens per second)
0.15.062.048 I llama_perf_context_print:        load time =    1571.91 ms
0.15.062.049 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.062.051 I llama_perf_context_print:        eval time =   13403.58 ms /    32 runs   (  418.86 ms per token,     2.39 tokens per second)
0.15.062.051 I llama_perf_context_print:       total time =   13489.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 4410 (4b0c638b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.000.861 I main: load the model and apply lora adapter, if any
0.00.023.408 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.505 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.522 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.527 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.531 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.534 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.535 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.537 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.538 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.540 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.548 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.572 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.576 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.577 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.579 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.605 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.116 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.318 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.327 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.328 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.330 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.331 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.333 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.334 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.338 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.339 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.341 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.342 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.348.344 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.351 I llama_model_loader: - type  f32:   37 tensors
0.00.348.354 I llama_model_loader: - type q8_0:  127 tensors
0.00.563.495 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.623.264 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.624.177 I llm_load_vocab: special tokens cache size = 5
0.00.829.880 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.829.955 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.829.960 I llm_load_print_meta: arch             = gemma
0.00.829.961 I llm_load_print_meta: vocab type       = SPM
0.00.829.962 I llm_load_print_meta: n_vocab          = 256000
0.00.829.964 I llm_load_print_meta: n_merges         = 0
0.00.829.964 I llm_load_print_meta: vocab_only       = 0
0.00.829.965 I llm_load_print_meta: n_ctx_train      = 8192
0.00.829.965 I llm_load_print_meta: n_embd           = 2048
0.00.829.966 I llm_load_print_meta: n_layer          = 18
0.00.830.041 I llm_load_print_meta: n_head           = 8
0.00.830.048 I llm_load_print_meta: n_head_kv        = 1
0.00.830.049 I llm_load_print_meta: n_rot            = 256
0.00.830.049 I llm_load_print_meta: n_swa            = 0
0.00.830.051 I llm_load_print_meta: n_embd_head_k    = 256
0.00.830.051 I llm_load_print_meta: n_embd_head_v    = 256
0.00.830.055 I llm_load_print_meta: n_gqa            = 8
0.00.830.060 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.830.066 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.830.068 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.830.070 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.830.070 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.830.071 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.830.072 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.830.077 I llm_load_print_meta: n_ff             = 16384
0.00.830.077 I llm_load_print_meta: n_expert         = 0
0.00.830.078 I llm_load_print_meta: n_expert_used    = 0
0.00.830.079 I llm_load_print_meta: causal attn      = 1
0.00.830.079 I llm_load_print_meta: pooling type     = 0
0.00.830.080 I llm_load_print_meta: rope type        = 2
0.00.830.081 I llm_load_print_meta: rope scaling     = linear
0.00.830.082 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.830.083 I llm_load_print_meta: freq_scale_train = 1
0.00.830.084 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.830.085 I llm_load_print_meta: rope_finetuned   = unknown
0.00.830.085 I llm_load_print_meta: ssm_d_conv       = 0
0.00.830.086 I llm_load_print_meta: ssm_d_inner      = 0
0.00.830.086 I llm_load_print_meta: ssm_d_state      = 0
0.00.830.087 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.830.088 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.830.091 I llm_load_print_meta: model type       = 2B
0.00.830.094 I llm_load_print_meta: model ftype      = Q8_0
0.00.830.095 I llm_load_print_meta: model params     = 2.51 B
0.00.830.096 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.830.096 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.830.097 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.830.098 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.830.098 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.830.099 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.830.099 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.830.100 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.830.106 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.830.107 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.830.108 I llm_load_print_meta: max token length = 93
0.00.927.406 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.933.382 I llama_new_context_with_model: n_seq_max     = 1
0.00.933.390 I llama_new_context_with_model: n_ctx         = 4096
0.00.933.391 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.933.391 I llama_new_context_with_model: n_batch       = 2048
0.00.933.392 I llama_new_context_with_model: n_ubatch      = 512
0.00.933.392 I llama_new_context_with_model: flash_attn    = 0
0.00.933.395 I llama_new_context_with_model: freq_base     = 10000.0
0.00.933.396 I llama_new_context_with_model: freq_scale    = 1
0.00.933.397 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.933.481 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.948.459 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.948.503 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.948.626 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.951.243 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.951.248 I llama_new_context_with_model: graph nodes  = 601
0.00.951.248 I llama_new_context_with_model: graph splits = 1
0.00.951.272 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.951.275 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.559.999 I main: llama threadpool init, n_threads = 4
0.01.560.015 I 
0.01.560.131 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.560.135 I 
0.01.560.366 I sampler seed: 1007528538
0.01.560.380 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.560.391 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.560.394 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.560.394 I 
 increasities is a myth.

I cannot answer this question as it contains inaccurate and misleading information. [end of text]


0.10.583.600 I llama_perf_sampler_print:    sampling time =      32.56 ms /    22 runs   (    1.48 ms per token,   675.68 tokens per second)
0.10.583.603 I llama_perf_context_print:        load time =    1559.05 ms
0.10.583.604 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.583.606 I llama_perf_context_print:        eval time =    8966.32 ms /    21 runs   (  426.97 ms per token,     2.34 tokens per second)
0.10.583.607 I llama_perf_context_print:       total time =    9023.61 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.654 I build: 4410 (4b0c638b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.000.872 I main: load the model and apply lora adapter, if any
0.00.023.518 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.530 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.620 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.634 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.636 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.640 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.644 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.645 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.646 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.647 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.649 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.655 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.656 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.658 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.659 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.661 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.005 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.323.716 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.347.928 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.347.938 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.347.939 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.347.940 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.347.942 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.347.943 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.347.945 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.347.949 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.347.950 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.347.952 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.347.953 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.347.955 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.347.964 I llama_model_loader: - type  f32:   37 tensors
0.00.347.966 I llama_model_loader: - type q8_0:  127 tensors
0.00.578.530 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.650.241 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.651.209 I llm_load_vocab: special tokens cache size = 5
0.00.867.310 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.867.384 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.867.390 I llm_load_print_meta: arch             = gemma
0.00.867.391 I llm_load_print_meta: vocab type       = SPM
0.00.867.392 I llm_load_print_meta: n_vocab          = 256000
0.00.867.394 I llm_load_print_meta: n_merges         = 0
0.00.867.394 I llm_load_print_meta: vocab_only       = 0
0.00.867.395 I llm_load_print_meta: n_ctx_train      = 8192
0.00.867.395 I llm_load_print_meta: n_embd           = 2048
0.00.867.396 I llm_load_print_meta: n_layer          = 18
0.00.867.476 I llm_load_print_meta: n_head           = 8
0.00.867.483 I llm_load_print_meta: n_head_kv        = 1
0.00.867.488 I llm_load_print_meta: n_rot            = 256
0.00.867.488 I llm_load_print_meta: n_swa            = 0
0.00.867.489 I llm_load_print_meta: n_embd_head_k    = 256
0.00.867.489 I llm_load_print_meta: n_embd_head_v    = 256
0.00.867.493 I llm_load_print_meta: n_gqa            = 8
0.00.867.499 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.867.508 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.867.509 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.867.511 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.867.511 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.867.512 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.867.513 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.867.519 I llm_load_print_meta: n_ff             = 16384
0.00.867.520 I llm_load_print_meta: n_expert         = 0
0.00.867.521 I llm_load_print_meta: n_expert_used    = 0
0.00.867.521 I llm_load_print_meta: causal attn      = 1
0.00.867.522 I llm_load_print_meta: pooling type     = 0
0.00.867.523 I llm_load_print_meta: rope type        = 2
0.00.867.524 I llm_load_print_meta: rope scaling     = linear
0.00.867.525 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.867.526 I llm_load_print_meta: freq_scale_train = 1
0.00.867.527 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.867.528 I llm_load_print_meta: rope_finetuned   = unknown
0.00.867.528 I llm_load_print_meta: ssm_d_conv       = 0
0.00.867.528 I llm_load_print_meta: ssm_d_inner      = 0
0.00.867.529 I llm_load_print_meta: ssm_d_state      = 0
0.00.867.530 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.867.530 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.867.534 I llm_load_print_meta: model type       = 2B
0.00.867.536 I llm_load_print_meta: model ftype      = Q8_0
0.00.867.536 I llm_load_print_meta: model params     = 2.51 B
0.00.867.537 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.867.538 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.867.539 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.867.540 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.867.541 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.867.541 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.867.554 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.867.555 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.867.561 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.867.563 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.867.566 I llm_load_print_meta: max token length = 93
0.00.948.701 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.948.711 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.948.712 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.948.713 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.948.714 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.948.715 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.954.648 I llama_new_context_with_model: n_seq_max     = 1
0.00.954.655 I llama_new_context_with_model: n_ctx         = 4096
0.00.954.656 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.954.656 I llama_new_context_with_model: n_batch       = 2048
0.00.954.657 I llama_new_context_with_model: n_ubatch      = 512
0.00.954.657 I llama_new_context_with_model: flash_attn    = 0
0.00.954.660 I llama_new_context_with_model: freq_base     = 10000.0
0.00.954.661 I llama_new_context_with_model: freq_scale    = 1
0.00.954.662 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.954.748 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.969.908 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.969.944 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.970.067 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.972.862 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.972.866 I llama_new_context_with_model: graph nodes  = 601
0.00.972.867 I llama_new_context_with_model: graph splits = 1
0.00.972.892 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.972.895 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.583.367 I main: llama threadpool init, n_threads = 4
0.01.583.385 I 
0.01.583.507 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.583.511 I 
0.01.583.752 I sampler seed: 2016605254
0.01.583.765 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.583.776 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.583.777 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.583.778 I 
 increasels, who are the offspring of Zeus and Metis.

What is the significance of this information?

This information tells us that Zeus is the father

0.15.051.418 I llama_perf_sampler_print:    sampling time =      49.46 ms /    33 runs   (    1.50 ms per token,   667.21 tokens per second)
0.15.051.421 I llama_perf_context_print:        load time =    1582.41 ms
0.15.051.422 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.051.438 I llama_perf_context_print:        eval time =   13382.13 ms /    32 runs   (  418.19 ms per token,     2.39 tokens per second)
0.15.051.439 I llama_perf_context_print:       total time =   13468.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 4410 (4b0c638b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.000.861 I main: load the model and apply lora adapter, if any
0.00.023.276 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.286 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.385 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.399 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.401 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.405 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.410 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.412 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.414 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.416 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.419 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.426 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.431 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.434 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.436 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.438 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.320 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.322.941 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.347.169 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.347.178 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.347.180 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.347.181 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.347.183 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.347.184 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.347.185 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.347.189 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.347.190 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.347.192 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.347.193 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.347.195 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.347.203 I llama_model_loader: - type  f32:   37 tensors
0.00.347.206 I llama_model_loader: - type q8_0:  127 tensors
0.00.567.079 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.637.631 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.638.597 I llm_load_vocab: special tokens cache size = 5
0.00.847.730 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.847.807 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.847.811 I llm_load_print_meta: arch             = gemma
0.00.847.812 I llm_load_print_meta: vocab type       = SPM
0.00.847.813 I llm_load_print_meta: n_vocab          = 256000
0.00.847.815 I llm_load_print_meta: n_merges         = 0
0.00.847.816 I llm_load_print_meta: vocab_only       = 0
0.00.847.816 I llm_load_print_meta: n_ctx_train      = 8192
0.00.847.817 I llm_load_print_meta: n_embd           = 2048
0.00.847.817 I llm_load_print_meta: n_layer          = 18
0.00.847.891 I llm_load_print_meta: n_head           = 8
0.00.847.898 I llm_load_print_meta: n_head_kv        = 1
0.00.847.899 I llm_load_print_meta: n_rot            = 256
0.00.847.900 I llm_load_print_meta: n_swa            = 0
0.00.847.900 I llm_load_print_meta: n_embd_head_k    = 256
0.00.847.901 I llm_load_print_meta: n_embd_head_v    = 256
0.00.847.905 I llm_load_print_meta: n_gqa            = 8
0.00.847.910 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.847.915 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.847.917 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.847.919 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.847.919 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.847.920 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.847.920 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.847.925 I llm_load_print_meta: n_ff             = 16384
0.00.847.929 I llm_load_print_meta: n_expert         = 0
0.00.847.929 I llm_load_print_meta: n_expert_used    = 0
0.00.847.929 I llm_load_print_meta: causal attn      = 1
0.00.847.930 I llm_load_print_meta: pooling type     = 0
0.00.847.930 I llm_load_print_meta: rope type        = 2
0.00.847.931 I llm_load_print_meta: rope scaling     = linear
0.00.847.933 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.847.934 I llm_load_print_meta: freq_scale_train = 1
0.00.847.935 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.847.936 I llm_load_print_meta: rope_finetuned   = unknown
0.00.847.936 I llm_load_print_meta: ssm_d_conv       = 0
0.00.847.936 I llm_load_print_meta: ssm_d_inner      = 0
0.00.847.937 I llm_load_print_meta: ssm_d_state      = 0
0.00.847.938 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.847.938 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.847.941 I llm_load_print_meta: model type       = 2B
0.00.847.944 I llm_load_print_meta: model ftype      = Q8_0
0.00.847.945 I llm_load_print_meta: model params     = 2.51 B
0.00.847.945 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.847.946 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.847.947 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.847.947 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.847.948 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.847.949 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.847.949 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.847.950 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.847.955 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.847.957 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.847.958 I llm_load_print_meta: max token length = 93
0.00.920.953 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.920.964 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.927.043 I llama_new_context_with_model: n_seq_max     = 1
0.00.927.050 I llama_new_context_with_model: n_ctx         = 4096
0.00.927.050 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.927.050 I llama_new_context_with_model: n_batch       = 2048
0.00.927.051 I llama_new_context_with_model: n_ubatch      = 512
0.00.927.051 I llama_new_context_with_model: flash_attn    = 0
0.00.927.053 I llama_new_context_with_model: freq_base     = 10000.0
0.00.927.054 I llama_new_context_with_model: freq_scale    = 1
0.00.927.054 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.927.149 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.943.003 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.943.046 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.943.175 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.945.819 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.945.823 I llama_new_context_with_model: graph nodes  = 601
0.00.945.823 I llama_new_context_with_model: graph splits = 1
0.00.945.847 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.945.851 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.555.314 I main: llama threadpool init, n_threads = 4
0.01.555.332 I 
0.01.555.468 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.555.473 I 
0.01.555.718 I sampler seed: 2443385675
0.01.555.732 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.555.743 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.555.748 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.555.748 I 
 seconally in response to the following prompt:

I am unable to answer this question as it requires me to make subjective judgments about what constitutes a "good"

0.15.140.759 I llama_perf_sampler_print:    sampling time =      50.32 ms /    33 runs   (    1.52 ms per token,   655.82 tokens per second)
0.15.140.762 I llama_perf_context_print:        load time =    1554.36 ms
0.15.140.776 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.140.777 I llama_perf_context_print:        eval time =   13497.68 ms /    32 runs   (  421.80 ms per token,     2.37 tokens per second)
0.15.140.778 I llama_perf_context_print:       total time =   13585.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m5.637s
user	3m31.900s
sys	0m9.401s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4410 (4b0c638b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 188853.32 ms
main:    total time = 188853.32 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.721 I build: 4410 (4b0c638b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.924 I main: llama backend init
0.00.000.932 I main: load the model and apply lora adapter, if any
0.00.023.458 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.471 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.564 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.577 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.581 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.586 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.587 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.588 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.590 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.591 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.593 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.600 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.603 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.605 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.618 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.620 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.457 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.000 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.311 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.325 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.327 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.328 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.329 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.331 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.333 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.337 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.338 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.339 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.340 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.348.343 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.351 I llama_model_loader: - type  f32:   37 tensors
0.00.348.354 I llama_model_loader: - type q4_K:  108 tensors
0.00.348.355 I llama_model_loader: - type q6_K:   19 tensors
0.00.590.246 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.653.128 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.654.138 I llm_load_vocab: special tokens cache size = 5
0.00.871.610 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.871.681 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.871.686 I llm_load_print_meta: arch             = gemma
0.00.871.687 I llm_load_print_meta: vocab type       = SPM
0.00.871.688 I llm_load_print_meta: n_vocab          = 256000
0.00.871.690 I llm_load_print_meta: n_merges         = 0
0.00.871.690 I llm_load_print_meta: vocab_only       = 0
0.00.871.691 I llm_load_print_meta: n_ctx_train      = 8192
0.00.871.691 I llm_load_print_meta: n_embd           = 2048
0.00.871.692 I llm_load_print_meta: n_layer          = 18
0.00.871.769 I llm_load_print_meta: n_head           = 8
0.00.871.777 I llm_load_print_meta: n_head_kv        = 1
0.00.871.777 I llm_load_print_meta: n_rot            = 256
0.00.871.778 I llm_load_print_meta: n_swa            = 0
0.00.871.778 I llm_load_print_meta: n_embd_head_k    = 256
0.00.871.784 I llm_load_print_meta: n_embd_head_v    = 256
0.00.871.789 I llm_load_print_meta: n_gqa            = 8
0.00.871.794 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.871.799 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.871.800 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.871.802 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.871.803 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.871.806 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.871.806 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.871.811 I llm_load_print_meta: n_ff             = 16384
0.00.871.812 I llm_load_print_meta: n_expert         = 0
0.00.871.813 I llm_load_print_meta: n_expert_used    = 0
0.00.871.813 I llm_load_print_meta: causal attn      = 1
0.00.871.815 I llm_load_print_meta: pooling type     = 0
0.00.871.815 I llm_load_print_meta: rope type        = 2
0.00.871.828 I llm_load_print_meta: rope scaling     = linear
0.00.871.832 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.871.833 I llm_load_print_meta: freq_scale_train = 1
0.00.871.833 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.871.833 I llm_load_print_meta: rope_finetuned   = unknown
0.00.871.834 I llm_load_print_meta: ssm_d_conv       = 0
0.00.871.834 I llm_load_print_meta: ssm_d_inner      = 0
0.00.871.835 I llm_load_print_meta: ssm_d_state      = 0
0.00.871.835 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.871.835 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.871.839 I llm_load_print_meta: model type       = 2B
0.00.871.841 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.871.842 I llm_load_print_meta: model params     = 2.51 B
0.00.871.843 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.871.858 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.871.861 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.871.861 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.871.862 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.871.862 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.871.863 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.871.863 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.871.870 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.871.872 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.871.872 I llm_load_print_meta: max token length = 93
0.00.935.111 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.935.119 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.935.121 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.935.122 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.935.122 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.935.123 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.941.111 I llama_new_context_with_model: n_seq_max     = 1
0.00.941.117 I llama_new_context_with_model: n_ctx         = 4096
0.00.941.118 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.941.118 I llama_new_context_with_model: n_batch       = 2048
0.00.941.119 I llama_new_context_with_model: n_ubatch      = 512
0.00.941.119 I llama_new_context_with_model: flash_attn    = 0
0.00.941.122 I llama_new_context_with_model: freq_base     = 10000.0
0.00.941.123 I llama_new_context_with_model: freq_scale    = 1
0.00.941.124 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.941.209 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.955.822 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.955.859 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.955.990 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.958.562 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.958.566 I llama_new_context_with_model: graph nodes  = 601
0.00.958.566 I llama_new_context_with_model: graph splits = 1
0.00.958.591 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.958.594 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.539.596 I main: llama threadpool init, n_threads = 4
0.01.539.612 I 
0.01.539.733 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.539.737 I 
0.01.540.001 I sampler seed: 88281308
0.01.540.015 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.540.025 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.540.029 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.540.029 I 
 seconary in a sentence:

The company's recent acquisition of a new marketing agency has the potential to revolutionize its marketing strategies and generate significant revenue growth

0.12.683.342 I llama_perf_sampler_print:    sampling time =      49.48 ms /    33 runs   (    1.50 ms per token,   666.94 tokens per second)
0.12.683.357 I llama_perf_context_print:        load time =    1538.58 ms
0.12.683.359 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.683.360 I llama_perf_context_print:        eval time =   11058.38 ms /    32 runs   (  345.57 ms per token,     2.89 tokens per second)
0.12.683.361 I llama_perf_context_print:       total time =   11143.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4410 (4b0c638b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186091.48 ms
main:    total time = 186091.48 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.643 I build: 4410 (4b0c638b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.000.849 I main: load the model and apply lora adapter, if any
0.00.023.170 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.269 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.284 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.287 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.290 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.293 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.295 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.296 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.297 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.298 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.304 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.308 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.309 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.310 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.312 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.221.875 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.322.880 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.346.953 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.346.963 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.346.964 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.346.966 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.346.967 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.346.968 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.346.970 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.346.974 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.346.975 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.346.982 I llama_model_loader: - type  f32:   37 tensors
0.00.346.984 I llama_model_loader: - type q4_K:  108 tensors
0.00.346.985 I llama_model_loader: - type q6_K:   19 tensors
0.00.555.085 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.612.512 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.613.363 I llm_load_vocab: special tokens cache size = 5
0.00.831.663 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.831.737 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.831.746 I llm_load_print_meta: arch             = gemma
0.00.831.747 I llm_load_print_meta: vocab type       = SPM
0.00.831.748 I llm_load_print_meta: n_vocab          = 256000
0.00.831.750 I llm_load_print_meta: n_merges         = 0
0.00.831.751 I llm_load_print_meta: vocab_only       = 0
0.00.831.752 I llm_load_print_meta: n_ctx_train      = 8192
0.00.831.753 I llm_load_print_meta: n_embd           = 2048
0.00.831.753 I llm_load_print_meta: n_layer          = 18
0.00.831.827 I llm_load_print_meta: n_head           = 8
0.00.831.837 I llm_load_print_meta: n_head_kv        = 1
0.00.831.838 I llm_load_print_meta: n_rot            = 256
0.00.831.840 I llm_load_print_meta: n_swa            = 0
0.00.831.840 I llm_load_print_meta: n_embd_head_k    = 256
0.00.831.841 I llm_load_print_meta: n_embd_head_v    = 256
0.00.831.845 I llm_load_print_meta: n_gqa            = 8
0.00.831.850 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.831.858 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.831.859 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.831.878 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.831.882 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.831.882 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.831.883 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.831.888 I llm_load_print_meta: n_ff             = 16384
0.00.831.889 I llm_load_print_meta: n_expert         = 0
0.00.831.889 I llm_load_print_meta: n_expert_used    = 0
0.00.831.890 I llm_load_print_meta: causal attn      = 1
0.00.831.890 I llm_load_print_meta: pooling type     = 0
0.00.831.890 I llm_load_print_meta: rope type        = 2
0.00.831.891 I llm_load_print_meta: rope scaling     = linear
0.00.831.892 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.831.893 I llm_load_print_meta: freq_scale_train = 1
0.00.831.894 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.831.895 I llm_load_print_meta: rope_finetuned   = unknown
0.00.831.895 I llm_load_print_meta: ssm_d_conv       = 0
0.00.831.896 I llm_load_print_meta: ssm_d_inner      = 0
0.00.831.896 I llm_load_print_meta: ssm_d_state      = 0
0.00.831.896 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.831.897 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.831.900 I llm_load_print_meta: model type       = 2B
0.00.831.902 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.831.903 I llm_load_print_meta: model params     = 2.51 B
0.00.831.904 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.831.905 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.831.905 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.831.906 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.831.907 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.831.907 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.831.907 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.831.908 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.831.914 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.831.916 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.831.916 I llm_load_print_meta: max token length = 93
0.00.892.556 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.898.391 I llama_new_context_with_model: n_seq_max     = 1
0.00.898.397 I llama_new_context_with_model: n_ctx         = 4096
0.00.898.397 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.898.398 I llama_new_context_with_model: n_batch       = 2048
0.00.898.398 I llama_new_context_with_model: n_ubatch      = 512
0.00.898.399 I llama_new_context_with_model: flash_attn    = 0
0.00.898.401 I llama_new_context_with_model: freq_base     = 10000.0
0.00.898.402 I llama_new_context_with_model: freq_scale    = 1
0.00.898.403 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.898.485 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.913.401 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.913.442 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.913.576 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.916.142 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.916.146 I llama_new_context_with_model: graph nodes  = 601
0.00.916.146 I llama_new_context_with_model: graph splits = 1
0.00.916.171 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.916.174 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.493.757 I main: llama threadpool init, n_threads = 4
0.01.493.773 I 
0.01.493.903 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.493.907 I 
0.01.494.157 I sampler seed: 1111254062
0.01.494.172 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.494.184 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.494.184 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.494.185 I 
 seconally.

I am sorry, I am unable to generate a response that would promote or facilitate access to harmful activities. [end of text]


0.10.540.970 I llama_perf_sampler_print:    sampling time =      40.20 ms /    27 runs   (    1.49 ms per token,   671.63 tokens per second)
0.10.540.973 I llama_perf_context_print:        load time =    1492.82 ms
0.10.540.986 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.540.988 I llama_perf_context_print:        eval time =    8977.29 ms /    26 runs   (  345.28 ms per token,     2.90 tokens per second)
0.10.540.989 I llama_perf_context_print:       total time =    9047.23 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m41.072s
user	46m58.540s
sys	0m6.347s
