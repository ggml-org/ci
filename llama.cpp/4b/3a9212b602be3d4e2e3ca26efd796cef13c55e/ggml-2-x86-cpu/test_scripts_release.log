+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.568 I build: 4064 (4b3a9212) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.764 I main: llama backend init
0.00.000.900 I main: load the model and apply lora adapter, if any
0.00.021.745 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.757 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.764 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.770 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.771 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.776 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.776 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.777 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.778 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.778 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.778 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.783 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.784 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.785 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.785 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.786 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.485 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.822 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.683 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.690 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.691 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.691 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.692 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.693 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.694 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.697 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.697 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.698 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.699 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.699 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.703 I llama_model_loader: - type  f32:   37 tensors
0.00.132.704 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.735 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.146 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.714 I llm_load_vocab: special tokens cache size = 5
0.00.270.224 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.241 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.241 I llm_load_print_meta: arch             = gemma
0.00.270.242 I llm_load_print_meta: vocab type       = SPM
0.00.270.242 I llm_load_print_meta: n_vocab          = 256000
0.00.270.243 I llm_load_print_meta: n_merges         = 0
0.00.270.243 I llm_load_print_meta: vocab_only       = 0
0.00.270.244 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.244 I llm_load_print_meta: n_embd           = 2048
0.00.270.245 I llm_load_print_meta: n_layer          = 18
0.00.270.256 I llm_load_print_meta: n_head           = 8
0.00.270.257 I llm_load_print_meta: n_head_kv        = 1
0.00.270.258 I llm_load_print_meta: n_rot            = 256
0.00.270.258 I llm_load_print_meta: n_swa            = 0
0.00.270.258 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.258 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.259 I llm_load_print_meta: n_gqa            = 8
0.00.270.260 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.261 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.262 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.263 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.264 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.264 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.264 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.265 I llm_load_print_meta: n_ff             = 16384
0.00.270.265 I llm_load_print_meta: n_expert         = 0
0.00.270.266 I llm_load_print_meta: n_expert_used    = 0
0.00.270.266 I llm_load_print_meta: causal attn      = 1
0.00.270.266 I llm_load_print_meta: pooling type     = 0
0.00.270.267 I llm_load_print_meta: rope type        = 2
0.00.270.267 I llm_load_print_meta: rope scaling     = linear
0.00.270.268 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.269 I llm_load_print_meta: freq_scale_train = 1
0.00.270.269 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.270 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.270 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.270 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.270 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.270 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.271 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.271 I llm_load_print_meta: model type       = 2B
0.00.270.272 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.272 I llm_load_print_meta: model params     = 2.51 B
0.00.270.273 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.273 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.274 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.274 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.275 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.275 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.275 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.275 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.276 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.277 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.277 I llm_load_print_meta: max token length = 93
0.00.371.803 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.371.812 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.371.813 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.371.814 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.371.814 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.371.815 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.377.151 I llama_new_context_with_model: n_seq_max     = 1
0.00.377.158 I llama_new_context_with_model: n_ctx         = 4096
0.00.377.159 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.377.159 I llama_new_context_with_model: n_batch       = 2048
0.00.377.160 I llama_new_context_with_model: n_ubatch      = 512
0.00.377.160 I llama_new_context_with_model: flash_attn    = 0
0.00.377.162 I llama_new_context_with_model: freq_base     = 10000.0
0.00.377.163 I llama_new_context_with_model: freq_scale    = 1
0.00.377.164 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.392.662 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.392.675 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.392.767 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.393.993 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.393.999 I llama_new_context_with_model: graph nodes  = 601
0.00.394.000 I llama_new_context_with_model: graph splits = 1
0.00.394.001 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.478.334 I main: llama threadpool init, n_threads = 4
0.00.478.349 I 
0.00.478.451 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.478.454 I 
0.00.478.500 I sampler seed: 1714019990
0.00.478.510 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.478.514 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.478.515 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.478.515 I 
 increasities. [end of text]


0.00.757.272 I llama_perf_sampler_print:    sampling time =       0.59 ms /     5 runs   (    0.12 ms per token,  8431.70 tokens per second)
0.00.757.275 I llama_perf_context_print:        load time =     477.41 ms
0.00.757.276 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.757.278 I llama_perf_context_print:        eval time =     275.48 ms /     4 runs   (   68.87 ms per token,    14.52 tokens per second)
0.00.757.279 I llama_perf_context_print:       total time =     278.95 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.553 I build: 4064 (4b3a9212) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.000.885 I main: load the model and apply lora adapter, if any
0.00.021.440 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.455 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.461 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.462 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.466 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.469 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.470 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.470 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.471 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.471 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.476 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.477 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.477 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.478 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.478 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.218 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.944 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.904 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.912 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.912 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.913 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.913 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.914 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.915 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.919 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.919 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.920 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.921 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.922 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.925 I llama_model_loader: - type  f32:   37 tensors
0.00.131.927 I llama_model_loader: - type q8_0:  127 tensors
0.00.214.670 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.786 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.349 I llm_load_vocab: special tokens cache size = 5
0.00.279.944 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.962 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.962 I llm_load_print_meta: arch             = gemma
0.00.279.963 I llm_load_print_meta: vocab type       = SPM
0.00.279.964 I llm_load_print_meta: n_vocab          = 256000
0.00.279.965 I llm_load_print_meta: n_merges         = 0
0.00.279.965 I llm_load_print_meta: vocab_only       = 0
0.00.279.965 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.966 I llm_load_print_meta: n_embd           = 2048
0.00.279.966 I llm_load_print_meta: n_layer          = 18
0.00.279.977 I llm_load_print_meta: n_head           = 8
0.00.279.979 I llm_load_print_meta: n_head_kv        = 1
0.00.279.979 I llm_load_print_meta: n_rot            = 256
0.00.279.979 I llm_load_print_meta: n_swa            = 0
0.00.279.980 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.980 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.981 I llm_load_print_meta: n_gqa            = 8
0.00.279.982 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.983 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.984 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.985 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.986 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.986 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.986 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.988 I llm_load_print_meta: n_ff             = 16384
0.00.279.988 I llm_load_print_meta: n_expert         = 0
0.00.279.988 I llm_load_print_meta: n_expert_used    = 0
0.00.279.989 I llm_load_print_meta: causal attn      = 1
0.00.279.989 I llm_load_print_meta: pooling type     = 0
0.00.279.989 I llm_load_print_meta: rope type        = 2
0.00.279.990 I llm_load_print_meta: rope scaling     = linear
0.00.279.991 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.992 I llm_load_print_meta: freq_scale_train = 1
0.00.279.992 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.993 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.993 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.993 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.993 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.993 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.994 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.994 I llm_load_print_meta: model type       = 2B
0.00.279.995 I llm_load_print_meta: model ftype      = Q8_0
0.00.279.996 I llm_load_print_meta: model params     = 2.51 B
0.00.279.997 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.279.997 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.998 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.998 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.999 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.999 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.999 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.000 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.000 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.001 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.001 I llm_load_print_meta: max token length = 93
0.00.373.851 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.379.308 I llama_new_context_with_model: n_seq_max     = 1
0.00.379.314 I llama_new_context_with_model: n_ctx         = 4096
0.00.379.315 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.379.315 I llama_new_context_with_model: n_batch       = 2048
0.00.379.315 I llama_new_context_with_model: n_ubatch      = 512
0.00.379.316 I llama_new_context_with_model: flash_attn    = 0
0.00.379.318 I llama_new_context_with_model: freq_base     = 10000.0
0.00.379.319 I llama_new_context_with_model: freq_scale    = 1
0.00.379.320 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.394.950 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.394.964 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.395.055 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.396.254 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.396.261 I llama_new_context_with_model: graph nodes  = 601
0.00.396.262 I llama_new_context_with_model: graph splits = 1
0.00.396.263 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.294 I main: llama threadpool init, n_threads = 4
0.00.477.309 I 
0.00.477.388 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.477.391 I 
0.00.477.434 I sampler seed: 2247488455
0.00.477.445 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.453 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.477.456 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.477.456 I 
 increasities and other vulnerabilities that can impact the performance and reliability of a system.

**Security vulnerabilities:**

* Improper access control
* Weak encryption practices


0.02.653.346 I llama_perf_sampler_print:    sampling time =       4.79 ms /    33 runs   (    0.15 ms per token,  6886.48 tokens per second)
0.02.653.349 I llama_perf_context_print:        load time =     476.39 ms
0.02.653.351 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.653.353 I llama_perf_context_print:        eval time =    2157.44 ms /    32 runs   (   67.42 ms per token,    14.83 tokens per second)
0.02.653.353 I llama_perf_context_print:       total time =    2176.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.553 I build: 4064 (4b3a9212) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.000.880 I main: load the model and apply lora adapter, if any
0.00.021.306 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.316 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.323 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.328 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.329 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.333 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.333 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.334 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.334 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.335 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.335 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.339 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.340 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.340 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.341 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.341 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.517 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.263 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.037 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.043 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.044 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.044 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.045 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.046 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.046 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.048 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.049 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.050 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.051 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.052 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.055 I llama_model_loader: - type  f32:   37 tensors
0.00.131.056 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.978 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.729 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.194 I llm_load_vocab: special tokens cache size = 5
0.00.262.835 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.851 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.852 I llm_load_print_meta: arch             = gemma
0.00.262.853 I llm_load_print_meta: vocab type       = SPM
0.00.262.853 I llm_load_print_meta: n_vocab          = 256000
0.00.262.854 I llm_load_print_meta: n_merges         = 0
0.00.262.854 I llm_load_print_meta: vocab_only       = 0
0.00.262.854 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.855 I llm_load_print_meta: n_embd           = 2048
0.00.262.855 I llm_load_print_meta: n_layer          = 18
0.00.262.866 I llm_load_print_meta: n_head           = 8
0.00.262.867 I llm_load_print_meta: n_head_kv        = 1
0.00.262.868 I llm_load_print_meta: n_rot            = 256
0.00.262.868 I llm_load_print_meta: n_swa            = 0
0.00.262.868 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.869 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.870 I llm_load_print_meta: n_gqa            = 8
0.00.262.870 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.871 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.872 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.874 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.874 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.874 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.875 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.876 I llm_load_print_meta: n_ff             = 16384
0.00.262.876 I llm_load_print_meta: n_expert         = 0
0.00.262.876 I llm_load_print_meta: n_expert_used    = 0
0.00.262.876 I llm_load_print_meta: causal attn      = 1
0.00.262.877 I llm_load_print_meta: pooling type     = 0
0.00.262.877 I llm_load_print_meta: rope type        = 2
0.00.262.877 I llm_load_print_meta: rope scaling     = linear
0.00.262.879 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.880 I llm_load_print_meta: freq_scale_train = 1
0.00.262.880 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.881 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.881 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.882 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.882 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.882 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.882 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.883 I llm_load_print_meta: model type       = 2B
0.00.262.883 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.884 I llm_load_print_meta: model params     = 2.51 B
0.00.262.885 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.886 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.887 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.887 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.887 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.888 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.888 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.889 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.889 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.890 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.890 I llm_load_print_meta: max token length = 93
0.00.346.961 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.346.969 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.346.970 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.346.970 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.346.971 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.346.972 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.352.162 I llama_new_context_with_model: n_seq_max     = 1
0.00.352.168 I llama_new_context_with_model: n_ctx         = 4096
0.00.352.168 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.352.169 I llama_new_context_with_model: n_batch       = 2048
0.00.352.169 I llama_new_context_with_model: n_ubatch      = 512
0.00.352.169 I llama_new_context_with_model: flash_attn    = 0
0.00.352.171 I llama_new_context_with_model: freq_base     = 10000.0
0.00.352.172 I llama_new_context_with_model: freq_scale    = 1
0.00.352.173 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.368.279 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.368.294 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.368.388 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.369.615 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.369.622 I llama_new_context_with_model: graph nodes  = 601
0.00.369.622 I llama_new_context_with_model: graph splits = 1
0.00.369.624 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.455.989 I main: llama threadpool init, n_threads = 4
0.00.456.003 I 
0.00.456.077 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.456.080 I 
0.00.456.121 I sampler seed: 4198963294
0.00.456.132 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.135 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.456.137 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.456.137 I 
 increamically. I apologize for my exuberant behavior.

I am unable to answer this question because it involves inappropriate and potentially harmful behavior. [end of text]


0.02.343.617 I llama_perf_sampler_print:    sampling time =       4.17 ms /    29 runs   (    0.14 ms per token,  6961.11 tokens per second)
0.02.343.619 I llama_perf_context_print:        load time =     455.09 ms
0.02.343.620 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.343.622 I llama_perf_context_print:        eval time =    1871.72 ms /    28 runs   (   66.85 ms per token,    14.96 tokens per second)
0.02.343.622 I llama_perf_context_print:       total time =    1887.64 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.541 I build: 4064 (4b3a9212) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.772 I main: llama backend init
0.00.000.908 I main: load the model and apply lora adapter, if any
0.00.021.321 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.329 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.336 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.341 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.342 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.345 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.346 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.348 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.349 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.349 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.350 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.354 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.354 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.355 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.356 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.356 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.479 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.128.645 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.135.507 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.135.514 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.135.515 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.135.516 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.135.517 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.135.519 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.135.519 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.135.523 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.135.524 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.135.525 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.135.525 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.135.526 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.135.530 I llama_model_loader: - type  f32:   37 tensors
0.00.135.531 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.096 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.663 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.265 I llm_load_vocab: special tokens cache size = 5
0.00.273.801 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.818 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.818 I llm_load_print_meta: arch             = gemma
0.00.273.819 I llm_load_print_meta: vocab type       = SPM
0.00.273.820 I llm_load_print_meta: n_vocab          = 256000
0.00.273.820 I llm_load_print_meta: n_merges         = 0
0.00.273.820 I llm_load_print_meta: vocab_only       = 0
0.00.273.821 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.821 I llm_load_print_meta: n_embd           = 2048
0.00.273.821 I llm_load_print_meta: n_layer          = 18
0.00.273.833 I llm_load_print_meta: n_head           = 8
0.00.273.834 I llm_load_print_meta: n_head_kv        = 1
0.00.273.834 I llm_load_print_meta: n_rot            = 256
0.00.273.834 I llm_load_print_meta: n_swa            = 0
0.00.273.835 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.835 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.836 I llm_load_print_meta: n_gqa            = 8
0.00.273.837 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.838 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.839 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.841 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.841 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.841 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.842 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.842 I llm_load_print_meta: n_ff             = 16384
0.00.273.843 I llm_load_print_meta: n_expert         = 0
0.00.273.843 I llm_load_print_meta: n_expert_used    = 0
0.00.273.843 I llm_load_print_meta: causal attn      = 1
0.00.273.844 I llm_load_print_meta: pooling type     = 0
0.00.273.844 I llm_load_print_meta: rope type        = 2
0.00.273.845 I llm_load_print_meta: rope scaling     = linear
0.00.273.846 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.846 I llm_load_print_meta: freq_scale_train = 1
0.00.273.847 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.847 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.847 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.848 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.848 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.848 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.848 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.849 I llm_load_print_meta: model type       = 2B
0.00.273.849 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.850 I llm_load_print_meta: model params     = 2.51 B
0.00.273.851 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.852 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.852 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.852 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.853 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.853 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.853 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.854 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.854 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.854 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.855 I llm_load_print_meta: max token length = 93
0.00.345.818 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.345.824 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.350.945 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.953 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.953 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.953 I llama_new_context_with_model: n_batch       = 2048
0.00.350.954 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.954 I llama_new_context_with_model: flash_attn    = 0
0.00.350.956 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.957 I llama_new_context_with_model: freq_scale    = 1
0.00.350.958 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.366.047 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.366.062 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.366.156 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.367.393 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.367.400 I llama_new_context_with_model: graph nodes  = 601
0.00.367.400 I llama_new_context_with_model: graph splits = 1
0.00.367.402 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.165 I main: llama threadpool init, n_threads = 4
0.00.453.179 I 
0.00.453.257 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.453.260 I 
0.00.453.304 I sampler seed: 247972475
0.00.453.315 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.318 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.453.319 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.319 I 
 maneuvled by the Greek philosopher Plato.

**Plato's Allegory of the Cave**

Plato's Allegory of the Cave serves as a

0.02.876.463 I llama_perf_sampler_print:    sampling time =       5.33 ms /    33 runs   (    0.16 ms per token,  6190.21 tokens per second)
0.02.876.466 I llama_perf_context_print:        load time =     452.23 ms
0.02.876.467 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.876.468 I llama_perf_context_print:        eval time =    2403.44 ms /    32 runs   (   75.11 ms per token,    13.31 tokens per second)
0.02.876.469 I llama_perf_context_print:       total time =    2423.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.124s
user	0m29.860s
sys	0m9.358s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4064 (4b3a9212)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31953.20 ms
main:    total time = 31953.20 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.541 I build: 4064 (4b3a9212) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.741 I main: llama backend init
0.00.000.877 I main: load the model and apply lora adapter, if any
0.00.021.444 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.453 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.462 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.466 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.467 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.471 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.472 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.473 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.473 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.474 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.474 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.478 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.479 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.479 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.480 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.481 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.424 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.966 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.773 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.779 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.780 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.781 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.782 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.783 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.784 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.788 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.788 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.790 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.790 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.791 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.794 I llama_model_loader: - type  f32:   37 tensors
0.00.130.795 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.796 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.716 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.044 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.645 I llm_load_vocab: special tokens cache size = 5
0.00.271.209 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.223 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.224 I llm_load_print_meta: arch             = gemma
0.00.271.224 I llm_load_print_meta: vocab type       = SPM
0.00.271.225 I llm_load_print_meta: n_vocab          = 256000
0.00.271.225 I llm_load_print_meta: n_merges         = 0
0.00.271.226 I llm_load_print_meta: vocab_only       = 0
0.00.271.226 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.226 I llm_load_print_meta: n_embd           = 2048
0.00.271.227 I llm_load_print_meta: n_layer          = 18
0.00.271.239 I llm_load_print_meta: n_head           = 8
0.00.271.240 I llm_load_print_meta: n_head_kv        = 1
0.00.271.240 I llm_load_print_meta: n_rot            = 256
0.00.271.240 I llm_load_print_meta: n_swa            = 0
0.00.271.241 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.241 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.242 I llm_load_print_meta: n_gqa            = 8
0.00.271.243 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.244 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.245 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.246 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.246 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.247 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.247 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.248 I llm_load_print_meta: n_ff             = 16384
0.00.271.248 I llm_load_print_meta: n_expert         = 0
0.00.271.249 I llm_load_print_meta: n_expert_used    = 0
0.00.271.249 I llm_load_print_meta: causal attn      = 1
0.00.271.249 I llm_load_print_meta: pooling type     = 0
0.00.271.250 I llm_load_print_meta: rope type        = 2
0.00.271.250 I llm_load_print_meta: rope scaling     = linear
0.00.271.252 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.252 I llm_load_print_meta: freq_scale_train = 1
0.00.271.253 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.253 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.253 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.254 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.254 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.254 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.255 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.255 I llm_load_print_meta: model type       = 2B
0.00.271.256 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.271.257 I llm_load_print_meta: model params     = 2.51 B
0.00.271.257 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.271.258 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.258 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.259 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.259 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.259 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.260 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.260 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.260 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.261 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.261 I llm_load_print_meta: max token length = 93
0.00.333.429 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.333.438 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.333.438 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.333.439 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.333.440 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.333.440 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.338.806 I llama_new_context_with_model: n_seq_max     = 1
0.00.338.814 I llama_new_context_with_model: n_ctx         = 4096
0.00.338.814 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.338.814 I llama_new_context_with_model: n_batch       = 2048
0.00.338.815 I llama_new_context_with_model: n_ubatch      = 512
0.00.338.815 I llama_new_context_with_model: flash_attn    = 0
0.00.338.819 I llama_new_context_with_model: freq_base     = 10000.0
0.00.338.820 I llama_new_context_with_model: freq_scale    = 1
0.00.338.821 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.268 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.285 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.355.387 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.356.626 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.356.633 I llama_new_context_with_model: graph nodes  = 601
0.00.356.633 I llama_new_context_with_model: graph splits = 1
0.00.356.634 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.432.780 I main: llama threadpool init, n_threads = 4
0.00.432.794 I 
0.00.432.869 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.432.872 I 
0.00.432.910 I sampler seed: 2889981461
0.00.432.921 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.432.924 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.432.925 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.432.926 I 
 encompates a wide range of topics, including:

**Human Development and Wellbeing:**

* Promoting healthy behaviors
* Supporting healthy relationships
* Addressing mental and

0.02.045.087 I llama_perf_sampler_print:    sampling time =       4.97 ms /    33 runs   (    0.15 ms per token,  6638.50 tokens per second)
0.02.045.090 I llama_perf_context_print:        load time =     431.88 ms
0.02.045.092 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.045.094 I llama_perf_context_print:        eval time =    1593.83 ms /    32 runs   (   49.81 ms per token,    20.08 tokens per second)
0.02.045.095 I llama_perf_context_print:       total time =    1612.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4064 (4b3a9212)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32035.94 ms
main:    total time = 32035.94 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.560 I build: 4064 (4b3a9212) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.758 I main: llama backend init
0.00.000.892 I main: load the model and apply lora adapter, if any
0.00.021.439 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.456 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.462 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.466 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.469 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.470 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.472 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.473 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.473 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.473 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.477 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.477 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.478 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.478 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.479 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.689 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.152 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.965 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.972 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.972 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.973 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.974 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.975 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.977 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.980 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.981 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.984 I llama_model_loader: - type  f32:   37 tensors
0.00.130.985 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.985 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.930 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.395 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.889 I llm_load_vocab: special tokens cache size = 5
0.00.265.400 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.415 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.416 I llm_load_print_meta: arch             = gemma
0.00.265.416 I llm_load_print_meta: vocab type       = SPM
0.00.265.417 I llm_load_print_meta: n_vocab          = 256000
0.00.265.417 I llm_load_print_meta: n_merges         = 0
0.00.265.418 I llm_load_print_meta: vocab_only       = 0
0.00.265.418 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.418 I llm_load_print_meta: n_embd           = 2048
0.00.265.419 I llm_load_print_meta: n_layer          = 18
0.00.265.431 I llm_load_print_meta: n_head           = 8
0.00.265.432 I llm_load_print_meta: n_head_kv        = 1
0.00.265.432 I llm_load_print_meta: n_rot            = 256
0.00.265.433 I llm_load_print_meta: n_swa            = 0
0.00.265.433 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.433 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.434 I llm_load_print_meta: n_gqa            = 8
0.00.265.436 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.436 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.437 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.439 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.439 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.440 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.440 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.441 I llm_load_print_meta: n_ff             = 16384
0.00.265.441 I llm_load_print_meta: n_expert         = 0
0.00.265.441 I llm_load_print_meta: n_expert_used    = 0
0.00.265.442 I llm_load_print_meta: causal attn      = 1
0.00.265.442 I llm_load_print_meta: pooling type     = 0
0.00.265.442 I llm_load_print_meta: rope type        = 2
0.00.265.443 I llm_load_print_meta: rope scaling     = linear
0.00.265.445 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.445 I llm_load_print_meta: freq_scale_train = 1
0.00.265.445 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.446 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.446 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.446 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.447 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.447 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.447 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.448 I llm_load_print_meta: model type       = 2B
0.00.265.448 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.449 I llm_load_print_meta: model params     = 2.51 B
0.00.265.450 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.450 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.451 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.451 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.451 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.452 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.452 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.452 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.453 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.453 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.454 I llm_load_print_meta: max token length = 93
0.00.323.737 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.328.861 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.867 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.867 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.868 I llama_new_context_with_model: n_batch       = 2048
0.00.328.868 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.869 I llama_new_context_with_model: flash_attn    = 0
0.00.328.871 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.872 I llama_new_context_with_model: freq_scale    = 1
0.00.328.873 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.410 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.344.425 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.344.511 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.753 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.345.760 I llama_new_context_with_model: graph nodes  = 601
0.00.345.760 I llama_new_context_with_model: graph splits = 1
0.00.345.761 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.291 I main: llama threadpool init, n_threads = 4
0.00.419.304 I 
0.00.419.384 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.419.388 I 
0.00.419.434 I sampler seed: 4089213441
0.00.419.446 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.449 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.450 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.450 I 
 seconded in the following way:

1. **Structure:**
    - Sentence type: declarative
    - Subject: "The United States"
    

0.02.000.319 I llama_perf_sampler_print:    sampling time =       4.63 ms /    33 runs   (    0.14 ms per token,  7125.89 tokens per second)
0.02.000.322 I llama_perf_context_print:        load time =     418.38 ms
0.02.000.324 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.000.326 I llama_perf_context_print:        eval time =    1563.02 ms /    32 runs   (   48.84 ms per token,    20.47 tokens per second)
0.02.000.327 I llama_perf_context_print:       total time =    1581.04 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.881s
user	8m14.695s
sys	0m6.585s
