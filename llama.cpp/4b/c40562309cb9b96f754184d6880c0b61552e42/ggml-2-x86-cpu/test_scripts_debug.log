+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 4006 (4bc40562) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.002.775 I main: load the model and apply lora adapter, if any
0.00.025.570 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.578 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.666 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.677 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.682 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.687 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.689 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.690 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.691 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.704 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.708 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.715 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.717 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.718 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.720 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.721 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.849 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.066 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.573 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.581 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.582 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.583 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.584 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.585 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.586 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.591 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.593 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.594 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.595 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.596 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.603 I llama_model_loader: - type  f32:   37 tensors
0.00.265.605 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.460 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.403 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.301 I llm_load_vocab: special tokens cache size = 5
0.00.598.980 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.599.046 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.599.047 I llm_load_print_meta: arch             = gemma
0.00.599.048 I llm_load_print_meta: vocab type       = SPM
0.00.599.049 I llm_load_print_meta: n_vocab          = 256000
0.00.599.052 I llm_load_print_meta: n_merges         = 0
0.00.599.053 I llm_load_print_meta: vocab_only       = 0
0.00.599.053 I llm_load_print_meta: n_ctx_train      = 8192
0.00.599.062 I llm_load_print_meta: n_embd           = 2048
0.00.599.062 I llm_load_print_meta: n_layer          = 18
0.00.599.125 I llm_load_print_meta: n_head           = 8
0.00.599.133 I llm_load_print_meta: n_head_kv        = 1
0.00.599.133 I llm_load_print_meta: n_rot            = 256
0.00.599.134 I llm_load_print_meta: n_swa            = 0
0.00.599.135 I llm_load_print_meta: n_embd_head_k    = 256
0.00.599.135 I llm_load_print_meta: n_embd_head_v    = 256
0.00.599.140 I llm_load_print_meta: n_gqa            = 8
0.00.599.145 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.599.150 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.599.152 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.599.153 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.599.153 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.599.154 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.599.154 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.599.159 I llm_load_print_meta: n_ff             = 16384
0.00.599.159 I llm_load_print_meta: n_expert         = 0
0.00.599.160 I llm_load_print_meta: n_expert_used    = 0
0.00.599.161 I llm_load_print_meta: causal attn      = 1
0.00.599.161 I llm_load_print_meta: pooling type     = 0
0.00.599.162 I llm_load_print_meta: rope type        = 2
0.00.599.162 I llm_load_print_meta: rope scaling     = linear
0.00.599.168 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.599.169 I llm_load_print_meta: freq_scale_train = 1
0.00.599.170 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.599.170 I llm_load_print_meta: rope_finetuned   = unknown
0.00.599.170 I llm_load_print_meta: ssm_d_conv       = 0
0.00.599.171 I llm_load_print_meta: ssm_d_inner      = 0
0.00.599.171 I llm_load_print_meta: ssm_d_state      = 0
0.00.599.171 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.599.184 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.599.185 I llm_load_print_meta: model type       = 2B
0.00.599.186 I llm_load_print_meta: model ftype      = Q8_0
0.00.599.187 I llm_load_print_meta: model params     = 2.51 B
0.00.599.188 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.599.189 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.599.190 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.599.190 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.599.191 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.599.192 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.599.192 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.599.193 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.599.198 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.599.200 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.599.200 I llm_load_print_meta: max token length = 93
0.00.708.926 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.708.936 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.708.937 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.708.937 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.708.938 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.708.938 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.714.921 I llama_new_context_with_model: n_ctx      = 8192
0.00.714.930 I llama_new_context_with_model: n_batch    = 2048
0.00.714.930 I llama_new_context_with_model: n_ubatch   = 512
0.00.714.931 I llama_new_context_with_model: flash_attn = 0
0.00.714.934 I llama_new_context_with_model: freq_base  = 10000.0
0.00.714.935 I llama_new_context_with_model: freq_scale = 1
0.00.745.939 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.745.978 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.746.103 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.748.648 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.748.652 I llama_new_context_with_model: graph nodes  = 601
0.00.748.653 I llama_new_context_with_model: graph splits = 1
0.00.748.667 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.358.886 I main: llama threadpool init, n_threads = 4
0.01.358.899 I 
0.01.359.002 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.359.006 I 
0.01.359.232 I sampler seed: 2532146741
0.01.359.245 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.359.252 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.359.255 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.359.255 I 
 increasities. [end of text]


0.03.044.591 I llama_perf_sampler_print:    sampling time =       6.14 ms /     5 runs   (    1.23 ms per token,   813.93 tokens per second)
0.03.044.594 I llama_perf_context_print:        load time =    1356.02 ms
0.03.044.596 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.044.617 I llama_perf_context_print:        eval time =    1672.34 ms /     4 runs   (  418.08 ms per token,     2.39 tokens per second)
0.03.044.619 I llama_perf_context_print:       total time =    1685.72 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.647 I build: 4006 (4bc40562) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.002.776 I main: load the model and apply lora adapter, if any
0.00.025.434 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.526 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.540 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.541 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.546 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.548 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.549 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.550 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.551 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.552 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.559 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.562 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.563 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.564 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.565 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.562 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.155 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.543 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.551 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.552 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.553 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.554 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.556 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.557 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.560 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.561 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.563 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.563 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.265.565 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.572 I llama_model_loader: - type  f32:   37 tensors
0.00.265.574 I llama_model_loader: - type q8_0:  127 tensors
0.00.444.830 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.512.852 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.513.811 I llm_load_vocab: special tokens cache size = 5
0.00.610.025 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.098 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.099 I llm_load_print_meta: arch             = gemma
0.00.610.099 I llm_load_print_meta: vocab type       = SPM
0.00.610.101 I llm_load_print_meta: n_vocab          = 256000
0.00.610.103 I llm_load_print_meta: n_merges         = 0
0.00.610.103 I llm_load_print_meta: vocab_only       = 0
0.00.610.104 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.112 I llm_load_print_meta: n_embd           = 2048
0.00.610.113 I llm_load_print_meta: n_layer          = 18
0.00.610.178 I llm_load_print_meta: n_head           = 8
0.00.610.185 I llm_load_print_meta: n_head_kv        = 1
0.00.610.186 I llm_load_print_meta: n_rot            = 256
0.00.610.186 I llm_load_print_meta: n_swa            = 0
0.00.610.187 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.188 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.193 I llm_load_print_meta: n_gqa            = 8
0.00.610.215 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.221 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.223 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.225 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.225 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.226 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.226 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.231 I llm_load_print_meta: n_ff             = 16384
0.00.610.232 I llm_load_print_meta: n_expert         = 0
0.00.610.233 I llm_load_print_meta: n_expert_used    = 0
0.00.610.233 I llm_load_print_meta: causal attn      = 1
0.00.610.234 I llm_load_print_meta: pooling type     = 0
0.00.610.234 I llm_load_print_meta: rope type        = 2
0.00.610.235 I llm_load_print_meta: rope scaling     = linear
0.00.610.237 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.238 I llm_load_print_meta: freq_scale_train = 1
0.00.610.239 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.239 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.239 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.240 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.252 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.252 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.253 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.254 I llm_load_print_meta: model type       = 2B
0.00.610.255 I llm_load_print_meta: model ftype      = Q8_0
0.00.610.256 I llm_load_print_meta: model params     = 2.51 B
0.00.610.257 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.610.258 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.259 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.259 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.260 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.261 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.262 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.263 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.269 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.270 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.270 I llm_load_print_meta: max token length = 93
0.00.710.505 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.716.426 I llama_new_context_with_model: n_ctx      = 8192
0.00.716.433 I llama_new_context_with_model: n_batch    = 2048
0.00.716.433 I llama_new_context_with_model: n_ubatch   = 512
0.00.716.434 I llama_new_context_with_model: flash_attn = 0
0.00.716.436 I llama_new_context_with_model: freq_base  = 10000.0
0.00.716.437 I llama_new_context_with_model: freq_scale = 1
0.00.746.588 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.746.628 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.746.748 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.749.224 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.749.228 I llama_new_context_with_model: graph nodes  = 601
0.00.749.229 I llama_new_context_with_model: graph splits = 1
0.00.749.244 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.360.653 I main: llama threadpool init, n_threads = 4
0.01.360.666 I 
0.01.360.767 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.360.771 I 
0.01.360.994 I sampler seed: 927342813
0.01.361.007 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.361.015 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.361.016 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.361.016 I 
 increably.

I am unable to access the internet, therefore I am unable to retrieve the necessary information for the requested task. [end of text]


0.12.813.696 I llama_perf_sampler_print:    sampling time =      40.58 ms /    28 runs   (    1.45 ms per token,   689.98 tokens per second)
0.12.813.699 I llama_perf_context_print:        load time =    1357.78 ms
0.12.813.711 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.813.713 I llama_perf_context_print:        eval time =   11373.05 ms /    27 runs   (  421.22 ms per token,     2.37 tokens per second)
0.12.813.715 I llama_perf_context_print:       total time =   11453.05 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 4006 (4bc40562) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.002.945 I main: load the model and apply lora adapter, if any
0.00.025.490 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.500 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.588 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.599 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.602 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.606 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.610 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.611 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.612 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.613 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.614 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.620 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.621 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.623 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.624 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.625 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.518 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.852 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.192 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.199 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.200 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.201 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.202 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.204 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.205 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.209 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.210 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.211 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.212 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.266.213 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.221 I llama_model_loader: - type  f32:   37 tensors
0.00.266.224 I llama_model_loader: - type q8_0:  127 tensors
0.00.441.176 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.916 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.779 I llm_load_vocab: special tokens cache size = 5
0.00.595.612 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.595.679 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.595.680 I llm_load_print_meta: arch             = gemma
0.00.595.681 I llm_load_print_meta: vocab type       = SPM
0.00.595.682 I llm_load_print_meta: n_vocab          = 256000
0.00.595.684 I llm_load_print_meta: n_merges         = 0
0.00.595.685 I llm_load_print_meta: vocab_only       = 0
0.00.595.685 I llm_load_print_meta: n_ctx_train      = 8192
0.00.595.694 I llm_load_print_meta: n_embd           = 2048
0.00.595.694 I llm_load_print_meta: n_layer          = 18
0.00.595.756 I llm_load_print_meta: n_head           = 8
0.00.595.763 I llm_load_print_meta: n_head_kv        = 1
0.00.595.764 I llm_load_print_meta: n_rot            = 256
0.00.595.764 I llm_load_print_meta: n_swa            = 0
0.00.595.765 I llm_load_print_meta: n_embd_head_k    = 256
0.00.595.765 I llm_load_print_meta: n_embd_head_v    = 256
0.00.595.769 I llm_load_print_meta: n_gqa            = 8
0.00.595.774 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.595.779 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.595.780 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.595.782 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.595.782 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.595.782 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.595.783 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.595.788 I llm_load_print_meta: n_ff             = 16384
0.00.595.788 I llm_load_print_meta: n_expert         = 0
0.00.595.789 I llm_load_print_meta: n_expert_used    = 0
0.00.595.789 I llm_load_print_meta: causal attn      = 1
0.00.595.789 I llm_load_print_meta: pooling type     = 0
0.00.595.790 I llm_load_print_meta: rope type        = 2
0.00.595.790 I llm_load_print_meta: rope scaling     = linear
0.00.595.791 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.595.792 I llm_load_print_meta: freq_scale_train = 1
0.00.595.792 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.595.793 I llm_load_print_meta: rope_finetuned   = unknown
0.00.595.793 I llm_load_print_meta: ssm_d_conv       = 0
0.00.595.793 I llm_load_print_meta: ssm_d_inner      = 0
0.00.595.794 I llm_load_print_meta: ssm_d_state      = 0
0.00.595.794 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.595.794 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.595.795 I llm_load_print_meta: model type       = 2B
0.00.595.796 I llm_load_print_meta: model ftype      = Q8_0
0.00.595.796 I llm_load_print_meta: model params     = 2.51 B
0.00.595.797 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.595.798 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.595.798 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.595.799 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.595.799 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.595.800 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.595.800 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.595.800 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.595.806 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.595.807 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.595.807 I llm_load_print_meta: max token length = 93
0.00.694.182 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.694.193 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.694.193 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.694.194 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.694.195 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.694.196 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.700.615 I llama_new_context_with_model: n_ctx      = 8192
0.00.700.623 I llama_new_context_with_model: n_batch    = 2048
0.00.700.624 I llama_new_context_with_model: n_ubatch   = 512
0.00.700.624 I llama_new_context_with_model: flash_attn = 0
0.00.700.627 I llama_new_context_with_model: freq_base  = 10000.0
0.00.700.628 I llama_new_context_with_model: freq_scale = 1
0.00.730.440 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.730.485 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.730.604 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.733.078 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.733.082 I llama_new_context_with_model: graph nodes  = 601
0.00.733.083 I llama_new_context_with_model: graph splits = 1
0.00.733.098 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.345.548 I main: llama threadpool init, n_threads = 4
0.01.345.558 I 
0.01.345.665 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.345.668 I 
0.01.345.897 I sampler seed: 913092111
0.01.345.909 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.345.916 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.345.917 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.345.917 I 
 increasels, a set of magical artifacts imbued with the power to control the elements.

**Requirements:**

- Create a unique and interesting name for the set

0.14.952.931 I llama_perf_sampler_print:    sampling time =      48.16 ms /    33 runs   (    1.46 ms per token,   685.23 tokens per second)
0.14.952.935 I llama_perf_context_print:        load time =    1342.50 ms
0.14.952.937 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.952.939 I llama_perf_context_print:        eval time =   13514.11 ms /    32 runs   (  422.32 ms per token,     2.37 tokens per second)
0.14.952.942 I llama_perf_context_print:       total time =   13607.39 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.675 I build: 4006 (4bc40562) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.874 I main: llama backend init
0.00.002.798 I main: load the model and apply lora adapter, if any
0.00.025.485 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.496 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.584 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.595 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.596 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.600 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.602 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.604 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.605 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.613 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.615 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.622 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.623 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.625 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.626 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.627 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.664 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.933 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.185 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.193 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.194 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.195 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.196 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.197 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.198 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.201 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.202 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.203 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.204 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.265.205 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.212 I llama_model_loader: - type  f32:   37 tensors
0.00.265.214 I llama_model_loader: - type q8_0:  127 tensors
0.00.434.812 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.491.540 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.492.469 I llm_load_vocab: special tokens cache size = 5
0.00.587.527 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.587.598 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.587.599 I llm_load_print_meta: arch             = gemma
0.00.587.599 I llm_load_print_meta: vocab type       = SPM
0.00.587.600 I llm_load_print_meta: n_vocab          = 256000
0.00.587.602 I llm_load_print_meta: n_merges         = 0
0.00.587.603 I llm_load_print_meta: vocab_only       = 0
0.00.587.603 I llm_load_print_meta: n_ctx_train      = 8192
0.00.587.611 I llm_load_print_meta: n_embd           = 2048
0.00.587.612 I llm_load_print_meta: n_layer          = 18
0.00.587.674 I llm_load_print_meta: n_head           = 8
0.00.587.681 I llm_load_print_meta: n_head_kv        = 1
0.00.587.682 I llm_load_print_meta: n_rot            = 256
0.00.587.683 I llm_load_print_meta: n_swa            = 0
0.00.587.683 I llm_load_print_meta: n_embd_head_k    = 256
0.00.587.688 I llm_load_print_meta: n_embd_head_v    = 256
0.00.587.693 I llm_load_print_meta: n_gqa            = 8
0.00.587.701 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.587.707 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.587.708 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.587.710 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.587.710 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.587.711 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.587.712 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.587.716 I llm_load_print_meta: n_ff             = 16384
0.00.587.717 I llm_load_print_meta: n_expert         = 0
0.00.587.717 I llm_load_print_meta: n_expert_used    = 0
0.00.587.719 I llm_load_print_meta: causal attn      = 1
0.00.587.719 I llm_load_print_meta: pooling type     = 0
0.00.587.720 I llm_load_print_meta: rope type        = 2
0.00.587.720 I llm_load_print_meta: rope scaling     = linear
0.00.587.722 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.587.723 I llm_load_print_meta: freq_scale_train = 1
0.00.587.724 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.587.724 I llm_load_print_meta: rope_finetuned   = unknown
0.00.587.725 I llm_load_print_meta: ssm_d_conv       = 0
0.00.587.725 I llm_load_print_meta: ssm_d_inner      = 0
0.00.587.726 I llm_load_print_meta: ssm_d_state      = 0
0.00.587.726 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.587.726 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.587.727 I llm_load_print_meta: model type       = 2B
0.00.587.728 I llm_load_print_meta: model ftype      = Q8_0
0.00.587.729 I llm_load_print_meta: model params     = 2.51 B
0.00.587.730 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.587.733 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.587.733 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.587.734 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.587.734 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.587.734 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.587.735 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.587.736 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.587.742 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.587.743 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.587.744 I llm_load_print_meta: max token length = 93
0.00.669.522 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.669.532 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.675.311 I llama_new_context_with_model: n_ctx      = 8192
0.00.675.319 I llama_new_context_with_model: n_batch    = 2048
0.00.675.319 I llama_new_context_with_model: n_ubatch   = 512
0.00.675.320 I llama_new_context_with_model: flash_attn = 0
0.00.675.323 I llama_new_context_with_model: freq_base  = 10000.0
0.00.675.323 I llama_new_context_with_model: freq_scale = 1
0.00.704.528 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.704.568 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.704.701 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.707.294 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.707.298 I llama_new_context_with_model: graph nodes  = 601
0.00.707.298 I llama_new_context_with_model: graph splits = 1
0.00.707.314 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.321.728 I main: llama threadpool init, n_threads = 4
0.01.321.742 I 
0.01.321.847 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.321.851 I 
0.01.322.080 I sampler seed: 4254766211
0.01.322.093 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.322.099 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.322.103 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.322.103 I 
 increasities with a penchant for theatricality and exaggerated emotions. [end of text]


0.07.225.229 I llama_perf_sampler_print:    sampling time =      21.14 ms /    15 runs   (    1.41 ms per token,   709.52 tokens per second)
0.07.225.244 I llama_perf_context_print:        load time =    1318.83 ms
0.07.225.246 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.225.247 I llama_perf_context_print:        eval time =    5861.32 ms /    14 runs   (  418.67 ms per token,     2.39 tokens per second)
0.07.225.248 I llama_perf_context_print:       total time =    5903.51 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m47.815s
user	2m23.161s
sys	0m9.617s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4006 (4bc40562)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198869.92 ms
main:    total time = 198869.92 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.610 I build: 4006 (4bc40562) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.806 I main: llama backend init
0.00.002.728 I main: load the model and apply lora adapter, if any
0.00.025.739 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.749 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.840 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.851 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.855 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.859 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.861 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.862 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.864 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.865 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.866 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.872 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.873 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.875 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.884 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.888 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.917 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.273 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.531 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.541 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.542 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.543 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.544 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.545 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.546 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.550 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.551 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.552 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.553 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.554 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.562 I llama_model_loader: - type  f32:   37 tensors
0.00.265.564 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.564 I llama_model_loader: - type q6_K:   19 tensors
0.00.445.519 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.147 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.509.084 I llm_load_vocab: special tokens cache size = 5
0.00.604.071 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.137 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.138 I llm_load_print_meta: arch             = gemma
0.00.604.139 I llm_load_print_meta: vocab type       = SPM
0.00.604.139 I llm_load_print_meta: n_vocab          = 256000
0.00.604.141 I llm_load_print_meta: n_merges         = 0
0.00.604.142 I llm_load_print_meta: vocab_only       = 0
0.00.604.142 I llm_load_print_meta: n_ctx_train      = 8192
0.00.604.150 I llm_load_print_meta: n_embd           = 2048
0.00.604.150 I llm_load_print_meta: n_layer          = 18
0.00.604.214 I llm_load_print_meta: n_head           = 8
0.00.604.222 I llm_load_print_meta: n_head_kv        = 1
0.00.604.222 I llm_load_print_meta: n_rot            = 256
0.00.604.224 I llm_load_print_meta: n_swa            = 0
0.00.604.224 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.225 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.229 I llm_load_print_meta: n_gqa            = 8
0.00.604.234 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.240 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.241 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.243 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.243 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.244 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.245 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.250 I llm_load_print_meta: n_ff             = 16384
0.00.604.250 I llm_load_print_meta: n_expert         = 0
0.00.604.268 I llm_load_print_meta: n_expert_used    = 0
0.00.604.270 I llm_load_print_meta: causal attn      = 1
0.00.604.270 I llm_load_print_meta: pooling type     = 0
0.00.604.271 I llm_load_print_meta: rope type        = 2
0.00.604.271 I llm_load_print_meta: rope scaling     = linear
0.00.604.273 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.273 I llm_load_print_meta: freq_scale_train = 1
0.00.604.274 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.274 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.275 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.276 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.276 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.277 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.278 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.279 I llm_load_print_meta: model type       = 2B
0.00.604.280 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.604.281 I llm_load_print_meta: model params     = 2.51 B
0.00.604.284 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.604.285 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.285 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.286 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.286 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.286 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.287 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.287 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.293 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.295 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.295 I llm_load_print_meta: max token length = 93
0.00.668.867 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.668.874 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.668.875 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.668.875 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.668.876 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.668.877 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.674.610 I llama_new_context_with_model: n_ctx      = 8192
0.00.674.617 I llama_new_context_with_model: n_batch    = 2048
0.00.674.618 I llama_new_context_with_model: n_ubatch   = 512
0.00.674.618 I llama_new_context_with_model: flash_attn = 0
0.00.674.621 I llama_new_context_with_model: freq_base  = 10000.0
0.00.674.622 I llama_new_context_with_model: freq_scale = 1
0.00.703.966 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.704.003 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.704.121 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.706.661 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.706.665 I llama_new_context_with_model: graph nodes  = 601
0.00.706.665 I llama_new_context_with_model: graph splits = 1
0.00.706.681 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.284.352 I main: llama threadpool init, n_threads = 4
0.01.284.365 I 
0.01.284.473 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.284.477 I 
0.01.284.705 I sampler seed: 1011665982
0.01.284.717 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.284.723 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.284.725 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.284.725 I 
 fufilling and other related terms.

**Answer:**

**Fustigating:** This refers to persistent irritation or dissatisfaction.

**Sulking:** This

0.12.142.429 I llama_perf_sampler_print:    sampling time =      48.02 ms /    33 runs   (    1.46 ms per token,   687.29 tokens per second)
0.12.142.432 I llama_perf_context_print:        load time =    1281.53 ms
0.12.142.434 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.142.436 I llama_perf_context_print:        eval time =   10764.78 ms /    32 runs   (  336.40 ms per token,     2.97 tokens per second)
0.12.142.448 I llama_perf_context_print:       total time =   10858.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4006 (4bc40562)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198962.29 ms
main:    total time = 198962.29 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.661 I build: 4006 (4bc40562) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.890 I main: llama backend init
0.00.002.838 I main: load the model and apply lora adapter, if any
0.00.025.473 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.594 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.612 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.616 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.623 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.625 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.627 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.629 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.631 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.634 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.643 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.649 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.651 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.652 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.655 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.067 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.403 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.799 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.807 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.809 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.810 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.813 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.814 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.816 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.820 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.820 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.829 I llama_model_loader: - type  f32:   37 tensors
0.00.265.832 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.833 I llama_model_loader: - type q6_K:   19 tensors
0.00.446.358 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.404 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.331 I llm_load_vocab: special tokens cache size = 5
0.00.621.718 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.621.790 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.621.791 I llm_load_print_meta: arch             = gemma
0.00.621.792 I llm_load_print_meta: vocab type       = SPM
0.00.621.793 I llm_load_print_meta: n_vocab          = 256000
0.00.621.795 I llm_load_print_meta: n_merges         = 0
0.00.621.796 I llm_load_print_meta: vocab_only       = 0
0.00.621.797 I llm_load_print_meta: n_ctx_train      = 8192
0.00.621.806 I llm_load_print_meta: n_embd           = 2048
0.00.621.807 I llm_load_print_meta: n_layer          = 18
0.00.621.873 I llm_load_print_meta: n_head           = 8
0.00.621.880 I llm_load_print_meta: n_head_kv        = 1
0.00.621.881 I llm_load_print_meta: n_rot            = 256
0.00.621.881 I llm_load_print_meta: n_swa            = 0
0.00.621.881 I llm_load_print_meta: n_embd_head_k    = 256
0.00.621.882 I llm_load_print_meta: n_embd_head_v    = 256
0.00.621.886 I llm_load_print_meta: n_gqa            = 8
0.00.621.891 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.621.896 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.621.897 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.621.899 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.621.899 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.621.900 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.621.900 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.621.905 I llm_load_print_meta: n_ff             = 16384
0.00.621.905 I llm_load_print_meta: n_expert         = 0
0.00.621.905 I llm_load_print_meta: n_expert_used    = 0
0.00.621.906 I llm_load_print_meta: causal attn      = 1
0.00.621.906 I llm_load_print_meta: pooling type     = 0
0.00.621.906 I llm_load_print_meta: rope type        = 2
0.00.621.907 I llm_load_print_meta: rope scaling     = linear
0.00.621.908 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.621.909 I llm_load_print_meta: freq_scale_train = 1
0.00.621.909 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.621.909 I llm_load_print_meta: rope_finetuned   = unknown
0.00.621.910 I llm_load_print_meta: ssm_d_conv       = 0
0.00.621.910 I llm_load_print_meta: ssm_d_inner      = 0
0.00.621.910 I llm_load_print_meta: ssm_d_state      = 0
0.00.621.911 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.621.911 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.621.911 I llm_load_print_meta: model type       = 2B
0.00.621.912 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.621.913 I llm_load_print_meta: model params     = 2.51 B
0.00.621.914 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.621.914 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.621.915 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.621.915 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.621.916 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.621.916 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.621.917 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.621.917 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.621.923 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.621.924 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.621.925 I llm_load_print_meta: max token length = 93
0.00.684.250 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.690.270 I llama_new_context_with_model: n_ctx      = 8192
0.00.690.277 I llama_new_context_with_model: n_batch    = 2048
0.00.690.277 I llama_new_context_with_model: n_ubatch   = 512
0.00.690.278 I llama_new_context_with_model: flash_attn = 0
0.00.690.280 I llama_new_context_with_model: freq_base  = 10000.0
0.00.690.281 I llama_new_context_with_model: freq_scale = 1
0.00.720.098 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.720.137 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.720.254 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.722.796 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.722.800 I llama_new_context_with_model: graph nodes  = 601
0.00.722.800 I llama_new_context_with_model: graph splits = 1
0.00.722.815 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.298.524 I main: llama threadpool init, n_threads = 4
0.01.298.537 I 
0.01.298.651 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.298.665 I 
0.01.298.897 I sampler seed: 3373246274
0.01.298.909 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.298.916 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.298.917 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.298.917 I 
 seconally.

I am unable to answer this question as it contains sexually suggestive content. I am not able to provide responses that are sexually suggestive in nature.

0.12.142.627 I llama_perf_sampler_print:    sampling time =      48.04 ms /    33 runs   (    1.46 ms per token,   687.00 tokens per second)
0.12.142.631 I llama_perf_context_print:        load time =    1295.57 ms
0.12.142.644 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.142.646 I llama_perf_context_print:        eval time =   10750.45 ms /    32 runs   (  335.95 ms per token,     2.98 tokens per second)
0.12.142.648 I llama_perf_context_print:       total time =   10844.11 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.974s
user	50m6.379s
sys	0m6.512s
