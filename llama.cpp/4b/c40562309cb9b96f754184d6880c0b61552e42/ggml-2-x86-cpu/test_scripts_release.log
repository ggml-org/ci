+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.552 I build: 4006 (4bc40562) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.001.869 I main: load the model and apply lora adapter, if any
0.00.022.502 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.510 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.518 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.523 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.524 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.527 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.529 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.529 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.530 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.531 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.531 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.535 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.536 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.538 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.539 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.539 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.017 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.602 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.426 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.433 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.434 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.434 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.435 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.436 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.437 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.441 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.442 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.443 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.443 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.445 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.448 I llama_model_loader: - type  f32:   37 tensors
0.00.132.449 I llama_model_loader: - type q8_0:  127 tensors
0.00.217.472 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.152 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.766 I llm_load_vocab: special tokens cache size = 5
0.00.285.785 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.802 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.802 I llm_load_print_meta: arch             = gemma
0.00.285.803 I llm_load_print_meta: vocab type       = SPM
0.00.285.805 I llm_load_print_meta: n_vocab          = 256000
0.00.285.806 I llm_load_print_meta: n_merges         = 0
0.00.285.806 I llm_load_print_meta: vocab_only       = 0
0.00.285.807 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.807 I llm_load_print_meta: n_embd           = 2048
0.00.285.807 I llm_load_print_meta: n_layer          = 18
0.00.285.819 I llm_load_print_meta: n_head           = 8
0.00.285.820 I llm_load_print_meta: n_head_kv        = 1
0.00.285.821 I llm_load_print_meta: n_rot            = 256
0.00.285.822 I llm_load_print_meta: n_swa            = 0
0.00.285.822 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.823 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.824 I llm_load_print_meta: n_gqa            = 8
0.00.285.825 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.826 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.828 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.834 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.835 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.835 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.835 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.836 I llm_load_print_meta: n_ff             = 16384
0.00.285.837 I llm_load_print_meta: n_expert         = 0
0.00.285.837 I llm_load_print_meta: n_expert_used    = 0
0.00.285.837 I llm_load_print_meta: causal attn      = 1
0.00.285.838 I llm_load_print_meta: pooling type     = 0
0.00.285.838 I llm_load_print_meta: rope type        = 2
0.00.285.838 I llm_load_print_meta: rope scaling     = linear
0.00.285.848 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.849 I llm_load_print_meta: freq_scale_train = 1
0.00.285.850 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.851 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.851 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.851 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.852 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.852 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.853 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.854 I llm_load_print_meta: model type       = 2B
0.00.285.854 I llm_load_print_meta: model ftype      = Q8_0
0.00.285.855 I llm_load_print_meta: model params     = 2.51 B
0.00.285.856 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.285.856 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.857 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.857 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.858 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.858 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.858 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.859 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.859 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.859 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.860 I llm_load_print_meta: max token length = 93
0.00.390.327 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.390.334 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.390.335 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.390.335 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.390.336 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.390.337 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.395.624 I llama_new_context_with_model: n_ctx      = 8192
0.00.395.631 I llama_new_context_with_model: n_batch    = 2048
0.00.395.632 I llama_new_context_with_model: n_ubatch   = 512
0.00.395.632 I llama_new_context_with_model: flash_attn = 0
0.00.395.634 I llama_new_context_with_model: freq_base  = 10000.0
0.00.395.635 I llama_new_context_with_model: freq_scale = 1
0.00.424.174 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.424.190 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.424.283 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.425.557 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.425.564 I llama_new_context_with_model: graph nodes  = 601
0.00.425.564 I llama_new_context_with_model: graph splits = 1
0.00.425.566 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.517.582 I main: llama threadpool init, n_threads = 4
0.00.517.597 I 
0.00.517.674 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.517.677 I 
0.00.517.724 I sampler seed: 2030347595
0.00.517.735 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.517.738 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.517.739 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.517.739 I 
 increasities, while simultaneously generating a vast amount of new data.

**a) Explain the concept of data overflow.**

**b) Discuss the implications of

0.02.796.184 I llama_perf_sampler_print:    sampling time =       4.92 ms /    33 runs   (    0.15 ms per token,  6704.59 tokens per second)
0.02.796.186 I llama_perf_context_print:        load time =     515.67 ms
0.02.796.187 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.796.189 I llama_perf_context_print:        eval time =    2258.57 ms /    32 runs   (   70.58 ms per token,    14.17 tokens per second)
0.02.796.190 I llama_perf_context_print:       total time =    2278.61 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.568 I build: 4006 (4bc40562) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.768 I main: llama backend init
0.00.001.895 I main: load the model and apply lora adapter, if any
0.00.022.710 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.726 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.736 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.741 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.746 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.746 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.747 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.747 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.748 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.748 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.754 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.755 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.755 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.756 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.756 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.694 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.789 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.650 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.656 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.657 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.657 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.658 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.658 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.659 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.662 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.663 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.663 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.664 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.664 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.668 I llama_model_loader: - type  f32:   37 tensors
0.00.133.669 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.805 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.208 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.836 I llm_load_vocab: special tokens cache size = 5
0.00.281.111 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.126 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.126 I llm_load_print_meta: arch             = gemma
0.00.281.127 I llm_load_print_meta: vocab type       = SPM
0.00.281.127 I llm_load_print_meta: n_vocab          = 256000
0.00.281.128 I llm_load_print_meta: n_merges         = 0
0.00.281.128 I llm_load_print_meta: vocab_only       = 0
0.00.281.128 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.129 I llm_load_print_meta: n_embd           = 2048
0.00.281.129 I llm_load_print_meta: n_layer          = 18
0.00.281.139 I llm_load_print_meta: n_head           = 8
0.00.281.140 I llm_load_print_meta: n_head_kv        = 1
0.00.281.141 I llm_load_print_meta: n_rot            = 256
0.00.281.141 I llm_load_print_meta: n_swa            = 0
0.00.281.141 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.141 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.142 I llm_load_print_meta: n_gqa            = 8
0.00.281.143 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.144 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.145 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.146 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.147 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.147 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.147 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.148 I llm_load_print_meta: n_ff             = 16384
0.00.281.149 I llm_load_print_meta: n_expert         = 0
0.00.281.149 I llm_load_print_meta: n_expert_used    = 0
0.00.281.149 I llm_load_print_meta: causal attn      = 1
0.00.281.149 I llm_load_print_meta: pooling type     = 0
0.00.281.150 I llm_load_print_meta: rope type        = 2
0.00.281.150 I llm_load_print_meta: rope scaling     = linear
0.00.281.151 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.152 I llm_load_print_meta: freq_scale_train = 1
0.00.281.152 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.153 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.153 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.153 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.153 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.154 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.154 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.154 I llm_load_print_meta: model type       = 2B
0.00.281.155 I llm_load_print_meta: model ftype      = Q8_0
0.00.281.156 I llm_load_print_meta: model params     = 2.51 B
0.00.281.157 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.281.157 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.157 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.158 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.158 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.159 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.159 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.159 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.160 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.160 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.160 I llm_load_print_meta: max token length = 93
0.00.381.509 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.386.732 I llama_new_context_with_model: n_ctx      = 8192
0.00.386.738 I llama_new_context_with_model: n_batch    = 2048
0.00.386.739 I llama_new_context_with_model: n_ubatch   = 512
0.00.386.739 I llama_new_context_with_model: flash_attn = 0
0.00.386.741 I llama_new_context_with_model: freq_base  = 10000.0
0.00.386.742 I llama_new_context_with_model: freq_scale = 1
0.00.415.938 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.415.953 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.416.045 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.417.281 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.417.287 I llama_new_context_with_model: graph nodes  = 601
0.00.417.288 I llama_new_context_with_model: graph splits = 1
0.00.417.290 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.504.898 I main: llama threadpool init, n_threads = 4
0.00.504.910 I 
0.00.504.984 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.504.987 I 
0.00.505.028 I sampler seed: 2846050183
0.00.505.039 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.505.042 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.505.043 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.505.043 I 
 increasities
The provided text does not contain any information related to "jerking," so I am unable to answer this question from the provided context. [end of text]


0.02.683.869 I llama_perf_sampler_print:    sampling time =       4.63 ms /    32 runs   (    0.14 ms per token,  6905.48 tokens per second)
0.02.683.871 I llama_perf_context_print:        load time =     502.98 ms
0.02.683.872 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.683.873 I llama_perf_context_print:        eval time =    2159.40 ms /    31 runs   (   69.66 ms per token,    14.36 tokens per second)
0.02.683.874 I llama_perf_context_print:       total time =    2178.98 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.609 I build: 4006 (4bc40562) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.934 I main: llama backend init
0.00.002.468 I main: load the model and apply lora adapter, if any
0.00.023.072 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.081 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.090 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.096 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.098 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.103 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.106 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.107 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.108 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.109 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.110 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.117 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.118 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.118 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.119 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.120 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.805 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.496 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.327 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.334 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.334 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.335 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.336 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.337 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.338 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.341 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.342 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.343 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.344 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.345 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.349 I llama_model_loader: - type  f32:   37 tensors
0.00.133.350 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.661 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.309 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.826 I llm_load_vocab: special tokens cache size = 5
0.00.271.880 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.898 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.899 I llm_load_print_meta: arch             = gemma
0.00.271.900 I llm_load_print_meta: vocab type       = SPM
0.00.271.900 I llm_load_print_meta: n_vocab          = 256000
0.00.271.902 I llm_load_print_meta: n_merges         = 0
0.00.271.903 I llm_load_print_meta: vocab_only       = 0
0.00.271.903 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.903 I llm_load_print_meta: n_embd           = 2048
0.00.271.904 I llm_load_print_meta: n_layer          = 18
0.00.271.917 I llm_load_print_meta: n_head           = 8
0.00.271.919 I llm_load_print_meta: n_head_kv        = 1
0.00.271.920 I llm_load_print_meta: n_rot            = 256
0.00.271.920 I llm_load_print_meta: n_swa            = 0
0.00.271.920 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.921 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.923 I llm_load_print_meta: n_gqa            = 8
0.00.271.924 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.926 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.927 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.929 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.930 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.930 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.931 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.932 I llm_load_print_meta: n_ff             = 16384
0.00.271.933 I llm_load_print_meta: n_expert         = 0
0.00.271.933 I llm_load_print_meta: n_expert_used    = 0
0.00.271.934 I llm_load_print_meta: causal attn      = 1
0.00.271.935 I llm_load_print_meta: pooling type     = 0
0.00.271.935 I llm_load_print_meta: rope type        = 2
0.00.271.936 I llm_load_print_meta: rope scaling     = linear
0.00.271.938 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.939 I llm_load_print_meta: freq_scale_train = 1
0.00.271.939 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.940 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.940 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.941 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.941 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.942 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.942 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.943 I llm_load_print_meta: model type       = 2B
0.00.271.946 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.947 I llm_load_print_meta: model params     = 2.51 B
0.00.271.949 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.949 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.950 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.950 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.951 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.952 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.952 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.952 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.953 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.953 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.954 I llm_load_print_meta: max token length = 93
0.00.368.240 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.368.246 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.368.247 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.368.248 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.368.249 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.368.250 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.373.741 I llama_new_context_with_model: n_ctx      = 8192
0.00.373.748 I llama_new_context_with_model: n_batch    = 2048
0.00.373.748 I llama_new_context_with_model: n_ubatch   = 512
0.00.373.749 I llama_new_context_with_model: flash_attn = 0
0.00.373.751 I llama_new_context_with_model: freq_base  = 10000.0
0.00.373.752 I llama_new_context_with_model: freq_scale = 1
0.00.403.556 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.403.571 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.403.679 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.404.948 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.404.955 I llama_new_context_with_model: graph nodes  = 601
0.00.404.956 I llama_new_context_with_model: graph splits = 1
0.00.404.958 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.509.796 I main: llama threadpool init, n_threads = 4
0.00.509.812 I 
0.00.509.893 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.509.897 I 
0.00.509.949 I sampler seed: 1762241901
0.00.509.964 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.509.973 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.509.975 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.509.977 I 
 increasities that have plagued the human condition throughout history. [end of text]


0.01.322.222 I llama_perf_sampler_print:    sampling time =       1.88 ms /    13 runs   (    0.14 ms per token,  6929.64 tokens per second)
0.01.322.224 I llama_perf_context_print:        load time =     507.30 ms
0.01.322.226 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.322.227 I llama_perf_context_print:        eval time =     804.67 ms /    12 runs   (   67.06 ms per token,    14.91 tokens per second)
0.01.322.228 I llama_perf_context_print:       total time =     812.43 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.585 I build: 4006 (4bc40562) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.827 I main: llama backend init
0.00.001.958 I main: load the model and apply lora adapter, if any
0.00.022.410 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.419 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.426 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.437 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.441 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.446 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.447 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.448 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.449 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.450 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.451 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.456 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.458 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.458 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.459 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.460 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.035 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.633 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.773 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.780 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.781 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.781 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.782 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.783 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.783 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.786 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.786 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.787 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.787 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.788 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.793 I llama_model_loader: - type  f32:   37 tensors
0.00.132.794 I llama_model_loader: - type q8_0:  127 tensors
0.00.214.487 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.621 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.184 I llm_load_vocab: special tokens cache size = 5
0.00.281.155 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.172 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.173 I llm_load_print_meta: arch             = gemma
0.00.281.173 I llm_load_print_meta: vocab type       = SPM
0.00.281.174 I llm_load_print_meta: n_vocab          = 256000
0.00.281.175 I llm_load_print_meta: n_merges         = 0
0.00.281.175 I llm_load_print_meta: vocab_only       = 0
0.00.281.175 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.175 I llm_load_print_meta: n_embd           = 2048
0.00.281.176 I llm_load_print_meta: n_layer          = 18
0.00.281.188 I llm_load_print_meta: n_head           = 8
0.00.281.189 I llm_load_print_meta: n_head_kv        = 1
0.00.281.190 I llm_load_print_meta: n_rot            = 256
0.00.281.190 I llm_load_print_meta: n_swa            = 0
0.00.281.190 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.191 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.191 I llm_load_print_meta: n_gqa            = 8
0.00.281.193 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.194 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.194 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.196 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.196 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.196 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.196 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.197 I llm_load_print_meta: n_ff             = 16384
0.00.281.198 I llm_load_print_meta: n_expert         = 0
0.00.281.198 I llm_load_print_meta: n_expert_used    = 0
0.00.281.198 I llm_load_print_meta: causal attn      = 1
0.00.281.198 I llm_load_print_meta: pooling type     = 0
0.00.281.199 I llm_load_print_meta: rope type        = 2
0.00.281.199 I llm_load_print_meta: rope scaling     = linear
0.00.281.200 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.201 I llm_load_print_meta: freq_scale_train = 1
0.00.281.201 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.202 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.202 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.202 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.202 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.202 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.203 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.204 I llm_load_print_meta: model type       = 2B
0.00.281.204 I llm_load_print_meta: model ftype      = Q8_0
0.00.281.205 I llm_load_print_meta: model params     = 2.51 B
0.00.281.206 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.281.206 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.206 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.207 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.207 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.208 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.208 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.208 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.209 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.209 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.209 I llm_load_print_meta: max token length = 93
0.00.361.175 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.361.182 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.366.529 I llama_new_context_with_model: n_ctx      = 8192
0.00.366.535 I llama_new_context_with_model: n_batch    = 2048
0.00.366.535 I llama_new_context_with_model: n_ubatch   = 512
0.00.366.536 I llama_new_context_with_model: flash_attn = 0
0.00.366.538 I llama_new_context_with_model: freq_base  = 10000.0
0.00.366.539 I llama_new_context_with_model: freq_scale = 1
0.00.395.349 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.395.365 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.395.455 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.396.762 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.396.769 I llama_new_context_with_model: graph nodes  = 601
0.00.396.769 I llama_new_context_with_model: graph splits = 1
0.00.396.771 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.487.112 I main: llama threadpool init, n_threads = 4
0.00.487.127 I 
0.00.487.215 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.487.226 I 
0.00.487.278 I sampler seed: 2493083920
0.00.487.292 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.487.296 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.487.297 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.487.298 I 
 increably.

I cannot answer this question because it contains sexually suggestive content. [end of text]


0.01.678.168 I llama_perf_sampler_print:    sampling time =       2.57 ms /    18 runs   (    0.14 ms per token,  6998.44 tokens per second)
0.01.678.170 I llama_perf_context_print:        load time =     485.13 ms
0.01.678.172 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.678.173 I llama_perf_context_print:        eval time =    1180.08 ms /    17 runs   (   69.42 ms per token,    14.41 tokens per second)
0.01.678.174 I llama_perf_context_print:       total time =    1191.06 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.090s
user	0m28.778s
sys	0m9.650s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4006 (4bc40562)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32003.79 ms
main:    total time = 32003.79 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.547 I build: 4006 (4bc40562) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.747 I main: llama backend init
0.00.001.851 I main: load the model and apply lora adapter, if any
0.00.022.524 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.534 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.543 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.547 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.548 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.552 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.553 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.554 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.554 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.555 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.556 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.559 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.559 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.560 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.560 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.561 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.642 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.197 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.039 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.045 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.046 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.047 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.047 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.048 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.048 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.051 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.051 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.053 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.054 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.054 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.057 I llama_model_loader: - type  f32:   37 tensors
0.00.132.058 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.058 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.642 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.269 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.877 I llm_load_vocab: special tokens cache size = 5
0.00.265.100 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.115 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.116 I llm_load_print_meta: arch             = gemma
0.00.265.116 I llm_load_print_meta: vocab type       = SPM
0.00.265.117 I llm_load_print_meta: n_vocab          = 256000
0.00.265.118 I llm_load_print_meta: n_merges         = 0
0.00.265.118 I llm_load_print_meta: vocab_only       = 0
0.00.265.128 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.129 I llm_load_print_meta: n_embd           = 2048
0.00.265.129 I llm_load_print_meta: n_layer          = 18
0.00.265.141 I llm_load_print_meta: n_head           = 8
0.00.265.142 I llm_load_print_meta: n_head_kv        = 1
0.00.265.142 I llm_load_print_meta: n_rot            = 256
0.00.265.143 I llm_load_print_meta: n_swa            = 0
0.00.265.143 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.143 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.144 I llm_load_print_meta: n_gqa            = 8
0.00.265.145 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.146 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.147 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.149 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.149 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.149 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.150 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.150 I llm_load_print_meta: n_ff             = 16384
0.00.265.151 I llm_load_print_meta: n_expert         = 0
0.00.265.151 I llm_load_print_meta: n_expert_used    = 0
0.00.265.152 I llm_load_print_meta: causal attn      = 1
0.00.265.152 I llm_load_print_meta: pooling type     = 0
0.00.265.153 I llm_load_print_meta: rope type        = 2
0.00.265.153 I llm_load_print_meta: rope scaling     = linear
0.00.265.154 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.155 I llm_load_print_meta: freq_scale_train = 1
0.00.265.156 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.156 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.156 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.156 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.157 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.157 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.157 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.158 I llm_load_print_meta: model type       = 2B
0.00.265.158 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.160 I llm_load_print_meta: model params     = 2.51 B
0.00.265.161 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.161 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.161 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.162 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.162 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.163 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.164 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.164 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.164 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.165 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.165 I llm_load_print_meta: max token length = 93
0.00.327.894 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.327.901 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.327.901 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.327.902 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.327.903 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.327.903 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.333.194 I llama_new_context_with_model: n_ctx      = 8192
0.00.333.201 I llama_new_context_with_model: n_batch    = 2048
0.00.333.202 I llama_new_context_with_model: n_ubatch   = 512
0.00.333.202 I llama_new_context_with_model: flash_attn = 0
0.00.333.205 I llama_new_context_with_model: freq_base  = 10000.0
0.00.333.206 I llama_new_context_with_model: freq_scale = 1
0.00.364.026 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.364.041 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.364.135 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.365.421 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.365.427 I llama_new_context_with_model: graph nodes  = 601
0.00.365.428 I llama_new_context_with_model: graph splits = 1
0.00.365.429 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.450.263 I main: llama threadpool init, n_threads = 4
0.00.450.277 I 
0.00.450.354 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.450.358 I 
0.00.450.405 I sampler seed: 2691918878
0.00.450.415 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.450.418 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.450.418 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.450.419 I 
 seconally to the provided definition.

I am unable to provide you with a definition for the term "seconally" as it appears to be misspelled. [end of text]


0.02.125.026 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6772.01 tokens per second)
0.02.125.028 I llama_perf_context_print:        load time =     448.39 ms
0.02.125.029 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.125.030 I llama_perf_context_print:        eval time =    1654.45 ms /    32 runs   (   51.70 ms per token,    19.34 tokens per second)
0.02.125.031 I llama_perf_context_print:       total time =    1674.77 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4006 (4bc40562)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32047.71 ms
main:    total time = 32047.71 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.534 I build: 4006 (4bc40562) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.722 I main: llama backend init
0.00.001.835 I main: load the model and apply lora adapter, if any
0.00.022.239 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.253 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.259 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.260 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.263 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.264 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.265 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.265 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.266 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.267 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.271 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.272 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.272 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.273 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.274 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.490 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.935 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.789 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.795 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.796 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.797 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.797 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.798 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.799 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.801 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.802 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.805 I llama_model_loader: - type  f32:   37 tensors
0.00.131.807 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.807 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.207 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.267 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.852 I llm_load_vocab: special tokens cache size = 5
0.00.268.801 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.832 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.833 I llm_load_print_meta: arch             = gemma
0.00.268.834 I llm_load_print_meta: vocab type       = SPM
0.00.268.834 I llm_load_print_meta: n_vocab          = 256000
0.00.268.835 I llm_load_print_meta: n_merges         = 0
0.00.268.835 I llm_load_print_meta: vocab_only       = 0
0.00.268.835 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.836 I llm_load_print_meta: n_embd           = 2048
0.00.268.836 I llm_load_print_meta: n_layer          = 18
0.00.268.847 I llm_load_print_meta: n_head           = 8
0.00.268.848 I llm_load_print_meta: n_head_kv        = 1
0.00.268.849 I llm_load_print_meta: n_rot            = 256
0.00.268.849 I llm_load_print_meta: n_swa            = 0
0.00.268.849 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.850 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.851 I llm_load_print_meta: n_gqa            = 8
0.00.268.852 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.853 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.854 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.856 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.856 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.857 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.857 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.858 I llm_load_print_meta: n_ff             = 16384
0.00.268.858 I llm_load_print_meta: n_expert         = 0
0.00.268.859 I llm_load_print_meta: n_expert_used    = 0
0.00.268.860 I llm_load_print_meta: causal attn      = 1
0.00.268.862 I llm_load_print_meta: pooling type     = 0
0.00.268.862 I llm_load_print_meta: rope type        = 2
0.00.268.863 I llm_load_print_meta: rope scaling     = linear
0.00.268.865 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.865 I llm_load_print_meta: freq_scale_train = 1
0.00.268.865 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.866 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.866 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.866 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.867 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.867 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.868 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.868 I llm_load_print_meta: model type       = 2B
0.00.268.869 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.870 I llm_load_print_meta: model params     = 2.51 B
0.00.268.871 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.871 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.874 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.875 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.875 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.875 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.876 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.876 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.876 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.878 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.878 I llm_load_print_meta: max token length = 93
0.00.934.630 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.939.787 I llama_new_context_with_model: n_ctx      = 8192
0.00.939.793 I llama_new_context_with_model: n_batch    = 2048
0.00.939.793 I llama_new_context_with_model: n_ubatch   = 512
0.00.939.794 I llama_new_context_with_model: flash_attn = 0
0.00.939.796 I llama_new_context_with_model: freq_base  = 10000.0
0.00.939.797 I llama_new_context_with_model: freq_scale = 1
0.00.968.686 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.968.701 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.968.790 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.970.078 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.970.082 I llama_new_context_with_model: graph nodes  = 601
0.00.970.083 I llama_new_context_with_model: graph splits = 1
0.00.970.084 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.052.479 I main: llama threadpool init, n_threads = 4
0.01.052.492 I 
0.01.052.568 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.052.572 I 
0.01.052.612 I sampler seed: 923305983
0.01.052.623 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.052.626 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.052.627 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.052.627 I 
 effeidna!

I'm not sure how to respond to this question. The question contains a misspelling and grammatical errors, making it difficult to understand

0.02.687.704 I llama_perf_sampler_print:    sampling time =       4.62 ms /    33 runs   (    0.14 ms per token,  7141.31 tokens per second)
0.02.687.706 I llama_perf_context_print:        load time =    1050.62 ms
0.02.687.708 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.687.709 I llama_perf_context_print:        eval time =    1616.93 ms /    32 runs   (   50.53 ms per token,    19.79 tokens per second)
0.02.687.710 I llama_perf_context_print:       total time =    1635.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.742s
user	8m14.764s
sys	0m7.043s
