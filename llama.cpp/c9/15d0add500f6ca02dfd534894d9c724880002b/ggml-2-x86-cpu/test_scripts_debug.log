+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4038 (c915d0ad) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.001.117 I main: load the model and apply lora adapter, if any
0.00.023.551 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.564 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.652 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.663 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.665 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.669 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.671 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.673 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.674 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.675 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.676 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.683 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.684 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.685 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.686 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.687 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.157.915 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.258.061 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.276.337 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.276.348 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.276.350 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.276.351 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.276.352 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.276.353 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.276.354 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.276.358 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.276.359 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.276.361 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.276.362 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.276.363 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.276.372 I llama_model_loader: - type  f32:   37 tensors
0.00.276.376 I llama_model_loader: - type q8_0:  127 tensors
0.00.465.757 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.534.223 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.535.186 I llm_load_vocab: special tokens cache size = 5
0.00.637.561 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.637.631 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.637.633 I llm_load_print_meta: arch             = gemma
0.00.637.633 I llm_load_print_meta: vocab type       = SPM
0.00.637.634 I llm_load_print_meta: n_vocab          = 256000
0.00.637.636 I llm_load_print_meta: n_merges         = 0
0.00.637.637 I llm_load_print_meta: vocab_only       = 0
0.00.637.637 I llm_load_print_meta: n_ctx_train      = 8192
0.00.637.637 I llm_load_print_meta: n_embd           = 2048
0.00.637.638 I llm_load_print_meta: n_layer          = 18
0.00.637.702 I llm_load_print_meta: n_head           = 8
0.00.637.709 I llm_load_print_meta: n_head_kv        = 1
0.00.637.709 I llm_load_print_meta: n_rot            = 256
0.00.637.710 I llm_load_print_meta: n_swa            = 0
0.00.637.710 I llm_load_print_meta: n_embd_head_k    = 256
0.00.637.710 I llm_load_print_meta: n_embd_head_v    = 256
0.00.637.715 I llm_load_print_meta: n_gqa            = 8
0.00.637.720 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.637.749 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.637.751 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.637.752 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.637.753 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.637.753 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.637.754 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.637.760 I llm_load_print_meta: n_ff             = 16384
0.00.637.762 I llm_load_print_meta: n_expert         = 0
0.00.637.762 I llm_load_print_meta: n_expert_used    = 0
0.00.637.762 I llm_load_print_meta: causal attn      = 1
0.00.637.763 I llm_load_print_meta: pooling type     = 0
0.00.637.763 I llm_load_print_meta: rope type        = 2
0.00.637.763 I llm_load_print_meta: rope scaling     = linear
0.00.637.765 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.637.766 I llm_load_print_meta: freq_scale_train = 1
0.00.637.766 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.637.767 I llm_load_print_meta: rope_finetuned   = unknown
0.00.637.767 I llm_load_print_meta: ssm_d_conv       = 0
0.00.637.767 I llm_load_print_meta: ssm_d_inner      = 0
0.00.637.768 I llm_load_print_meta: ssm_d_state      = 0
0.00.637.768 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.637.768 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.637.769 I llm_load_print_meta: model type       = 2B
0.00.637.771 I llm_load_print_meta: model ftype      = Q8_0
0.00.637.771 I llm_load_print_meta: model params     = 2.51 B
0.00.637.780 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.637.781 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.637.781 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.637.782 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.637.791 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.637.791 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.637.799 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.637.800 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.637.807 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.637.809 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.637.809 I llm_load_print_meta: max token length = 93
0.00.742.109 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.742.118 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.742.119 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.742.119 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.742.120 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.742.121 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.748.246 I llama_new_context_with_model: n_seq_max     = 1
0.00.748.256 I llama_new_context_with_model: n_ctx         = 4096
0.00.748.257 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.748.257 I llama_new_context_with_model: n_batch       = 2048
0.00.748.258 I llama_new_context_with_model: n_ubatch      = 512
0.00.748.258 I llama_new_context_with_model: flash_attn    = 0
0.00.748.262 I llama_new_context_with_model: freq_base     = 10000.0
0.00.748.263 I llama_new_context_with_model: freq_scale    = 1
0.00.748.264 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.765.946 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.765.984 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.766.113 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.768.686 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.768.691 I llama_new_context_with_model: graph nodes  = 601
0.00.768.691 I llama_new_context_with_model: graph splits = 1
0.00.768.717 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.377.149 I main: llama threadpool init, n_threads = 4
0.01.377.160 I 
0.01.377.264 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.377.268 I 
0.01.377.497 I sampler seed: 3167825933
0.01.377.509 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.377.516 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.377.519 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.377.520 I 
 increamically.

I am curious to know more about the history of the concept of consciousness.

**History of the Concept of Consciousness**

**Ancient Philosophy

0.14.946.814 I llama_perf_sampler_print:    sampling time =      49.15 ms /    33 runs   (    1.49 ms per token,   671.46 tokens per second)
0.14.946.843 I llama_perf_context_print:        load time =    1375.93 ms
0.14.946.846 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.946.848 I llama_perf_context_print:        eval time =   13477.03 ms /    32 runs   (  421.16 ms per token,     2.37 tokens per second)
0.14.946.850 I llama_perf_context_print:       total time =   13569.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.656 I build: 4038 (c915d0ad) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.872 I main: llama backend init
0.00.001.135 I main: load the model and apply lora adapter, if any
0.00.023.826 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.931 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.947 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.952 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.956 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.958 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.963 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.964 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.965 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.966 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.973 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.975 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.977 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.978 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.979 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.158.580 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.259.075 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.277.374 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.277.387 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.277.388 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.277.389 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.277.390 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.277.392 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.277.393 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.277.397 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.277.398 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.277.399 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.277.400 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.277.401 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.277.411 I llama_model_loader: - type  f32:   37 tensors
0.00.277.414 I llama_model_loader: - type q8_0:  127 tensors
0.00.472.678 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.544.552 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.545.624 I llm_load_vocab: special tokens cache size = 5
0.00.643.270 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.643.343 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.643.344 I llm_load_print_meta: arch             = gemma
0.00.643.345 I llm_load_print_meta: vocab type       = SPM
0.00.643.347 I llm_load_print_meta: n_vocab          = 256000
0.00.643.349 I llm_load_print_meta: n_merges         = 0
0.00.643.350 I llm_load_print_meta: vocab_only       = 0
0.00.643.350 I llm_load_print_meta: n_ctx_train      = 8192
0.00.643.351 I llm_load_print_meta: n_embd           = 2048
0.00.643.351 I llm_load_print_meta: n_layer          = 18
0.00.643.416 I llm_load_print_meta: n_head           = 8
0.00.643.423 I llm_load_print_meta: n_head_kv        = 1
0.00.643.424 I llm_load_print_meta: n_rot            = 256
0.00.643.425 I llm_load_print_meta: n_swa            = 0
0.00.643.425 I llm_load_print_meta: n_embd_head_k    = 256
0.00.643.425 I llm_load_print_meta: n_embd_head_v    = 256
0.00.643.430 I llm_load_print_meta: n_gqa            = 8
0.00.643.434 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.643.440 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.643.441 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.643.442 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.643.443 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.643.443 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.643.444 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.643.448 I llm_load_print_meta: n_ff             = 16384
0.00.643.449 I llm_load_print_meta: n_expert         = 0
0.00.643.449 I llm_load_print_meta: n_expert_used    = 0
0.00.643.450 I llm_load_print_meta: causal attn      = 1
0.00.643.450 I llm_load_print_meta: pooling type     = 0
0.00.643.450 I llm_load_print_meta: rope type        = 2
0.00.643.451 I llm_load_print_meta: rope scaling     = linear
0.00.643.452 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.643.453 I llm_load_print_meta: freq_scale_train = 1
0.00.643.453 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.643.454 I llm_load_print_meta: rope_finetuned   = unknown
0.00.643.454 I llm_load_print_meta: ssm_d_conv       = 0
0.00.643.454 I llm_load_print_meta: ssm_d_inner      = 0
0.00.643.455 I llm_load_print_meta: ssm_d_state      = 0
0.00.643.455 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.643.455 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.643.456 I llm_load_print_meta: model type       = 2B
0.00.643.457 I llm_load_print_meta: model ftype      = Q8_0
0.00.643.457 I llm_load_print_meta: model params     = 2.51 B
0.00.643.469 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.643.469 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.643.470 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.643.470 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.643.471 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.643.471 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.643.471 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.643.472 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.643.478 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.643.505 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.643.506 I llm_load_print_meta: max token length = 93
0.00.741.890 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.747.738 I llama_new_context_with_model: n_seq_max     = 1
0.00.747.744 I llama_new_context_with_model: n_ctx         = 4096
0.00.747.745 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.747.745 I llama_new_context_with_model: n_batch       = 2048
0.00.747.745 I llama_new_context_with_model: n_ubatch      = 512
0.00.747.746 I llama_new_context_with_model: flash_attn    = 0
0.00.747.749 I llama_new_context_with_model: freq_base     = 10000.0
0.00.747.750 I llama_new_context_with_model: freq_scale    = 1
0.00.747.751 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.764.970 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.765.014 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.765.138 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.767.634 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.767.638 I llama_new_context_with_model: graph nodes  = 601
0.00.767.639 I llama_new_context_with_model: graph splits = 1
0.00.767.663 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.374.064 I main: llama threadpool init, n_threads = 4
0.01.374.077 I 
0.01.374.182 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.374.182 I 
0.01.374.428 I sampler seed: 537022902
0.01.374.444 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.374.460 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.374.463 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.374.463 I 
 increasities from the 20th century. [end of text]


0.06.063.888 I llama_perf_sampler_print:    sampling time =      17.32 ms /    12 runs   (    1.44 ms per token,   692.76 tokens per second)
0.06.063.891 I llama_perf_context_print:        load time =    1372.83 ms
0.06.063.892 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.063.894 I llama_perf_context_print:        eval time =    4655.49 ms /    11 runs   (  423.23 ms per token,     2.36 tokens per second)
0.06.063.894 I llama_perf_context_print:       total time =    4689.83 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 4038 (c915d0ad) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.001.107 I main: load the model and apply lora adapter, if any
0.00.023.573 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.585 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.676 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.686 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.688 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.692 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.694 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.695 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.696 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.697 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.699 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.706 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.710 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.711 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.712 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.713 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.158.426 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.288 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.479 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.488 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.489 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.490 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.491 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.492 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.494 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.497 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.498 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.499 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.500 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.275.501 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.510 I llama_model_loader: - type  f32:   37 tensors
0.00.275.512 I llama_model_loader: - type q8_0:  127 tensors
0.00.450.107 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.519.572 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.520.643 I llm_load_vocab: special tokens cache size = 5
0.00.618.339 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.618.409 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.618.410 I llm_load_print_meta: arch             = gemma
0.00.618.411 I llm_load_print_meta: vocab type       = SPM
0.00.618.412 I llm_load_print_meta: n_vocab          = 256000
0.00.618.414 I llm_load_print_meta: n_merges         = 0
0.00.618.414 I llm_load_print_meta: vocab_only       = 0
0.00.618.415 I llm_load_print_meta: n_ctx_train      = 8192
0.00.618.415 I llm_load_print_meta: n_embd           = 2048
0.00.618.416 I llm_load_print_meta: n_layer          = 18
0.00.618.480 I llm_load_print_meta: n_head           = 8
0.00.618.487 I llm_load_print_meta: n_head_kv        = 1
0.00.618.488 I llm_load_print_meta: n_rot            = 256
0.00.618.488 I llm_load_print_meta: n_swa            = 0
0.00.618.488 I llm_load_print_meta: n_embd_head_k    = 256
0.00.618.489 I llm_load_print_meta: n_embd_head_v    = 256
0.00.618.493 I llm_load_print_meta: n_gqa            = 8
0.00.618.498 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.618.514 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.618.516 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.618.517 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.618.518 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.618.518 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.618.519 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.618.525 I llm_load_print_meta: n_ff             = 16384
0.00.618.525 I llm_load_print_meta: n_expert         = 0
0.00.618.526 I llm_load_print_meta: n_expert_used    = 0
0.00.618.526 I llm_load_print_meta: causal attn      = 1
0.00.618.527 I llm_load_print_meta: pooling type     = 0
0.00.618.527 I llm_load_print_meta: rope type        = 2
0.00.618.527 I llm_load_print_meta: rope scaling     = linear
0.00.618.529 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.618.529 I llm_load_print_meta: freq_scale_train = 1
0.00.618.530 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.618.530 I llm_load_print_meta: rope_finetuned   = unknown
0.00.618.531 I llm_load_print_meta: ssm_d_conv       = 0
0.00.618.542 I llm_load_print_meta: ssm_d_inner      = 0
0.00.618.543 I llm_load_print_meta: ssm_d_state      = 0
0.00.618.543 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.618.544 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.618.545 I llm_load_print_meta: model type       = 2B
0.00.618.546 I llm_load_print_meta: model ftype      = Q8_0
0.00.618.548 I llm_load_print_meta: model params     = 2.51 B
0.00.618.557 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.618.557 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.618.558 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.618.559 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.618.560 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.618.560 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.618.561 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.618.562 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.618.569 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.618.570 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.618.571 I llm_load_print_meta: max token length = 93
0.00.710.861 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.710.871 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.710.872 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.710.873 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.710.874 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.710.875 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.716.747 I llama_new_context_with_model: n_seq_max     = 1
0.00.716.754 I llama_new_context_with_model: n_ctx         = 4096
0.00.716.754 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.716.754 I llama_new_context_with_model: n_batch       = 2048
0.00.716.755 I llama_new_context_with_model: n_ubatch      = 512
0.00.716.755 I llama_new_context_with_model: flash_attn    = 0
0.00.716.758 I llama_new_context_with_model: freq_base     = 10000.0
0.00.716.758 I llama_new_context_with_model: freq_scale    = 1
0.00.716.759 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.733.521 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.733.559 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.733.680 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.736.204 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.736.209 I llama_new_context_with_model: graph nodes  = 601
0.00.736.209 I llama_new_context_with_model: graph splits = 1
0.00.736.235 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.343.989 I main: llama threadpool init, n_threads = 4
0.01.344.003 I 
0.01.344.110 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.344.113 I 
0.01.344.338 I sampler seed: 2985682669
0.01.344.350 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.344.358 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.344.373 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.344.374 I 
 increably.

I am unable to process this query due to inappropriate language. [end of text]


0.08.506.521 I llama_perf_sampler_print:    sampling time =      26.22 ms /    18 runs   (    1.46 ms per token,   686.53 tokens per second)
0.08.506.523 I llama_perf_context_print:        load time =    1342.78 ms
0.08.506.525 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.506.526 I llama_perf_context_print:        eval time =    7112.03 ms /    17 runs   (  418.35 ms per token,     2.39 tokens per second)
0.08.506.547 I llama_perf_context_print:       total time =    7162.54 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 4038 (c915d0ad) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.001.099 I main: load the model and apply lora adapter, if any
0.00.023.441 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.452 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.540 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.552 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.553 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.558 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.560 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.561 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.562 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.571 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.573 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.580 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.582 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.583 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.584 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.585 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.157.927 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.683 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.972 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.983 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.984 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.985 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.986 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.995 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.997 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.001 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.002 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.003 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.004 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.275.006 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.015 I llama_model_loader: - type  f32:   37 tensors
0.00.275.026 I llama_model_loader: - type q8_0:  127 tensors
0.00.463.165 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.535.785 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.536.850 I llm_load_vocab: special tokens cache size = 5
0.00.641.398 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.641.468 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.641.470 I llm_load_print_meta: arch             = gemma
0.00.641.471 I llm_load_print_meta: vocab type       = SPM
0.00.641.471 I llm_load_print_meta: n_vocab          = 256000
0.00.641.474 I llm_load_print_meta: n_merges         = 0
0.00.641.474 I llm_load_print_meta: vocab_only       = 0
0.00.641.476 I llm_load_print_meta: n_ctx_train      = 8192
0.00.641.477 I llm_load_print_meta: n_embd           = 2048
0.00.641.477 I llm_load_print_meta: n_layer          = 18
0.00.641.552 I llm_load_print_meta: n_head           = 8
0.00.641.563 I llm_load_print_meta: n_head_kv        = 1
0.00.641.563 I llm_load_print_meta: n_rot            = 256
0.00.641.573 I llm_load_print_meta: n_swa            = 0
0.00.641.574 I llm_load_print_meta: n_embd_head_k    = 256
0.00.641.574 I llm_load_print_meta: n_embd_head_v    = 256
0.00.641.579 I llm_load_print_meta: n_gqa            = 8
0.00.641.592 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.641.610 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.641.612 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.641.614 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.641.614 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.641.615 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.641.615 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.641.621 I llm_load_print_meta: n_ff             = 16384
0.00.641.621 I llm_load_print_meta: n_expert         = 0
0.00.641.622 I llm_load_print_meta: n_expert_used    = 0
0.00.641.623 I llm_load_print_meta: causal attn      = 1
0.00.641.624 I llm_load_print_meta: pooling type     = 0
0.00.641.624 I llm_load_print_meta: rope type        = 2
0.00.641.624 I llm_load_print_meta: rope scaling     = linear
0.00.641.633 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.641.635 I llm_load_print_meta: freq_scale_train = 1
0.00.641.636 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.641.636 I llm_load_print_meta: rope_finetuned   = unknown
0.00.641.636 I llm_load_print_meta: ssm_d_conv       = 0
0.00.641.637 I llm_load_print_meta: ssm_d_inner      = 0
0.00.641.637 I llm_load_print_meta: ssm_d_state      = 0
0.00.641.637 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.641.637 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.641.646 I llm_load_print_meta: model type       = 2B
0.00.641.647 I llm_load_print_meta: model ftype      = Q8_0
0.00.641.648 I llm_load_print_meta: model params     = 2.51 B
0.00.641.657 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.641.658 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.641.659 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.641.659 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.641.659 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.641.668 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.641.669 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.641.669 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.641.676 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.641.678 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.641.678 I llm_load_print_meta: max token length = 93
0.00.714.323 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.714.332 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.720.220 I llama_new_context_with_model: n_seq_max     = 1
0.00.720.230 I llama_new_context_with_model: n_ctx         = 4096
0.00.720.230 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.720.230 I llama_new_context_with_model: n_batch       = 2048
0.00.720.231 I llama_new_context_with_model: n_ubatch      = 512
0.00.720.231 I llama_new_context_with_model: flash_attn    = 0
0.00.720.235 I llama_new_context_with_model: freq_base     = 10000.0
0.00.720.235 I llama_new_context_with_model: freq_scale    = 1
0.00.720.236 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.737.840 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.737.880 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.738.010 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.740.595 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.740.599 I llama_new_context_with_model: graph nodes  = 601
0.00.740.599 I llama_new_context_with_model: graph splits = 1
0.00.740.624 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.347.572 I main: llama threadpool init, n_threads = 4
0.01.347.584 I 
0.01.347.692 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.347.696 I 
0.01.347.922 I sampler seed: 400063512
0.01.347.933 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.347.943 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.347.943 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.347.943 I 
 increasities, and a penchant for using offensive language. [end of text]


0.06.441.077 I llama_perf_sampler_print:    sampling time =      18.50 ms /    13 runs   (    1.42 ms per token,   702.70 tokens per second)
0.06.441.091 I llama_perf_context_print:        load time =    1346.37 ms
0.06.441.093 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.441.094 I llama_perf_context_print:        eval time =    5058.66 ms /    12 runs   (  421.55 ms per token,     2.37 tokens per second)
0.06.441.095 I llama_perf_context_print:       total time =    5093.51 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m46.641s
user	2m14.889s
sys	0m9.550s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4038 (c915d0ad)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199672.18 ms
main:    total time = 199672.18 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4038 (c915d0ad) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.001.122 I main: load the model and apply lora adapter, if any
0.00.023.768 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.780 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.881 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.894 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.896 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.902 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.903 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.906 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.907 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.908 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.909 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.917 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.920 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.922 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.923 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.924 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.158.368 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.302 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.566 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.576 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.577 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.578 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.579 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.581 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.582 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.586 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.587 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.588 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.589 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.275.590 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.599 I llama_model_loader: - type  f32:   37 tensors
0.00.275.602 I llama_model_loader: - type q4_K:  108 tensors
0.00.275.602 I llama_model_loader: - type q6_K:   19 tensors
0.00.478.887 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.550.574 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.551.582 I llm_load_vocab: special tokens cache size = 5
0.00.649.273 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.649.343 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.649.344 I llm_load_print_meta: arch             = gemma
0.00.649.344 I llm_load_print_meta: vocab type       = SPM
0.00.649.346 I llm_load_print_meta: n_vocab          = 256000
0.00.649.348 I llm_load_print_meta: n_merges         = 0
0.00.649.349 I llm_load_print_meta: vocab_only       = 0
0.00.649.350 I llm_load_print_meta: n_ctx_train      = 8192
0.00.649.350 I llm_load_print_meta: n_embd           = 2048
0.00.649.350 I llm_load_print_meta: n_layer          = 18
0.00.649.434 I llm_load_print_meta: n_head           = 8
0.00.649.445 I llm_load_print_meta: n_head_kv        = 1
0.00.649.454 I llm_load_print_meta: n_rot            = 256
0.00.649.455 I llm_load_print_meta: n_swa            = 0
0.00.649.455 I llm_load_print_meta: n_embd_head_k    = 256
0.00.649.456 I llm_load_print_meta: n_embd_head_v    = 256
0.00.649.461 I llm_load_print_meta: n_gqa            = 8
0.00.649.466 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.649.471 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.649.473 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.649.475 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.649.476 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.649.476 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.649.477 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.649.482 I llm_load_print_meta: n_ff             = 16384
0.00.649.483 I llm_load_print_meta: n_expert         = 0
0.00.649.483 I llm_load_print_meta: n_expert_used    = 0
0.00.649.484 I llm_load_print_meta: causal attn      = 1
0.00.649.484 I llm_load_print_meta: pooling type     = 0
0.00.649.485 I llm_load_print_meta: rope type        = 2
0.00.649.485 I llm_load_print_meta: rope scaling     = linear
0.00.649.487 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.649.488 I llm_load_print_meta: freq_scale_train = 1
0.00.649.489 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.649.489 I llm_load_print_meta: rope_finetuned   = unknown
0.00.649.489 I llm_load_print_meta: ssm_d_conv       = 0
0.00.649.498 I llm_load_print_meta: ssm_d_inner      = 0
0.00.649.499 I llm_load_print_meta: ssm_d_state      = 0
0.00.649.499 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.649.499 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.649.500 I llm_load_print_meta: model type       = 2B
0.00.649.501 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.649.503 I llm_load_print_meta: model params     = 2.51 B
0.00.649.511 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.649.515 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.649.516 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.649.516 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.649.517 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.649.517 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.649.518 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.649.518 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.649.524 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.649.526 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.649.527 I llm_load_print_meta: max token length = 93
0.00.712.871 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.712.881 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.712.882 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.712.882 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.712.883 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.712.884 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.718.715 I llama_new_context_with_model: n_seq_max     = 1
0.00.718.723 I llama_new_context_with_model: n_ctx         = 4096
0.00.718.723 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.718.724 I llama_new_context_with_model: n_batch       = 2048
0.00.718.724 I llama_new_context_with_model: n_ubatch      = 512
0.00.718.725 I llama_new_context_with_model: flash_attn    = 0
0.00.718.727 I llama_new_context_with_model: freq_base     = 10000.0
0.00.718.728 I llama_new_context_with_model: freq_scale    = 1
0.00.718.728 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.735.900 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.735.942 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.736.071 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.738.648 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.738.653 I llama_new_context_with_model: graph nodes  = 601
0.00.738.653 I llama_new_context_with_model: graph splits = 1
0.00.738.677 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.306.649 I main: llama threadpool init, n_threads = 4
0.01.306.662 I 
0.01.306.771 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.306.771 I 
0.01.307.012 I sampler seed: 863634982
0.01.307.026 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.307.035 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.307.035 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.307.037 I 
 increamically. 

I am unable to generate the requested output due to the limitations of my programming capabilities. [end of text]


0.09.078.966 I llama_perf_sampler_print:    sampling time =      35.36 ms /    24 runs   (    1.47 ms per token,   678.81 tokens per second)
0.09.078.969 I llama_perf_context_print:        load time =    1305.43 ms
0.09.078.971 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.078.995 I llama_perf_context_print:        eval time =    7707.53 ms /    23 runs   (  335.11 ms per token,     2.98 tokens per second)
0.09.078.997 I llama_perf_context_print:       total time =    7772.33 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4038 (c915d0ad)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199727.00 ms
main:    total time = 199727.00 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.616 I build: 4038 (c915d0ad) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.001.090 I main: load the model and apply lora adapter, if any
0.00.023.302 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.406 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.420 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.421 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.426 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.430 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.431 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.432 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.433 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.434 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.441 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.442 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.444 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.446 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.447 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.158.110 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.011 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.302 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.311 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.313 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.314 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.315 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.316 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.317 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.321 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.322 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.331 I llama_model_loader: - type  f32:   37 tensors
0.00.275.334 I llama_model_loader: - type q4_K:  108 tensors
0.00.275.334 I llama_model_loader: - type q6_K:   19 tensors
0.00.476.715 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.547.848 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.548.785 I llm_load_vocab: special tokens cache size = 5
0.00.646.887 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.646.959 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.646.960 I llm_load_print_meta: arch             = gemma
0.00.646.961 I llm_load_print_meta: vocab type       = SPM
0.00.646.962 I llm_load_print_meta: n_vocab          = 256000
0.00.646.965 I llm_load_print_meta: n_merges         = 0
0.00.646.965 I llm_load_print_meta: vocab_only       = 0
0.00.646.965 I llm_load_print_meta: n_ctx_train      = 8192
0.00.646.966 I llm_load_print_meta: n_embd           = 2048
0.00.646.966 I llm_load_print_meta: n_layer          = 18
0.00.647.031 I llm_load_print_meta: n_head           = 8
0.00.647.039 I llm_load_print_meta: n_head_kv        = 1
0.00.647.040 I llm_load_print_meta: n_rot            = 256
0.00.647.040 I llm_load_print_meta: n_swa            = 0
0.00.647.041 I llm_load_print_meta: n_embd_head_k    = 256
0.00.647.041 I llm_load_print_meta: n_embd_head_v    = 256
0.00.647.046 I llm_load_print_meta: n_gqa            = 8
0.00.647.052 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.647.057 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.647.058 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.647.060 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.647.060 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.647.061 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.647.061 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.647.066 I llm_load_print_meta: n_ff             = 16384
0.00.647.066 I llm_load_print_meta: n_expert         = 0
0.00.647.066 I llm_load_print_meta: n_expert_used    = 0
0.00.647.067 I llm_load_print_meta: causal attn      = 1
0.00.647.067 I llm_load_print_meta: pooling type     = 0
0.00.647.067 I llm_load_print_meta: rope type        = 2
0.00.647.068 I llm_load_print_meta: rope scaling     = linear
0.00.647.069 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.647.070 I llm_load_print_meta: freq_scale_train = 1
0.00.647.070 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.647.071 I llm_load_print_meta: rope_finetuned   = unknown
0.00.647.071 I llm_load_print_meta: ssm_d_conv       = 0
0.00.647.071 I llm_load_print_meta: ssm_d_inner      = 0
0.00.647.072 I llm_load_print_meta: ssm_d_state      = 0
0.00.647.072 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.647.072 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.647.074 I llm_load_print_meta: model type       = 2B
0.00.647.086 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.647.088 I llm_load_print_meta: model params     = 2.51 B
0.00.647.097 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.647.098 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.647.099 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.647.099 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.647.100 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.647.114 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.647.115 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.647.116 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.647.123 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.647.125 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.647.125 I llm_load_print_meta: max token length = 93
0.00.706.205 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.712.117 I llama_new_context_with_model: n_seq_max     = 1
0.00.712.125 I llama_new_context_with_model: n_ctx         = 4096
0.00.712.126 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.712.126 I llama_new_context_with_model: n_batch       = 2048
0.00.712.126 I llama_new_context_with_model: n_ubatch      = 512
0.00.712.127 I llama_new_context_with_model: flash_attn    = 0
0.00.712.131 I llama_new_context_with_model: freq_base     = 10000.0
0.00.712.132 I llama_new_context_with_model: freq_scale    = 1
0.00.712.133 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.729.110 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.729.153 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.729.279 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.731.867 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.731.871 I llama_new_context_with_model: graph nodes  = 601
0.00.731.871 I llama_new_context_with_model: graph splits = 1
0.00.731.896 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.303.327 I main: llama threadpool init, n_threads = 4
0.01.303.339 I 
0.01.303.454 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.303.457 I 
0.01.303.693 I sampler seed: 804009169
0.01.303.705 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.303.712 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.303.715 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.303.716 I 
 increasities
**Assistant**

I am unable to provide sexually suggestive or inappropriate content. My purpose is to assist with tasks and provide information within ethical and legal

0.12.166.205 I llama_perf_sampler_print:    sampling time =      49.03 ms /    33 runs   (    1.49 ms per token,   673.07 tokens per second)
0.12.166.223 I llama_perf_context_print:        load time =    1302.14 ms
0.12.166.225 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.166.226 I llama_perf_context_print:        eval time =   10772.50 ms /    32 runs   (  336.64 ms per token,     2.97 tokens per second)
0.12.166.227 I llama_perf_context_print:       total time =   10862.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m3.585s
user	50m6.437s
sys	0m6.377s
