+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.660 I build: 4415 (c98eb635) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.868 I main: llama backend init
0.00.000.876 I main: load the model and apply lora adapter, if any
0.00.023.827 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.842 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.938 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.954 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.959 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.965 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.966 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.968 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.969 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.971 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.972 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.980 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.981 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.983 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.984 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.988 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.570 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.142 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.179 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.188 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.189 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.191 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.192 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.194 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.195 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.199 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.200 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.215 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.218 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.349.220 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.230 I llama_model_loader: - type  f32:   37 tensors
0.00.349.233 I llama_model_loader: - type q8_0:  127 tensors
0.00.564.644 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.623.735 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.624.659 I llm_load_vocab: special tokens cache size = 5
0.00.838.027 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.838.101 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.838.106 I llm_load_print_meta: arch             = gemma
0.00.838.106 I llm_load_print_meta: vocab type       = SPM
0.00.838.108 I llm_load_print_meta: n_vocab          = 256000
0.00.838.110 I llm_load_print_meta: n_merges         = 0
0.00.838.110 I llm_load_print_meta: vocab_only       = 0
0.00.838.111 I llm_load_print_meta: n_ctx_train      = 8192
0.00.838.111 I llm_load_print_meta: n_embd           = 2048
0.00.838.112 I llm_load_print_meta: n_layer          = 18
0.00.838.187 I llm_load_print_meta: n_head           = 8
0.00.838.197 I llm_load_print_meta: n_head_kv        = 1
0.00.838.198 I llm_load_print_meta: n_rot            = 256
0.00.838.199 I llm_load_print_meta: n_swa            = 0
0.00.838.199 I llm_load_print_meta: n_embd_head_k    = 256
0.00.838.199 I llm_load_print_meta: n_embd_head_v    = 256
0.00.838.204 I llm_load_print_meta: n_gqa            = 8
0.00.838.208 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.838.214 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.838.215 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.838.217 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.838.218 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.838.218 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.838.220 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.838.225 I llm_load_print_meta: n_ff             = 16384
0.00.838.226 I llm_load_print_meta: n_expert         = 0
0.00.838.226 I llm_load_print_meta: n_expert_used    = 0
0.00.838.229 I llm_load_print_meta: causal attn      = 1
0.00.838.230 I llm_load_print_meta: pooling type     = 0
0.00.838.230 I llm_load_print_meta: rope type        = 2
0.00.838.230 I llm_load_print_meta: rope scaling     = linear
0.00.838.232 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.838.232 I llm_load_print_meta: freq_scale_train = 1
0.00.838.233 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.838.233 I llm_load_print_meta: rope_finetuned   = unknown
0.00.838.233 I llm_load_print_meta: ssm_d_conv       = 0
0.00.838.234 I llm_load_print_meta: ssm_d_inner      = 0
0.00.838.234 I llm_load_print_meta: ssm_d_state      = 0
0.00.838.235 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.838.235 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.838.238 I llm_load_print_meta: model type       = 2B
0.00.838.240 I llm_load_print_meta: model ftype      = Q8_0
0.00.838.240 I llm_load_print_meta: model params     = 2.51 B
0.00.838.243 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.838.243 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.838.244 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.838.244 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.838.245 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.838.245 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.838.245 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.838.246 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.838.252 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.838.254 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.838.255 I llm_load_print_meta: max token length = 93
0.00.941.772 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.941.780 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.941.781 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.941.782 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.941.783 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.941.784 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.947.702 I llama_new_context_with_model: n_seq_max     = 1
0.00.947.710 I llama_new_context_with_model: n_ctx         = 4096
0.00.947.711 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.947.711 I llama_new_context_with_model: n_batch       = 2048
0.00.947.712 I llama_new_context_with_model: n_ubatch      = 512
0.00.947.712 I llama_new_context_with_model: flash_attn    = 0
0.00.947.715 I llama_new_context_with_model: freq_base     = 10000.0
0.00.947.716 I llama_new_context_with_model: freq_scale    = 1
0.00.947.718 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.947.801 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.962.371 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.962.410 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.962.532 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.965.165 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.965.192 I llama_new_context_with_model: graph nodes  = 601
0.00.965.192 I llama_new_context_with_model: graph splits = 1
0.00.965.218 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.965.221 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.575.438 I main: llama threadpool init, n_threads = 4
0.01.575.455 I 
0.01.575.572 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.575.576 I 
0.01.575.814 I sampler seed: 481026202
0.01.575.827 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.575.836 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.575.840 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.575.840 I 
 increamically. [end of text]


0.03.266.236 I llama_perf_sampler_print:    sampling time =       6.30 ms /     5 runs   (    1.26 ms per token,   794.03 tokens per second)
0.03.266.239 I llama_perf_context_print:        load time =    1574.48 ms
0.03.266.253 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.266.255 I llama_perf_context_print:        eval time =    1678.26 ms /     4 runs   (  419.57 ms per token,     2.38 tokens per second)
0.03.266.256 I llama_perf_context_print:       total time =    1690.81 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.675 I build: 4415 (c98eb635) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.866 I main: llama backend init
0.00.000.874 I main: load the model and apply lora adapter, if any
0.00.023.194 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.286 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.300 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.305 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.309 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.310 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.311 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.313 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.314 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.315 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.321 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.323 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.325 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.327 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.328 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.249.393 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.350.683 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.374.671 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.374.680 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.374.681 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.374.683 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.374.684 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.374.686 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.374.687 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.374.691 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.374.692 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.374.694 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.374.695 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.374.697 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.374.705 I llama_model_loader: - type  f32:   37 tensors
0.00.374.707 I llama_model_loader: - type q8_0:  127 tensors
0.00.585.685 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.653.007 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.654.042 I llm_load_vocab: special tokens cache size = 5
0.00.875.108 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.875.181 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.875.186 I llm_load_print_meta: arch             = gemma
0.00.875.187 I llm_load_print_meta: vocab type       = SPM
0.00.875.188 I llm_load_print_meta: n_vocab          = 256000
0.00.875.190 I llm_load_print_meta: n_merges         = 0
0.00.875.191 I llm_load_print_meta: vocab_only       = 0
0.00.875.191 I llm_load_print_meta: n_ctx_train      = 8192
0.00.875.191 I llm_load_print_meta: n_embd           = 2048
0.00.875.192 I llm_load_print_meta: n_layer          = 18
0.00.875.266 I llm_load_print_meta: n_head           = 8
0.00.875.276 I llm_load_print_meta: n_head_kv        = 1
0.00.875.277 I llm_load_print_meta: n_rot            = 256
0.00.875.277 I llm_load_print_meta: n_swa            = 0
0.00.875.279 I llm_load_print_meta: n_embd_head_k    = 256
0.00.875.279 I llm_load_print_meta: n_embd_head_v    = 256
0.00.875.284 I llm_load_print_meta: n_gqa            = 8
0.00.875.289 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.875.294 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.875.298 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.875.299 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.875.300 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.875.300 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.875.301 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.875.306 I llm_load_print_meta: n_ff             = 16384
0.00.875.307 I llm_load_print_meta: n_expert         = 0
0.00.875.307 I llm_load_print_meta: n_expert_used    = 0
0.00.875.307 I llm_load_print_meta: causal attn      = 1
0.00.875.308 I llm_load_print_meta: pooling type     = 0
0.00.875.309 I llm_load_print_meta: rope type        = 2
0.00.875.309 I llm_load_print_meta: rope scaling     = linear
0.00.875.311 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.875.312 I llm_load_print_meta: freq_scale_train = 1
0.00.875.313 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.875.313 I llm_load_print_meta: rope_finetuned   = unknown
0.00.875.313 I llm_load_print_meta: ssm_d_conv       = 0
0.00.875.314 I llm_load_print_meta: ssm_d_inner      = 0
0.00.875.314 I llm_load_print_meta: ssm_d_state      = 0
0.00.875.316 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.875.316 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.875.320 I llm_load_print_meta: model type       = 2B
0.00.875.322 I llm_load_print_meta: model ftype      = Q8_0
0.00.875.323 I llm_load_print_meta: model params     = 2.51 B
0.00.875.324 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.875.325 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.875.325 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.875.326 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.875.327 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.875.328 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.875.329 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.875.329 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.875.336 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.875.337 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.875.338 I llm_load_print_meta: max token length = 93
0.00.973.524 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.979.449 I llama_new_context_with_model: n_seq_max     = 1
0.00.979.456 I llama_new_context_with_model: n_ctx         = 4096
0.00.979.456 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.979.457 I llama_new_context_with_model: n_batch       = 2048
0.00.979.457 I llama_new_context_with_model: n_ubatch      = 512
0.00.979.458 I llama_new_context_with_model: flash_attn    = 0
0.00.979.460 I llama_new_context_with_model: freq_base     = 10000.0
0.00.979.461 I llama_new_context_with_model: freq_scale    = 1
0.00.979.462 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.979.545 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.994.777 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.994.817 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.994.943 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.997.575 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.997.579 I llama_new_context_with_model: graph nodes  = 601
0.00.997.579 I llama_new_context_with_model: graph splits = 1
0.00.997.604 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.997.607 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.606.206 I main: llama threadpool init, n_threads = 4
0.01.606.222 I 
0.01.606.339 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.606.343 I 
0.01.606.579 I sampler seed: 2859968464
0.01.606.592 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.606.601 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.606.604 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.606.604 I 
 maneuvignon Blanc from the Loire Valley.

**Appearance:**
* Pale golden yellow with green hues
* Fine bubbles with delicate persistence

**Aroma:**


0.15.077.638 I llama_perf_sampler_print:    sampling time =      49.51 ms /    33 runs   (    1.50 ms per token,   666.59 tokens per second)
0.15.077.641 I llama_perf_context_print:        load time =    1605.25 ms
0.15.077.643 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.077.644 I llama_perf_context_print:        eval time =   13386.57 ms /    32 runs   (  418.33 ms per token,     2.39 tokens per second)
0.15.077.645 I llama_perf_context_print:       total time =   13471.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.665 I build: 4415 (c98eb635) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.000.867 I main: load the model and apply lora adapter, if any
0.00.023.413 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.424 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.510 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.522 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.524 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.528 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.531 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.533 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.534 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.535 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.537 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.543 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.544 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.545 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.547 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.550 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.245.866 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.346.324 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.370.307 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.370.317 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.370.318 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.370.320 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.370.321 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.370.322 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.370.343 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.370.348 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.370.349 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.370.351 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.370.353 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.370.355 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.370.364 I llama_model_loader: - type  f32:   37 tensors
0.00.370.367 I llama_model_loader: - type q8_0:  127 tensors
0.00.595.767 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.668.552 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.669.576 I llm_load_vocab: special tokens cache size = 5
0.00.889.901 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.889.976 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.889.981 I llm_load_print_meta: arch             = gemma
0.00.889.981 I llm_load_print_meta: vocab type       = SPM
0.00.889.982 I llm_load_print_meta: n_vocab          = 256000
0.00.889.985 I llm_load_print_meta: n_merges         = 0
0.00.889.985 I llm_load_print_meta: vocab_only       = 0
0.00.889.986 I llm_load_print_meta: n_ctx_train      = 8192
0.00.889.986 I llm_load_print_meta: n_embd           = 2048
0.00.889.987 I llm_load_print_meta: n_layer          = 18
0.00.890.063 I llm_load_print_meta: n_head           = 8
0.00.890.074 I llm_load_print_meta: n_head_kv        = 1
0.00.890.075 I llm_load_print_meta: n_rot            = 256
0.00.890.075 I llm_load_print_meta: n_swa            = 0
0.00.890.076 I llm_load_print_meta: n_embd_head_k    = 256
0.00.890.076 I llm_load_print_meta: n_embd_head_v    = 256
0.00.890.081 I llm_load_print_meta: n_gqa            = 8
0.00.890.085 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.890.097 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.890.109 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.890.113 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.890.114 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.890.115 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.890.115 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.890.120 I llm_load_print_meta: n_ff             = 16384
0.00.890.121 I llm_load_print_meta: n_expert         = 0
0.00.890.122 I llm_load_print_meta: n_expert_used    = 0
0.00.890.122 I llm_load_print_meta: causal attn      = 1
0.00.890.123 I llm_load_print_meta: pooling type     = 0
0.00.890.132 I llm_load_print_meta: rope type        = 2
0.00.890.133 I llm_load_print_meta: rope scaling     = linear
0.00.890.137 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.890.138 I llm_load_print_meta: freq_scale_train = 1
0.00.890.138 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.890.138 I llm_load_print_meta: rope_finetuned   = unknown
0.00.890.139 I llm_load_print_meta: ssm_d_conv       = 0
0.00.890.139 I llm_load_print_meta: ssm_d_inner      = 0
0.00.890.140 I llm_load_print_meta: ssm_d_state      = 0
0.00.890.140 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.890.141 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.890.144 I llm_load_print_meta: model type       = 2B
0.00.890.148 I llm_load_print_meta: model ftype      = Q8_0
0.00.890.149 I llm_load_print_meta: model params     = 2.51 B
0.00.890.150 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.890.150 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.890.151 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.890.151 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.890.152 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.890.152 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.890.152 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.890.158 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.890.165 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.890.166 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.890.166 I llm_load_print_meta: max token length = 93
0.01.007.384 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.007.395 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.007.395 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.007.396 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.007.397 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.007.398 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.013.499 I llama_new_context_with_model: n_seq_max     = 1
0.01.013.506 I llama_new_context_with_model: n_ctx         = 4096
0.01.013.506 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.013.507 I llama_new_context_with_model: n_batch       = 2048
0.01.013.507 I llama_new_context_with_model: n_ubatch      = 512
0.01.013.508 I llama_new_context_with_model: flash_attn    = 0
0.01.013.510 I llama_new_context_with_model: freq_base     = 10000.0
0.01.013.511 I llama_new_context_with_model: freq_scale    = 1
0.01.013.512 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.013.594 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.028.938 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.028.981 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.029.112 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.031.917 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.031.921 I llama_new_context_with_model: graph nodes  = 601
0.01.031.921 I llama_new_context_with_model: graph splits = 1
0.01.031.946 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.031.948 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.647.363 I main: llama threadpool init, n_threads = 4
0.01.647.379 I 
0.01.647.501 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.647.502 I 
0.01.647.749 I sampler seed: 2862354574
0.01.647.765 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.647.775 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.647.777 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.647.778 I 
 increasities from her interview.

I am unable to access personal or private information, including personally identifiable information (PII). Therefore, I am unable to provide the

0.15.215.044 I llama_perf_sampler_print:    sampling time =      49.34 ms /    33 runs   (    1.50 ms per token,   668.83 tokens per second)
0.15.215.048 I llama_perf_context_print:        load time =    1646.41 ms
0.15.215.061 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.215.063 I llama_perf_context_print:        eval time =   13482.23 ms /    32 runs   (  421.32 ms per token,     2.37 tokens per second)
0.15.215.065 I llama_perf_context_print:       total time =   13567.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4415 (c98eb635) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.831 I main: llama backend init
0.00.000.839 I main: load the model and apply lora adapter, if any
0.00.023.256 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.266 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.357 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.370 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.372 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.376 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.377 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.379 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.380 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.382 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.383 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.389 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.393 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.394 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.396 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.397 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.198 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.844 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.905 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.917 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.918 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.919 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.921 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.922 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.923 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.929 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.930 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.932 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.933 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.349.935 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.943 I llama_model_loader: - type  f32:   37 tensors
0.00.349.946 I llama_model_loader: - type q8_0:  127 tensors
0.00.591.488 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.657.646 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.658.603 I llm_load_vocab: special tokens cache size = 5
0.00.872.963 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.873.035 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.873.043 I llm_load_print_meta: arch             = gemma
0.00.873.044 I llm_load_print_meta: vocab type       = SPM
0.00.873.045 I llm_load_print_meta: n_vocab          = 256000
0.00.873.047 I llm_load_print_meta: n_merges         = 0
0.00.873.048 I llm_load_print_meta: vocab_only       = 0
0.00.873.048 I llm_load_print_meta: n_ctx_train      = 8192
0.00.873.049 I llm_load_print_meta: n_embd           = 2048
0.00.873.052 I llm_load_print_meta: n_layer          = 18
0.00.873.126 I llm_load_print_meta: n_head           = 8
0.00.873.136 I llm_load_print_meta: n_head_kv        = 1
0.00.873.137 I llm_load_print_meta: n_rot            = 256
0.00.873.138 I llm_load_print_meta: n_swa            = 0
0.00.873.140 I llm_load_print_meta: n_embd_head_k    = 256
0.00.873.141 I llm_load_print_meta: n_embd_head_v    = 256
0.00.873.155 I llm_load_print_meta: n_gqa            = 8
0.00.873.161 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.873.167 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.873.169 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.873.170 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.873.170 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.873.171 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.873.174 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.873.179 I llm_load_print_meta: n_ff             = 16384
0.00.873.180 I llm_load_print_meta: n_expert         = 0
0.00.873.181 I llm_load_print_meta: n_expert_used    = 0
0.00.873.181 I llm_load_print_meta: causal attn      = 1
0.00.873.182 I llm_load_print_meta: pooling type     = 0
0.00.873.182 I llm_load_print_meta: rope type        = 2
0.00.873.183 I llm_load_print_meta: rope scaling     = linear
0.00.873.185 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.873.186 I llm_load_print_meta: freq_scale_train = 1
0.00.873.198 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.873.201 I llm_load_print_meta: rope_finetuned   = unknown
0.00.873.201 I llm_load_print_meta: ssm_d_conv       = 0
0.00.873.201 I llm_load_print_meta: ssm_d_inner      = 0
0.00.873.202 I llm_load_print_meta: ssm_d_state      = 0
0.00.873.202 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.873.202 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.873.206 I llm_load_print_meta: model type       = 2B
0.00.873.209 I llm_load_print_meta: model ftype      = Q8_0
0.00.873.210 I llm_load_print_meta: model params     = 2.51 B
0.00.873.211 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.873.211 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.873.212 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.873.212 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.873.212 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.873.213 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.873.213 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.873.214 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.873.221 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.873.222 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.873.223 I llm_load_print_meta: max token length = 93
0.00.946.094 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.946.104 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.951.873 I llama_new_context_with_model: n_seq_max     = 1
0.00.951.880 I llama_new_context_with_model: n_ctx         = 4096
0.00.951.881 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.951.881 I llama_new_context_with_model: n_batch       = 2048
0.00.951.881 I llama_new_context_with_model: n_ubatch      = 512
0.00.951.882 I llama_new_context_with_model: flash_attn    = 0
0.00.951.884 I llama_new_context_with_model: freq_base     = 10000.0
0.00.951.885 I llama_new_context_with_model: freq_scale    = 1
0.00.951.886 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.951.968 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.966.758 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.966.799 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.966.924 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.969.513 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.969.517 I llama_new_context_with_model: graph nodes  = 601
0.00.969.518 I llama_new_context_with_model: graph splits = 1
0.00.969.543 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.969.546 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.578.670 I main: llama threadpool init, n_threads = 4
0.01.578.687 I 
0.01.578.811 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.578.815 I 
0.01.579.051 I sampler seed: 3569706633
0.01.579.065 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.579.079 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.579.079 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.579.080 I 
 increasities on the battlefield. [end of text]


0.04.541.587 I llama_perf_sampler_print:    sampling time =      10.98 ms /     8 runs   (    1.37 ms per token,   728.40 tokens per second)
0.04.541.600 I llama_perf_context_print:        load time =    1577.75 ms
0.04.541.602 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.541.604 I llama_perf_context_print:        eval time =    2942.47 ms /     7 runs   (  420.35 ms per token,     2.38 tokens per second)
0.04.541.605 I llama_perf_context_print:       total time =    2962.93 ms /     8 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m47.725s
user	2m20.566s
sys	0m9.321s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4415 (c98eb635)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186234.65 ms
main:    total time = 186234.65 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4415 (c98eb635) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.840 I main: llama backend init
0.00.000.847 I main: load the model and apply lora adapter, if any
0.00.023.444 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.455 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.547 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.560 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.562 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.566 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.570 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.571 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.573 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.574 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.575 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.580 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.582 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.583 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.584 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.586 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.243.352 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.344.455 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.368.395 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.368.404 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.368.405 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.368.406 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.368.408 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.368.409 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.368.410 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.368.414 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.368.415 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.368.416 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.368.418 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.368.420 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.368.428 I llama_model_loader: - type  f32:   37 tensors
0.00.368.430 I llama_model_loader: - type q4_K:  108 tensors
0.00.368.431 I llama_model_loader: - type q6_K:   19 tensors
0.00.583.689 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.652.444 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.653.490 I llm_load_vocab: special tokens cache size = 5
0.00.873.207 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.873.279 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.873.284 I llm_load_print_meta: arch             = gemma
0.00.873.285 I llm_load_print_meta: vocab type       = SPM
0.00.873.286 I llm_load_print_meta: n_vocab          = 256000
0.00.873.288 I llm_load_print_meta: n_merges         = 0
0.00.873.289 I llm_load_print_meta: vocab_only       = 0
0.00.873.289 I llm_load_print_meta: n_ctx_train      = 8192
0.00.873.290 I llm_load_print_meta: n_embd           = 2048
0.00.873.290 I llm_load_print_meta: n_layer          = 18
0.00.873.365 I llm_load_print_meta: n_head           = 8
0.00.873.372 I llm_load_print_meta: n_head_kv        = 1
0.00.873.377 I llm_load_print_meta: n_rot            = 256
0.00.873.377 I llm_load_print_meta: n_swa            = 0
0.00.873.378 I llm_load_print_meta: n_embd_head_k    = 256
0.00.873.378 I llm_load_print_meta: n_embd_head_v    = 256
0.00.873.383 I llm_load_print_meta: n_gqa            = 8
0.00.873.387 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.873.392 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.873.393 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.873.395 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.873.395 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.873.396 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.873.396 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.873.401 I llm_load_print_meta: n_ff             = 16384
0.00.873.402 I llm_load_print_meta: n_expert         = 0
0.00.873.402 I llm_load_print_meta: n_expert_used    = 0
0.00.873.403 I llm_load_print_meta: causal attn      = 1
0.00.873.404 I llm_load_print_meta: pooling type     = 0
0.00.873.404 I llm_load_print_meta: rope type        = 2
0.00.873.405 I llm_load_print_meta: rope scaling     = linear
0.00.873.406 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.873.407 I llm_load_print_meta: freq_scale_train = 1
0.00.873.407 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.873.408 I llm_load_print_meta: rope_finetuned   = unknown
0.00.873.408 I llm_load_print_meta: ssm_d_conv       = 0
0.00.873.409 I llm_load_print_meta: ssm_d_inner      = 0
0.00.873.419 I llm_load_print_meta: ssm_d_state      = 0
0.00.873.420 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.873.421 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.873.424 I llm_load_print_meta: model type       = 2B
0.00.873.426 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.873.427 I llm_load_print_meta: model params     = 2.51 B
0.00.873.429 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.873.441 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.873.442 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.873.443 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.873.444 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.873.444 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.873.445 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.873.445 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.873.452 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.873.454 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.873.455 I llm_load_print_meta: max token length = 93
0.00.936.607 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.936.616 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.936.617 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.936.617 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.936.618 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.936.619 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.942.658 I llama_new_context_with_model: n_seq_max     = 1
0.00.942.666 I llama_new_context_with_model: n_ctx         = 4096
0.00.942.666 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.942.667 I llama_new_context_with_model: n_batch       = 2048
0.00.942.667 I llama_new_context_with_model: n_ubatch      = 512
0.00.942.668 I llama_new_context_with_model: flash_attn    = 0
0.00.942.670 I llama_new_context_with_model: freq_base     = 10000.0
0.00.942.671 I llama_new_context_with_model: freq_scale    = 1
0.00.942.672 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.942.757 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.957.191 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.957.230 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.957.353 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.959.938 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.959.942 I llama_new_context_with_model: graph nodes  = 601
0.00.959.943 I llama_new_context_with_model: graph splits = 1
0.00.959.966 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.959.969 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.541.585 I main: llama threadpool init, n_threads = 4
0.01.541.602 I 
0.01.541.719 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.541.723 I 
0.01.541.961 I sampler seed: 524510073
0.01.541.975 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.541.985 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.541.987 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.541.987 I 
 seconally.  

**Instructions:** Respond with a complete sentence that answers the question.

What is the significance of the character's journey in the story

0.12.634.197 I llama_perf_sampler_print:    sampling time =      49.59 ms /    33 runs   (    1.50 ms per token,   665.43 tokens per second)
0.12.634.200 I llama_perf_context_print:        load time =    1540.64 ms
0.12.634.202 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.634.215 I llama_perf_context_print:        eval time =   11007.02 ms /    32 runs   (  343.97 ms per token,     2.91 tokens per second)
0.12.634.216 I llama_perf_context_print:       total time =   11092.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4415 (c98eb635)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186087.41 ms
main:    total time = 186087.41 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 4415 (c98eb635) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.827 I main: llama backend init
0.00.000.835 I main: load the model and apply lora adapter, if any
0.00.023.322 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.421 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.436 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.440 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.445 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.446 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.448 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.450 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.452 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.453 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.459 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.463 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.464 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.466 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.467 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.240.738 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.341.845 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.366.066 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.366.073 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.366.075 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.366.076 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.366.077 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.366.079 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.366.080 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.366.084 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.366.085 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.366.092 I llama_model_loader: - type  f32:   37 tensors
0.00.366.095 I llama_model_loader: - type q4_K:  108 tensors
0.00.366.095 I llama_model_loader: - type q6_K:   19 tensors
0.00.583.761 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.644.815 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.645.834 I llm_load_vocab: special tokens cache size = 5
0.00.850.811 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.850.889 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.850.893 I llm_load_print_meta: arch             = gemma
0.00.850.894 I llm_load_print_meta: vocab type       = SPM
0.00.850.895 I llm_load_print_meta: n_vocab          = 256000
0.00.850.897 I llm_load_print_meta: n_merges         = 0
0.00.850.898 I llm_load_print_meta: vocab_only       = 0
0.00.850.899 I llm_load_print_meta: n_ctx_train      = 8192
0.00.850.899 I llm_load_print_meta: n_embd           = 2048
0.00.850.899 I llm_load_print_meta: n_layer          = 18
0.00.850.977 I llm_load_print_meta: n_head           = 8
0.00.850.984 I llm_load_print_meta: n_head_kv        = 1
0.00.850.985 I llm_load_print_meta: n_rot            = 256
0.00.850.985 I llm_load_print_meta: n_swa            = 0
0.00.850.986 I llm_load_print_meta: n_embd_head_k    = 256
0.00.850.986 I llm_load_print_meta: n_embd_head_v    = 256
0.00.850.992 I llm_load_print_meta: n_gqa            = 8
0.00.850.998 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.851.003 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.851.006 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.851.007 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.851.008 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.851.012 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.851.013 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.851.018 I llm_load_print_meta: n_ff             = 16384
0.00.851.019 I llm_load_print_meta: n_expert         = 0
0.00.851.020 I llm_load_print_meta: n_expert_used    = 0
0.00.851.020 I llm_load_print_meta: causal attn      = 1
0.00.851.020 I llm_load_print_meta: pooling type     = 0
0.00.851.021 I llm_load_print_meta: rope type        = 2
0.00.851.022 I llm_load_print_meta: rope scaling     = linear
0.00.851.024 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.851.024 I llm_load_print_meta: freq_scale_train = 1
0.00.851.025 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.851.026 I llm_load_print_meta: rope_finetuned   = unknown
0.00.851.026 I llm_load_print_meta: ssm_d_conv       = 0
0.00.851.026 I llm_load_print_meta: ssm_d_inner      = 0
0.00.851.026 I llm_load_print_meta: ssm_d_state      = 0
0.00.851.027 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.851.028 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.851.031 I llm_load_print_meta: model type       = 2B
0.00.851.033 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.851.033 I llm_load_print_meta: model params     = 2.51 B
0.00.851.034 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.851.044 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.851.045 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.851.046 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.851.049 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.851.050 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.851.050 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.851.051 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.851.057 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.851.059 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.851.060 I llm_load_print_meta: max token length = 93
0.00.909.897 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.915.593 I llama_new_context_with_model: n_seq_max     = 1
0.00.915.599 I llama_new_context_with_model: n_ctx         = 4096
0.00.915.600 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.915.600 I llama_new_context_with_model: n_batch       = 2048
0.00.915.601 I llama_new_context_with_model: n_ubatch      = 512
0.00.915.601 I llama_new_context_with_model: flash_attn    = 0
0.00.915.605 I llama_new_context_with_model: freq_base     = 10000.0
0.00.915.606 I llama_new_context_with_model: freq_scale    = 1
0.00.915.607 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.915.699 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.931.021 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.931.064 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.931.193 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.933.833 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.933.837 I llama_new_context_with_model: graph nodes  = 601
0.00.933.838 I llama_new_context_with_model: graph splits = 1
0.00.933.863 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.933.866 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.512.374 I main: llama threadpool init, n_threads = 4
0.01.512.391 I 
0.01.512.516 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.512.520 I 
0.01.512.759 I sampler seed: 4234153424
0.01.512.772 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.512.784 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.512.785 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.512.785 I 
 encompates a wide range of topics, including:

**Ethical considerations:**

* Morality and decision-making
* Bias and discrimination
* Ethics in technology

0.12.660.146 I llama_perf_sampler_print:    sampling time =      49.43 ms /    33 runs   (    1.50 ms per token,   667.64 tokens per second)
0.12.660.151 I llama_perf_context_print:        load time =    1511.45 ms
0.12.660.152 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.660.154 I llama_perf_context_print:        eval time =   11062.95 ms /    32 runs   (  345.72 ms per token,     2.89 tokens per second)
0.12.660.155 I llama_perf_context_print:       total time =   11147.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m40.485s
user	46m44.223s
sys	0m6.379s
