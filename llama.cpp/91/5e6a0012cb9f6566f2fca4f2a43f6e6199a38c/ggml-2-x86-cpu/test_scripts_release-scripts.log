+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.567 I build: 4012 (915e6a00) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.768 I main: llama backend init
0.00.001.855 I main: load the model and apply lora adapter, if any
0.00.022.907 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.916 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.924 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.933 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.934 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.940 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.944 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.944 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.945 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.945 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.946 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.951 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.951 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.952 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.952 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.953 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.586 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.344 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.181 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.187 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.188 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.188 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.189 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.190 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.191 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.193 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.194 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.194 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.195 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.196 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.200 I llama_model_loader: - type  f32:   37 tensors
0.00.133.201 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.212 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.279 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.819 I llm_load_vocab: special tokens cache size = 5
0.00.265.776 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.791 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.791 I llm_load_print_meta: arch             = gemma
0.00.265.792 I llm_load_print_meta: vocab type       = SPM
0.00.265.793 I llm_load_print_meta: n_vocab          = 256000
0.00.265.793 I llm_load_print_meta: n_merges         = 0
0.00.265.793 I llm_load_print_meta: vocab_only       = 0
0.00.265.794 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.794 I llm_load_print_meta: n_embd           = 2048
0.00.265.794 I llm_load_print_meta: n_layer          = 18
0.00.265.806 I llm_load_print_meta: n_head           = 8
0.00.265.807 I llm_load_print_meta: n_head_kv        = 1
0.00.265.808 I llm_load_print_meta: n_rot            = 256
0.00.265.808 I llm_load_print_meta: n_swa            = 0
0.00.265.808 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.808 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.810 I llm_load_print_meta: n_gqa            = 8
0.00.265.811 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.811 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.812 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.814 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.814 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.814 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.814 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.815 I llm_load_print_meta: n_ff             = 16384
0.00.265.816 I llm_load_print_meta: n_expert         = 0
0.00.265.816 I llm_load_print_meta: n_expert_used    = 0
0.00.265.816 I llm_load_print_meta: causal attn      = 1
0.00.265.817 I llm_load_print_meta: pooling type     = 0
0.00.265.817 I llm_load_print_meta: rope type        = 2
0.00.265.817 I llm_load_print_meta: rope scaling     = linear
0.00.265.819 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.819 I llm_load_print_meta: freq_scale_train = 1
0.00.265.819 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.820 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.820 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.820 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.821 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.821 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.821 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.822 I llm_load_print_meta: model type       = 2B
0.00.265.822 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.823 I llm_load_print_meta: model params     = 2.51 B
0.00.265.824 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.824 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.825 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.825 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.825 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.826 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.826 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.826 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.827 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.827 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.827 I llm_load_print_meta: max token length = 93
0.00.368.674 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.368.684 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.368.685 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.368.685 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.368.686 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.368.686 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.374.027 I llama_new_context_with_model: n_ctx      = 8192
0.00.374.033 I llama_new_context_with_model: n_batch    = 2048
0.00.374.034 I llama_new_context_with_model: n_ubatch   = 512
0.00.374.034 I llama_new_context_with_model: flash_attn = 0
0.00.374.036 I llama_new_context_with_model: freq_base  = 10000.0
0.00.374.037 I llama_new_context_with_model: freq_scale = 1
0.00.403.623 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.403.640 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.403.736 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.405.015 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.405.022 I llama_new_context_with_model: graph nodes  = 601
0.00.405.022 I llama_new_context_with_model: graph splits = 1
0.00.405.024 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.496.215 I main: llama threadpool init, n_threads = 4
0.00.496.228 I 
0.00.496.302 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.496.305 I 
0.00.496.347 I sampler seed: 1717796965
0.00.496.358 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.496.361 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.496.362 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.496.362 I 
 increasities are a type of non-verbal communication that conveys emotions and messages through nonverbal cues, such as gestures, facial expressions, and posture.

**Functions

0.02.746.722 I llama_perf_sampler_print:    sampling time =       5.07 ms /    33 runs   (    0.15 ms per token,  6505.03 tokens per second)
0.02.746.724 I llama_perf_context_print:        load time =     494.34 ms
0.02.746.725 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.746.727 I llama_perf_context_print:        eval time =    2231.05 ms /    32 runs   (   69.72 ms per token,    14.34 tokens per second)
0.02.746.728 I llama_perf_context_print:       total time =    2250.51 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.552 I build: 4012 (915e6a00) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.745 I main: llama backend init
0.00.001.871 I main: load the model and apply lora adapter, if any
0.00.022.561 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.576 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.587 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.588 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.591 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.592 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.593 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.593 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.594 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.595 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.601 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.601 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.602 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.602 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.603 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.029 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.063 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.966 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.975 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.975 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.976 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.977 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.978 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.979 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.982 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.983 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.983 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.983 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.984 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.988 I llama_model_loader: - type  f32:   37 tensors
0.00.132.989 I llama_model_loader: - type q8_0:  127 tensors
0.00.217.350 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.964 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.472 I llm_load_vocab: special tokens cache size = 5
0.00.280.270 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.286 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.287 I llm_load_print_meta: arch             = gemma
0.00.280.288 I llm_load_print_meta: vocab type       = SPM
0.00.280.297 I llm_load_print_meta: n_vocab          = 256000
0.00.280.298 I llm_load_print_meta: n_merges         = 0
0.00.280.299 I llm_load_print_meta: vocab_only       = 0
0.00.280.299 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.299 I llm_load_print_meta: n_embd           = 2048
0.00.280.300 I llm_load_print_meta: n_layer          = 18
0.00.280.311 I llm_load_print_meta: n_head           = 8
0.00.280.312 I llm_load_print_meta: n_head_kv        = 1
0.00.280.313 I llm_load_print_meta: n_rot            = 256
0.00.280.313 I llm_load_print_meta: n_swa            = 0
0.00.280.313 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.314 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.315 I llm_load_print_meta: n_gqa            = 8
0.00.280.316 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.317 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.318 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.320 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.320 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.321 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.321 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.322 I llm_load_print_meta: n_ff             = 16384
0.00.280.323 I llm_load_print_meta: n_expert         = 0
0.00.280.323 I llm_load_print_meta: n_expert_used    = 0
0.00.280.323 I llm_load_print_meta: causal attn      = 1
0.00.280.324 I llm_load_print_meta: pooling type     = 0
0.00.280.324 I llm_load_print_meta: rope type        = 2
0.00.280.325 I llm_load_print_meta: rope scaling     = linear
0.00.280.326 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.327 I llm_load_print_meta: freq_scale_train = 1
0.00.280.328 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.328 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.328 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.329 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.329 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.329 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.330 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.331 I llm_load_print_meta: model type       = 2B
0.00.280.331 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.333 I llm_load_print_meta: model params     = 2.51 B
0.00.280.334 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.334 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.335 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.335 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.335 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.337 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.337 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.338 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.338 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.339 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.339 I llm_load_print_meta: max token length = 93
0.00.378.513 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.383.692 I llama_new_context_with_model: n_ctx      = 8192
0.00.383.698 I llama_new_context_with_model: n_batch    = 2048
0.00.383.699 I llama_new_context_with_model: n_ubatch   = 512
0.00.383.699 I llama_new_context_with_model: flash_attn = 0
0.00.383.702 I llama_new_context_with_model: freq_base  = 10000.0
0.00.383.703 I llama_new_context_with_model: freq_scale = 1
0.00.412.831 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.412.846 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.412.940 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.414.198 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.414.204 I llama_new_context_with_model: graph nodes  = 601
0.00.414.204 I llama_new_context_with_model: graph splits = 1
0.00.414.206 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.501.729 I main: llama threadpool init, n_threads = 4
0.00.501.741 I 
0.00.501.818 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.501.822 I 
0.00.501.864 I sampler seed: 2436804440
0.00.501.877 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.501.893 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.501.897 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.501.897 I 
 increasities, but the most powerful of them was the one between Alexander and Cleopatra.

This statement is true.

The relationship between Alexander the Great and Cleopatra

0.02.723.195 I llama_perf_sampler_print:    sampling time =       4.97 ms /    33 runs   (    0.15 ms per token,  6635.83 tokens per second)
0.02.723.197 I llama_perf_context_print:        load time =     499.84 ms
0.02.723.198 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.723.200 I llama_perf_context_print:        eval time =    2201.93 ms /    32 runs   (   68.81 ms per token,    14.53 tokens per second)
0.02.723.200 I llama_perf_context_print:       total time =    2221.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.589 I build: 4012 (915e6a00) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.787 I main: llama backend init
0.00.001.911 I main: load the model and apply lora adapter, if any
0.00.022.565 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.575 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.583 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.592 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.593 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.596 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.598 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.599 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.600 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.600 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.601 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.605 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.605 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.606 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.607 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.607 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.845 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.546 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.417 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.423 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.423 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.424 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.424 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.425 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.426 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.428 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.428 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.429 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.429 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.430 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.433 I llama_model_loader: - type  f32:   37 tensors
0.00.132.434 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.227 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.996 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.559 I llm_load_vocab: special tokens cache size = 5
0.00.269.400 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.416 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.416 I llm_load_print_meta: arch             = gemma
0.00.269.417 I llm_load_print_meta: vocab type       = SPM
0.00.269.418 I llm_load_print_meta: n_vocab          = 256000
0.00.269.418 I llm_load_print_meta: n_merges         = 0
0.00.269.419 I llm_load_print_meta: vocab_only       = 0
0.00.269.419 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.419 I llm_load_print_meta: n_embd           = 2048
0.00.269.420 I llm_load_print_meta: n_layer          = 18
0.00.269.432 I llm_load_print_meta: n_head           = 8
0.00.269.433 I llm_load_print_meta: n_head_kv        = 1
0.00.269.434 I llm_load_print_meta: n_rot            = 256
0.00.269.434 I llm_load_print_meta: n_swa            = 0
0.00.269.434 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.435 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.436 I llm_load_print_meta: n_gqa            = 8
0.00.269.437 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.438 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.438 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.440 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.440 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.440 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.441 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.441 I llm_load_print_meta: n_ff             = 16384
0.00.269.442 I llm_load_print_meta: n_expert         = 0
0.00.269.442 I llm_load_print_meta: n_expert_used    = 0
0.00.269.443 I llm_load_print_meta: causal attn      = 1
0.00.269.443 I llm_load_print_meta: pooling type     = 0
0.00.269.443 I llm_load_print_meta: rope type        = 2
0.00.269.444 I llm_load_print_meta: rope scaling     = linear
0.00.269.445 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.446 I llm_load_print_meta: freq_scale_train = 1
0.00.269.446 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.446 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.447 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.447 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.447 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.447 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.448 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.448 I llm_load_print_meta: model type       = 2B
0.00.269.449 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.450 I llm_load_print_meta: model params     = 2.51 B
0.00.269.450 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.451 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.451 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.452 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.452 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.452 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.452 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.453 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.453 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.454 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.454 I llm_load_print_meta: max token length = 93
0.00.367.387 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.367.395 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.367.396 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.367.397 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.367.397 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.367.398 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.372.797 I llama_new_context_with_model: n_ctx      = 8192
0.00.372.804 I llama_new_context_with_model: n_batch    = 2048
0.00.372.805 I llama_new_context_with_model: n_ubatch   = 512
0.00.372.805 I llama_new_context_with_model: flash_attn = 0
0.00.372.809 I llama_new_context_with_model: freq_base  = 10000.0
0.00.372.810 I llama_new_context_with_model: freq_scale = 1
0.00.404.068 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.404.081 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.404.172 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.405.381 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.405.388 I llama_new_context_with_model: graph nodes  = 601
0.00.405.388 I llama_new_context_with_model: graph splits = 1
0.00.405.390 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.496.531 I main: llama threadpool init, n_threads = 4
0.00.496.543 I 
0.00.496.618 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.496.622 I 
0.00.496.662 I sampler seed: 1361004768
0.00.496.673 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.496.676 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.496.677 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.496.677 I 
 maneuvously.

I am unable to generate a response as the prompt contains sexually suggestive content. [end of text]


0.01.911.981 I llama_perf_sampler_print:    sampling time =       3.21 ms /    22 runs   (    0.15 ms per token,  6859.99 tokens per second)
0.01.911.984 I llama_perf_context_print:        load time =     494.60 ms
0.01.911.985 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.911.986 I llama_perf_context_print:        eval time =    1402.46 ms /    21 runs   (   66.78 ms per token,    14.97 tokens per second)
0.01.911.987 I llama_perf_context_print:       total time =    1415.46 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.550 I build: 4012 (915e6a00) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.746 I main: llama backend init
0.00.001.902 I main: load the model and apply lora adapter, if any
0.00.024.258 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.269 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.277 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.282 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.283 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.286 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.287 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.288 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.288 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.289 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.289 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.293 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.294 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.294 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.295 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.297 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.052.232 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.128.064 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.911 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.917 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.918 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.919 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.920 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.921 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.922 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.925 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.925 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.926 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.927 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.134.928 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.932 I llama_model_loader: - type  f32:   37 tensors
0.00.134.933 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.373 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.381 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.008 I llm_load_vocab: special tokens cache size = 5
0.00.271.044 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.060 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.061 I llm_load_print_meta: arch             = gemma
0.00.271.061 I llm_load_print_meta: vocab type       = SPM
0.00.271.062 I llm_load_print_meta: n_vocab          = 256000
0.00.271.062 I llm_load_print_meta: n_merges         = 0
0.00.271.062 I llm_load_print_meta: vocab_only       = 0
0.00.271.063 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.063 I llm_load_print_meta: n_embd           = 2048
0.00.271.063 I llm_load_print_meta: n_layer          = 18
0.00.271.080 I llm_load_print_meta: n_head           = 8
0.00.271.081 I llm_load_print_meta: n_head_kv        = 1
0.00.271.081 I llm_load_print_meta: n_rot            = 256
0.00.271.081 I llm_load_print_meta: n_swa            = 0
0.00.271.082 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.082 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.084 I llm_load_print_meta: n_gqa            = 8
0.00.271.085 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.086 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.087 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.088 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.089 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.092 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.092 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.093 I llm_load_print_meta: n_ff             = 16384
0.00.271.093 I llm_load_print_meta: n_expert         = 0
0.00.271.094 I llm_load_print_meta: n_expert_used    = 0
0.00.271.094 I llm_load_print_meta: causal attn      = 1
0.00.271.095 I llm_load_print_meta: pooling type     = 0
0.00.271.095 I llm_load_print_meta: rope type        = 2
0.00.271.095 I llm_load_print_meta: rope scaling     = linear
0.00.271.097 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.097 I llm_load_print_meta: freq_scale_train = 1
0.00.271.097 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.098 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.098 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.098 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.098 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.099 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.099 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.100 I llm_load_print_meta: model type       = 2B
0.00.271.101 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.101 I llm_load_print_meta: model params     = 2.51 B
0.00.271.102 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.103 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.103 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.105 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.105 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.106 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.124 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.124 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.125 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.127 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.128 I llm_load_print_meta: max token length = 93
0.00.343.639 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.343.646 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.348.822 I llama_new_context_with_model: n_ctx      = 8192
0.00.348.828 I llama_new_context_with_model: n_batch    = 2048
0.00.348.828 I llama_new_context_with_model: n_ubatch   = 512
0.00.348.829 I llama_new_context_with_model: flash_attn = 0
0.00.348.831 I llama_new_context_with_model: freq_base  = 10000.0
0.00.348.832 I llama_new_context_with_model: freq_scale = 1
0.00.378.085 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.378.100 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.378.195 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.379.447 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.379.454 I llama_new_context_with_model: graph nodes  = 601
0.00.379.454 I llama_new_context_with_model: graph splits = 1
0.00.379.456 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.069 I main: llama threadpool init, n_threads = 4
0.00.471.085 I 
0.00.471.178 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.471.182 I 
0.00.471.227 I sampler seed: 4226540962
0.00.471.239 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.242 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.243 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.243 I 
 increasities, and other forms of sexual harassment are unfortunately a part of everyday life for many people.

**a)** How does sexual harassment impact women's

0.02.790.622 I llama_perf_sampler_print:    sampling time =       5.08 ms /    33 runs   (    0.15 ms per token,  6501.18 tokens per second)
0.02.790.625 I llama_perf_context_print:        load time =     469.14 ms
0.02.790.626 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.790.627 I llama_perf_context_print:        eval time =    2298.68 ms /    32 runs   (   71.83 ms per token,    13.92 tokens per second)
0.02.790.628 I llama_perf_context_print:       total time =    2319.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.714s
user	0m35.693s
sys	0m9.501s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4012 (915e6a00)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31958.84 ms
main:    total time = 31958.84 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.577 I build: 4012 (915e6a00) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.001.870 I main: load the model and apply lora adapter, if any
0.00.022.790 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.801 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.811 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.816 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.817 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.822 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.822 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.823 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.824 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.825 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.826 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.829 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.830 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.830 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.831 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.831 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.984 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.699 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.530 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.536 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.537 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.538 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.538 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.539 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.540 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.543 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.543 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.545 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.545 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.546 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.549 I llama_model_loader: - type  f32:   37 tensors
0.00.132.551 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.551 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.391 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.559 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.081 I llm_load_vocab: special tokens cache size = 5
0.00.265.586 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.601 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.601 I llm_load_print_meta: arch             = gemma
0.00.265.602 I llm_load_print_meta: vocab type       = SPM
0.00.265.603 I llm_load_print_meta: n_vocab          = 256000
0.00.265.603 I llm_load_print_meta: n_merges         = 0
0.00.265.604 I llm_load_print_meta: vocab_only       = 0
0.00.265.604 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.604 I llm_load_print_meta: n_embd           = 2048
0.00.265.605 I llm_load_print_meta: n_layer          = 18
0.00.265.615 I llm_load_print_meta: n_head           = 8
0.00.265.616 I llm_load_print_meta: n_head_kv        = 1
0.00.265.617 I llm_load_print_meta: n_rot            = 256
0.00.265.617 I llm_load_print_meta: n_swa            = 0
0.00.265.617 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.617 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.618 I llm_load_print_meta: n_gqa            = 8
0.00.265.619 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.620 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.621 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.622 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.623 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.623 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.623 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.624 I llm_load_print_meta: n_ff             = 16384
0.00.265.625 I llm_load_print_meta: n_expert         = 0
0.00.265.625 I llm_load_print_meta: n_expert_used    = 0
0.00.265.625 I llm_load_print_meta: causal attn      = 1
0.00.265.626 I llm_load_print_meta: pooling type     = 0
0.00.265.626 I llm_load_print_meta: rope type        = 2
0.00.265.626 I llm_load_print_meta: rope scaling     = linear
0.00.265.628 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.628 I llm_load_print_meta: freq_scale_train = 1
0.00.265.629 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.629 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.629 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.629 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.630 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.630 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.630 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.631 I llm_load_print_meta: model type       = 2B
0.00.265.631 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.632 I llm_load_print_meta: model params     = 2.51 B
0.00.265.633 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.633 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.634 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.634 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.634 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.635 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.635 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.635 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.635 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.636 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.636 I llm_load_print_meta: max token length = 93
0.00.326.817 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.326.823 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.326.824 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.326.824 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.326.825 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.326.826 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.332.131 I llama_new_context_with_model: n_ctx      = 8192
0.00.332.137 I llama_new_context_with_model: n_batch    = 2048
0.00.332.138 I llama_new_context_with_model: n_ubatch   = 512
0.00.332.138 I llama_new_context_with_model: flash_attn = 0
0.00.332.140 I llama_new_context_with_model: freq_base  = 10000.0
0.00.332.141 I llama_new_context_with_model: freq_scale = 1
0.00.361.001 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.361.018 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.361.109 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.362.375 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.362.382 I llama_new_context_with_model: graph nodes  = 601
0.00.362.383 I llama_new_context_with_model: graph splits = 1
0.00.362.384 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.444.079 I main: llama threadpool init, n_threads = 4
0.00.444.093 I 
0.00.444.167 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.444.171 I 
0.00.444.211 I sampler seed: 1238053473
0.00.444.223 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.444.228 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.444.229 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.444.229 I 
 guaranteing the accuracy of information in the digital age.

**Ensuring the accuracy of information in the digital age requires a multifaceted approach that encompasses technological, organizational

0.02.102.011 I llama_perf_sampler_print:    sampling time =       4.81 ms /    33 runs   (    0.15 ms per token,  6863.56 tokens per second)
0.02.102.014 I llama_perf_context_print:        load time =     442.19 ms
0.02.102.015 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.102.017 I llama_perf_context_print:        eval time =    1638.50 ms /    32 runs   (   51.20 ms per token,    19.53 tokens per second)
0.02.102.018 I llama_perf_context_print:       total time =    1657.94 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4012 (915e6a00)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32050.90 ms
main:    total time = 32050.90 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.536 I build: 4012 (915e6a00) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.761 I main: llama backend init
0.00.001.844 I main: load the model and apply lora adapter, if any
0.00.022.333 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.347 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.354 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.354 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.357 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.358 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.359 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.359 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.360 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.361 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.364 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.365 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.365 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.366 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.366 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.515 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.757 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.549 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.556 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.557 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.558 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.559 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.560 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.561 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.564 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.565 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.568 I llama_model_loader: - type  f32:   37 tensors
0.00.131.569 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.569 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.771 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.772 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.315 I llm_load_vocab: special tokens cache size = 5
0.00.263.169 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.190 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.190 I llm_load_print_meta: arch             = gemma
0.00.263.191 I llm_load_print_meta: vocab type       = SPM
0.00.263.192 I llm_load_print_meta: n_vocab          = 256000
0.00.263.192 I llm_load_print_meta: n_merges         = 0
0.00.263.192 I llm_load_print_meta: vocab_only       = 0
0.00.263.193 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.193 I llm_load_print_meta: n_embd           = 2048
0.00.263.193 I llm_load_print_meta: n_layer          = 18
0.00.263.205 I llm_load_print_meta: n_head           = 8
0.00.263.206 I llm_load_print_meta: n_head_kv        = 1
0.00.263.206 I llm_load_print_meta: n_rot            = 256
0.00.263.207 I llm_load_print_meta: n_swa            = 0
0.00.263.207 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.207 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.208 I llm_load_print_meta: n_gqa            = 8
0.00.263.209 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.210 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.211 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.212 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.213 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.213 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.213 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.214 I llm_load_print_meta: n_ff             = 16384
0.00.263.215 I llm_load_print_meta: n_expert         = 0
0.00.263.215 I llm_load_print_meta: n_expert_used    = 0
0.00.263.215 I llm_load_print_meta: causal attn      = 1
0.00.263.215 I llm_load_print_meta: pooling type     = 0
0.00.263.216 I llm_load_print_meta: rope type        = 2
0.00.263.216 I llm_load_print_meta: rope scaling     = linear
0.00.263.217 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.218 I llm_load_print_meta: freq_scale_train = 1
0.00.263.218 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.219 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.219 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.219 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.219 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.220 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.220 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.220 I llm_load_print_meta: model type       = 2B
0.00.263.221 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.263.222 I llm_load_print_meta: model params     = 2.51 B
0.00.263.222 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.263.223 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.223 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.223 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.224 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.224 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.225 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.225 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.225 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.226 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.226 I llm_load_print_meta: max token length = 93
0.00.322.187 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.327.341 I llama_new_context_with_model: n_ctx      = 8192
0.00.327.347 I llama_new_context_with_model: n_batch    = 2048
0.00.327.347 I llama_new_context_with_model: n_ubatch   = 512
0.00.327.348 I llama_new_context_with_model: flash_attn = 0
0.00.327.350 I llama_new_context_with_model: freq_base  = 10000.0
0.00.327.351 I llama_new_context_with_model: freq_scale = 1
0.00.356.244 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.356.260 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.356.355 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.642 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.357.647 I llama_new_context_with_model: graph nodes  = 601
0.00.357.648 I llama_new_context_with_model: graph splits = 1
0.00.357.650 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.438.642 I main: llama threadpool init, n_threads = 4
0.00.438.657 I 
0.00.438.731 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.438.734 I 
0.00.438.780 I sampler seed: 2368522314
0.00.438.789 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.438.792 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.438.793 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.438.793 I 
 encompate, 

**The Role of Artificial Intelligence in Modern Marketing**

**Introduction**

Artificial intelligence (AI) has emerged as a transformative force in

0.02.044.658 I llama_perf_sampler_print:    sampling time =       5.20 ms /    33 runs   (    0.16 ms per token,  6347.37 tokens per second)
0.02.044.661 I llama_perf_context_print:        load time =     436.78 ms
0.02.044.662 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.044.675 I llama_perf_context_print:        eval time =    1585.45 ms /    32 runs   (   49.55 ms per token,    20.18 tokens per second)
0.02.044.677 I llama_perf_context_print:       total time =    1606.02 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.149s
user	8m14.511s
sys	0m6.977s
