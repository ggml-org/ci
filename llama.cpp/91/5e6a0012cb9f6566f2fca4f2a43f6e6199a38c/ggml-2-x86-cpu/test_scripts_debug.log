+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4012 (915e6a00) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.002.768 I main: load the model and apply lora adapter, if any
0.00.025.419 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.429 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.513 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.524 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.526 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.531 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.532 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.533 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.535 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.536 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.538 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.546 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.550 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.551 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.553 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.555 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.948 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.049 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.254 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.263 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.264 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.265 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.266 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.267 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.269 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.272 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.273 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.293 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.298 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.299 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.307 I llama_model_loader: - type  f32:   37 tensors
0.00.267.310 I llama_model_loader: - type q8_0:  127 tensors
0.00.456.925 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.516.640 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.517.593 I llm_load_vocab: special tokens cache size = 5
0.00.613.136 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.613.207 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.613.208 I llm_load_print_meta: arch             = gemma
0.00.613.209 I llm_load_print_meta: vocab type       = SPM
0.00.613.210 I llm_load_print_meta: n_vocab          = 256000
0.00.613.212 I llm_load_print_meta: n_merges         = 0
0.00.613.213 I llm_load_print_meta: vocab_only       = 0
0.00.613.213 I llm_load_print_meta: n_ctx_train      = 8192
0.00.613.213 I llm_load_print_meta: n_embd           = 2048
0.00.613.214 I llm_load_print_meta: n_layer          = 18
0.00.613.279 I llm_load_print_meta: n_head           = 8
0.00.613.286 I llm_load_print_meta: n_head_kv        = 1
0.00.613.287 I llm_load_print_meta: n_rot            = 256
0.00.613.287 I llm_load_print_meta: n_swa            = 0
0.00.613.287 I llm_load_print_meta: n_embd_head_k    = 256
0.00.613.288 I llm_load_print_meta: n_embd_head_v    = 256
0.00.613.292 I llm_load_print_meta: n_gqa            = 8
0.00.613.297 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.613.302 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.613.312 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.613.313 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.613.314 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.613.315 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.613.315 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.613.320 I llm_load_print_meta: n_ff             = 16384
0.00.613.320 I llm_load_print_meta: n_expert         = 0
0.00.613.321 I llm_load_print_meta: n_expert_used    = 0
0.00.613.321 I llm_load_print_meta: causal attn      = 1
0.00.613.322 I llm_load_print_meta: pooling type     = 0
0.00.613.322 I llm_load_print_meta: rope type        = 2
0.00.613.322 I llm_load_print_meta: rope scaling     = linear
0.00.613.324 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.613.324 I llm_load_print_meta: freq_scale_train = 1
0.00.613.338 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.613.348 I llm_load_print_meta: rope_finetuned   = unknown
0.00.613.357 I llm_load_print_meta: ssm_d_conv       = 0
0.00.613.358 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.359 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.360 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.361 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.362 I llm_load_print_meta: model type       = 2B
0.00.613.364 I llm_load_print_meta: model ftype      = Q8_0
0.00.613.365 I llm_load_print_meta: model params     = 2.51 B
0.00.613.375 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.613.376 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.377 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.378 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.378 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.380 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.380 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.391 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.398 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.613.400 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.613.401 I llm_load_print_meta: max token length = 93
0.00.717.047 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.717.054 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.717.055 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.717.055 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.717.056 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.717.057 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.723.115 I llama_new_context_with_model: n_ctx      = 8192
0.00.723.121 I llama_new_context_with_model: n_batch    = 2048
0.00.723.121 I llama_new_context_with_model: n_ubatch   = 512
0.00.723.122 I llama_new_context_with_model: flash_attn = 0
0.00.723.124 I llama_new_context_with_model: freq_base  = 10000.0
0.00.723.125 I llama_new_context_with_model: freq_scale = 1
0.00.751.613 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.751.653 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.751.783 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.754.386 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.754.389 I llama_new_context_with_model: graph nodes  = 601
0.00.754.390 I llama_new_context_with_model: graph splits = 1
0.00.754.415 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.366.974 I main: llama threadpool init, n_threads = 4
0.01.366.987 I 
0.01.367.097 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.367.101 I 
0.01.367.345 I sampler seed: 820831626
0.01.367.359 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.367.367 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.367.368 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.367.370 I 
 increasities.

I'm unable to find a response that aligns with your query. Please provide additional information or specify your query to receive a more relevant response

0.14.830.602 I llama_perf_sampler_print:    sampling time =      49.43 ms /    33 runs   (    1.50 ms per token,   667.58 tokens per second)
0.14.830.620 I llama_perf_context_print:        load time =    1364.10 ms
0.14.830.621 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.830.623 I llama_perf_context_print:        eval time =   13366.34 ms /    32 runs   (  417.70 ms per token,     2.39 tokens per second)
0.14.830.635 I llama_perf_context_print:       total time =   13463.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 4012 (915e6a00) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.831 I main: llama backend init
0.00.002.756 I main: load the model and apply lora adapter, if any
0.00.025.441 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.531 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.544 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.545 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.550 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.554 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.555 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.556 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.557 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.559 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.565 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.567 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.568 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.569 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.579 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.696 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.507 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.125 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.138 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.139 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.140 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.141 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.142 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.144 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.148 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.149 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.151 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.151 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.266.153 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.162 I llama_model_loader: - type  f32:   37 tensors
0.00.266.164 I llama_model_loader: - type q8_0:  127 tensors
0.00.460.075 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.521.439 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.522.372 I llm_load_vocab: special tokens cache size = 5
0.00.617.254 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.617.322 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.617.323 I llm_load_print_meta: arch             = gemma
0.00.617.324 I llm_load_print_meta: vocab type       = SPM
0.00.617.325 I llm_load_print_meta: n_vocab          = 256000
0.00.617.327 I llm_load_print_meta: n_merges         = 0
0.00.617.328 I llm_load_print_meta: vocab_only       = 0
0.00.617.328 I llm_load_print_meta: n_ctx_train      = 8192
0.00.617.329 I llm_load_print_meta: n_embd           = 2048
0.00.617.329 I llm_load_print_meta: n_layer          = 18
0.00.617.394 I llm_load_print_meta: n_head           = 8
0.00.617.402 I llm_load_print_meta: n_head_kv        = 1
0.00.617.405 I llm_load_print_meta: n_rot            = 256
0.00.617.406 I llm_load_print_meta: n_swa            = 0
0.00.617.406 I llm_load_print_meta: n_embd_head_k    = 256
0.00.617.406 I llm_load_print_meta: n_embd_head_v    = 256
0.00.617.411 I llm_load_print_meta: n_gqa            = 8
0.00.617.416 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.617.421 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.617.422 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.617.424 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.617.424 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.617.425 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.617.425 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.617.430 I llm_load_print_meta: n_ff             = 16384
0.00.617.431 I llm_load_print_meta: n_expert         = 0
0.00.617.434 I llm_load_print_meta: n_expert_used    = 0
0.00.617.434 I llm_load_print_meta: causal attn      = 1
0.00.617.434 I llm_load_print_meta: pooling type     = 0
0.00.617.435 I llm_load_print_meta: rope type        = 2
0.00.617.435 I llm_load_print_meta: rope scaling     = linear
0.00.617.436 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.617.437 I llm_load_print_meta: freq_scale_train = 1
0.00.617.437 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.617.438 I llm_load_print_meta: rope_finetuned   = unknown
0.00.617.438 I llm_load_print_meta: ssm_d_conv       = 0
0.00.617.438 I llm_load_print_meta: ssm_d_inner      = 0
0.00.617.438 I llm_load_print_meta: ssm_d_state      = 0
0.00.617.439 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.617.439 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.617.440 I llm_load_print_meta: model type       = 2B
0.00.617.442 I llm_load_print_meta: model ftype      = Q8_0
0.00.617.442 I llm_load_print_meta: model params     = 2.51 B
0.00.617.452 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.617.452 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.617.454 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.617.454 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.617.455 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.617.455 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.617.457 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.617.458 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.617.464 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.617.465 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.617.466 I llm_load_print_meta: max token length = 93
0.00.717.018 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.722.877 I llama_new_context_with_model: n_ctx      = 8192
0.00.722.884 I llama_new_context_with_model: n_batch    = 2048
0.00.722.885 I llama_new_context_with_model: n_ubatch   = 512
0.00.722.885 I llama_new_context_with_model: flash_attn = 0
0.00.722.887 I llama_new_context_with_model: freq_base  = 10000.0
0.00.722.888 I llama_new_context_with_model: freq_scale = 1
0.00.751.452 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.751.495 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.751.624 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.754.167 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.754.171 I llama_new_context_with_model: graph nodes  = 601
0.00.754.172 I llama_new_context_with_model: graph splits = 1
0.00.754.195 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.370.827 I main: llama threadpool init, n_threads = 4
0.01.370.840 I 
0.01.370.946 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.370.949 I 
0.01.371.182 I sampler seed: 1183708041
0.01.371.195 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.371.202 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.371.203 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.371.203 I 
 increably.

I'm not sure what you're talking about.
Can you please explain?

I'm unable to provide responses that are

0.14.929.987 I llama_perf_sampler_print:    sampling time =      49.23 ms /    33 runs   (    1.49 ms per token,   670.30 tokens per second)
0.14.930.003 I llama_perf_context_print:        load time =    1367.97 ms
0.14.930.005 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.930.006 I llama_perf_context_print:        eval time =   13461.25 ms /    32 runs   (  420.66 ms per token,     2.38 tokens per second)
0.14.930.007 I llama_perf_context_print:       total time =   13559.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.667 I build: 4012 (915e6a00) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.876 I main: llama backend init
0.00.002.803 I main: load the model and apply lora adapter, if any
0.00.025.164 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.176 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.269 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.281 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.283 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.287 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.288 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.289 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.290 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.292 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.294 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.301 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.304 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.306 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.307 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.308 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.568 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.213 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.773 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.782 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.783 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.784 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.785 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.786 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.788 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.791 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.792 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.793 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.794 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.266.796 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.804 I llama_model_loader: - type  f32:   37 tensors
0.00.266.806 I llama_model_loader: - type q8_0:  127 tensors
0.00.466.676 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.527.416 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.528.249 I llm_load_vocab: special tokens cache size = 5
0.00.624.721 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.624.791 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.624.792 I llm_load_print_meta: arch             = gemma
0.00.624.793 I llm_load_print_meta: vocab type       = SPM
0.00.624.794 I llm_load_print_meta: n_vocab          = 256000
0.00.624.797 I llm_load_print_meta: n_merges         = 0
0.00.624.797 I llm_load_print_meta: vocab_only       = 0
0.00.624.798 I llm_load_print_meta: n_ctx_train      = 8192
0.00.624.798 I llm_load_print_meta: n_embd           = 2048
0.00.624.799 I llm_load_print_meta: n_layer          = 18
0.00.624.865 I llm_load_print_meta: n_head           = 8
0.00.624.872 I llm_load_print_meta: n_head_kv        = 1
0.00.624.872 I llm_load_print_meta: n_rot            = 256
0.00.624.874 I llm_load_print_meta: n_swa            = 0
0.00.624.893 I llm_load_print_meta: n_embd_head_k    = 256
0.00.624.894 I llm_load_print_meta: n_embd_head_v    = 256
0.00.624.902 I llm_load_print_meta: n_gqa            = 8
0.00.624.907 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.624.912 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.624.914 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.624.916 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.624.923 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.624.923 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.624.932 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.624.937 I llm_load_print_meta: n_ff             = 16384
0.00.624.938 I llm_load_print_meta: n_expert         = 0
0.00.624.939 I llm_load_print_meta: n_expert_used    = 0
0.00.624.939 I llm_load_print_meta: causal attn      = 1
0.00.624.940 I llm_load_print_meta: pooling type     = 0
0.00.624.940 I llm_load_print_meta: rope type        = 2
0.00.624.941 I llm_load_print_meta: rope scaling     = linear
0.00.624.942 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.624.943 I llm_load_print_meta: freq_scale_train = 1
0.00.624.944 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.624.944 I llm_load_print_meta: rope_finetuned   = unknown
0.00.624.945 I llm_load_print_meta: ssm_d_conv       = 0
0.00.624.946 I llm_load_print_meta: ssm_d_inner      = 0
0.00.624.946 I llm_load_print_meta: ssm_d_state      = 0
0.00.624.946 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.624.952 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.624.953 I llm_load_print_meta: model type       = 2B
0.00.624.955 I llm_load_print_meta: model ftype      = Q8_0
0.00.624.956 I llm_load_print_meta: model params     = 2.51 B
0.00.624.965 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.624.965 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.624.966 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.624.966 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.624.967 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.624.967 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.624.968 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.624.968 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.624.975 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.624.976 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.624.976 I llm_load_print_meta: max token length = 93
0.00.722.887 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.722.898 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.722.899 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.722.899 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.722.900 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.722.901 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.728.740 I llama_new_context_with_model: n_ctx      = 8192
0.00.728.747 I llama_new_context_with_model: n_batch    = 2048
0.00.728.748 I llama_new_context_with_model: n_ubatch   = 512
0.00.728.748 I llama_new_context_with_model: flash_attn = 0
0.00.728.750 I llama_new_context_with_model: freq_base  = 10000.0
0.00.728.751 I llama_new_context_with_model: freq_scale = 1
0.00.757.280 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.757.323 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.757.466 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.759.973 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.759.977 I llama_new_context_with_model: graph nodes  = 601
0.00.759.978 I llama_new_context_with_model: graph splits = 1
0.00.760.003 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.370.066 I main: llama threadpool init, n_threads = 4
0.01.370.081 I 
0.01.370.194 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.370.198 I 
0.01.370.436 I sampler seed: 3509381817
0.01.370.449 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.370.457 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.370.458 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.370.458 I 
 increasities. [end of text]


0.03.059.758 I llama_perf_sampler_print:    sampling time =       6.28 ms /     5 runs   (    1.26 ms per token,   796.05 tokens per second)
0.03.059.761 I llama_perf_context_print:        load time =    1367.16 ms
0.03.059.782 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.059.784 I llama_perf_context_print:        eval time =    1675.72 ms /     4 runs   (  418.93 ms per token,     2.39 tokens per second)
0.03.059.785 I llama_perf_context_print:       total time =    1689.70 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 4012 (915e6a00) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.823 I main: llama backend init
0.00.002.767 I main: load the model and apply lora adapter, if any
0.00.025.286 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.296 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.379 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.390 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.392 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.396 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.400 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.401 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.403 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.404 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.405 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.411 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.412 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.413 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.415 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.416 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.353 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.989 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.523 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.535 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.536 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.537 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.539 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.540 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.541 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.545 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.546 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.547 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.548 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.265.550 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.558 I llama_model_loader: - type  f32:   37 tensors
0.00.265.560 I llama_model_loader: - type q8_0:  127 tensors
0.00.457.938 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.519.199 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.520.075 I llm_load_vocab: special tokens cache size = 5
0.00.619.960 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.620.028 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.620.030 I llm_load_print_meta: arch             = gemma
0.00.620.031 I llm_load_print_meta: vocab type       = SPM
0.00.620.031 I llm_load_print_meta: n_vocab          = 256000
0.00.620.034 I llm_load_print_meta: n_merges         = 0
0.00.620.034 I llm_load_print_meta: vocab_only       = 0
0.00.620.035 I llm_load_print_meta: n_ctx_train      = 8192
0.00.620.035 I llm_load_print_meta: n_embd           = 2048
0.00.620.035 I llm_load_print_meta: n_layer          = 18
0.00.620.101 I llm_load_print_meta: n_head           = 8
0.00.620.108 I llm_load_print_meta: n_head_kv        = 1
0.00.620.113 I llm_load_print_meta: n_rot            = 256
0.00.620.113 I llm_load_print_meta: n_swa            = 0
0.00.620.113 I llm_load_print_meta: n_embd_head_k    = 256
0.00.620.113 I llm_load_print_meta: n_embd_head_v    = 256
0.00.620.118 I llm_load_print_meta: n_gqa            = 8
0.00.620.123 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.620.128 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.620.130 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.620.131 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.620.132 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.620.132 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.620.133 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.620.139 I llm_load_print_meta: n_ff             = 16384
0.00.620.139 I llm_load_print_meta: n_expert         = 0
0.00.620.140 I llm_load_print_meta: n_expert_used    = 0
0.00.620.140 I llm_load_print_meta: causal attn      = 1
0.00.620.141 I llm_load_print_meta: pooling type     = 0
0.00.620.142 I llm_load_print_meta: rope type        = 2
0.00.620.142 I llm_load_print_meta: rope scaling     = linear
0.00.620.143 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.620.144 I llm_load_print_meta: freq_scale_train = 1
0.00.620.144 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.620.146 I llm_load_print_meta: rope_finetuned   = unknown
0.00.620.147 I llm_load_print_meta: ssm_d_conv       = 0
0.00.620.147 I llm_load_print_meta: ssm_d_inner      = 0
0.00.620.148 I llm_load_print_meta: ssm_d_state      = 0
0.00.620.148 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.620.149 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.620.150 I llm_load_print_meta: model type       = 2B
0.00.620.151 I llm_load_print_meta: model ftype      = Q8_0
0.00.620.152 I llm_load_print_meta: model params     = 2.51 B
0.00.620.160 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.620.161 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.620.161 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.620.162 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.620.163 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.620.163 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.620.164 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.620.165 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.620.171 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.620.173 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.620.174 I llm_load_print_meta: max token length = 93
0.00.694.321 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.694.331 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.700.293 I llama_new_context_with_model: n_ctx      = 8192
0.00.700.299 I llama_new_context_with_model: n_batch    = 2048
0.00.700.299 I llama_new_context_with_model: n_ubatch   = 512
0.00.700.299 I llama_new_context_with_model: flash_attn = 0
0.00.700.302 I llama_new_context_with_model: freq_base  = 10000.0
0.00.700.302 I llama_new_context_with_model: freq_scale = 1
0.00.729.096 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.729.136 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.729.265 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.731.820 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.731.824 I llama_new_context_with_model: graph nodes  = 601
0.00.731.824 I llama_new_context_with_model: graph splits = 1
0.00.731.850 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.350.165 I main: llama threadpool init, n_threads = 4
0.01.350.179 I 
0.01.350.288 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.350.292 I 
0.01.350.549 I sampler seed: 807155545
0.01.350.562 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.350.569 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.350.570 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.350.570 I 
 increably.

I am a large language model, and I am trained on a massive dataset of text and code. I am able to generate human-quality

0.14.987.697 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.49 tokens per second)
0.14.987.701 I llama_perf_context_print:        load time =    1347.30 ms
0.14.987.703 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.987.705 I llama_perf_context_print:        eval time =   13540.00 ms /    32 runs   (  423.12 ms per token,     2.36 tokens per second)
0.14.987.706 I llama_perf_context_print:       total time =   13637.54 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m57.357s
user	3m2.146s
sys	0m9.416s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4012 (915e6a00)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198574.55 ms
main:    total time = 198574.55 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.613 I build: 4012 (915e6a00) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.819 I main: llama backend init
0.00.002.786 I main: load the model and apply lora adapter, if any
0.00.025.738 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.750 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.841 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.852 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.854 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.858 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.860 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.862 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.863 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.865 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.867 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.873 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.877 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.878 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.879 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.880 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.095 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.009 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.271 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.280 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.281 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.282 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.283 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.284 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.286 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.289 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.290 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.292 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.292 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.294 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.302 I llama_model_loader: - type  f32:   37 tensors
0.00.265.305 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.306 I llama_model_loader: - type q6_K:   19 tensors
0.00.446.331 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.043 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.961 I llm_load_vocab: special tokens cache size = 5
0.00.610.375 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.442 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.443 I llm_load_print_meta: arch             = gemma
0.00.610.444 I llm_load_print_meta: vocab type       = SPM
0.00.610.445 I llm_load_print_meta: n_vocab          = 256000
0.00.610.447 I llm_load_print_meta: n_merges         = 0
0.00.610.447 I llm_load_print_meta: vocab_only       = 0
0.00.610.447 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.448 I llm_load_print_meta: n_embd           = 2048
0.00.610.448 I llm_load_print_meta: n_layer          = 18
0.00.610.513 I llm_load_print_meta: n_head           = 8
0.00.610.520 I llm_load_print_meta: n_head_kv        = 1
0.00.610.521 I llm_load_print_meta: n_rot            = 256
0.00.610.521 I llm_load_print_meta: n_swa            = 0
0.00.610.522 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.522 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.527 I llm_load_print_meta: n_gqa            = 8
0.00.610.531 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.537 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.538 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.539 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.540 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.542 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.563 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.570 I llm_load_print_meta: n_ff             = 16384
0.00.610.572 I llm_load_print_meta: n_expert         = 0
0.00.610.572 I llm_load_print_meta: n_expert_used    = 0
0.00.610.573 I llm_load_print_meta: causal attn      = 1
0.00.610.573 I llm_load_print_meta: pooling type     = 0
0.00.610.574 I llm_load_print_meta: rope type        = 2
0.00.610.575 I llm_load_print_meta: rope scaling     = linear
0.00.610.585 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.586 I llm_load_print_meta: freq_scale_train = 1
0.00.610.587 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.587 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.595 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.600 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.600 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.601 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.601 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.609 I llm_load_print_meta: model type       = 2B
0.00.610.611 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.610.612 I llm_load_print_meta: model params     = 2.51 B
0.00.610.622 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.610.622 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.623 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.623 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.624 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.625 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.626 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.626 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.633 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.635 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.635 I llm_load_print_meta: max token length = 93
0.00.675.624 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.675.633 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.675.634 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.675.635 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.675.635 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.675.636 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.681.521 I llama_new_context_with_model: n_ctx      = 8192
0.00.681.529 I llama_new_context_with_model: n_batch    = 2048
0.00.681.529 I llama_new_context_with_model: n_ubatch   = 512
0.00.681.530 I llama_new_context_with_model: flash_attn = 0
0.00.681.532 I llama_new_context_with_model: freq_base  = 10000.0
0.00.681.533 I llama_new_context_with_model: freq_scale = 1
0.00.710.614 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.710.656 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.710.787 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.713.383 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.713.387 I llama_new_context_with_model: graph nodes  = 601
0.00.713.388 I llama_new_context_with_model: graph splits = 1
0.00.713.414 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.290.298 I main: llama threadpool init, n_threads = 4
0.01.290.313 I 
0.01.290.421 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.290.425 I 
0.01.290.655 I sampler seed: 2664626705
0.01.290.667 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.290.674 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.290.675 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.290.675 I 
 effeins.  This is a question about an individual's personality and actions.

**Instructions:** Please analyze the provided text and identify the key personality traits

0.12.137.856 I llama_perf_sampler_print:    sampling time =      49.52 ms /    33 runs   (    1.50 ms per token,   666.42 tokens per second)
0.12.137.872 I llama_perf_context_print:        load time =    1287.41 ms
0.12.137.874 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.137.875 I llama_perf_context_print:        eval time =   10750.17 ms /    32 runs   (  335.94 ms per token,     2.98 tokens per second)
0.12.137.876 I llama_perf_context_print:       total time =   10847.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4012 (915e6a00)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199125.36 ms
main:    total time = 199125.36 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 4012 (915e6a00) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.859 I main: llama backend init
0.00.002.817 I main: load the model and apply lora adapter, if any
0.00.025.402 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.502 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.517 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.519 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.524 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.528 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.529 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.530 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.531 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.533 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.539 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.541 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.542 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.543 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.544 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.477 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.768 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.103 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.110 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.111 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.113 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.114 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.115 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.116 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.120 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.121 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.128 I llama_model_loader: - type  f32:   37 tensors
0.00.265.131 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.131 I llama_model_loader: - type q6_K:   19 tensors
0.00.456.665 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.520.371 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.521.249 I llm_load_vocab: special tokens cache size = 5
0.00.618.888 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.618.954 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.618.956 I llm_load_print_meta: arch             = gemma
0.00.618.956 I llm_load_print_meta: vocab type       = SPM
0.00.618.957 I llm_load_print_meta: n_vocab          = 256000
0.00.618.960 I llm_load_print_meta: n_merges         = 0
0.00.618.960 I llm_load_print_meta: vocab_only       = 0
0.00.618.961 I llm_load_print_meta: n_ctx_train      = 8192
0.00.618.961 I llm_load_print_meta: n_embd           = 2048
0.00.618.961 I llm_load_print_meta: n_layer          = 18
0.00.619.026 I llm_load_print_meta: n_head           = 8
0.00.619.033 I llm_load_print_meta: n_head_kv        = 1
0.00.619.034 I llm_load_print_meta: n_rot            = 256
0.00.619.034 I llm_load_print_meta: n_swa            = 0
0.00.619.036 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.036 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.040 I llm_load_print_meta: n_gqa            = 8
0.00.619.046 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.062 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.064 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.066 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.066 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.067 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.071 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.076 I llm_load_print_meta: n_ff             = 16384
0.00.619.077 I llm_load_print_meta: n_expert         = 0
0.00.619.077 I llm_load_print_meta: n_expert_used    = 0
0.00.619.078 I llm_load_print_meta: causal attn      = 1
0.00.619.078 I llm_load_print_meta: pooling type     = 0
0.00.619.089 I llm_load_print_meta: rope type        = 2
0.00.619.089 I llm_load_print_meta: rope scaling     = linear
0.00.619.091 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.091 I llm_load_print_meta: freq_scale_train = 1
0.00.619.093 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.093 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.094 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.094 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.095 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.096 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.096 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.096 I llm_load_print_meta: model type       = 2B
0.00.619.098 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.619.098 I llm_load_print_meta: model params     = 2.51 B
0.00.619.107 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.619.108 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.108 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.112 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.112 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.113 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.113 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.113 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.619.120 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.619.121 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.619.122 I llm_load_print_meta: max token length = 93
0.00.680.798 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.686.558 I llama_new_context_with_model: n_ctx      = 8192
0.00.686.565 I llama_new_context_with_model: n_batch    = 2048
0.00.686.566 I llama_new_context_with_model: n_ubatch   = 512
0.00.686.566 I llama_new_context_with_model: flash_attn = 0
0.00.686.568 I llama_new_context_with_model: freq_base  = 10000.0
0.00.686.569 I llama_new_context_with_model: freq_scale = 1
0.00.715.311 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.715.354 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.715.482 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.718.056 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.718.060 I llama_new_context_with_model: graph nodes  = 601
0.00.718.061 I llama_new_context_with_model: graph splits = 1
0.00.718.084 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.295.348 I main: llama threadpool init, n_threads = 4
0.01.295.361 I 
0.01.295.469 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.295.473 I 
0.01.295.710 I sampler seed: 2243415071
0.01.295.725 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.295.735 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.295.738 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.295.739 I 
 increasities were meticulously designed to ensure the following:

a) Maintain the balance of the ecosystem
b) Prevent the spread of disease
c) Promote the

0.12.156.478 I llama_perf_sampler_print:    sampling time =      49.37 ms /    33 runs   (    1.50 ms per token,   668.44 tokens per second)
0.12.156.494 I llama_perf_context_print:        load time =    1292.44 ms
0.12.156.496 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.156.497 I llama_perf_context_print:        eval time =   10763.78 ms /    32 runs   (  336.37 ms per token,     2.97 tokens per second)
0.12.156.498 I llama_perf_context_print:       total time =   10861.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.897s
user	50m10.970s
sys	0m6.379s
