+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.603 I build: 4254 (91c36c26) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.804 I main: llama backend init
0.00.000.810 I main: load the model and apply lora adapter, if any
0.00.021.417 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.428 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.436 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.442 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.443 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.447 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.448 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.449 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.449 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.450 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.450 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.456 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.456 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.457 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.458 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.458 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.065 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.676 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.804 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.810 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.811 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.811 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.812 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.813 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.813 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.816 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.816 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.817 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.818 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.819 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.822 I llama_model_loader: - type  f32:   37 tensors
0.00.133.824 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.764 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.017 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.600 I llm_load_vocab: special tokens cache size = 5
0.00.268.430 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.445 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.445 I llm_load_print_meta: arch             = gemma
0.00.268.446 I llm_load_print_meta: vocab type       = SPM
0.00.268.447 I llm_load_print_meta: n_vocab          = 256000
0.00.268.447 I llm_load_print_meta: n_merges         = 0
0.00.268.448 I llm_load_print_meta: vocab_only       = 0
0.00.268.449 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.449 I llm_load_print_meta: n_embd           = 2048
0.00.268.449 I llm_load_print_meta: n_layer          = 18
0.00.268.461 I llm_load_print_meta: n_head           = 8
0.00.268.462 I llm_load_print_meta: n_head_kv        = 1
0.00.268.462 I llm_load_print_meta: n_rot            = 256
0.00.268.462 I llm_load_print_meta: n_swa            = 0
0.00.268.463 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.463 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.471 I llm_load_print_meta: n_gqa            = 8
0.00.268.472 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.473 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.474 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.475 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.476 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.476 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.477 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.477 I llm_load_print_meta: n_ff             = 16384
0.00.268.478 I llm_load_print_meta: n_expert         = 0
0.00.268.478 I llm_load_print_meta: n_expert_used    = 0
0.00.268.478 I llm_load_print_meta: causal attn      = 1
0.00.268.479 I llm_load_print_meta: pooling type     = 0
0.00.268.479 I llm_load_print_meta: rope type        = 2
0.00.268.480 I llm_load_print_meta: rope scaling     = linear
0.00.268.481 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.481 I llm_load_print_meta: freq_scale_train = 1
0.00.268.482 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.482 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.483 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.483 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.483 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.483 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.484 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.484 I llm_load_print_meta: model type       = 2B
0.00.268.485 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.485 I llm_load_print_meta: model params     = 2.51 B
0.00.268.486 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.487 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.487 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.488 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.488 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.488 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.489 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.489 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.489 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.490 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.490 I llm_load_print_meta: max token length = 93
0.00.386.893 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.386.899 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.386.900 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.386.901 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.386.901 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.386.902 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.392.111 I llama_new_context_with_model: n_seq_max     = 1
0.00.392.119 I llama_new_context_with_model: n_ctx         = 4096
0.00.392.119 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.392.119 I llama_new_context_with_model: n_batch       = 2048
0.00.392.120 I llama_new_context_with_model: n_ubatch      = 512
0.00.392.120 I llama_new_context_with_model: flash_attn    = 0
0.00.392.122 I llama_new_context_with_model: freq_base     = 10000.0
0.00.392.123 I llama_new_context_with_model: freq_scale    = 1
0.00.392.124 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.406.635 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.406.649 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.406.740 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.407.947 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.407.953 I llama_new_context_with_model: graph nodes  = 601
0.00.407.954 I llama_new_context_with_model: graph splits = 1
0.00.407.956 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.496.656 I main: llama threadpool init, n_threads = 4
0.00.496.672 I 
0.00.496.745 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.496.749 I 
0.00.496.796 I sampler seed: 1044535272
0.00.496.806 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.496.820 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.496.823 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.496.824 I 
 increasities, and the allure of the unknown.

Those are the things that drive me to explore the world, to push the boundaries of what I thought possible

0.02.821.033 I llama_perf_sampler_print:    sampling time =       4.63 ms /    33 runs   (    0.14 ms per token,  7127.43 tokens per second)
0.02.821.035 I llama_perf_context_print:        load time =     495.83 ms
0.02.821.036 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.821.038 I llama_perf_context_print:        eval time =    2305.80 ms /    32 runs   (   72.06 ms per token,    13.88 tokens per second)
0.02.821.039 I llama_perf_context_print:       total time =    2324.39 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.195 I build: 4254 (91c36c26) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.397 I main: llama backend init
0.00.000.404 I main: load the model and apply lora adapter, if any
0.00.020.849 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.864 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.874 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.878 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.882 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.883 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.884 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.884 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.885 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.886 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.890 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.890 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.891 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.891 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.892 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.311 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.360 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.195 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.201 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.202 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.203 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.203 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.204 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.205 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.207 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.208 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.208 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.209 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.210 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.213 I llama_model_loader: - type  f32:   37 tensors
0.00.130.214 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.700 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.868 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.405 I llm_load_vocab: special tokens cache size = 5
0.00.270.151 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.167 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.168 I llm_load_print_meta: arch             = gemma
0.00.270.168 I llm_load_print_meta: vocab type       = SPM
0.00.270.169 I llm_load_print_meta: n_vocab          = 256000
0.00.270.169 I llm_load_print_meta: n_merges         = 0
0.00.270.169 I llm_load_print_meta: vocab_only       = 0
0.00.270.170 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.170 I llm_load_print_meta: n_embd           = 2048
0.00.270.170 I llm_load_print_meta: n_layer          = 18
0.00.270.181 I llm_load_print_meta: n_head           = 8
0.00.270.182 I llm_load_print_meta: n_head_kv        = 1
0.00.270.183 I llm_load_print_meta: n_rot            = 256
0.00.270.183 I llm_load_print_meta: n_swa            = 0
0.00.270.183 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.183 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.184 I llm_load_print_meta: n_gqa            = 8
0.00.270.185 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.186 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.187 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.188 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.189 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.189 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.190 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.191 I llm_load_print_meta: n_ff             = 16384
0.00.270.191 I llm_load_print_meta: n_expert         = 0
0.00.270.192 I llm_load_print_meta: n_expert_used    = 0
0.00.270.192 I llm_load_print_meta: causal attn      = 1
0.00.270.192 I llm_load_print_meta: pooling type     = 0
0.00.270.192 I llm_load_print_meta: rope type        = 2
0.00.270.192 I llm_load_print_meta: rope scaling     = linear
0.00.270.195 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.195 I llm_load_print_meta: freq_scale_train = 1
0.00.270.196 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.196 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.196 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.197 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.197 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.197 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.198 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.198 I llm_load_print_meta: model type       = 2B
0.00.270.198 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.199 I llm_load_print_meta: model params     = 2.51 B
0.00.270.200 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.200 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.201 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.201 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.201 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.202 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.202 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.202 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.203 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.203 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.204 I llm_load_print_meta: max token length = 93
0.00.369.475 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.374.734 I llama_new_context_with_model: n_seq_max     = 1
0.00.374.742 I llama_new_context_with_model: n_ctx         = 4096
0.00.374.743 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.374.743 I llama_new_context_with_model: n_batch       = 2048
0.00.374.744 I llama_new_context_with_model: n_ubatch      = 512
0.00.374.744 I llama_new_context_with_model: flash_attn    = 0
0.00.374.747 I llama_new_context_with_model: freq_base     = 10000.0
0.00.374.748 I llama_new_context_with_model: freq_scale    = 1
0.00.374.749 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.390.591 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.390.607 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.390.700 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.391.959 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.391.966 I llama_new_context_with_model: graph nodes  = 601
0.00.391.966 I llama_new_context_with_model: graph splits = 1
0.00.391.968 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.204 I main: llama threadpool init, n_threads = 4
0.00.475.220 I 
0.00.475.293 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.475.296 I 
0.00.475.339 I sampler seed: 2323759142
0.00.475.350 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.362 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.366 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.366 I 
 increasities, and other inappropriate behavior. [end of text]


0.01.114.370 I llama_perf_sampler_print:    sampling time =       1.37 ms /    10 runs   (    0.14 ms per token,  7315.29 tokens per second)
0.01.114.374 I llama_perf_context_print:        load time =     474.78 ms
0.01.114.375 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.114.377 I llama_perf_context_print:        eval time =     632.68 ms /     9 runs   (   70.30 ms per token,    14.23 tokens per second)
0.01.114.378 I llama_perf_context_print:       total time =     639.17 ms /    10 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.534 I build: 4254 (91c36c26) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.731 I main: llama backend init
0.00.000.738 I main: load the model and apply lora adapter, if any
0.00.026.896 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.026.907 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.026.915 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.924 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.925 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.930 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.930 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.931 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.931 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.933 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.934 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.941 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.942 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.943 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.944 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.944 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.054.248 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.137.398 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.144.292 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.144.298 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.144.298 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.144.299 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.144.300 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.144.300 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.144.301 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.144.303 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.144.304 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.144.304 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.144.305 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.144.306 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.144.310 I llama_model_loader: - type  f32:   37 tensors
0.00.144.311 I llama_model_loader: - type q8_0:  127 tensors
0.00.222.484 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.273.468 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.274.095 I llm_load_vocab: special tokens cache size = 5
0.00.295.140 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.295.157 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.295.157 I llm_load_print_meta: arch             = gemma
0.00.295.158 I llm_load_print_meta: vocab type       = SPM
0.00.295.158 I llm_load_print_meta: n_vocab          = 256000
0.00.295.159 I llm_load_print_meta: n_merges         = 0
0.00.295.159 I llm_load_print_meta: vocab_only       = 0
0.00.295.160 I llm_load_print_meta: n_ctx_train      = 8192
0.00.295.160 I llm_load_print_meta: n_embd           = 2048
0.00.295.160 I llm_load_print_meta: n_layer          = 18
0.00.295.173 I llm_load_print_meta: n_head           = 8
0.00.295.173 I llm_load_print_meta: n_head_kv        = 1
0.00.295.174 I llm_load_print_meta: n_rot            = 256
0.00.295.174 I llm_load_print_meta: n_swa            = 0
0.00.295.175 I llm_load_print_meta: n_embd_head_k    = 256
0.00.295.175 I llm_load_print_meta: n_embd_head_v    = 256
0.00.295.176 I llm_load_print_meta: n_gqa            = 8
0.00.295.177 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.295.178 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.295.179 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.295.180 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.295.180 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.295.181 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.295.181 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.295.182 I llm_load_print_meta: n_ff             = 16384
0.00.295.182 I llm_load_print_meta: n_expert         = 0
0.00.295.183 I llm_load_print_meta: n_expert_used    = 0
0.00.295.183 I llm_load_print_meta: causal attn      = 1
0.00.295.183 I llm_load_print_meta: pooling type     = 0
0.00.295.183 I llm_load_print_meta: rope type        = 2
0.00.295.184 I llm_load_print_meta: rope scaling     = linear
0.00.295.185 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.295.186 I llm_load_print_meta: freq_scale_train = 1
0.00.295.186 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.295.187 I llm_load_print_meta: rope_finetuned   = unknown
0.00.295.187 I llm_load_print_meta: ssm_d_conv       = 0
0.00.295.187 I llm_load_print_meta: ssm_d_inner      = 0
0.00.295.188 I llm_load_print_meta: ssm_d_state      = 0
0.00.295.188 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.295.188 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.295.189 I llm_load_print_meta: model type       = 2B
0.00.295.189 I llm_load_print_meta: model ftype      = Q8_0
0.00.295.190 I llm_load_print_meta: model params     = 2.51 B
0.00.295.191 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.295.191 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.295.192 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.295.192 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.295.193 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.295.193 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.295.193 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.295.194 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.295.194 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.295.195 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.295.195 I llm_load_print_meta: max token length = 93
0.00.374.211 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.374.218 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.374.219 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.374.219 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.374.220 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.374.220 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.379.451 I llama_new_context_with_model: n_seq_max     = 1
0.00.379.457 I llama_new_context_with_model: n_ctx         = 4096
0.00.379.457 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.379.458 I llama_new_context_with_model: n_batch       = 2048
0.00.379.458 I llama_new_context_with_model: n_ubatch      = 512
0.00.379.459 I llama_new_context_with_model: flash_attn    = 0
0.00.379.461 I llama_new_context_with_model: freq_base     = 10000.0
0.00.379.462 I llama_new_context_with_model: freq_scale    = 1
0.00.379.463 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.393.652 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.393.667 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.393.757 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.395.037 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.395.043 I llama_new_context_with_model: graph nodes  = 601
0.00.395.044 I llama_new_context_with_model: graph splits = 1
0.00.395.046 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.480.279 I main: llama threadpool init, n_threads = 4
0.00.480.297 I 
0.00.480.371 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.480.374 I 
0.00.480.423 I sampler seed: 1958480382
0.00.480.434 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.480.438 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.480.439 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.480.439 I 
 increamically. [end of text]


0.00.766.952 I llama_perf_sampler_print:    sampling time =       0.67 ms /     5 runs   (    0.13 ms per token,  7496.25 tokens per second)
0.00.766.954 I llama_perf_context_print:        load time =     479.53 ms
0.00.766.955 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.766.957 I llama_perf_context_print:        eval time =     283.15 ms /     4 runs   (   70.79 ms per token,    14.13 tokens per second)
0.00.766.959 I llama_perf_context_print:       total time =     286.68 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.578 I build: 4254 (91c36c26) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.779 I main: llama backend init
0.00.000.786 I main: load the model and apply lora adapter, if any
0.00.021.524 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.537 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.557 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.562 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.563 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.571 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.572 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.573 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.574 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.575 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.576 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.580 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.581 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.581 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.582 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.582 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.621 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.520 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.563 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.569 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.570 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.571 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.572 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.573 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.574 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.577 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.578 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.579 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.580 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.581 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.585 I llama_model_loader: - type  f32:   37 tensors
0.00.131.586 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.719 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.113 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.720 I llm_load_vocab: special tokens cache size = 5
0.00.268.627 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.643 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.643 I llm_load_print_meta: arch             = gemma
0.00.268.644 I llm_load_print_meta: vocab type       = SPM
0.00.268.645 I llm_load_print_meta: n_vocab          = 256000
0.00.268.645 I llm_load_print_meta: n_merges         = 0
0.00.268.645 I llm_load_print_meta: vocab_only       = 0
0.00.268.646 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.646 I llm_load_print_meta: n_embd           = 2048
0.00.268.647 I llm_load_print_meta: n_layer          = 18
0.00.268.658 I llm_load_print_meta: n_head           = 8
0.00.268.658 I llm_load_print_meta: n_head_kv        = 1
0.00.268.659 I llm_load_print_meta: n_rot            = 256
0.00.268.659 I llm_load_print_meta: n_swa            = 0
0.00.268.659 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.659 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.660 I llm_load_print_meta: n_gqa            = 8
0.00.268.661 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.662 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.663 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.664 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.665 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.665 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.665 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.666 I llm_load_print_meta: n_ff             = 16384
0.00.268.667 I llm_load_print_meta: n_expert         = 0
0.00.268.667 I llm_load_print_meta: n_expert_used    = 0
0.00.268.667 I llm_load_print_meta: causal attn      = 1
0.00.268.667 I llm_load_print_meta: pooling type     = 0
0.00.268.668 I llm_load_print_meta: rope type        = 2
0.00.268.668 I llm_load_print_meta: rope scaling     = linear
0.00.268.670 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.670 I llm_load_print_meta: freq_scale_train = 1
0.00.268.670 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.671 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.671 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.671 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.672 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.672 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.672 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.673 I llm_load_print_meta: model type       = 2B
0.00.268.673 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.674 I llm_load_print_meta: model params     = 2.51 B
0.00.268.675 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.675 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.676 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.676 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.676 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.677 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.677 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.677 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.678 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.678 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.678 I llm_load_print_meta: max token length = 93
0.00.340.353 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.340.359 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.345.570 I llama_new_context_with_model: n_seq_max     = 1
0.00.345.577 I llama_new_context_with_model: n_ctx         = 4096
0.00.345.577 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.345.578 I llama_new_context_with_model: n_batch       = 2048
0.00.345.578 I llama_new_context_with_model: n_ubatch      = 512
0.00.345.579 I llama_new_context_with_model: flash_attn    = 0
0.00.345.582 I llama_new_context_with_model: freq_base     = 10000.0
0.00.345.582 I llama_new_context_with_model: freq_scale    = 1
0.00.345.583 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.360.366 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.360.381 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.360.484 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.763 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.769 I llama_new_context_with_model: graph nodes  = 601
0.00.361.770 I llama_new_context_with_model: graph splits = 1
0.00.361.772 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.894 I main: llama threadpool init, n_threads = 4
0.00.451.910 I 
0.00.451.981 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.451.984 I 
0.00.452.033 I sampler seed: 3647132902
0.00.452.043 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.452.047 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.452.048 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.452.048 I 
 increably.

I am unable to answer your question as it contains sexually suggestive content. [end of text]


0.01.893.984 I llama_perf_sampler_print:    sampling time =       3.08 ms /    20 runs   (    0.15 ms per token,  6487.19 tokens per second)
0.01.893.987 I llama_perf_context_print:        load time =     451.09 ms
0.01.894.002 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.894.004 I llama_perf_context_print:        eval time =    1429.64 ms /    19 runs   (   75.24 ms per token,    13.29 tokens per second)
0.01.894.005 I llama_perf_context_print:       total time =    1442.10 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m16.281s
user	0m21.660s
sys	0m9.628s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4254 (91c36c26)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40300.84 ms
main:    total time = 40300.84 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.171 I build: 4254 (91c36c26) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.375 I main: llama backend init
0.00.000.381 I main: load the model and apply lora adapter, if any
0.00.020.847 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.856 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.864 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.873 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.877 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.881 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.882 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.883 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.883 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.884 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.884 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.888 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.889 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.890 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.891 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.892 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.486 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.058 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.995 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.001 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.003 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.004 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.004 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.006 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.006 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.010 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.011 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.012 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.013 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.014 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.018 I llama_model_loader: - type  f32:   37 tensors
0.00.131.020 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.021 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.736 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.561 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.120 I llm_load_vocab: special tokens cache size = 5
0.00.275.020 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.037 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.038 I llm_load_print_meta: arch             = gemma
0.00.275.038 I llm_load_print_meta: vocab type       = SPM
0.00.275.039 I llm_load_print_meta: n_vocab          = 256000
0.00.275.039 I llm_load_print_meta: n_merges         = 0
0.00.275.039 I llm_load_print_meta: vocab_only       = 0
0.00.275.040 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.040 I llm_load_print_meta: n_embd           = 2048
0.00.275.041 I llm_load_print_meta: n_layer          = 18
0.00.275.052 I llm_load_print_meta: n_head           = 8
0.00.275.053 I llm_load_print_meta: n_head_kv        = 1
0.00.275.053 I llm_load_print_meta: n_rot            = 256
0.00.275.054 I llm_load_print_meta: n_swa            = 0
0.00.275.054 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.054 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.055 I llm_load_print_meta: n_gqa            = 8
0.00.275.056 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.057 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.057 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.059 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.059 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.059 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.060 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.061 I llm_load_print_meta: n_ff             = 16384
0.00.275.061 I llm_load_print_meta: n_expert         = 0
0.00.275.061 I llm_load_print_meta: n_expert_used    = 0
0.00.275.061 I llm_load_print_meta: causal attn      = 1
0.00.275.061 I llm_load_print_meta: pooling type     = 0
0.00.275.062 I llm_load_print_meta: rope type        = 2
0.00.275.062 I llm_load_print_meta: rope scaling     = linear
0.00.275.063 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.064 I llm_load_print_meta: freq_scale_train = 1
0.00.275.064 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.065 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.065 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.065 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.065 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.066 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.066 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.067 I llm_load_print_meta: model type       = 2B
0.00.275.068 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.275.069 I llm_load_print_meta: model params     = 2.51 B
0.00.275.069 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.275.070 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.071 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.071 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.072 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.072 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.073 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.073 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.074 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.074 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.074 I llm_load_print_meta: max token length = 93
0.00.337.929 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.337.934 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.337.935 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.337.935 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.337.936 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.337.937 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.343.011 I llama_new_context_with_model: n_seq_max     = 1
0.00.343.017 I llama_new_context_with_model: n_ctx         = 4096
0.00.343.018 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.343.018 I llama_new_context_with_model: n_batch       = 2048
0.00.343.019 I llama_new_context_with_model: n_ubatch      = 512
0.00.343.019 I llama_new_context_with_model: flash_attn    = 0
0.00.343.022 I llama_new_context_with_model: freq_base     = 10000.0
0.00.343.023 I llama_new_context_with_model: freq_scale    = 1
0.00.343.024 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.357.641 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.357.654 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.747 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.950 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.957 I llama_new_context_with_model: graph nodes  = 601
0.00.358.958 I llama_new_context_with_model: graph splits = 1
0.00.358.960 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.435.864 I main: llama threadpool init, n_threads = 4
0.00.435.883 I 
0.00.435.957 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.435.960 I 
0.00.436.002 I sampler seed: 1274835688
0.00.436.013 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.436.016 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.436.016 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.436.016 I 
 seconally.

Answer: I understand. I will ensure to pay close attention and respond appropriately. [end of text]


0.01.555.286 I llama_perf_sampler_print:    sampling time =       3.55 ms /    22 runs   (    0.16 ms per token,  6200.68 tokens per second)
0.01.555.288 I llama_perf_context_print:        load time =     435.47 ms
0.01.555.290 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.555.291 I llama_perf_context_print:        eval time =    1106.05 ms /    21 runs   (   52.67 ms per token,    18.99 tokens per second)
0.01.555.292 I llama_perf_context_print:       total time =    1119.43 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4254 (91c36c26)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40254.87 ms
main:    total time = 40254.88 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.175 I build: 4254 (91c36c26) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.373 I main: llama backend init
0.00.000.379 I main: load the model and apply lora adapter, if any
0.00.020.608 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.625 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.636 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.636 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.643 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.646 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.647 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.647 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.648 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.648 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.653 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.653 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.654 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.655 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.655 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.049 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.007 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.956 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.966 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.967 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.968 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.968 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.969 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.970 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.973 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.973 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.977 I llama_model_loader: - type  f32:   37 tensors
0.00.130.978 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.979 I llama_model_loader: - type q6_K:   19 tensors
0.00.218.659 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.268.230 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.268.854 I llm_load_vocab: special tokens cache size = 5
0.00.289.825 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.289.843 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.289.843 I llm_load_print_meta: arch             = gemma
0.00.289.844 I llm_load_print_meta: vocab type       = SPM
0.00.289.845 I llm_load_print_meta: n_vocab          = 256000
0.00.289.845 I llm_load_print_meta: n_merges         = 0
0.00.289.846 I llm_load_print_meta: vocab_only       = 0
0.00.289.846 I llm_load_print_meta: n_ctx_train      = 8192
0.00.289.846 I llm_load_print_meta: n_embd           = 2048
0.00.289.847 I llm_load_print_meta: n_layer          = 18
0.00.289.859 I llm_load_print_meta: n_head           = 8
0.00.289.860 I llm_load_print_meta: n_head_kv        = 1
0.00.289.861 I llm_load_print_meta: n_rot            = 256
0.00.289.861 I llm_load_print_meta: n_swa            = 0
0.00.289.861 I llm_load_print_meta: n_embd_head_k    = 256
0.00.289.862 I llm_load_print_meta: n_embd_head_v    = 256
0.00.289.863 I llm_load_print_meta: n_gqa            = 8
0.00.289.865 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.289.866 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.289.867 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.289.868 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.289.868 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.289.869 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.289.869 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.289.870 I llm_load_print_meta: n_ff             = 16384
0.00.289.870 I llm_load_print_meta: n_expert         = 0
0.00.289.871 I llm_load_print_meta: n_expert_used    = 0
0.00.289.871 I llm_load_print_meta: causal attn      = 1
0.00.289.871 I llm_load_print_meta: pooling type     = 0
0.00.289.872 I llm_load_print_meta: rope type        = 2
0.00.289.873 I llm_load_print_meta: rope scaling     = linear
0.00.289.874 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.289.875 I llm_load_print_meta: freq_scale_train = 1
0.00.289.875 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.289.875 I llm_load_print_meta: rope_finetuned   = unknown
0.00.289.876 I llm_load_print_meta: ssm_d_conv       = 0
0.00.289.877 I llm_load_print_meta: ssm_d_inner      = 0
0.00.289.877 I llm_load_print_meta: ssm_d_state      = 0
0.00.289.878 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.289.878 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.289.879 I llm_load_print_meta: model type       = 2B
0.00.289.880 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.289.880 I llm_load_print_meta: model params     = 2.51 B
0.00.289.881 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.289.882 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.289.882 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.289.882 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.289.883 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.289.884 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.289.884 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.289.884 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.289.885 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.289.886 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.289.886 I llm_load_print_meta: max token length = 93
0.00.347.410 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.352.435 I llama_new_context_with_model: n_seq_max     = 1
0.00.352.442 I llama_new_context_with_model: n_ctx         = 4096
0.00.352.442 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.352.443 I llama_new_context_with_model: n_batch       = 2048
0.00.352.443 I llama_new_context_with_model: n_ubatch      = 512
0.00.352.444 I llama_new_context_with_model: flash_attn    = 0
0.00.352.446 I llama_new_context_with_model: freq_base     = 10000.0
0.00.352.447 I llama_new_context_with_model: freq_scale    = 1
0.00.352.448 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.367.432 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.367.448 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.367.546 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.368.847 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.368.853 I llama_new_context_with_model: graph nodes  = 601
0.00.368.854 I llama_new_context_with_model: graph splits = 1
0.00.368.856 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.444.739 I main: llama threadpool init, n_threads = 4
0.00.444.756 I 
0.00.444.836 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.444.839 I 
0.00.444.884 I sampler seed: 1509426222
0.00.444.895 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.444.905 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.444.908 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.444.908 I 
 seconally.

The **[insert topic]** in this question is: **[insert specific topic within the topic].**

**Please provide your answer below

0.02.063.052 I llama_perf_sampler_print:    sampling time =       5.06 ms /    33 runs   (    0.15 ms per token,  6521.74 tokens per second)
0.02.063.054 I llama_perf_context_print:        load time =     444.34 ms
0.02.063.055 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.063.057 I llama_perf_context_print:        eval time =    1599.14 ms /    32 runs   (   49.97 ms per token,    20.01 tokens per second)
0.02.063.057 I llama_perf_context_print:       total time =    1618.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.132s
user	10m22.556s
sys	0m7.136s
