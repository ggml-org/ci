+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.664 I build: 3803 (912c331d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.871 I main: llama backend init
0.00.002.843 I main: load the model and apply lora adapter, if any
0.00.025.128 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.306 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.393 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.404 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.406 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.409 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.410 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.411 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.412 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.413 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.414 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.420 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.421 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.422 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.423 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.423 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.166 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.057 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.260 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.267 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.268 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.269 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.270 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.271 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.272 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.275 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.276 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.277 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.278 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.279 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.287 I llama_model_loader: - type  f32:   37 tensors
0.00.197.291 I llama_model_loader: - type q8_0:  127 tensors
0.00.467.739 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.468.745 I llm_load_vocab: special tokens cache size = 5
0.00.527.202 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.527.253 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.527.254 I llm_load_print_meta: arch             = gemma
0.00.527.255 I llm_load_print_meta: vocab type       = SPM
0.00.527.256 I llm_load_print_meta: n_vocab          = 256000
0.00.527.259 I llm_load_print_meta: n_merges         = 0
0.00.527.260 I llm_load_print_meta: vocab_only       = 0
0.00.527.260 I llm_load_print_meta: n_ctx_train      = 8192
0.00.527.260 I llm_load_print_meta: n_embd           = 2048
0.00.527.261 I llm_load_print_meta: n_layer          = 18
0.00.527.293 I llm_load_print_meta: n_head           = 8
0.00.527.299 I llm_load_print_meta: n_head_kv        = 1
0.00.527.300 I llm_load_print_meta: n_rot            = 256
0.00.527.300 I llm_load_print_meta: n_swa            = 0
0.00.527.301 I llm_load_print_meta: n_embd_head_k    = 256
0.00.527.301 I llm_load_print_meta: n_embd_head_v    = 256
0.00.527.306 I llm_load_print_meta: n_gqa            = 8
0.00.527.311 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.527.334 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.527.335 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.527.337 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.527.338 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.527.338 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.527.339 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.527.353 I llm_load_print_meta: n_ff             = 16384
0.00.527.354 I llm_load_print_meta: n_expert         = 0
0.00.527.361 I llm_load_print_meta: n_expert_used    = 0
0.00.527.362 I llm_load_print_meta: causal attn      = 1
0.00.527.368 I llm_load_print_meta: pooling type     = 0
0.00.527.369 I llm_load_print_meta: rope type        = 2
0.00.527.369 I llm_load_print_meta: rope scaling     = linear
0.00.527.371 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.527.372 I llm_load_print_meta: freq_scale_train = 1
0.00.527.372 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.527.373 I llm_load_print_meta: rope_finetuned   = unknown
0.00.527.373 I llm_load_print_meta: ssm_d_conv       = 0
0.00.527.374 I llm_load_print_meta: ssm_d_inner      = 0
0.00.527.374 I llm_load_print_meta: ssm_d_state      = 0
0.00.527.374 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.527.381 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.527.382 I llm_load_print_meta: model type       = 2B
0.00.527.383 I llm_load_print_meta: model ftype      = Q8_0
0.00.527.385 I llm_load_print_meta: model params     = 2.51 B
0.00.527.385 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.527.386 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.527.387 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.527.387 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.527.387 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.527.394 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.527.395 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.527.395 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.527.396 I llm_load_print_meta: max token length = 93
0.00.527.573 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.626.806 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.626.815 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.626.816 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.626.817 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.626.817 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.626.818 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.632.402 I llama_new_context_with_model: n_ctx      = 8192
0.00.632.409 I llama_new_context_with_model: n_batch    = 2048
0.00.632.409 I llama_new_context_with_model: n_ubatch   = 512
0.00.632.410 I llama_new_context_with_model: flash_attn = 0
0.00.632.412 I llama_new_context_with_model: freq_base  = 10000.0
0.00.632.413 I llama_new_context_with_model: freq_scale = 1
0.00.661.202 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.661.243 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.661.363 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.662.761 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.662.768 I llama_new_context_with_model: graph nodes  = 601
0.00.662.768 I llama_new_context_with_model: graph splits = 1
0.00.662.784 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.275.647 I main: llama threadpool init, n_threads = 4
0.01.275.657 I 
0.01.275.750 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.275.753 I 
0.01.275.915 I sampler seed: 4000745408
0.01.275.925 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.275.930 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.275.931 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasels, and a large turtle.

**What are the animals in order from smallest to largest?**

A) Turtle, Snail, Lizard, Cricket

0.14.890.878 I llama_perf_sampler_print:    sampling time =      47.84 ms /    33 runs   (    1.45 ms per token,   689.73 tokens per second)
0.14.890.881 I llama_perf_context_print:        load time =    1272.72 ms
0.14.890.882 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.890.884 I llama_perf_context_print:        eval time =   13535.24 ms /    32 runs   (  422.98 ms per token,     2.36 tokens per second)
0.14.890.885 I llama_perf_context_print:       total time =   13615.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.636 I build: 3803 (912c331d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.847 I main: llama backend init
0.00.002.805 I main: load the model and apply lora adapter, if any
0.00.024.866 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.956 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.970 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.972 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.975 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.976 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.977 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.978 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.979 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.980 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.987 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.987 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.989 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.990 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.990 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.952 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.908 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.090 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.097 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.098 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.099 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.100 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.101 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.102 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.105 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.106 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.107 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.108 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.197.109 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.117 I llama_model_loader: - type  f32:   37 tensors
0.00.197.120 I llama_model_loader: - type q8_0:  127 tensors
0.00.473.184 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.474.198 I llm_load_vocab: special tokens cache size = 5
0.00.532.483 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.532.536 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.532.537 I llm_load_print_meta: arch             = gemma
0.00.532.538 I llm_load_print_meta: vocab type       = SPM
0.00.532.538 I llm_load_print_meta: n_vocab          = 256000
0.00.532.541 I llm_load_print_meta: n_merges         = 0
0.00.532.542 I llm_load_print_meta: vocab_only       = 0
0.00.532.542 I llm_load_print_meta: n_ctx_train      = 8192
0.00.532.543 I llm_load_print_meta: n_embd           = 2048
0.00.532.543 I llm_load_print_meta: n_layer          = 18
0.00.532.574 I llm_load_print_meta: n_head           = 8
0.00.532.580 I llm_load_print_meta: n_head_kv        = 1
0.00.532.581 I llm_load_print_meta: n_rot            = 256
0.00.532.581 I llm_load_print_meta: n_swa            = 0
0.00.532.581 I llm_load_print_meta: n_embd_head_k    = 256
0.00.532.582 I llm_load_print_meta: n_embd_head_v    = 256
0.00.532.586 I llm_load_print_meta: n_gqa            = 8
0.00.532.591 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.532.597 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.532.598 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.532.600 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.532.600 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.532.600 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.532.601 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.532.606 I llm_load_print_meta: n_ff             = 16384
0.00.532.606 I llm_load_print_meta: n_expert         = 0
0.00.532.607 I llm_load_print_meta: n_expert_used    = 0
0.00.532.607 I llm_load_print_meta: causal attn      = 1
0.00.532.607 I llm_load_print_meta: pooling type     = 0
0.00.532.608 I llm_load_print_meta: rope type        = 2
0.00.532.608 I llm_load_print_meta: rope scaling     = linear
0.00.532.610 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.532.611 I llm_load_print_meta: freq_scale_train = 1
0.00.532.611 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.532.611 I llm_load_print_meta: rope_finetuned   = unknown
0.00.532.611 I llm_load_print_meta: ssm_d_conv       = 0
0.00.532.612 I llm_load_print_meta: ssm_d_inner      = 0
0.00.532.612 I llm_load_print_meta: ssm_d_state      = 0
0.00.532.612 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.532.613 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.532.613 I llm_load_print_meta: model type       = 2B
0.00.532.614 I llm_load_print_meta: model ftype      = Q8_0
0.00.532.615 I llm_load_print_meta: model params     = 2.51 B
0.00.532.615 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.532.616 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.532.616 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.532.617 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.532.617 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.532.618 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.532.618 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.532.618 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.532.619 I llm_load_print_meta: max token length = 93
0.00.532.793 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.629.500 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.635.126 I llama_new_context_with_model: n_ctx      = 8192
0.00.635.133 I llama_new_context_with_model: n_batch    = 2048
0.00.635.133 I llama_new_context_with_model: n_ubatch   = 512
0.00.635.134 I llama_new_context_with_model: flash_attn = 0
0.00.635.137 I llama_new_context_with_model: freq_base  = 10000.0
0.00.635.138 I llama_new_context_with_model: freq_scale = 1
0.00.666.237 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.666.281 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.666.399 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.667.760 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.667.766 I llama_new_context_with_model: graph nodes  = 601
0.00.667.766 I llama_new_context_with_model: graph splits = 1
0.00.667.783 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.284.121 I main: llama threadpool init, n_threads = 4
0.01.284.132 I 
0.01.284.224 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.284.227 I 
0.01.284.388 I sampler seed: 1911763369
0.01.284.399 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.284.404 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.284.404 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities and misunderstandings that arise in the context of cross-cultural communication.

**Cultural misunderstandings and issues:**

* **Perception and interpretation:** Differences

0.14.921.380 I llama_perf_sampler_print:    sampling time =      48.11 ms /    33 runs   (    1.46 ms per token,   685.99 tokens per second)
0.14.921.394 I llama_perf_context_print:        load time =    1281.23 ms
0.14.921.396 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.921.398 I llama_perf_context_print:        eval time =   13556.01 ms /    32 runs   (  423.63 ms per token,     2.36 tokens per second)
0.14.921.399 I llama_perf_context_print:       total time =   13637.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.635 I build: 3803 (912c331d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.856 I main: llama backend init
0.00.002.799 I main: load the model and apply lora adapter, if any
0.00.024.636 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.908 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.998 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.009 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.010 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.015 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.016 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.016 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.017 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.018 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.019 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.025 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.026 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.027 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.028 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.029 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.767 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.208 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.382 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.389 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.390 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.391 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.392 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.393 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.394 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.397 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.398 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.399 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.400 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.196.401 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.406 I llama_model_loader: - type  f32:   37 tensors
0.00.196.410 I llama_model_loader: - type q8_0:  127 tensors
0.00.465.098 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.466.092 I llm_load_vocab: special tokens cache size = 5
0.00.524.380 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.524.432 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.524.436 I llm_load_print_meta: arch             = gemma
0.00.524.437 I llm_load_print_meta: vocab type       = SPM
0.00.524.438 I llm_load_print_meta: n_vocab          = 256000
0.00.524.440 I llm_load_print_meta: n_merges         = 0
0.00.524.441 I llm_load_print_meta: vocab_only       = 0
0.00.524.441 I llm_load_print_meta: n_ctx_train      = 8192
0.00.524.441 I llm_load_print_meta: n_embd           = 2048
0.00.524.442 I llm_load_print_meta: n_layer          = 18
0.00.524.472 I llm_load_print_meta: n_head           = 8
0.00.524.481 I llm_load_print_meta: n_head_kv        = 1
0.00.524.482 I llm_load_print_meta: n_rot            = 256
0.00.524.482 I llm_load_print_meta: n_swa            = 0
0.00.524.482 I llm_load_print_meta: n_embd_head_k    = 256
0.00.524.484 I llm_load_print_meta: n_embd_head_v    = 256
0.00.524.489 I llm_load_print_meta: n_gqa            = 8
0.00.524.494 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.524.501 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.524.502 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.524.504 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.524.504 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.524.505 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.524.506 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.524.510 I llm_load_print_meta: n_ff             = 16384
0.00.524.511 I llm_load_print_meta: n_expert         = 0
0.00.524.512 I llm_load_print_meta: n_expert_used    = 0
0.00.524.513 I llm_load_print_meta: causal attn      = 1
0.00.524.513 I llm_load_print_meta: pooling type     = 0
0.00.524.516 I llm_load_print_meta: rope type        = 2
0.00.524.516 I llm_load_print_meta: rope scaling     = linear
0.00.524.518 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.524.518 I llm_load_print_meta: freq_scale_train = 1
0.00.524.518 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.524.519 I llm_load_print_meta: rope_finetuned   = unknown
0.00.524.519 I llm_load_print_meta: ssm_d_conv       = 0
0.00.524.519 I llm_load_print_meta: ssm_d_inner      = 0
0.00.524.520 I llm_load_print_meta: ssm_d_state      = 0
0.00.524.520 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.524.520 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.524.521 I llm_load_print_meta: model type       = 2B
0.00.524.522 I llm_load_print_meta: model ftype      = Q8_0
0.00.524.523 I llm_load_print_meta: model params     = 2.51 B
0.00.524.525 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.524.525 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.524.528 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.524.529 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.524.529 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.524.529 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.524.530 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.524.530 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.524.530 I llm_load_print_meta: max token length = 93
0.00.524.706 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.601.507 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.601.515 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.601.516 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.601.517 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.601.517 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.601.518 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.607.189 I llama_new_context_with_model: n_ctx      = 8192
0.00.607.196 I llama_new_context_with_model: n_batch    = 2048
0.00.607.197 I llama_new_context_with_model: n_ubatch   = 512
0.00.607.197 I llama_new_context_with_model: flash_attn = 0
0.00.607.199 I llama_new_context_with_model: freq_base  = 10000.0
0.00.607.200 I llama_new_context_with_model: freq_scale = 1
0.00.637.693 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.637.739 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.637.857 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.639.283 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.639.290 I llama_new_context_with_model: graph nodes  = 601
0.00.639.290 I llama_new_context_with_model: graph splits = 1
0.00.639.306 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.252.336 I main: llama threadpool init, n_threads = 4
0.01.252.347 I 
0.01.252.440 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.252.443 I 
0.01.252.604 I sampler seed: 3952224512
0.01.252.614 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.252.618 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.252.619 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities to the core of the entity.

This passage is talking about:
(a) The nature of consciousness
(b) The nature of identity

0.14.863.443 I llama_perf_sampler_print:    sampling time =      47.68 ms /    33 runs   (    1.44 ms per token,   692.07 tokens per second)
0.14.863.447 I llama_perf_context_print:        load time =    1249.46 ms
0.14.863.449 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.863.451 I llama_perf_context_print:        eval time =   13530.37 ms /    32 runs   (  422.82 ms per token,     2.37 tokens per second)
0.14.863.451 I llama_perf_context_print:       total time =   13611.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.675 I build: 3803 (912c331d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.876 I main: llama backend init
0.00.002.824 I main: load the model and apply lora adapter, if any
0.00.024.727 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.912 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.000 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.013 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.014 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.018 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.021 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.022 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.023 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.024 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.025 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.033 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.034 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.035 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.036 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.037 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.988 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.054 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.187 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.194 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.195 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.196 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.197 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.198 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.199 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.202 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.203 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.204 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.205 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.197.206 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.214 I llama_model_loader: - type  f32:   37 tensors
0.00.197.220 I llama_model_loader: - type q8_0:  127 tensors
0.00.469.432 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.470.519 I llm_load_vocab: special tokens cache size = 5
0.00.528.827 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.528.887 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.528.888 I llm_load_print_meta: arch             = gemma
0.00.528.889 I llm_load_print_meta: vocab type       = SPM
0.00.528.890 I llm_load_print_meta: n_vocab          = 256000
0.00.528.892 I llm_load_print_meta: n_merges         = 0
0.00.528.893 I llm_load_print_meta: vocab_only       = 0
0.00.528.893 I llm_load_print_meta: n_ctx_train      = 8192
0.00.528.893 I llm_load_print_meta: n_embd           = 2048
0.00.528.894 I llm_load_print_meta: n_layer          = 18
0.00.528.927 I llm_load_print_meta: n_head           = 8
0.00.528.934 I llm_load_print_meta: n_head_kv        = 1
0.00.528.935 I llm_load_print_meta: n_rot            = 256
0.00.528.935 I llm_load_print_meta: n_swa            = 0
0.00.528.935 I llm_load_print_meta: n_embd_head_k    = 256
0.00.528.936 I llm_load_print_meta: n_embd_head_v    = 256
0.00.528.940 I llm_load_print_meta: n_gqa            = 8
0.00.528.945 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.528.950 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.528.951 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.528.967 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.528.967 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.528.968 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.528.968 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.528.973 I llm_load_print_meta: n_ff             = 16384
0.00.528.974 I llm_load_print_meta: n_expert         = 0
0.00.528.974 I llm_load_print_meta: n_expert_used    = 0
0.00.528.975 I llm_load_print_meta: causal attn      = 1
0.00.528.975 I llm_load_print_meta: pooling type     = 0
0.00.528.975 I llm_load_print_meta: rope type        = 2
0.00.528.976 I llm_load_print_meta: rope scaling     = linear
0.00.528.977 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.528.978 I llm_load_print_meta: freq_scale_train = 1
0.00.528.978 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.528.978 I llm_load_print_meta: rope_finetuned   = unknown
0.00.528.979 I llm_load_print_meta: ssm_d_conv       = 0
0.00.528.979 I llm_load_print_meta: ssm_d_inner      = 0
0.00.528.979 I llm_load_print_meta: ssm_d_state      = 0
0.00.528.985 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.528.986 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.528.986 I llm_load_print_meta: model type       = 2B
0.00.528.988 I llm_load_print_meta: model ftype      = Q8_0
0.00.528.989 I llm_load_print_meta: model params     = 2.51 B
0.00.528.990 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.528.991 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.528.991 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.528.992 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.528.996 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.528.997 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.529.012 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.529.013 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.529.013 I llm_load_print_meta: max token length = 93
0.00.529.189 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.600.281 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.600.292 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.605.844 I llama_new_context_with_model: n_ctx      = 8192
0.00.605.851 I llama_new_context_with_model: n_batch    = 2048
0.00.605.851 I llama_new_context_with_model: n_ubatch   = 512
0.00.605.852 I llama_new_context_with_model: flash_attn = 0
0.00.605.855 I llama_new_context_with_model: freq_base  = 10000.0
0.00.605.856 I llama_new_context_with_model: freq_scale = 1
0.00.635.597 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.635.637 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.635.755 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.637.099 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.637.105 I llama_new_context_with_model: graph nodes  = 601
0.00.637.105 I llama_new_context_with_model: graph splits = 1
0.00.637.121 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.251.100 I main: llama threadpool init, n_threads = 4
0.01.251.111 I 
0.01.251.202 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.251.206 I 
0.01.251.366 I sampler seed: 3544667127
0.01.251.377 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.251.382 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.251.382 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities, and a deep sense of empathy.

These are just some of the qualities that make a truly exceptional leader.

**True or False?**

0.14.744.382 I llama_perf_sampler_print:    sampling time =      47.77 ms /    33 runs   (    1.45 ms per token,   690.84 tokens per second)
0.14.744.399 I llama_perf_context_print:        load time =    1248.19 ms
0.14.744.401 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.744.403 I llama_perf_context_print:        eval time =   13412.39 ms /    32 runs   (  419.14 ms per token,     2.39 tokens per second)
0.14.744.404 I llama_perf_context_print:       total time =   13493.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m8.884s
user	3m49.724s
sys	0m9.305s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3803 (912c331d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199802.08 ms
main:    total time = 199802.08 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.616 I build: 3803 (912c331d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.807 I main: llama backend init
0.00.002.777 I main: load the model and apply lora adapter, if any
0.00.024.715 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.892 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.974 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.985 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.986 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.990 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.992 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.993 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.995 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.995 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.996 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.002 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.003 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.004 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.005 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.005 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.723 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.442 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.563 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.570 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.571 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.572 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.572 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.573 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.574 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.577 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.578 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.579 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.580 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.581 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.589 I llama_model_loader: - type  f32:   37 tensors
0.00.196.593 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.594 I llama_model_loader: - type q6_K:   19 tensors
0.00.464.603 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.465.643 I llm_load_vocab: special tokens cache size = 5
0.00.524.011 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.524.073 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.524.074 I llm_load_print_meta: arch             = gemma
0.00.524.075 I llm_load_print_meta: vocab type       = SPM
0.00.524.076 I llm_load_print_meta: n_vocab          = 256000
0.00.524.079 I llm_load_print_meta: n_merges         = 0
0.00.524.080 I llm_load_print_meta: vocab_only       = 0
0.00.524.080 I llm_load_print_meta: n_ctx_train      = 8192
0.00.524.080 I llm_load_print_meta: n_embd           = 2048
0.00.524.081 I llm_load_print_meta: n_layer          = 18
0.00.524.117 I llm_load_print_meta: n_head           = 8
0.00.524.125 I llm_load_print_meta: n_head_kv        = 1
0.00.524.125 I llm_load_print_meta: n_rot            = 256
0.00.524.125 I llm_load_print_meta: n_swa            = 0
0.00.524.126 I llm_load_print_meta: n_embd_head_k    = 256
0.00.524.126 I llm_load_print_meta: n_embd_head_v    = 256
0.00.524.131 I llm_load_print_meta: n_gqa            = 8
0.00.524.135 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.524.140 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.524.141 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.524.142 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.524.143 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.524.143 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.524.144 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.524.148 I llm_load_print_meta: n_ff             = 16384
0.00.524.149 I llm_load_print_meta: n_expert         = 0
0.00.524.149 I llm_load_print_meta: n_expert_used    = 0
0.00.524.150 I llm_load_print_meta: causal attn      = 1
0.00.524.150 I llm_load_print_meta: pooling type     = 0
0.00.524.150 I llm_load_print_meta: rope type        = 2
0.00.524.151 I llm_load_print_meta: rope scaling     = linear
0.00.524.152 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.524.153 I llm_load_print_meta: freq_scale_train = 1
0.00.524.153 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.524.154 I llm_load_print_meta: rope_finetuned   = unknown
0.00.524.155 I llm_load_print_meta: ssm_d_conv       = 0
0.00.524.164 I llm_load_print_meta: ssm_d_inner      = 0
0.00.524.165 I llm_load_print_meta: ssm_d_state      = 0
0.00.524.166 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.524.166 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.524.167 I llm_load_print_meta: model type       = 2B
0.00.524.168 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.524.169 I llm_load_print_meta: model params     = 2.51 B
0.00.524.170 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.524.170 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.524.171 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.524.171 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.524.171 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.524.172 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.524.172 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.524.173 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.524.173 I llm_load_print_meta: max token length = 93
0.00.524.345 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.584.620 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.584.630 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.584.631 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.584.632 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.584.632 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.584.633 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.590.223 I llama_new_context_with_model: n_ctx      = 8192
0.00.590.230 I llama_new_context_with_model: n_batch    = 2048
0.00.590.231 I llama_new_context_with_model: n_ubatch   = 512
0.00.590.231 I llama_new_context_with_model: flash_attn = 0
0.00.590.234 I llama_new_context_with_model: freq_base  = 10000.0
0.00.590.235 I llama_new_context_with_model: freq_scale = 1
0.00.619.814 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.619.859 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.619.974 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.621.314 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.621.321 I llama_new_context_with_model: graph nodes  = 601
0.00.621.321 I llama_new_context_with_model: graph splits = 1
0.00.621.338 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.202.184 I main: llama threadpool init, n_threads = 4
0.01.202.196 I 
0.01.202.287 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.202.290 I 
0.01.202.454 I sampler seed: 2196625823
0.01.202.465 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.202.469 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.202.470 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 fufilling melodies and harmonies.

**Answer:** A symphony.

A symphony is a musical composition that is performed by an orchestra or other large ensemble. It

0.12.125.929 I llama_perf_sampler_print:    sampling time =      47.87 ms /    33 runs   (    1.45 ms per token,   689.31 tokens per second)
0.12.125.932 I llama_perf_context_print:        load time =    1199.33 ms
0.12.125.933 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.125.935 I llama_perf_context_print:        eval time =   10843.53 ms /    32 runs   (  338.86 ms per token,     2.95 tokens per second)
0.12.125.936 I llama_perf_context_print:       total time =   10923.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3803 (912c331d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199782.76 ms
main:    total time = 199782.76 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.625 I build: 3803 (912c331d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.835 I main: llama backend init
0.00.002.765 I main: load the model and apply lora adapter, if any
0.00.024.529 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.623 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.637 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.639 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.645 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.646 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.647 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.648 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.649 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.651 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.657 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.658 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.659 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.660 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.661 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.462 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.382 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.493 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.500 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.501 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.502 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.503 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.504 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.505 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.508 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.511 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.519 I llama_model_loader: - type  f32:   37 tensors
0.00.196.526 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.526 I llama_model_loader: - type q6_K:   19 tensors
0.00.466.553 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.467.553 I llm_load_vocab: special tokens cache size = 5
0.00.525.885 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.525.941 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.525.945 I llm_load_print_meta: arch             = gemma
0.00.525.946 I llm_load_print_meta: vocab type       = SPM
0.00.525.946 I llm_load_print_meta: n_vocab          = 256000
0.00.525.949 I llm_load_print_meta: n_merges         = 0
0.00.525.950 I llm_load_print_meta: vocab_only       = 0
0.00.525.950 I llm_load_print_meta: n_ctx_train      = 8192
0.00.525.951 I llm_load_print_meta: n_embd           = 2048
0.00.525.951 I llm_load_print_meta: n_layer          = 18
0.00.525.985 I llm_load_print_meta: n_head           = 8
0.00.525.994 I llm_load_print_meta: n_head_kv        = 1
0.00.525.995 I llm_load_print_meta: n_rot            = 256
0.00.525.995 I llm_load_print_meta: n_swa            = 0
0.00.525.996 I llm_load_print_meta: n_embd_head_k    = 256
0.00.525.996 I llm_load_print_meta: n_embd_head_v    = 256
0.00.526.001 I llm_load_print_meta: n_gqa            = 8
0.00.526.006 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.526.010 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.526.012 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.526.013 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.526.014 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.526.014 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.526.014 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.526.019 I llm_load_print_meta: n_ff             = 16384
0.00.526.020 I llm_load_print_meta: n_expert         = 0
0.00.526.022 I llm_load_print_meta: n_expert_used    = 0
0.00.526.022 I llm_load_print_meta: causal attn      = 1
0.00.526.022 I llm_load_print_meta: pooling type     = 0
0.00.526.023 I llm_load_print_meta: rope type        = 2
0.00.526.024 I llm_load_print_meta: rope scaling     = linear
0.00.526.026 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.526.027 I llm_load_print_meta: freq_scale_train = 1
0.00.526.028 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.526.029 I llm_load_print_meta: rope_finetuned   = unknown
0.00.526.029 I llm_load_print_meta: ssm_d_conv       = 0
0.00.526.029 I llm_load_print_meta: ssm_d_inner      = 0
0.00.526.041 I llm_load_print_meta: ssm_d_state      = 0
0.00.526.042 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.526.043 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.526.044 I llm_load_print_meta: model type       = 2B
0.00.526.046 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.526.046 I llm_load_print_meta: model params     = 2.51 B
0.00.526.050 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.526.050 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.526.051 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.526.051 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.526.051 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.526.052 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.526.052 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.526.053 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.526.053 I llm_load_print_meta: max token length = 93
0.00.526.230 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.584.548 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.589.914 I llama_new_context_with_model: n_ctx      = 8192
0.00.589.921 I llama_new_context_with_model: n_batch    = 2048
0.00.589.921 I llama_new_context_with_model: n_ubatch   = 512
0.00.589.922 I llama_new_context_with_model: flash_attn = 0
0.00.589.925 I llama_new_context_with_model: freq_base  = 10000.0
0.00.589.926 I llama_new_context_with_model: freq_scale = 1
0.00.619.265 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.619.310 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.619.419 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.620.772 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.620.778 I llama_new_context_with_model: graph nodes  = 601
0.00.620.778 I llama_new_context_with_model: graph splits = 1
0.00.620.794 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.200.989 I main: llama threadpool init, n_threads = 4
0.01.201.003 I 
0.01.201.096 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.201.099 I 
0.01.201.261 I sampler seed: 1889649123
0.01.201.272 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.201.277 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.201.287 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 encompasing a multitude of skills, each honed to a razor-sharp edge.

This individual is the embodiment of versatility and adaptability. They seamlessly navigate through diverse

0.12.164.894 I llama_perf_sampler_print:    sampling time =      47.93 ms /    33 runs   (    1.45 ms per token,   688.52 tokens per second)
0.12.164.898 I llama_perf_context_print:        load time =    1198.14 ms
0.12.164.899 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.164.902 I llama_perf_context_print:        eval time =   10883.27 ms /    32 runs   (  340.10 ms per token,     2.94 tokens per second)
0.12.164.903 I llama_perf_context_print:       total time =   10963.92 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.704s
user	50m20.586s
sys	0m6.223s
