+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.521 I build: 4158 (cce5a900) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.722 I main: llama backend init
0.00.000.728 I main: load the model and apply lora adapter, if any
0.00.020.859 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.866 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.873 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.878 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.881 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.885 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.885 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.886 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.886 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.887 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.887 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.891 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.892 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.892 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.893 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.893 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.855 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.375 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.190 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.196 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.197 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.199 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.199 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.201 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.202 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.205 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.206 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.207 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.208 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.209 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.213 I llama_model_loader: - type  f32:   37 tensors
0.00.131.214 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.481 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.558 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.096 I llm_load_vocab: special tokens cache size = 5
0.00.264.812 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.827 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.828 I llm_load_print_meta: arch             = gemma
0.00.264.828 I llm_load_print_meta: vocab type       = SPM
0.00.264.829 I llm_load_print_meta: n_vocab          = 256000
0.00.264.830 I llm_load_print_meta: n_merges         = 0
0.00.264.830 I llm_load_print_meta: vocab_only       = 0
0.00.264.830 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.830 I llm_load_print_meta: n_embd           = 2048
0.00.264.831 I llm_load_print_meta: n_layer          = 18
0.00.264.842 I llm_load_print_meta: n_head           = 8
0.00.264.843 I llm_load_print_meta: n_head_kv        = 1
0.00.264.843 I llm_load_print_meta: n_rot            = 256
0.00.264.843 I llm_load_print_meta: n_swa            = 0
0.00.264.844 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.844 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.845 I llm_load_print_meta: n_gqa            = 8
0.00.264.846 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.847 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.848 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.849 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.850 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.850 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.850 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.851 I llm_load_print_meta: n_ff             = 16384
0.00.264.852 I llm_load_print_meta: n_expert         = 0
0.00.264.852 I llm_load_print_meta: n_expert_used    = 0
0.00.264.852 I llm_load_print_meta: causal attn      = 1
0.00.264.853 I llm_load_print_meta: pooling type     = 0
0.00.264.853 I llm_load_print_meta: rope type        = 2
0.00.264.853 I llm_load_print_meta: rope scaling     = linear
0.00.264.855 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.855 I llm_load_print_meta: freq_scale_train = 1
0.00.264.855 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.856 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.856 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.856 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.857 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.857 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.857 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.858 I llm_load_print_meta: model type       = 2B
0.00.264.858 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.859 I llm_load_print_meta: model params     = 2.51 B
0.00.264.860 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.860 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.861 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.861 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.861 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.862 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.862 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.862 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.863 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.863 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.863 I llm_load_print_meta: max token length = 93
0.00.364.687 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.364.703 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.364.703 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.364.704 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.364.705 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.364.705 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.369.894 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.900 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.901 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.901 I llama_new_context_with_model: n_batch       = 2048
0.00.369.902 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.902 I llama_new_context_with_model: flash_attn    = 0
0.00.369.904 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.905 I llama_new_context_with_model: freq_scale    = 1
0.00.369.906 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.082 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.095 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.184 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.483 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.488 I llama_new_context_with_model: graph nodes  = 601
0.00.385.489 I llama_new_context_with_model: graph splits = 1
0.00.385.491 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.723 I main: llama threadpool init, n_threads = 4
0.00.469.736 I 
0.00.469.809 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.469.812 I 
0.00.469.857 I sampler seed: 3517084030
0.00.469.868 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.871 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.872 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.872 I 
 seconally.

**Assistant**

I am unable to provide medical or healthcare advice. If you have any concerns about your health, please consult a qualified medical

0.02.710.265 I llama_perf_sampler_print:    sampling time =       4.96 ms /    33 runs   (    0.15 ms per token,  6658.60 tokens per second)
0.02.710.268 I llama_perf_context_print:        load time =     468.98 ms
0.02.710.270 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.710.272 I llama_perf_context_print:        eval time =    2220.82 ms /    32 runs   (   69.40 ms per token,    14.41 tokens per second)
0.02.710.273 I llama_perf_context_print:       total time =    2240.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.559 I build: 4158 (cce5a900) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.000.776 I main: load the model and apply lora adapter, if any
0.00.022.180 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.191 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.198 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.199 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.203 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.204 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.205 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.206 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.206 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.207 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.211 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.212 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.212 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.213 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.213 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.137 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.604 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.466 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.474 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.475 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.476 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.477 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.478 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.478 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.481 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.481 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.483 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.483 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.484 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.488 I llama_model_loader: - type  f32:   37 tensors
0.00.133.489 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.392 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.761 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.273 I llm_load_vocab: special tokens cache size = 5
0.00.262.910 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.926 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.926 I llm_load_print_meta: arch             = gemma
0.00.262.927 I llm_load_print_meta: vocab type       = SPM
0.00.262.927 I llm_load_print_meta: n_vocab          = 256000
0.00.262.928 I llm_load_print_meta: n_merges         = 0
0.00.262.928 I llm_load_print_meta: vocab_only       = 0
0.00.262.928 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.929 I llm_load_print_meta: n_embd           = 2048
0.00.262.929 I llm_load_print_meta: n_layer          = 18
0.00.262.940 I llm_load_print_meta: n_head           = 8
0.00.262.940 I llm_load_print_meta: n_head_kv        = 1
0.00.262.941 I llm_load_print_meta: n_rot            = 256
0.00.262.941 I llm_load_print_meta: n_swa            = 0
0.00.262.942 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.942 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.943 I llm_load_print_meta: n_gqa            = 8
0.00.262.944 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.945 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.945 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.947 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.948 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.948 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.948 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.949 I llm_load_print_meta: n_ff             = 16384
0.00.262.950 I llm_load_print_meta: n_expert         = 0
0.00.262.950 I llm_load_print_meta: n_expert_used    = 0
0.00.262.950 I llm_load_print_meta: causal attn      = 1
0.00.262.951 I llm_load_print_meta: pooling type     = 0
0.00.262.951 I llm_load_print_meta: rope type        = 2
0.00.262.951 I llm_load_print_meta: rope scaling     = linear
0.00.262.953 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.953 I llm_load_print_meta: freq_scale_train = 1
0.00.262.953 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.954 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.954 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.954 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.955 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.955 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.955 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.956 I llm_load_print_meta: model type       = 2B
0.00.262.956 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.957 I llm_load_print_meta: model params     = 2.51 B
0.00.262.958 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.958 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.959 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.959 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.959 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.960 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.960 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.960 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.960 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.961 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.961 I llm_load_print_meta: max token length = 93
0.00.358.089 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.363.266 I llama_new_context_with_model: n_seq_max     = 1
0.00.363.272 I llama_new_context_with_model: n_ctx         = 4096
0.00.363.272 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.363.272 I llama_new_context_with_model: n_batch       = 2048
0.00.363.273 I llama_new_context_with_model: n_ubatch      = 512
0.00.363.274 I llama_new_context_with_model: flash_attn    = 0
0.00.363.276 I llama_new_context_with_model: freq_base     = 10000.0
0.00.363.277 I llama_new_context_with_model: freq_scale    = 1
0.00.363.277 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.377.854 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.377.869 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.377.959 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.379.215 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.379.222 I llama_new_context_with_model: graph nodes  = 601
0.00.379.222 I llama_new_context_with_model: graph splits = 1
0.00.379.224 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.612 I main: llama threadpool init, n_threads = 4
0.00.459.625 I 
0.00.459.699 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.459.702 I 
0.00.459.746 I sampler seed: 2014368099
0.00.459.757 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.459.760 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.459.761 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.459.761 I 
 increasively, defying the limitations of physical space. [end of text]


0.01.203.097 I llama_perf_sampler_print:    sampling time =       1.64 ms /    12 runs   (    0.14 ms per token,  7321.54 tokens per second)
0.01.203.100 I llama_perf_context_print:        load time =     458.82 ms
0.01.203.101 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.203.102 I llama_perf_context_print:        eval time =     736.44 ms /    11 runs   (   66.95 ms per token,    14.94 tokens per second)
0.01.203.103 I llama_perf_context_print:       total time =     743.49 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.551 I build: 4158 (cce5a900) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.744 I main: llama backend init
0.00.000.751 I main: load the model and apply lora adapter, if any
0.00.021.026 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.034 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.041 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.048 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.050 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.056 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.060 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.060 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.061 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.061 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.062 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.065 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.066 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.066 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.067 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.067 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.086 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.990 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.794 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.800 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.802 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.803 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.803 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.804 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.805 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.808 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.809 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.810 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.810 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.812 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.815 I llama_model_loader: - type  f32:   37 tensors
0.00.130.816 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.921 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.980 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.507 I llm_load_vocab: special tokens cache size = 5
0.00.262.473 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.489 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.489 I llm_load_print_meta: arch             = gemma
0.00.262.490 I llm_load_print_meta: vocab type       = SPM
0.00.262.490 I llm_load_print_meta: n_vocab          = 256000
0.00.262.491 I llm_load_print_meta: n_merges         = 0
0.00.262.491 I llm_load_print_meta: vocab_only       = 0
0.00.262.491 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.492 I llm_load_print_meta: n_embd           = 2048
0.00.262.492 I llm_load_print_meta: n_layer          = 18
0.00.262.503 I llm_load_print_meta: n_head           = 8
0.00.262.504 I llm_load_print_meta: n_head_kv        = 1
0.00.262.504 I llm_load_print_meta: n_rot            = 256
0.00.262.504 I llm_load_print_meta: n_swa            = 0
0.00.262.505 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.505 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.506 I llm_load_print_meta: n_gqa            = 8
0.00.262.507 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.508 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.508 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.510 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.510 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.511 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.511 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.512 I llm_load_print_meta: n_ff             = 16384
0.00.262.512 I llm_load_print_meta: n_expert         = 0
0.00.262.513 I llm_load_print_meta: n_expert_used    = 0
0.00.262.513 I llm_load_print_meta: causal attn      = 1
0.00.262.513 I llm_load_print_meta: pooling type     = 0
0.00.262.513 I llm_load_print_meta: rope type        = 2
0.00.262.514 I llm_load_print_meta: rope scaling     = linear
0.00.262.515 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.516 I llm_load_print_meta: freq_scale_train = 1
0.00.262.516 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.516 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.516 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.517 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.517 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.517 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.517 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.518 I llm_load_print_meta: model type       = 2B
0.00.262.519 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.520 I llm_load_print_meta: model params     = 2.51 B
0.00.262.521 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.521 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.521 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.522 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.522 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.522 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.522 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.523 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.523 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.524 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.524 I llm_load_print_meta: max token length = 93
0.00.335.393 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.335.400 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.335.401 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.335.401 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.335.402 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.335.402 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.340.626 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.632 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.632 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.632 I llama_new_context_with_model: n_batch       = 2048
0.00.340.633 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.633 I llama_new_context_with_model: flash_attn    = 0
0.00.340.635 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.636 I llama_new_context_with_model: freq_scale    = 1
0.00.340.637 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.005 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.018 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.355.118 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.356.390 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.356.396 I llama_new_context_with_model: graph nodes  = 601
0.00.356.397 I llama_new_context_with_model: graph splits = 1
0.00.356.412 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.452.461 I main: llama threadpool init, n_threads = 4
0.00.452.476 I 
0.00.452.554 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.452.558 I 
0.00.452.599 I sampler seed: 929640647
0.00.452.610 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.452.612 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.452.613 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.452.613 I 
 increasively from 100 to 500 within 5 minutes.

**Answer:** 375

**Explanation:**

$$3

0.02.722.615 I llama_perf_sampler_print:    sampling time =       4.86 ms /    33 runs   (    0.15 ms per token,  6784.54 tokens per second)
0.02.722.617 I llama_perf_context_print:        load time =     451.69 ms
0.02.722.618 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.722.620 I llama_perf_context_print:        eval time =    2251.81 ms /    32 runs   (   70.37 ms per token,    14.21 tokens per second)
0.02.722.621 I llama_perf_context_print:       total time =    2270.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.542 I build: 4158 (cce5a900) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.734 I main: llama backend init
0.00.000.741 I main: load the model and apply lora adapter, if any
0.00.264.452 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.264.463 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.264.470 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.264.479 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.264.480 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.264.484 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.264.484 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.264.485 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.264.486 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.264.486 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.264.487 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.264.491 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.264.492 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.264.492 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.264.493 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.264.495 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.292.806 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.367.646 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.374.483 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.374.489 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.374.490 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.374.490 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.374.491 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.374.492 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.374.492 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.374.494 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.374.495 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.374.495 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.374.496 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.374.498 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.374.500 I llama_model_loader: - type  f32:   37 tensors
0.00.374.501 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.103 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.490.964 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.491.503 I llm_load_vocab: special tokens cache size = 5
0.00.512.130 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.512.147 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.512.148 I llm_load_print_meta: arch             = gemma
0.00.512.148 I llm_load_print_meta: vocab type       = SPM
0.00.512.149 I llm_load_print_meta: n_vocab          = 256000
0.00.512.149 I llm_load_print_meta: n_merges         = 0
0.00.512.150 I llm_load_print_meta: vocab_only       = 0
0.00.512.150 I llm_load_print_meta: n_ctx_train      = 8192
0.00.512.151 I llm_load_print_meta: n_embd           = 2048
0.00.512.151 I llm_load_print_meta: n_layer          = 18
0.00.512.162 I llm_load_print_meta: n_head           = 8
0.00.512.163 I llm_load_print_meta: n_head_kv        = 1
0.00.512.163 I llm_load_print_meta: n_rot            = 256
0.00.512.163 I llm_load_print_meta: n_swa            = 0
0.00.512.164 I llm_load_print_meta: n_embd_head_k    = 256
0.00.512.164 I llm_load_print_meta: n_embd_head_v    = 256
0.00.512.165 I llm_load_print_meta: n_gqa            = 8
0.00.512.166 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.512.167 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.512.167 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.512.169 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.512.169 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.512.169 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.512.170 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.512.171 I llm_load_print_meta: n_ff             = 16384
0.00.512.171 I llm_load_print_meta: n_expert         = 0
0.00.512.171 I llm_load_print_meta: n_expert_used    = 0
0.00.512.172 I llm_load_print_meta: causal attn      = 1
0.00.512.172 I llm_load_print_meta: pooling type     = 0
0.00.512.173 I llm_load_print_meta: rope type        = 2
0.00.512.173 I llm_load_print_meta: rope scaling     = linear
0.00.512.174 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.512.175 I llm_load_print_meta: freq_scale_train = 1
0.00.512.175 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.512.175 I llm_load_print_meta: rope_finetuned   = unknown
0.00.512.176 I llm_load_print_meta: ssm_d_conv       = 0
0.00.512.176 I llm_load_print_meta: ssm_d_inner      = 0
0.00.512.176 I llm_load_print_meta: ssm_d_state      = 0
0.00.512.176 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.512.177 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.512.177 I llm_load_print_meta: model type       = 2B
0.00.512.178 I llm_load_print_meta: model ftype      = Q8_0
0.00.512.178 I llm_load_print_meta: model params     = 2.51 B
0.00.512.179 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.512.180 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.512.180 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.512.180 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.512.181 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.512.181 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.512.181 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.512.181 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.512.182 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.512.182 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.512.183 I llm_load_print_meta: max token length = 93
0.00.582.936 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.582.941 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.588.099 I llama_new_context_with_model: n_seq_max     = 1
0.00.588.106 I llama_new_context_with_model: n_ctx         = 4096
0.00.588.107 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.588.107 I llama_new_context_with_model: n_batch       = 2048
0.00.588.107 I llama_new_context_with_model: n_ubatch      = 512
0.00.588.108 I llama_new_context_with_model: flash_attn    = 0
0.00.588.110 I llama_new_context_with_model: freq_base     = 10000.0
0.00.588.111 I llama_new_context_with_model: freq_scale    = 1
0.00.588.112 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.602.590 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.602.605 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.602.695 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.603.958 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.603.965 I llama_new_context_with_model: graph nodes  = 601
0.00.603.965 I llama_new_context_with_model: graph splits = 1
0.00.603.967 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.691.988 I main: llama threadpool init, n_threads = 4
0.00.691.999 I 
0.00.692.072 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.692.075 I 
0.00.692.114 I sampler seed: 2690861913
0.00.692.126 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.692.128 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.692.129 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.692.129 I 
 seconally.

A system of linear equations is given by the equations:

$$x+y=5$$
$$2x-y=1$$

0.03.105.786 I llama_perf_sampler_print:    sampling time =       4.97 ms /    33 runs   (    0.15 ms per token,  6634.50 tokens per second)
0.03.105.788 I llama_perf_context_print:        load time =     691.23 ms
0.03.105.790 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.105.791 I llama_perf_context_print:        eval time =    2394.79 ms /    32 runs   (   74.84 ms per token,    13.36 tokens per second)
0.03.105.792 I llama_perf_context_print:       total time =    2413.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.189s
user	0m33.499s
sys	0m9.271s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4158 (cce5a900)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40169.89 ms
main:    total time = 40169.89 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.567 I build: 4158 (cce5a900) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.764 I main: llama backend init
0.00.000.771 I main: load the model and apply lora adapter, if any
0.00.021.769 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.781 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.789 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.795 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.796 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.801 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.801 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.802 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.802 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.803 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.804 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.810 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.810 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.811 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.811 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.812 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.183 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.598 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.433 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.439 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.440 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.441 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.441 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.442 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.443 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.445 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.446 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.447 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.447 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.448 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.452 I llama_model_loader: - type  f32:   37 tensors
0.00.132.453 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.453 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.327 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.905 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.392 I llm_load_vocab: special tokens cache size = 5
0.00.268.077 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.092 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.093 I llm_load_print_meta: arch             = gemma
0.00.268.094 I llm_load_print_meta: vocab type       = SPM
0.00.268.095 I llm_load_print_meta: n_vocab          = 256000
0.00.268.095 I llm_load_print_meta: n_merges         = 0
0.00.268.095 I llm_load_print_meta: vocab_only       = 0
0.00.268.096 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.096 I llm_load_print_meta: n_embd           = 2048
0.00.268.096 I llm_load_print_meta: n_layer          = 18
0.00.268.106 I llm_load_print_meta: n_head           = 8
0.00.268.107 I llm_load_print_meta: n_head_kv        = 1
0.00.268.108 I llm_load_print_meta: n_rot            = 256
0.00.268.108 I llm_load_print_meta: n_swa            = 0
0.00.268.108 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.108 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.109 I llm_load_print_meta: n_gqa            = 8
0.00.268.110 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.111 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.112 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.114 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.114 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.115 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.115 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.116 I llm_load_print_meta: n_ff             = 16384
0.00.268.116 I llm_load_print_meta: n_expert         = 0
0.00.268.117 I llm_load_print_meta: n_expert_used    = 0
0.00.268.117 I llm_load_print_meta: causal attn      = 1
0.00.268.117 I llm_load_print_meta: pooling type     = 0
0.00.268.118 I llm_load_print_meta: rope type        = 2
0.00.268.118 I llm_load_print_meta: rope scaling     = linear
0.00.268.119 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.120 I llm_load_print_meta: freq_scale_train = 1
0.00.268.120 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.120 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.121 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.121 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.122 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.122 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.122 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.123 I llm_load_print_meta: model type       = 2B
0.00.268.123 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.124 I llm_load_print_meta: model params     = 2.51 B
0.00.268.125 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.125 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.125 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.126 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.126 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.126 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.126 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.127 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.127 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.128 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.128 I llm_load_print_meta: max token length = 93
0.00.326.607 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.326.614 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.326.615 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.326.616 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.326.616 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.326.617 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.331.816 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.822 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.822 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.823 I llama_new_context_with_model: n_batch       = 2048
0.00.331.823 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.824 I llama_new_context_with_model: flash_attn    = 0
0.00.331.826 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.827 I llama_new_context_with_model: freq_scale    = 1
0.00.331.828 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.346.104 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.346.118 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.346.208 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.477 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.489 I llama_new_context_with_model: graph nodes  = 601
0.00.347.490 I llama_new_context_with_model: graph splits = 1
0.00.347.492 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.788 I main: llama threadpool init, n_threads = 4
0.00.421.800 I 
0.00.421.878 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.421.881 I 
0.00.421.928 I sampler seed: 918652696
0.00.421.939 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.941 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.421.942 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.421.942 I 
 encomporn.

I am unable to access the requested file.

The requested file is likely located in the user's Documents folder. Please ensure that you

0.01.983.000 I llama_perf_sampler_print:    sampling time =       5.36 ms /    33 runs   (    0.16 ms per token,  6156.72 tokens per second)
0.01.983.002 I llama_perf_context_print:        load time =     421.00 ms
0.01.983.004 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.983.005 I llama_perf_context_print:        eval time =    1541.41 ms /    32 runs   (   48.17 ms per token,    20.76 tokens per second)
0.01.983.006 I llama_perf_context_print:       total time =    1561.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4158 (cce5a900)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40143.39 ms
main:    total time = 40143.39 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.599 I build: 4158 (cce5a900) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.795 I main: llama backend init
0.00.000.802 I main: load the model and apply lora adapter, if any
0.00.021.678 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.692 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.699 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.700 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.705 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.706 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.707 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.707 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.708 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.708 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.712 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.713 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.713 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.714 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.714 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.898 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.021 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.839 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.845 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.846 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.846 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.847 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.848 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.849 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.851 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.852 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.856 I llama_model_loader: - type  f32:   37 tensors
0.00.131.857 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.857 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.666 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.239 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.772 I llm_load_vocab: special tokens cache size = 5
0.00.266.519 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.536 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.537 I llm_load_print_meta: arch             = gemma
0.00.266.537 I llm_load_print_meta: vocab type       = SPM
0.00.266.538 I llm_load_print_meta: n_vocab          = 256000
0.00.266.538 I llm_load_print_meta: n_merges         = 0
0.00.266.539 I llm_load_print_meta: vocab_only       = 0
0.00.266.539 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.539 I llm_load_print_meta: n_embd           = 2048
0.00.266.539 I llm_load_print_meta: n_layer          = 18
0.00.266.550 I llm_load_print_meta: n_head           = 8
0.00.266.552 I llm_load_print_meta: n_head_kv        = 1
0.00.266.552 I llm_load_print_meta: n_rot            = 256
0.00.266.552 I llm_load_print_meta: n_swa            = 0
0.00.266.552 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.553 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.554 I llm_load_print_meta: n_gqa            = 8
0.00.266.556 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.557 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.558 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.560 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.560 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.561 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.562 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.563 I llm_load_print_meta: n_ff             = 16384
0.00.266.563 I llm_load_print_meta: n_expert         = 0
0.00.266.563 I llm_load_print_meta: n_expert_used    = 0
0.00.266.564 I llm_load_print_meta: causal attn      = 1
0.00.266.564 I llm_load_print_meta: pooling type     = 0
0.00.266.565 I llm_load_print_meta: rope type        = 2
0.00.266.565 I llm_load_print_meta: rope scaling     = linear
0.00.266.566 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.567 I llm_load_print_meta: freq_scale_train = 1
0.00.266.567 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.568 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.569 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.569 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.569 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.569 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.570 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.570 I llm_load_print_meta: model type       = 2B
0.00.266.571 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.571 I llm_load_print_meta: model params     = 2.51 B
0.00.266.572 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.573 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.573 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.574 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.574 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.575 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.575 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.576 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.576 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.579 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.579 I llm_load_print_meta: max token length = 93
0.00.321.087 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.326.323 I llama_new_context_with_model: n_seq_max     = 1
0.00.326.329 I llama_new_context_with_model: n_ctx         = 4096
0.00.326.329 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.326.329 I llama_new_context_with_model: n_batch       = 2048
0.00.326.330 I llama_new_context_with_model: n_ubatch      = 512
0.00.326.330 I llama_new_context_with_model: flash_attn    = 0
0.00.326.332 I llama_new_context_with_model: freq_base     = 10000.0
0.00.326.333 I llama_new_context_with_model: freq_scale    = 1
0.00.326.334 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.342.079 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.342.092 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.342.186 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.481 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.343.488 I llama_new_context_with_model: graph nodes  = 601
0.00.343.488 I llama_new_context_with_model: graph splits = 1
0.00.343.490 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.616 I main: llama threadpool init, n_threads = 4
0.00.418.630 I 
0.00.418.706 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.418.709 I 
0.00.418.754 I sampler seed: 3181994409
0.00.418.764 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.767 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.418.768 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.418.770 I 
 maneuvorous plants that rely on bacteria to break down organic matter.

Answer the following questions:
a) What are the characteristics of these plants?
b

0.01.959.675 I llama_perf_sampler_print:    sampling time =       5.38 ms /    33 runs   (    0.16 ms per token,  6133.83 tokens per second)
0.01.959.678 I llama_perf_context_print:        load time =     417.80 ms
0.01.959.679 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.959.680 I llama_perf_context_print:        eval time =    1521.17 ms /    32 runs   (   47.54 ms per token,    21.04 tokens per second)
0.01.959.681 I llama_perf_context_print:       total time =    1541.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.029s
user	10m23.237s
sys	0m6.941s
