+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.646 I build: 3982 (cc2983d3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.869 I main: llama backend init
0.00.002.791 I main: load the model and apply lora adapter, if any
0.00.024.567 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.771 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.854 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.865 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.866 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.870 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.872 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.874 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.876 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.877 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.878 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.885 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.888 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.889 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.890 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.892 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.370 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.039 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.701 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.711 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.712 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.713 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.714 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.715 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.717 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.720 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.721 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.722 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.724 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.725 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.734 I llama_model_loader: - type  f32:   37 tensors
0.00.265.738 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.604 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.824 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.509.834 I llm_load_vocab: special tokens cache size = 5
0.00.603.150 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.603.222 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.603.223 I llm_load_print_meta: arch             = gemma
0.00.603.223 I llm_load_print_meta: vocab type       = SPM
0.00.603.224 I llm_load_print_meta: n_vocab          = 256000
0.00.603.226 I llm_load_print_meta: n_merges         = 0
0.00.603.227 I llm_load_print_meta: vocab_only       = 0
0.00.603.227 I llm_load_print_meta: n_ctx_train      = 8192
0.00.603.228 I llm_load_print_meta: n_embd           = 2048
0.00.603.228 I llm_load_print_meta: n_layer          = 18
0.00.603.292 I llm_load_print_meta: n_head           = 8
0.00.603.300 I llm_load_print_meta: n_head_kv        = 1
0.00.603.300 I llm_load_print_meta: n_rot            = 256
0.00.603.301 I llm_load_print_meta: n_swa            = 0
0.00.603.301 I llm_load_print_meta: n_embd_head_k    = 256
0.00.603.302 I llm_load_print_meta: n_embd_head_v    = 256
0.00.603.307 I llm_load_print_meta: n_gqa            = 8
0.00.603.312 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.603.317 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.603.320 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.603.322 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.603.323 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.603.323 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.603.324 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.603.329 I llm_load_print_meta: n_ff             = 16384
0.00.603.329 I llm_load_print_meta: n_expert         = 0
0.00.603.330 I llm_load_print_meta: n_expert_used    = 0
0.00.603.330 I llm_load_print_meta: causal attn      = 1
0.00.603.330 I llm_load_print_meta: pooling type     = 0
0.00.603.331 I llm_load_print_meta: rope type        = 2
0.00.603.331 I llm_load_print_meta: rope scaling     = linear
0.00.603.334 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.603.335 I llm_load_print_meta: freq_scale_train = 1
0.00.603.337 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.603.338 I llm_load_print_meta: rope_finetuned   = unknown
0.00.603.338 I llm_load_print_meta: ssm_d_conv       = 0
0.00.603.338 I llm_load_print_meta: ssm_d_inner      = 0
0.00.603.339 I llm_load_print_meta: ssm_d_state      = 0
0.00.603.339 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.603.340 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.603.340 I llm_load_print_meta: model type       = 2B
0.00.603.341 I llm_load_print_meta: model ftype      = Q8_0
0.00.603.342 I llm_load_print_meta: model params     = 2.51 B
0.00.603.343 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.603.343 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.603.343 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.603.343 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.603.344 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.603.344 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.603.345 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.603.346 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.603.352 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.603.353 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.603.354 I llm_load_print_meta: max token length = 93
0.00.603.521 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.704.161 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.704.172 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.704.173 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.704.174 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.704.174 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.704.175 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.709.740 I llama_new_context_with_model: n_ctx      = 8192
0.00.709.748 I llama_new_context_with_model: n_batch    = 2048
0.00.709.748 I llama_new_context_with_model: n_ubatch   = 512
0.00.709.749 I llama_new_context_with_model: flash_attn = 0
0.00.709.751 I llama_new_context_with_model: freq_base  = 10000.0
0.00.709.752 I llama_new_context_with_model: freq_scale = 1
0.00.738.174 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.738.220 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.738.333 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.739.684 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.739.689 I llama_new_context_with_model: graph nodes  = 601
0.00.739.690 I llama_new_context_with_model: graph splits = 1
0.00.739.706 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.353.984 I main: llama threadpool init, n_threads = 4
0.01.353.996 I 
0.01.354.105 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.354.108 I 
0.01.354.340 I sampler seed: 360836087
0.01.354.353 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.354.360 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.354.364 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.354.364 I 
 increasities as if they were a kind of poetic composition.

The wind sighs through the rustling leaves,
A mournful serenade to the rustling blades.


0.14.780.656 I llama_perf_sampler_print:    sampling time =      49.12 ms /    33 runs   (    1.49 ms per token,   671.89 tokens per second)
0.14.780.659 I llama_perf_context_print:        load time =    1351.11 ms
0.14.780.661 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.780.677 I llama_perf_context_print:        eval time =   13331.75 ms /    32 runs   (  416.62 ms per token,     2.40 tokens per second)
0.14.780.678 I llama_perf_context_print:       total time =   13426.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 3982 (cc2983d3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.841 I main: llama backend init
0.00.002.790 I main: load the model and apply lora adapter, if any
0.00.024.815 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.906 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.919 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.921 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.924 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.926 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.928 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.929 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.930 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.930 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.937 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.941 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.942 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.943 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.943 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.720 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.604 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.164 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.173 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.174 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.175 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.176 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.177 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.178 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.182 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.183 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.184 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.185 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.266.186 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.196 I llama_model_loader: - type  f32:   37 tensors
0.00.266.201 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.083 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.638 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.617 I llm_load_vocab: special tokens cache size = 5
0.00.600.217 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.600.288 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.600.289 I llm_load_print_meta: arch             = gemma
0.00.600.289 I llm_load_print_meta: vocab type       = SPM
0.00.600.290 I llm_load_print_meta: n_vocab          = 256000
0.00.600.292 I llm_load_print_meta: n_merges         = 0
0.00.600.293 I llm_load_print_meta: vocab_only       = 0
0.00.600.293 I llm_load_print_meta: n_ctx_train      = 8192
0.00.600.294 I llm_load_print_meta: n_embd           = 2048
0.00.600.294 I llm_load_print_meta: n_layer          = 18
0.00.600.362 I llm_load_print_meta: n_head           = 8
0.00.600.369 I llm_load_print_meta: n_head_kv        = 1
0.00.600.369 I llm_load_print_meta: n_rot            = 256
0.00.600.370 I llm_load_print_meta: n_swa            = 0
0.00.600.370 I llm_load_print_meta: n_embd_head_k    = 256
0.00.600.371 I llm_load_print_meta: n_embd_head_v    = 256
0.00.600.375 I llm_load_print_meta: n_gqa            = 8
0.00.600.379 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.600.384 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.600.386 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.600.387 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.600.387 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.600.388 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.600.388 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.600.395 I llm_load_print_meta: n_ff             = 16384
0.00.600.395 I llm_load_print_meta: n_expert         = 0
0.00.600.396 I llm_load_print_meta: n_expert_used    = 0
0.00.600.396 I llm_load_print_meta: causal attn      = 1
0.00.600.396 I llm_load_print_meta: pooling type     = 0
0.00.600.396 I llm_load_print_meta: rope type        = 2
0.00.600.397 I llm_load_print_meta: rope scaling     = linear
0.00.600.398 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.600.399 I llm_load_print_meta: freq_scale_train = 1
0.00.600.399 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.600.399 I llm_load_print_meta: rope_finetuned   = unknown
0.00.600.400 I llm_load_print_meta: ssm_d_conv       = 0
0.00.600.400 I llm_load_print_meta: ssm_d_inner      = 0
0.00.600.401 I llm_load_print_meta: ssm_d_state      = 0
0.00.600.401 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.600.401 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.600.402 I llm_load_print_meta: model type       = 2B
0.00.600.403 I llm_load_print_meta: model ftype      = Q8_0
0.00.600.404 I llm_load_print_meta: model params     = 2.51 B
0.00.600.404 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.600.405 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.600.405 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.600.405 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.600.406 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.600.406 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.600.407 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.600.407 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.600.413 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.600.415 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.600.415 I llm_load_print_meta: max token length = 93
0.00.600.587 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.693.425 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.699.100 I llama_new_context_with_model: n_ctx      = 8192
0.00.699.107 I llama_new_context_with_model: n_batch    = 2048
0.00.699.108 I llama_new_context_with_model: n_ubatch   = 512
0.00.699.108 I llama_new_context_with_model: flash_attn = 0
0.00.699.111 I llama_new_context_with_model: freq_base  = 10000.0
0.00.699.112 I llama_new_context_with_model: freq_scale = 1
0.00.728.449 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.728.493 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.728.606 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.729.992 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.729.997 I llama_new_context_with_model: graph nodes  = 601
0.00.729.997 I llama_new_context_with_model: graph splits = 1
0.00.730.012 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.342.337 I main: llama threadpool init, n_threads = 4
0.01.342.349 I 
0.01.342.455 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.342.459 I 
0.01.342.687 I sampler seed: 1253157263
0.01.342.699 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.342.706 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.342.708 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.342.708 I 
 increasities in the statement that "there are no atheists in the world."

This statement is false and misleading. There are atheists in the world who hold a

0.15.006.320 I llama_perf_sampler_print:    sampling time =      49.07 ms /    33 runs   (    1.49 ms per token,   672.45 tokens per second)
0.15.006.323 I llama_perf_context_print:        load time =    1339.46 ms
0.15.006.336 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.006.338 I llama_perf_context_print:        eval time =   13569.26 ms /    32 runs   (  424.04 ms per token,     2.36 tokens per second)
0.15.006.339 I llama_perf_context_print:       total time =   13663.99 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.622 I build: 3982 (cc2983d3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.002.763 I main: load the model and apply lora adapter, if any
0.00.024.631 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.848 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.939 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.951 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.953 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.958 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.960 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.961 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.962 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.963 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.964 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.972 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.973 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.974 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.975 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.976 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.444 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.144 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.795 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.803 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.804 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.805 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.806 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.807 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.808 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.812 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.813 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.814 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.815 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.267.816 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.825 I llama_model_loader: - type  f32:   37 tensors
0.00.267.829 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.768 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.787 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.641 I llm_load_vocab: special tokens cache size = 5
0.00.599.202 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.599.270 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.599.271 I llm_load_print_meta: arch             = gemma
0.00.599.272 I llm_load_print_meta: vocab type       = SPM
0.00.599.273 I llm_load_print_meta: n_vocab          = 256000
0.00.599.275 I llm_load_print_meta: n_merges         = 0
0.00.599.276 I llm_load_print_meta: vocab_only       = 0
0.00.599.276 I llm_load_print_meta: n_ctx_train      = 8192
0.00.599.276 I llm_load_print_meta: n_embd           = 2048
0.00.599.277 I llm_load_print_meta: n_layer          = 18
0.00.599.342 I llm_load_print_meta: n_head           = 8
0.00.599.349 I llm_load_print_meta: n_head_kv        = 1
0.00.599.349 I llm_load_print_meta: n_rot            = 256
0.00.599.349 I llm_load_print_meta: n_swa            = 0
0.00.599.350 I llm_load_print_meta: n_embd_head_k    = 256
0.00.599.350 I llm_load_print_meta: n_embd_head_v    = 256
0.00.599.355 I llm_load_print_meta: n_gqa            = 8
0.00.599.359 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.599.364 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.599.365 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.599.366 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.599.367 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.599.367 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.599.368 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.599.373 I llm_load_print_meta: n_ff             = 16384
0.00.599.375 I llm_load_print_meta: n_expert         = 0
0.00.599.375 I llm_load_print_meta: n_expert_used    = 0
0.00.599.375 I llm_load_print_meta: causal attn      = 1
0.00.599.375 I llm_load_print_meta: pooling type     = 0
0.00.599.376 I llm_load_print_meta: rope type        = 2
0.00.599.387 I llm_load_print_meta: rope scaling     = linear
0.00.599.389 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.599.390 I llm_load_print_meta: freq_scale_train = 1
0.00.599.390 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.599.390 I llm_load_print_meta: rope_finetuned   = unknown
0.00.599.392 I llm_load_print_meta: ssm_d_conv       = 0
0.00.599.392 I llm_load_print_meta: ssm_d_inner      = 0
0.00.599.392 I llm_load_print_meta: ssm_d_state      = 0
0.00.599.392 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.599.393 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.599.394 I llm_load_print_meta: model type       = 2B
0.00.599.400 I llm_load_print_meta: model ftype      = Q8_0
0.00.599.400 I llm_load_print_meta: model params     = 2.51 B
0.00.599.401 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.599.413 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.599.414 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.599.415 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.599.418 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.599.419 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.599.426 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.599.427 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.599.434 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.599.435 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.599.443 I llm_load_print_meta: max token length = 93
0.00.599.613 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.677.012 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.677.020 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.677.021 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.677.022 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.677.022 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.677.023 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.682.770 I llama_new_context_with_model: n_ctx      = 8192
0.00.682.779 I llama_new_context_with_model: n_batch    = 2048
0.00.682.780 I llama_new_context_with_model: n_ubatch   = 512
0.00.682.781 I llama_new_context_with_model: flash_attn = 0
0.00.682.785 I llama_new_context_with_model: freq_base  = 10000.0
0.00.682.786 I llama_new_context_with_model: freq_scale = 1
0.00.711.980 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.712.022 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.712.135 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.713.536 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.713.541 I llama_new_context_with_model: graph nodes  = 601
0.00.713.542 I llama_new_context_with_model: graph splits = 1
0.00.713.559 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.325.627 I main: llama threadpool init, n_threads = 4
0.01.325.639 I 
0.01.325.746 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.325.750 I 
0.01.325.987 I sampler seed: 1099155064
0.01.325.999 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.326.006 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.326.007 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.326.007 I 
 increasels, and other small aquatic organisms. 

**Methods:**

* **Physical removal:** Manually remove organisms from the water body.
* **Chemical

0.14.760.035 I llama_perf_sampler_print:    sampling time =      49.03 ms /    33 runs   (    1.49 ms per token,   673.00 tokens per second)
0.14.760.038 I llama_perf_context_print:        load time =    1322.78 ms
0.14.760.040 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.760.055 I llama_perf_context_print:        eval time =   13340.28 ms /    32 runs   (  416.88 ms per token,     2.40 tokens per second)
0.14.760.056 I llama_perf_context_print:       total time =   13434.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.659 I build: 3982 (cc2983d3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.884 I main: llama backend init
0.00.002.837 I main: load the model and apply lora adapter, if any
0.00.024.631 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.865 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.972 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.985 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.986 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.991 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.995 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.997 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.998 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.000 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.002 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.020 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.025 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.027 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.028 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.031 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.570 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.445 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.087 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.096 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.097 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.098 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.099 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.100 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.101 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.105 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.106 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.108 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.109 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.267.110 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.118 I llama_model_loader: - type  f32:   37 tensors
0.00.267.122 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.378 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.466 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.338 I llm_load_vocab: special tokens cache size = 5
0.00.597.333 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.597.401 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.597.402 I llm_load_print_meta: arch             = gemma
0.00.597.403 I llm_load_print_meta: vocab type       = SPM
0.00.597.403 I llm_load_print_meta: n_vocab          = 256000
0.00.597.406 I llm_load_print_meta: n_merges         = 0
0.00.597.406 I llm_load_print_meta: vocab_only       = 0
0.00.597.406 I llm_load_print_meta: n_ctx_train      = 8192
0.00.597.407 I llm_load_print_meta: n_embd           = 2048
0.00.597.407 I llm_load_print_meta: n_layer          = 18
0.00.597.470 I llm_load_print_meta: n_head           = 8
0.00.597.477 I llm_load_print_meta: n_head_kv        = 1
0.00.597.478 I llm_load_print_meta: n_rot            = 256
0.00.597.479 I llm_load_print_meta: n_swa            = 0
0.00.597.480 I llm_load_print_meta: n_embd_head_k    = 256
0.00.597.480 I llm_load_print_meta: n_embd_head_v    = 256
0.00.597.485 I llm_load_print_meta: n_gqa            = 8
0.00.597.497 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.597.508 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.597.510 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.597.511 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.597.511 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.597.512 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.597.512 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.597.517 I llm_load_print_meta: n_ff             = 16384
0.00.597.518 I llm_load_print_meta: n_expert         = 0
0.00.597.518 I llm_load_print_meta: n_expert_used    = 0
0.00.597.519 I llm_load_print_meta: causal attn      = 1
0.00.597.519 I llm_load_print_meta: pooling type     = 0
0.00.597.520 I llm_load_print_meta: rope type        = 2
0.00.597.520 I llm_load_print_meta: rope scaling     = linear
0.00.597.536 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.597.540 I llm_load_print_meta: freq_scale_train = 1
0.00.597.540 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.597.540 I llm_load_print_meta: rope_finetuned   = unknown
0.00.597.541 I llm_load_print_meta: ssm_d_conv       = 0
0.00.597.541 I llm_load_print_meta: ssm_d_inner      = 0
0.00.597.542 I llm_load_print_meta: ssm_d_state      = 0
0.00.597.542 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.597.542 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.597.543 I llm_load_print_meta: model type       = 2B
0.00.597.544 I llm_load_print_meta: model ftype      = Q8_0
0.00.597.545 I llm_load_print_meta: model params     = 2.51 B
0.00.597.545 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.597.553 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.597.561 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.597.562 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.597.563 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.597.564 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.597.564 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.597.565 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.597.578 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.597.580 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.597.580 I llm_load_print_meta: max token length = 93
0.00.597.751 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.668.720 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.668.726 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.674.329 I llama_new_context_with_model: n_ctx      = 8192
0.00.674.336 I llama_new_context_with_model: n_batch    = 2048
0.00.674.336 I llama_new_context_with_model: n_ubatch   = 512
0.00.674.337 I llama_new_context_with_model: flash_attn = 0
0.00.674.340 I llama_new_context_with_model: freq_base  = 10000.0
0.00.674.340 I llama_new_context_with_model: freq_scale = 1
0.00.702.808 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.702.848 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.702.960 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.704.349 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.704.354 I llama_new_context_with_model: graph nodes  = 601
0.00.704.354 I llama_new_context_with_model: graph splits = 1
0.00.704.370 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.318.396 I main: llama threadpool init, n_threads = 4
0.01.318.408 I 
0.01.318.531 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.318.535 I 
0.01.318.776 I sampler seed: 1687365359
0.01.318.789 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.318.800 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.318.801 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.318.802 I 
 increasities in the ancient Egyptian religion:

**Answer:**

**The ancient Egyptian religion contained various complex and fascinating beliefs and practices related to the afterlife. One

0.14.777.425 I llama_perf_sampler_print:    sampling time =      49.13 ms /    33 runs   (    1.49 ms per token,   671.67 tokens per second)
0.14.777.430 I llama_perf_context_print:        load time =    1315.45 ms
0.14.777.431 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.777.433 I llama_perf_context_print:        eval time =   13364.22 ms /    32 runs   (  417.63 ms per token,     2.39 tokens per second)
0.14.777.437 I llama_perf_context_print:       total time =   13459.04 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.841s
user	3m48.545s
sys	0m9.406s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3982 (cc2983d3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198564.64 ms
main:    total time = 198564.64 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.681 I build: 3982 (cc2983d3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.879 I main: llama backend init
0.00.002.830 I main: load the model and apply lora adapter, if any
0.00.024.686 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.903 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.997 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.009 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.011 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.017 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.021 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.023 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.025 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.027 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.029 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.037 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.042 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.055 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.060 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.061 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.377 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.254.270 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.867 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.875 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.876 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.877 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.878 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.880 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.881 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.903 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.907 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.909 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.911 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.272.913 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.922 I llama_model_loader: - type  f32:   37 tensors
0.00.272.928 I llama_model_loader: - type q4_K:  108 tensors
0.00.272.929 I llama_model_loader: - type q6_K:   19 tensors
0.00.457.827 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.518.601 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.519.487 I llm_load_vocab: special tokens cache size = 5
0.00.630.202 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.630.277 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.630.283 I llm_load_print_meta: arch             = gemma
0.00.630.284 I llm_load_print_meta: vocab type       = SPM
0.00.630.285 I llm_load_print_meta: n_vocab          = 256000
0.00.630.287 I llm_load_print_meta: n_merges         = 0
0.00.630.288 I llm_load_print_meta: vocab_only       = 0
0.00.630.288 I llm_load_print_meta: n_ctx_train      = 8192
0.00.630.289 I llm_load_print_meta: n_embd           = 2048
0.00.630.289 I llm_load_print_meta: n_layer          = 18
0.00.630.359 I llm_load_print_meta: n_head           = 8
0.00.630.370 I llm_load_print_meta: n_head_kv        = 1
0.00.630.371 I llm_load_print_meta: n_rot            = 256
0.00.630.372 I llm_load_print_meta: n_swa            = 0
0.00.630.372 I llm_load_print_meta: n_embd_head_k    = 256
0.00.630.372 I llm_load_print_meta: n_embd_head_v    = 256
0.00.630.379 I llm_load_print_meta: n_gqa            = 8
0.00.630.386 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.630.395 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.630.405 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.630.410 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.630.411 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.630.412 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.630.413 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.630.420 I llm_load_print_meta: n_ff             = 16384
0.00.630.422 I llm_load_print_meta: n_expert         = 0
0.00.630.422 I llm_load_print_meta: n_expert_used    = 0
0.00.630.423 I llm_load_print_meta: causal attn      = 1
0.00.630.423 I llm_load_print_meta: pooling type     = 0
0.00.630.424 I llm_load_print_meta: rope type        = 2
0.00.630.425 I llm_load_print_meta: rope scaling     = linear
0.00.630.427 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.630.428 I llm_load_print_meta: freq_scale_train = 1
0.00.630.429 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.630.430 I llm_load_print_meta: rope_finetuned   = unknown
0.00.630.430 I llm_load_print_meta: ssm_d_conv       = 0
0.00.630.431 I llm_load_print_meta: ssm_d_inner      = 0
0.00.630.432 I llm_load_print_meta: ssm_d_state      = 0
0.00.630.433 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.630.433 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.630.434 I llm_load_print_meta: model type       = 2B
0.00.630.436 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.630.437 I llm_load_print_meta: model params     = 2.51 B
0.00.630.439 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.630.439 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.630.440 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.630.441 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.630.442 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.630.443 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.630.445 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.630.446 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.630.452 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.630.454 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.630.455 I llm_load_print_meta: max token length = 93
0.00.630.635 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.690.944 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.690.956 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.690.957 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.690.958 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.690.958 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.690.959 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.696.816 I llama_new_context_with_model: n_ctx      = 8192
0.00.696.823 I llama_new_context_with_model: n_batch    = 2048
0.00.696.824 I llama_new_context_with_model: n_ubatch   = 512
0.00.696.824 I llama_new_context_with_model: flash_attn = 0
0.00.696.827 I llama_new_context_with_model: freq_base  = 10000.0
0.00.696.828 I llama_new_context_with_model: freq_scale = 1
0.00.726.999 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.727.047 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.727.168 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.728.617 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.728.622 I llama_new_context_with_model: graph nodes  = 601
0.00.728.622 I llama_new_context_with_model: graph splits = 1
0.00.728.640 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.310.947 I main: llama threadpool init, n_threads = 4
0.01.310.959 I 
0.01.311.078 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.311.081 I 
0.01.311.320 I sampler seed: 1923874079
0.01.311.334 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.311.343 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.311.347 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.311.348 I 
 seconally with the correct answer.

The correct answer is:

**The rise of mass production led to the growth of the labor market, which in turn

0.12.373.846 I llama_perf_sampler_print:    sampling time =      49.10 ms /    33 runs   (    1.49 ms per token,   672.08 tokens per second)
0.12.373.849 I llama_perf_context_print:        load time =    1308.02 ms
0.12.373.851 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.373.852 I llama_perf_context_print:        eval time =   10967.94 ms /    32 runs   (  342.75 ms per token,     2.92 tokens per second)
0.12.373.854 I llama_perf_context_print:       total time =   11062.91 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3982 (cc2983d3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198634.01 ms
main:    total time = 198634.01 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.622 I build: 3982 (cc2983d3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.814 I main: llama backend init
0.00.002.782 I main: load the model and apply lora adapter, if any
0.00.024.831 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.928 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.942 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.944 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.949 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.950 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.952 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.953 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.954 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.955 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.961 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.964 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.966 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.967 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.968 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.784 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.435 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.087 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.096 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.097 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.098 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.099 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.100 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.102 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.106 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.107 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.115 I llama_model_loader: - type  f32:   37 tensors
0.00.266.119 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.120 I llama_model_loader: - type q6_K:   19 tensors
0.00.445.238 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.295 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.223 I llm_load_vocab: special tokens cache size = 5
0.00.609.301 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.369 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.370 I llm_load_print_meta: arch             = gemma
0.00.609.371 I llm_load_print_meta: vocab type       = SPM
0.00.609.371 I llm_load_print_meta: n_vocab          = 256000
0.00.609.373 I llm_load_print_meta: n_merges         = 0
0.00.609.374 I llm_load_print_meta: vocab_only       = 0
0.00.609.374 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.375 I llm_load_print_meta: n_embd           = 2048
0.00.609.375 I llm_load_print_meta: n_layer          = 18
0.00.609.440 I llm_load_print_meta: n_head           = 8
0.00.609.447 I llm_load_print_meta: n_head_kv        = 1
0.00.609.448 I llm_load_print_meta: n_rot            = 256
0.00.609.449 I llm_load_print_meta: n_swa            = 0
0.00.609.450 I llm_load_print_meta: n_embd_head_k    = 256
0.00.609.450 I llm_load_print_meta: n_embd_head_v    = 256
0.00.609.455 I llm_load_print_meta: n_gqa            = 8
0.00.609.459 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.609.464 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.609.465 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.609.467 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.609.467 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.609.468 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.609.472 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.609.477 I llm_load_print_meta: n_ff             = 16384
0.00.609.477 I llm_load_print_meta: n_expert         = 0
0.00.609.478 I llm_load_print_meta: n_expert_used    = 0
0.00.609.479 I llm_load_print_meta: causal attn      = 1
0.00.609.479 I llm_load_print_meta: pooling type     = 0
0.00.609.479 I llm_load_print_meta: rope type        = 2
0.00.609.480 I llm_load_print_meta: rope scaling     = linear
0.00.609.481 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.609.482 I llm_load_print_meta: freq_scale_train = 1
0.00.609.483 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.609.483 I llm_load_print_meta: rope_finetuned   = unknown
0.00.609.483 I llm_load_print_meta: ssm_d_conv       = 0
0.00.609.487 I llm_load_print_meta: ssm_d_inner      = 0
0.00.609.487 I llm_load_print_meta: ssm_d_state      = 0
0.00.609.487 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.609.488 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.609.488 I llm_load_print_meta: model type       = 2B
0.00.609.489 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.609.490 I llm_load_print_meta: model params     = 2.51 B
0.00.609.491 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.609.491 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.609.491 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.609.492 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.609.492 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.609.493 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.609.493 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.609.493 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.609.500 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.609.501 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.609.502 I llm_load_print_meta: max token length = 93
0.00.609.670 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.668.361 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.673.997 I llama_new_context_with_model: n_ctx      = 8192
0.00.674.005 I llama_new_context_with_model: n_batch    = 2048
0.00.674.005 I llama_new_context_with_model: n_ubatch   = 512
0.00.674.006 I llama_new_context_with_model: flash_attn = 0
0.00.674.008 I llama_new_context_with_model: freq_base  = 10000.0
0.00.674.009 I llama_new_context_with_model: freq_scale = 1
0.00.704.970 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.705.015 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.705.135 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.706.580 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.706.585 I llama_new_context_with_model: graph nodes  = 601
0.00.706.585 I llama_new_context_with_model: graph splits = 1
0.00.706.601 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.284.671 I main: llama threadpool init, n_threads = 4
0.01.284.684 I 
0.01.284.792 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.284.796 I 
0.01.285.024 I sampler seed: 3272266676
0.01.285.036 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.285.043 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.285.044 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.285.044 I 
 encompasses the essential elements of the research process.

**Step 1: Identify the Research Question**
- Formulate a clear and concise question that aligns

0.12.324.545 I llama_perf_sampler_print:    sampling time =      48.97 ms /    33 runs   (    1.48 ms per token,   673.95 tokens per second)
0.12.324.548 I llama_perf_context_print:        load time =    1281.80 ms
0.12.324.572 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.324.575 I llama_perf_context_print:        eval time =   10945.24 ms /    32 runs   (  342.04 ms per token,     2.92 tokens per second)
0.12.324.576 I llama_perf_context_print:       total time =   11039.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.784s
user	50m10.645s
sys	0m6.253s
