+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.529 I build: 3982 (cc2983d3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.746 I main: llama backend init
0.00.001.876 I main: load the model and apply lora adapter, if any
0.00.022.303 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.349 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.361 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.367 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.370 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.374 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.375 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.376 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.377 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.378 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.378 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.383 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.383 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.384 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.385 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.385 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.077 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.060 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.945 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.952 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.952 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.953 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.954 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.954 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.955 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.957 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.958 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.959 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.959 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.960 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.964 I llama_model_loader: - type  f32:   37 tensors
0.00.132.966 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.005 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.589 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.144 I llm_load_vocab: special tokens cache size = 5
0.00.278.017 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.031 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.032 I llm_load_print_meta: arch             = gemma
0.00.278.032 I llm_load_print_meta: vocab type       = SPM
0.00.278.033 I llm_load_print_meta: n_vocab          = 256000
0.00.278.033 I llm_load_print_meta: n_merges         = 0
0.00.278.033 I llm_load_print_meta: vocab_only       = 0
0.00.278.034 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.034 I llm_load_print_meta: n_embd           = 2048
0.00.278.035 I llm_load_print_meta: n_layer          = 18
0.00.278.046 I llm_load_print_meta: n_head           = 8
0.00.278.046 I llm_load_print_meta: n_head_kv        = 1
0.00.278.047 I llm_load_print_meta: n_rot            = 256
0.00.278.047 I llm_load_print_meta: n_swa            = 0
0.00.278.047 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.047 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.048 I llm_load_print_meta: n_gqa            = 8
0.00.278.049 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.050 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.051 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.052 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.053 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.053 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.054 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.054 I llm_load_print_meta: n_ff             = 16384
0.00.278.055 I llm_load_print_meta: n_expert         = 0
0.00.278.055 I llm_load_print_meta: n_expert_used    = 0
0.00.278.055 I llm_load_print_meta: causal attn      = 1
0.00.278.055 I llm_load_print_meta: pooling type     = 0
0.00.278.056 I llm_load_print_meta: rope type        = 2
0.00.278.056 I llm_load_print_meta: rope scaling     = linear
0.00.278.057 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.058 I llm_load_print_meta: freq_scale_train = 1
0.00.278.058 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.059 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.059 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.059 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.060 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.060 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.060 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.061 I llm_load_print_meta: model type       = 2B
0.00.278.061 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.062 I llm_load_print_meta: model params     = 2.51 B
0.00.278.063 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.063 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.063 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.064 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.064 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.064 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.065 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.065 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.065 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.066 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.066 I llm_load_print_meta: max token length = 93
0.00.278.085 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.376.598 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.376.605 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.376.606 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.376.607 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.376.607 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.376.608 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.381.601 I llama_new_context_with_model: n_ctx      = 8192
0.00.381.607 I llama_new_context_with_model: n_batch    = 2048
0.00.381.607 I llama_new_context_with_model: n_ubatch   = 512
0.00.381.608 I llama_new_context_with_model: flash_attn = 0
0.00.381.610 I llama_new_context_with_model: freq_base  = 10000.0
0.00.381.612 I llama_new_context_with_model: freq_scale = 1
0.00.409.714 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.409.730 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.409.837 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.410.656 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.410.664 I llama_new_context_with_model: graph nodes  = 601
0.00.410.664 I llama_new_context_with_model: graph splits = 1
0.00.410.666 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.503.504 I main: llama threadpool init, n_threads = 4
0.00.503.517 I 
0.00.503.597 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.503.601 I 
0.00.503.648 I sampler seed: 4198026543
0.00.503.659 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.503.663 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.503.664 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.503.664 I 
 increasively. 

The answer is:

$$\sqrt{2+\sqrt{2+\sqrt{2+}}$$

The pattern involves adding the square

0.02.751.403 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  7006.37 tokens per second)
0.02.751.406 I llama_perf_context_print:        load time =     501.60 ms
0.02.751.408 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.751.411 I llama_perf_context_print:        eval time =    2228.23 ms /    32 runs   (   69.63 ms per token,    14.36 tokens per second)
0.02.751.412 I llama_perf_context_print:       total time =    2247.91 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.598 I build: 3982 (cc2983d3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.842 I main: llama backend init
0.00.001.995 I main: load the model and apply lora adapter, if any
0.00.022.257 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.268 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.275 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.276 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.282 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.283 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.283 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.284 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.285 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.285 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.291 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.292 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.293 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.295 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.296 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.039 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.660 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.561 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.568 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.569 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.569 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.570 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.571 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.571 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.574 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.576 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.576 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.577 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.578 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.582 I llama_model_loader: - type  f32:   37 tensors
0.00.132.585 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.438 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.375 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.993 I llm_load_vocab: special tokens cache size = 5
0.00.271.111 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.129 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.129 I llm_load_print_meta: arch             = gemma
0.00.271.130 I llm_load_print_meta: vocab type       = SPM
0.00.271.131 I llm_load_print_meta: n_vocab          = 256000
0.00.271.131 I llm_load_print_meta: n_merges         = 0
0.00.271.131 I llm_load_print_meta: vocab_only       = 0
0.00.271.132 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.132 I llm_load_print_meta: n_embd           = 2048
0.00.271.132 I llm_load_print_meta: n_layer          = 18
0.00.271.144 I llm_load_print_meta: n_head           = 8
0.00.271.145 I llm_load_print_meta: n_head_kv        = 1
0.00.271.145 I llm_load_print_meta: n_rot            = 256
0.00.271.145 I llm_load_print_meta: n_swa            = 0
0.00.271.145 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.146 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.146 I llm_load_print_meta: n_gqa            = 8
0.00.271.147 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.148 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.149 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.150 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.151 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.151 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.152 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.152 I llm_load_print_meta: n_ff             = 16384
0.00.271.153 I llm_load_print_meta: n_expert         = 0
0.00.271.153 I llm_load_print_meta: n_expert_used    = 0
0.00.271.153 I llm_load_print_meta: causal attn      = 1
0.00.271.153 I llm_load_print_meta: pooling type     = 0
0.00.271.154 I llm_load_print_meta: rope type        = 2
0.00.271.154 I llm_load_print_meta: rope scaling     = linear
0.00.271.155 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.156 I llm_load_print_meta: freq_scale_train = 1
0.00.271.156 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.156 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.157 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.157 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.157 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.158 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.158 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.159 I llm_load_print_meta: model type       = 2B
0.00.271.160 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.161 I llm_load_print_meta: model params     = 2.51 B
0.00.271.161 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.162 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.162 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.162 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.163 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.163 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.163 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.164 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.164 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.165 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.165 I llm_load_print_meta: max token length = 93
0.00.271.187 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.366.852 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.371.970 I llama_new_context_with_model: n_ctx      = 8192
0.00.371.977 I llama_new_context_with_model: n_batch    = 2048
0.00.371.977 I llama_new_context_with_model: n_ubatch   = 512
0.00.371.978 I llama_new_context_with_model: flash_attn = 0
0.00.371.980 I llama_new_context_with_model: freq_base  = 10000.0
0.00.371.981 I llama_new_context_with_model: freq_scale = 1
0.00.400.945 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.400.964 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.401.055 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.401.926 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.401.934 I llama_new_context_with_model: graph nodes  = 601
0.00.401.935 I llama_new_context_with_model: graph splits = 1
0.00.401.937 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.488.984 I main: llama threadpool init, n_threads = 4
0.00.488.997 I 
0.00.489.083 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.489.087 I 
0.00.489.138 I sampler seed: 1049689209
0.00.489.150 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.489.153 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.489.154 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.489.154 I 
 increasities, a new vulnerability affecting the Microsoft Edge browser.

**Symptoms:**

* The browser may become unresponsive or slow.
* Web pages may not

0.02.656.215 I llama_perf_sampler_print:    sampling time =       4.89 ms /    33 runs   (    0.15 ms per token,  6752.61 tokens per second)
0.02.656.217 I llama_perf_context_print:        load time =     486.97 ms
0.02.656.219 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.656.220 I llama_perf_context_print:        eval time =    2147.61 ms /    32 runs   (   67.11 ms per token,    14.90 tokens per second)
0.02.656.221 I llama_perf_context_print:       total time =    2167.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.533 I build: 3982 (cc2983d3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.727 I main: llama backend init
0.00.001.796 I main: load the model and apply lora adapter, if any
0.00.021.740 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.806 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.824 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.834 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.835 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.840 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.845 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.846 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.846 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.847 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.848 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.860 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.865 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.865 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.866 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.867 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.221 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.242 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.213 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.220 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.221 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.222 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.223 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.224 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.225 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.228 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.229 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.230 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.231 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.233 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.238 I llama_model_loader: - type  f32:   37 tensors
0.00.132.241 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.005 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.372 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.905 I llm_load_vocab: special tokens cache size = 5
0.00.273.759 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.776 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.776 I llm_load_print_meta: arch             = gemma
0.00.273.777 I llm_load_print_meta: vocab type       = SPM
0.00.273.778 I llm_load_print_meta: n_vocab          = 256000
0.00.273.778 I llm_load_print_meta: n_merges         = 0
0.00.273.778 I llm_load_print_meta: vocab_only       = 0
0.00.273.779 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.779 I llm_load_print_meta: n_embd           = 2048
0.00.273.779 I llm_load_print_meta: n_layer          = 18
0.00.273.791 I llm_load_print_meta: n_head           = 8
0.00.273.792 I llm_load_print_meta: n_head_kv        = 1
0.00.273.792 I llm_load_print_meta: n_rot            = 256
0.00.273.793 I llm_load_print_meta: n_swa            = 0
0.00.273.793 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.793 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.794 I llm_load_print_meta: n_gqa            = 8
0.00.273.795 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.796 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.798 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.799 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.799 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.800 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.800 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.801 I llm_load_print_meta: n_ff             = 16384
0.00.273.802 I llm_load_print_meta: n_expert         = 0
0.00.273.802 I llm_load_print_meta: n_expert_used    = 0
0.00.273.802 I llm_load_print_meta: causal attn      = 1
0.00.273.802 I llm_load_print_meta: pooling type     = 0
0.00.273.803 I llm_load_print_meta: rope type        = 2
0.00.273.803 I llm_load_print_meta: rope scaling     = linear
0.00.273.804 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.805 I llm_load_print_meta: freq_scale_train = 1
0.00.273.805 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.806 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.806 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.806 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.807 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.807 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.808 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.808 I llm_load_print_meta: model type       = 2B
0.00.273.809 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.809 I llm_load_print_meta: model params     = 2.51 B
0.00.273.810 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.811 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.811 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.811 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.811 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.812 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.812 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.813 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.813 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.814 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.814 I llm_load_print_meta: max token length = 93
0.00.273.836 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.350.387 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.350.394 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.350.394 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.350.395 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.350.396 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.350.396 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.355.404 I llama_new_context_with_model: n_ctx      = 8192
0.00.355.410 I llama_new_context_with_model: n_batch    = 2048
0.00.355.411 I llama_new_context_with_model: n_ubatch   = 512
0.00.355.411 I llama_new_context_with_model: flash_attn = 0
0.00.355.413 I llama_new_context_with_model: freq_base  = 10000.0
0.00.355.414 I llama_new_context_with_model: freq_scale = 1
0.00.384.406 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.384.422 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.384.524 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.405 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.385.413 I llama_new_context_with_model: graph nodes  = 601
0.00.385.413 I llama_new_context_with_model: graph splits = 1
0.00.385.415 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.478.164 I main: llama threadpool init, n_threads = 4
0.00.478.177 I 
0.00.478.266 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.478.269 I 
0.00.478.319 I sampler seed: 1856936001
0.00.478.331 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.478.340 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.478.344 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.478.345 I 
 maneuvously.

I am unable to generate a response because the prompt contains potentially harmful or inappropriate content. [end of text]


0.02.094.314 I llama_perf_sampler_print:    sampling time =       3.43 ms /    24 runs   (    0.14 ms per token,  7005.25 tokens per second)
0.02.094.317 I llama_perf_context_print:        load time =     476.35 ms
0.02.094.319 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.094.320 I llama_perf_context_print:        eval time =    1601.93 ms /    23 runs   (   69.65 ms per token,    14.36 tokens per second)
0.02.094.322 I llama_perf_context_print:       total time =    1616.16 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.547 I build: 3982 (cc2983d3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.001.853 I main: load the model and apply lora adapter, if any
0.00.022.550 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.604 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.611 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.617 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.618 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.622 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.623 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.624 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.625 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.625 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.626 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.630 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.630 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.631 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.632 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.632 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.125 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.392 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.208 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.214 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.215 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.216 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.216 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.217 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.218 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.220 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.221 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.222 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.223 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.223 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.226 I llama_model_loader: - type  f32:   37 tensors
0.00.132.229 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.924 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.330 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.873 I llm_load_vocab: special tokens cache size = 5
0.00.267.208 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.222 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.223 I llm_load_print_meta: arch             = gemma
0.00.267.224 I llm_load_print_meta: vocab type       = SPM
0.00.267.224 I llm_load_print_meta: n_vocab          = 256000
0.00.267.225 I llm_load_print_meta: n_merges         = 0
0.00.267.225 I llm_load_print_meta: vocab_only       = 0
0.00.267.225 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.225 I llm_load_print_meta: n_embd           = 2048
0.00.267.226 I llm_load_print_meta: n_layer          = 18
0.00.267.237 I llm_load_print_meta: n_head           = 8
0.00.267.238 I llm_load_print_meta: n_head_kv        = 1
0.00.267.239 I llm_load_print_meta: n_rot            = 256
0.00.267.239 I llm_load_print_meta: n_swa            = 0
0.00.267.239 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.239 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.241 I llm_load_print_meta: n_gqa            = 8
0.00.267.242 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.243 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.244 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.245 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.245 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.246 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.246 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.247 I llm_load_print_meta: n_ff             = 16384
0.00.267.247 I llm_load_print_meta: n_expert         = 0
0.00.267.247 I llm_load_print_meta: n_expert_used    = 0
0.00.267.248 I llm_load_print_meta: causal attn      = 1
0.00.267.248 I llm_load_print_meta: pooling type     = 0
0.00.267.249 I llm_load_print_meta: rope type        = 2
0.00.267.250 I llm_load_print_meta: rope scaling     = linear
0.00.267.252 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.253 I llm_load_print_meta: freq_scale_train = 1
0.00.267.253 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.254 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.254 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.254 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.255 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.255 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.256 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.256 I llm_load_print_meta: model type       = 2B
0.00.267.257 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.258 I llm_load_print_meta: model params     = 2.51 B
0.00.267.259 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.259 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.260 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.260 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.260 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.261 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.261 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.262 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.262 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.263 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.264 I llm_load_print_meta: max token length = 93
0.00.267.284 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.337.600 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.337.607 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.342.577 I llama_new_context_with_model: n_ctx      = 8192
0.00.342.583 I llama_new_context_with_model: n_batch    = 2048
0.00.342.584 I llama_new_context_with_model: n_ubatch   = 512
0.00.342.584 I llama_new_context_with_model: flash_attn = 0
0.00.342.586 I llama_new_context_with_model: freq_base  = 10000.0
0.00.342.587 I llama_new_context_with_model: freq_scale = 1
0.00.371.738 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.371.752 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.371.841 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.372.722 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.372.729 I llama_new_context_with_model: graph nodes  = 601
0.00.372.730 I llama_new_context_with_model: graph splits = 1
0.00.372.731 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.480.396 I main: llama threadpool init, n_threads = 4
0.00.480.415 I 
0.00.480.510 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.480.515 I 
0.00.480.562 I sampler seed: 871145531
0.00.480.578 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.480.581 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.480.582 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.480.583 I 
 increasities in the process of creating a composite object.

**Answer:**
**Composing objects can result in the creation of composite objects, which are objects

0.02.904.590 I llama_perf_sampler_print:    sampling time =       4.91 ms /    33 runs   (    0.15 ms per token,  6715.51 tokens per second)
0.02.904.593 I llama_perf_context_print:        load time =     478.52 ms
0.02.904.594 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.904.597 I llama_perf_context_print:        eval time =    2404.23 ms /    32 runs   (   75.13 ms per token,    13.31 tokens per second)
0.02.904.598 I llama_perf_context_print:       total time =    2424.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.137s
user	0m36.815s
sys	0m9.318s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3982 (cc2983d3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31975.26 ms
main:    total time = 31975.26 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.535 I build: 3982 (cc2983d3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.741 I main: llama backend init
0.00.001.872 I main: load the model and apply lora adapter, if any
0.00.021.856 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.904 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.916 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.923 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.923 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.927 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.928 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.928 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.929 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.930 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.930 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.933 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.934 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.934 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.936 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.937 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.350 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.597 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.381 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.387 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.388 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.388 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.389 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.390 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.391 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.393 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.393 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.394 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.397 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.398 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.401 I llama_model_loader: - type  f32:   37 tensors
0.00.131.403 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.404 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.142 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.512 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.002 I llm_load_vocab: special tokens cache size = 5
0.00.260.664 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.681 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.681 I llm_load_print_meta: arch             = gemma
0.00.260.682 I llm_load_print_meta: vocab type       = SPM
0.00.260.682 I llm_load_print_meta: n_vocab          = 256000
0.00.260.683 I llm_load_print_meta: n_merges         = 0
0.00.260.683 I llm_load_print_meta: vocab_only       = 0
0.00.260.683 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.684 I llm_load_print_meta: n_embd           = 2048
0.00.260.684 I llm_load_print_meta: n_layer          = 18
0.00.260.696 I llm_load_print_meta: n_head           = 8
0.00.260.697 I llm_load_print_meta: n_head_kv        = 1
0.00.260.698 I llm_load_print_meta: n_rot            = 256
0.00.260.698 I llm_load_print_meta: n_swa            = 0
0.00.260.698 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.699 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.699 I llm_load_print_meta: n_gqa            = 8
0.00.260.700 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.701 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.702 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.704 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.704 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.705 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.705 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.706 I llm_load_print_meta: n_ff             = 16384
0.00.260.706 I llm_load_print_meta: n_expert         = 0
0.00.260.706 I llm_load_print_meta: n_expert_used    = 0
0.00.260.707 I llm_load_print_meta: causal attn      = 1
0.00.260.707 I llm_load_print_meta: pooling type     = 0
0.00.260.707 I llm_load_print_meta: rope type        = 2
0.00.260.707 I llm_load_print_meta: rope scaling     = linear
0.00.260.709 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.710 I llm_load_print_meta: freq_scale_train = 1
0.00.260.710 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.710 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.711 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.711 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.711 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.712 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.712 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.712 I llm_load_print_meta: model type       = 2B
0.00.260.713 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.260.713 I llm_load_print_meta: model params     = 2.51 B
0.00.260.714 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.260.714 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.715 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.715 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.715 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.716 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.716 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.717 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.717 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.717 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.718 I llm_load_print_meta: max token length = 93
0.00.260.734 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.319.421 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.319.428 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.319.429 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.319.429 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.319.430 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.319.430 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.324.451 I llama_new_context_with_model: n_ctx      = 8192
0.00.324.457 I llama_new_context_with_model: n_batch    = 2048
0.00.324.458 I llama_new_context_with_model: n_ubatch   = 512
0.00.324.458 I llama_new_context_with_model: flash_attn = 0
0.00.324.460 I llama_new_context_with_model: freq_base  = 10000.0
0.00.324.461 I llama_new_context_with_model: freq_scale = 1
0.00.352.723 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.352.736 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.352.828 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.710 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.353.717 I llama_new_context_with_model: graph nodes  = 601
0.00.353.717 I llama_new_context_with_model: graph splits = 1
0.00.353.719 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.434.531 I main: llama threadpool init, n_threads = 4
0.00.434.543 I 
0.00.434.621 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.434.624 I 
0.00.434.664 I sampler seed: 998060856
0.00.434.675 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.434.677 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.434.678 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.434.678 I 
 seconally.

**Assistant**

I am unable to generate responses that are sexually suggestive in nature. My purpose is to assist with tasks and provide information within

0.02.046.090 I llama_perf_sampler_print:    sampling time =       5.09 ms /    33 runs   (    0.15 ms per token,  6480.75 tokens per second)
0.02.046.093 I llama_perf_context_print:        load time =     432.64 ms
0.02.046.094 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.046.095 I llama_perf_context_print:        eval time =    1592.07 ms /    32 runs   (   49.75 ms per token,    20.10 tokens per second)
0.02.046.096 I llama_perf_context_print:       total time =    1611.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3982 (cc2983d3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32119.12 ms
main:    total time = 32119.12 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.553 I build: 3982 (cc2983d3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.749 I main: llama backend init
0.00.001.864 I main: load the model and apply lora adapter, if any
0.00.022.045 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.060 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.066 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.067 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.070 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.073 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.074 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.075 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.075 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.076 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.079 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.079 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.080 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.081 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.081 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.616 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.984 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.883 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.889 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.889 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.890 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.890 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.891 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.892 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.895 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.895 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.899 I llama_model_loader: - type  f32:   37 tensors
0.00.131.901 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.902 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.142 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.178 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.712 I llm_load_vocab: special tokens cache size = 5
0.00.265.775 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.790 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.791 I llm_load_print_meta: arch             = gemma
0.00.265.791 I llm_load_print_meta: vocab type       = SPM
0.00.265.792 I llm_load_print_meta: n_vocab          = 256000
0.00.265.793 I llm_load_print_meta: n_merges         = 0
0.00.265.793 I llm_load_print_meta: vocab_only       = 0
0.00.265.793 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.793 I llm_load_print_meta: n_embd           = 2048
0.00.265.794 I llm_load_print_meta: n_layer          = 18
0.00.265.805 I llm_load_print_meta: n_head           = 8
0.00.265.806 I llm_load_print_meta: n_head_kv        = 1
0.00.265.806 I llm_load_print_meta: n_rot            = 256
0.00.265.807 I llm_load_print_meta: n_swa            = 0
0.00.265.807 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.807 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.808 I llm_load_print_meta: n_gqa            = 8
0.00.265.809 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.810 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.811 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.812 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.813 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.813 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.814 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.814 I llm_load_print_meta: n_ff             = 16384
0.00.265.815 I llm_load_print_meta: n_expert         = 0
0.00.265.815 I llm_load_print_meta: n_expert_used    = 0
0.00.265.815 I llm_load_print_meta: causal attn      = 1
0.00.265.816 I llm_load_print_meta: pooling type     = 0
0.00.265.816 I llm_load_print_meta: rope type        = 2
0.00.265.816 I llm_load_print_meta: rope scaling     = linear
0.00.265.818 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.818 I llm_load_print_meta: freq_scale_train = 1
0.00.265.819 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.819 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.819 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.820 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.820 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.820 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.821 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.821 I llm_load_print_meta: model type       = 2B
0.00.265.822 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.823 I llm_load_print_meta: model params     = 2.51 B
0.00.265.823 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.823 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.824 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.824 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.825 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.825 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.825 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.826 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.826 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.826 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.827 I llm_load_print_meta: max token length = 93
0.00.265.845 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.324.108 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.329.061 I llama_new_context_with_model: n_ctx      = 8192
0.00.329.067 I llama_new_context_with_model: n_batch    = 2048
0.00.329.067 I llama_new_context_with_model: n_ubatch   = 512
0.00.329.068 I llama_new_context_with_model: flash_attn = 0
0.00.329.070 I llama_new_context_with_model: freq_base  = 10000.0
0.00.329.070 I llama_new_context_with_model: freq_scale = 1
0.00.357.466 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.357.480 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.357.570 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.430 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.358.438 I llama_new_context_with_model: graph nodes  = 601
0.00.358.439 I llama_new_context_with_model: graph splits = 1
0.00.358.440 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.439.416 I main: llama threadpool init, n_threads = 4
0.00.439.429 I 
0.00.439.507 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.439.510 I 
0.00.439.551 I sampler seed: 1578946438
0.00.439.561 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.439.569 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.439.570 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.439.570 I 
 seconally.

I am not sure what you mean by "seconcely." Can you please explain what you are trying to say? [end of text]


0.01.845.402 I llama_perf_sampler_print:    sampling time =       4.07 ms /    29 runs   (    0.14 ms per token,  7127.06 tokens per second)
0.01.845.404 I llama_perf_context_print:        load time =     437.53 ms
0.01.845.405 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.845.407 I llama_perf_context_print:        eval time =    1388.99 ms /    28 runs   (   49.61 ms per token,    20.16 tokens per second)
0.01.845.408 I llama_perf_context_print:       total time =    1405.99 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.788s
user	8m13.398s
sys	0m6.936s
