+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.682 I build: 4255 (cc98896d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.889 I main: llama backend init
0.00.000.897 I main: load the model and apply lora adapter, if any
0.00.023.887 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.897 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.999 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.011 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.014 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.021 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.026 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.027 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.028 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.030 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.031 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.042 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.043 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.045 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.047 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.048 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.498 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.330.385 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.589 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.602 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.603 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.604 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.606 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.608 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.609 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.613 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.614 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.616 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.617 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.353.619 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.630 I llama_model_loader: - type  f32:   37 tensors
0.00.353.633 I llama_model_loader: - type q8_0:  127 tensors
0.00.645.004 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.775.785 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.776.803 I llm_load_vocab: special tokens cache size = 5
0.00.975.108 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.975.182 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.975.183 I llm_load_print_meta: arch             = gemma
0.00.975.184 I llm_load_print_meta: vocab type       = SPM
0.00.975.185 I llm_load_print_meta: n_vocab          = 256000
0.00.975.187 I llm_load_print_meta: n_merges         = 0
0.00.975.188 I llm_load_print_meta: vocab_only       = 0
0.00.975.188 I llm_load_print_meta: n_ctx_train      = 8192
0.00.975.189 I llm_load_print_meta: n_embd           = 2048
0.00.975.189 I llm_load_print_meta: n_layer          = 18
0.00.975.256 I llm_load_print_meta: n_head           = 8
0.00.975.264 I llm_load_print_meta: n_head_kv        = 1
0.00.975.264 I llm_load_print_meta: n_rot            = 256
0.00.975.265 I llm_load_print_meta: n_swa            = 0
0.00.975.265 I llm_load_print_meta: n_embd_head_k    = 256
0.00.975.266 I llm_load_print_meta: n_embd_head_v    = 256
0.00.975.270 I llm_load_print_meta: n_gqa            = 8
0.00.975.275 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.975.308 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.975.317 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.975.319 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.975.319 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.975.321 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.975.321 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.975.327 I llm_load_print_meta: n_ff             = 16384
0.00.975.328 I llm_load_print_meta: n_expert         = 0
0.00.975.329 I llm_load_print_meta: n_expert_used    = 0
0.00.975.329 I llm_load_print_meta: causal attn      = 1
0.00.975.329 I llm_load_print_meta: pooling type     = 0
0.00.975.329 I llm_load_print_meta: rope type        = 2
0.00.975.330 I llm_load_print_meta: rope scaling     = linear
0.00.975.331 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.975.332 I llm_load_print_meta: freq_scale_train = 1
0.00.975.333 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.975.333 I llm_load_print_meta: rope_finetuned   = unknown
0.00.975.334 I llm_load_print_meta: ssm_d_conv       = 0
0.00.975.334 I llm_load_print_meta: ssm_d_inner      = 0
0.00.975.335 I llm_load_print_meta: ssm_d_state      = 0
0.00.975.343 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.975.344 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.975.351 I llm_load_print_meta: model type       = 2B
0.00.975.353 I llm_load_print_meta: model ftype      = Q8_0
0.00.975.354 I llm_load_print_meta: model params     = 2.51 B
0.00.975.354 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.975.355 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.975.355 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.975.357 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.975.357 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.975.358 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.975.358 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.975.359 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.975.365 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.975.367 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.975.367 I llm_load_print_meta: max token length = 93
0.01.079.792 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.079.800 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.079.801 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.079.801 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.079.802 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.079.802 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.085.836 I llama_new_context_with_model: n_seq_max     = 1
0.01.085.844 I llama_new_context_with_model: n_ctx         = 4096
0.01.085.845 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.085.845 I llama_new_context_with_model: n_batch       = 2048
0.01.085.845 I llama_new_context_with_model: n_ubatch      = 512
0.01.085.846 I llama_new_context_with_model: flash_attn    = 0
0.01.085.848 I llama_new_context_with_model: freq_base     = 10000.0
0.01.085.849 I llama_new_context_with_model: freq_scale    = 1
0.01.085.850 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.101.276 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.101.315 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.101.435 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.104.008 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.104.012 I llama_new_context_with_model: graph nodes  = 601
0.01.104.012 I llama_new_context_with_model: graph splits = 1
0.01.104.037 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.714.074 I main: llama threadpool init, n_threads = 4
0.01.714.092 I 
0.01.714.212 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.714.216 I 
0.01.714.450 I sampler seed: 4041643218
0.01.714.465 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.714.477 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.714.477 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.714.478 I 
 increasities with his wife. [end of text]


0.04.685.468 I llama_perf_sampler_print:    sampling time =      10.91 ms /     8 runs   (    1.36 ms per token,   733.00 tokens per second)
0.04.685.471 I llama_perf_context_print:        load time =    1713.07 ms
0.04.685.482 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.685.484 I llama_perf_context_print:        eval time =    2950.45 ms /     7 runs   (  421.49 ms per token,     2.37 tokens per second)
0.04.685.486 I llama_perf_context_print:       total time =    2971.40 ms /     8 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.677 I build: 4255 (cc98896d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.877 I main: llama backend init
0.00.000.886 I main: load the model and apply lora adapter, if any
0.00.023.464 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.568 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.583 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.587 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.595 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.597 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.598 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.600 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.602 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.603 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.614 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.618 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.619 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.621 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.622 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.443 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.911 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.005 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.014 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.015 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.017 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.018 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.020 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.021 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.025 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.027 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.028 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.029 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.351.031 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.040 I llama_model_loader: - type  f32:   37 tensors
0.00.351.042 I llama_model_loader: - type q8_0:  127 tensors
0.00.638.196 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.767.698 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.768.704 I llm_load_vocab: special tokens cache size = 5
0.00.964.245 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.964.318 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.964.323 I llm_load_print_meta: arch             = gemma
0.00.964.323 I llm_load_print_meta: vocab type       = SPM
0.00.964.324 I llm_load_print_meta: n_vocab          = 256000
0.00.964.327 I llm_load_print_meta: n_merges         = 0
0.00.964.327 I llm_load_print_meta: vocab_only       = 0
0.00.964.328 I llm_load_print_meta: n_ctx_train      = 8192
0.00.964.329 I llm_load_print_meta: n_embd           = 2048
0.00.964.330 I llm_load_print_meta: n_layer          = 18
0.00.964.394 I llm_load_print_meta: n_head           = 8
0.00.964.404 I llm_load_print_meta: n_head_kv        = 1
0.00.964.405 I llm_load_print_meta: n_rot            = 256
0.00.964.405 I llm_load_print_meta: n_swa            = 0
0.00.964.406 I llm_load_print_meta: n_embd_head_k    = 256
0.00.964.406 I llm_load_print_meta: n_embd_head_v    = 256
0.00.964.410 I llm_load_print_meta: n_gqa            = 8
0.00.964.415 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.964.420 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.964.424 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.964.425 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.964.426 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.964.426 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.964.427 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.964.431 I llm_load_print_meta: n_ff             = 16384
0.00.964.432 I llm_load_print_meta: n_expert         = 0
0.00.964.433 I llm_load_print_meta: n_expert_used    = 0
0.00.964.433 I llm_load_print_meta: causal attn      = 1
0.00.964.433 I llm_load_print_meta: pooling type     = 0
0.00.964.434 I llm_load_print_meta: rope type        = 2
0.00.964.434 I llm_load_print_meta: rope scaling     = linear
0.00.964.435 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.964.436 I llm_load_print_meta: freq_scale_train = 1
0.00.964.436 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.964.439 I llm_load_print_meta: rope_finetuned   = unknown
0.00.964.439 I llm_load_print_meta: ssm_d_conv       = 0
0.00.964.440 I llm_load_print_meta: ssm_d_inner      = 0
0.00.964.440 I llm_load_print_meta: ssm_d_state      = 0
0.00.964.440 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.964.441 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.964.441 I llm_load_print_meta: model type       = 2B
0.00.964.442 I llm_load_print_meta: model ftype      = Q8_0
0.00.964.443 I llm_load_print_meta: model params     = 2.51 B
0.00.964.444 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.964.444 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.964.445 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.964.446 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.964.446 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.964.447 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.964.447 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.964.448 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.964.454 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.964.456 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.964.457 I llm_load_print_meta: max token length = 93
0.01.052.606 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.058.558 I llama_new_context_with_model: n_seq_max     = 1
0.01.058.565 I llama_new_context_with_model: n_ctx         = 4096
0.01.058.566 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.058.566 I llama_new_context_with_model: n_batch       = 2048
0.01.058.566 I llama_new_context_with_model: n_ubatch      = 512
0.01.058.567 I llama_new_context_with_model: flash_attn    = 0
0.01.058.570 I llama_new_context_with_model: freq_base     = 10000.0
0.01.058.571 I llama_new_context_with_model: freq_scale    = 1
0.01.058.571 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.074.720 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.074.767 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.074.896 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.077.479 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.077.483 I llama_new_context_with_model: graph nodes  = 601
0.01.077.484 I llama_new_context_with_model: graph splits = 1
0.01.077.505 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.691.084 I main: llama threadpool init, n_threads = 4
0.01.691.098 I 
0.01.691.208 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.691.211 I 
0.01.691.444 I sampler seed: 1834061837
0.01.691.458 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.691.468 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.691.469 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.691.469 I 
 increasels are a popular choice for this purpose.

**a)** True
**b)** False [end of text]


0.10.589.061 I llama_perf_sampler_print:    sampling time =      32.39 ms /    22 runs   (    1.47 ms per token,   679.20 tokens per second)
0.10.589.065 I llama_perf_context_print:        load time =    1690.08 ms
0.10.589.079 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.589.081 I llama_perf_context_print:        eval time =    8838.11 ms /    21 runs   (  420.86 ms per token,     2.38 tokens per second)
0.10.589.083 I llama_perf_context_print:       total time =    8897.99 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.656 I build: 4255 (cc98896d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.000.859 I main: load the model and apply lora adapter, if any
0.00.023.833 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.847 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.942 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.955 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.957 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.964 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.966 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.968 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.969 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.971 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.972 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.982 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.984 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.993 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.995 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.997 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.231.120 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.624 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.356.847 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.356.857 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.356.859 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.356.860 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.356.862 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.356.863 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.356.865 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.356.869 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.356.871 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.356.872 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.356.874 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.356.876 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.356.888 I llama_model_loader: - type  f32:   37 tensors
0.00.356.891 I llama_model_loader: - type q8_0:  127 tensors
0.00.644.009 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.774.983 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.776.023 I llm_load_vocab: special tokens cache size = 5
0.00.978.634 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.978.704 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.978.706 I llm_load_print_meta: arch             = gemma
0.00.978.706 I llm_load_print_meta: vocab type       = SPM
0.00.978.707 I llm_load_print_meta: n_vocab          = 256000
0.00.978.709 I llm_load_print_meta: n_merges         = 0
0.00.978.710 I llm_load_print_meta: vocab_only       = 0
0.00.978.711 I llm_load_print_meta: n_ctx_train      = 8192
0.00.978.711 I llm_load_print_meta: n_embd           = 2048
0.00.978.711 I llm_load_print_meta: n_layer          = 18
0.00.978.777 I llm_load_print_meta: n_head           = 8
0.00.978.786 I llm_load_print_meta: n_head_kv        = 1
0.00.978.787 I llm_load_print_meta: n_rot            = 256
0.00.978.787 I llm_load_print_meta: n_swa            = 0
0.00.978.787 I llm_load_print_meta: n_embd_head_k    = 256
0.00.978.788 I llm_load_print_meta: n_embd_head_v    = 256
0.00.978.792 I llm_load_print_meta: n_gqa            = 8
0.00.978.797 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.978.802 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.978.803 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.978.805 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.978.817 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.978.818 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.978.819 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.978.837 I llm_load_print_meta: n_ff             = 16384
0.00.978.839 I llm_load_print_meta: n_expert         = 0
0.00.978.840 I llm_load_print_meta: n_expert_used    = 0
0.00.978.840 I llm_load_print_meta: causal attn      = 1
0.00.978.840 I llm_load_print_meta: pooling type     = 0
0.00.978.841 I llm_load_print_meta: rope type        = 2
0.00.978.841 I llm_load_print_meta: rope scaling     = linear
0.00.978.842 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.978.843 I llm_load_print_meta: freq_scale_train = 1
0.00.978.843 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.978.844 I llm_load_print_meta: rope_finetuned   = unknown
0.00.978.844 I llm_load_print_meta: ssm_d_conv       = 0
0.00.978.844 I llm_load_print_meta: ssm_d_inner      = 0
0.00.978.853 I llm_load_print_meta: ssm_d_state      = 0
0.00.978.854 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.978.855 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.978.862 I llm_load_print_meta: model type       = 2B
0.00.978.863 I llm_load_print_meta: model ftype      = Q8_0
0.00.978.864 I llm_load_print_meta: model params     = 2.51 B
0.00.978.865 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.978.865 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.978.866 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.978.866 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.978.867 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.978.868 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.978.868 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.978.868 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.978.874 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.978.875 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.978.876 I llm_load_print_meta: max token length = 93
0.01.053.178 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.053.188 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.053.189 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.053.190 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.053.191 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.053.191 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.059.164 I llama_new_context_with_model: n_seq_max     = 1
0.01.059.172 I llama_new_context_with_model: n_ctx         = 4096
0.01.059.172 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.059.173 I llama_new_context_with_model: n_batch       = 2048
0.01.059.173 I llama_new_context_with_model: n_ubatch      = 512
0.01.059.173 I llama_new_context_with_model: flash_attn    = 0
0.01.059.176 I llama_new_context_with_model: freq_base     = 10000.0
0.01.059.176 I llama_new_context_with_model: freq_scale    = 1
0.01.059.177 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.074.247 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.074.292 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.074.412 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.077.001 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.077.005 I llama_new_context_with_model: graph nodes  = 601
0.01.077.006 I llama_new_context_with_model: graph splits = 1
0.01.077.030 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.687.783 I main: llama threadpool init, n_threads = 4
0.01.687.800 I 
0.01.687.921 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.687.925 I 
0.01.688.165 I sampler seed: 709338145
0.01.688.179 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.688.200 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.688.203 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.688.204 I 
 seconally and respectfully. [end of text]


0.04.234.494 I llama_perf_sampler_print:    sampling time =       9.35 ms /     7 runs   (    1.34 ms per token,   748.82 tokens per second)
0.04.234.498 I llama_perf_context_print:        load time =    1686.81 ms
0.04.234.511 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.234.513 I llama_perf_context_print:        eval time =    2528.57 ms /     6 runs   (  421.43 ms per token,     2.37 tokens per second)
0.04.234.514 I llama_perf_context_print:       total time =    2546.72 ms /     7 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.769 I build: 4255 (cc98896d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.033 I main: llama backend init
0.00.001.043 I main: load the model and apply lora adapter, if any
0.00.025.362 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.374 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.466 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.478 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.480 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.486 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.490 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.492 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.493 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.494 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.495 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.505 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.507 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.508 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.519 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.524 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.238.392 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.347.743 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.370.986 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.370.998 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.370.999 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.371.001 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.371.002 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.371.004 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.371.005 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.371.010 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.371.011 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.371.012 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.371.013 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.371.016 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.371.024 I llama_model_loader: - type  f32:   37 tensors
0.00.371.026 I llama_model_loader: - type q8_0:  127 tensors
0.00.655.822 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.785.958 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.786.996 I llm_load_vocab: special tokens cache size = 5
0.00.985.055 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.985.135 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.985.136 I llm_load_print_meta: arch             = gemma
0.00.985.137 I llm_load_print_meta: vocab type       = SPM
0.00.985.138 I llm_load_print_meta: n_vocab          = 256000
0.00.985.140 I llm_load_print_meta: n_merges         = 0
0.00.985.140 I llm_load_print_meta: vocab_only       = 0
0.00.985.141 I llm_load_print_meta: n_ctx_train      = 8192
0.00.985.141 I llm_load_print_meta: n_embd           = 2048
0.00.985.141 I llm_load_print_meta: n_layer          = 18
0.00.985.206 I llm_load_print_meta: n_head           = 8
0.00.985.213 I llm_load_print_meta: n_head_kv        = 1
0.00.985.214 I llm_load_print_meta: n_rot            = 256
0.00.985.214 I llm_load_print_meta: n_swa            = 0
0.00.985.215 I llm_load_print_meta: n_embd_head_k    = 256
0.00.985.215 I llm_load_print_meta: n_embd_head_v    = 256
0.00.985.220 I llm_load_print_meta: n_gqa            = 8
0.00.985.224 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.985.228 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.985.229 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.985.231 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.985.231 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.985.231 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.985.233 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.985.238 I llm_load_print_meta: n_ff             = 16384
0.00.985.239 I llm_load_print_meta: n_expert         = 0
0.00.985.240 I llm_load_print_meta: n_expert_used    = 0
0.00.985.240 I llm_load_print_meta: causal attn      = 1
0.00.985.240 I llm_load_print_meta: pooling type     = 0
0.00.985.240 I llm_load_print_meta: rope type        = 2
0.00.985.241 I llm_load_print_meta: rope scaling     = linear
0.00.985.242 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.985.243 I llm_load_print_meta: freq_scale_train = 1
0.00.985.244 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.985.245 I llm_load_print_meta: rope_finetuned   = unknown
0.00.985.245 I llm_load_print_meta: ssm_d_conv       = 0
0.00.985.245 I llm_load_print_meta: ssm_d_inner      = 0
0.00.985.256 I llm_load_print_meta: ssm_d_state      = 0
0.00.985.256 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.985.257 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.985.270 I llm_load_print_meta: model type       = 2B
0.00.985.271 I llm_load_print_meta: model ftype      = Q8_0
0.00.985.272 I llm_load_print_meta: model params     = 2.51 B
0.00.985.273 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.985.281 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.985.282 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.985.283 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.985.284 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.985.284 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.985.285 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.985.286 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.985.293 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.985.294 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.985.294 I llm_load_print_meta: max token length = 93
0.01.070.730 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.070.741 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.076.714 I llama_new_context_with_model: n_seq_max     = 1
0.01.076.722 I llama_new_context_with_model: n_ctx         = 4096
0.01.076.722 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.076.723 I llama_new_context_with_model: n_batch       = 2048
0.01.076.723 I llama_new_context_with_model: n_ubatch      = 512
0.01.076.724 I llama_new_context_with_model: flash_attn    = 0
0.01.076.727 I llama_new_context_with_model: freq_base     = 10000.0
0.01.076.728 I llama_new_context_with_model: freq_scale    = 1
0.01.076.729 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.092.546 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.092.591 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.092.714 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.095.401 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.095.407 I llama_new_context_with_model: graph nodes  = 601
0.01.095.407 I llama_new_context_with_model: graph splits = 1
0.01.095.435 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.743.361 I main: llama threadpool init, n_threads = 4
0.01.743.377 I 
0.01.743.503 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.743.508 I 
0.01.743.751 I sampler seed: 391857239
0.01.743.765 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.743.774 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.743.777 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.743.778 I 
 seconally.

The question is: Explain how the concept of mental health has changed over the past few decades.

**Response:**

**The concept of

0.15.356.129 I llama_perf_sampler_print:    sampling time =      49.12 ms /    33 runs   (    1.49 ms per token,   671.88 tokens per second)
0.15.356.145 I llama_perf_context_print:        load time =    1742.19 ms
0.15.356.147 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.356.148 I llama_perf_context_print:        eval time =   13521.64 ms /    32 runs   (  422.55 ms per token,     2.37 tokens per second)
0.15.356.150 I llama_perf_context_print:       total time =   13612.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m44.703s
user	2m6.507s
sys	0m9.539s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4255 (cc98896d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186959.99 ms
main:    total time = 186959.99 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.629 I build: 4255 (cc98896d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.821 I main: llama backend init
0.00.000.829 I main: load the model and apply lora adapter, if any
0.00.023.325 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.337 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.432 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.444 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.447 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.456 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.460 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.461 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.463 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.464 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.466 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.476 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.478 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.480 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.481 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.482 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.815 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.367 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.506 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.515 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.517 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.518 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.519 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.521 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.522 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.526 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.527 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.529 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.530 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.354.532 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.542 I llama_model_loader: - type  f32:   37 tensors
0.00.354.544 I llama_model_loader: - type q4_K:  108 tensors
0.00.354.545 I llama_model_loader: - type q6_K:   19 tensors
0.00.644.571 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.774.924 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.775.942 I llm_load_vocab: special tokens cache size = 5
0.00.979.875 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.979.953 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.979.954 I llm_load_print_meta: arch             = gemma
0.00.979.955 I llm_load_print_meta: vocab type       = SPM
0.00.979.956 I llm_load_print_meta: n_vocab          = 256000
0.00.979.958 I llm_load_print_meta: n_merges         = 0
0.00.979.959 I llm_load_print_meta: vocab_only       = 0
0.00.979.959 I llm_load_print_meta: n_ctx_train      = 8192
0.00.979.960 I llm_load_print_meta: n_embd           = 2048
0.00.979.960 I llm_load_print_meta: n_layer          = 18
0.00.980.023 I llm_load_print_meta: n_head           = 8
0.00.980.030 I llm_load_print_meta: n_head_kv        = 1
0.00.980.031 I llm_load_print_meta: n_rot            = 256
0.00.980.031 I llm_load_print_meta: n_swa            = 0
0.00.980.032 I llm_load_print_meta: n_embd_head_k    = 256
0.00.980.033 I llm_load_print_meta: n_embd_head_v    = 256
0.00.980.038 I llm_load_print_meta: n_gqa            = 8
0.00.980.042 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.980.047 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.980.049 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.980.050 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.980.050 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.980.051 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.980.051 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.980.056 I llm_load_print_meta: n_ff             = 16384
0.00.980.057 I llm_load_print_meta: n_expert         = 0
0.00.980.057 I llm_load_print_meta: n_expert_used    = 0
0.00.980.058 I llm_load_print_meta: causal attn      = 1
0.00.980.059 I llm_load_print_meta: pooling type     = 0
0.00.980.059 I llm_load_print_meta: rope type        = 2
0.00.980.059 I llm_load_print_meta: rope scaling     = linear
0.00.980.061 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.980.061 I llm_load_print_meta: freq_scale_train = 1
0.00.980.063 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.980.063 I llm_load_print_meta: rope_finetuned   = unknown
0.00.980.063 I llm_load_print_meta: ssm_d_conv       = 0
0.00.980.075 I llm_load_print_meta: ssm_d_inner      = 0
0.00.980.076 I llm_load_print_meta: ssm_d_state      = 0
0.00.980.077 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.980.077 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.980.077 I llm_load_print_meta: model type       = 2B
0.00.980.079 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.980.080 I llm_load_print_meta: model params     = 2.51 B
0.00.980.080 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.980.081 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.980.082 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.980.083 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.980.084 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.980.084 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.980.085 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.980.086 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.980.091 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.980.093 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.980.093 I llm_load_print_meta: max token length = 93
0.01.042.375 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.042.385 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.042.386 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.042.387 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.042.387 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.042.388 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.048.163 I llama_new_context_with_model: n_seq_max     = 1
0.01.048.170 I llama_new_context_with_model: n_ctx         = 4096
0.01.048.171 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.048.171 I llama_new_context_with_model: n_batch       = 2048
0.01.048.171 I llama_new_context_with_model: n_ubatch      = 512
0.01.048.172 I llama_new_context_with_model: flash_attn    = 0
0.01.048.175 I llama_new_context_with_model: freq_base     = 10000.0
0.01.048.176 I llama_new_context_with_model: freq_scale    = 1
0.01.048.177 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.062.664 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.062.707 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.062.826 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.065.375 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.065.379 I llama_new_context_with_model: graph nodes  = 601
0.01.065.379 I llama_new_context_with_model: graph splits = 1
0.01.065.402 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.653.796 I main: llama threadpool init, n_threads = 4
0.01.653.811 I 
0.01.653.935 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.653.939 I 
0.01.654.189 I sampler seed: 3784845813
0.01.654.203 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.654.213 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.654.216 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.654.217 I 
 seconally.  

**Assistant**

I am unable to provide medical advice or make medical recommendations. If you have any questions or concerns, please consult a

0.12.872.346 I llama_perf_sampler_print:    sampling time =      49.04 ms /    33 runs   (    1.49 ms per token,   672.97 tokens per second)
0.12.872.349 I llama_perf_context_print:        load time =    1652.87 ms
0.12.872.350 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.872.372 I llama_perf_context_print:        eval time =   11128.67 ms /    32 runs   (  347.77 ms per token,     2.88 tokens per second)
0.12.872.374 I llama_perf_context_print:       total time =   11218.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4255 (cc98896d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 187045.21 ms
main:    total time = 187045.21 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 4255 (cc98896d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.854 I main: llama backend init
0.00.000.861 I main: load the model and apply lora adapter, if any
0.00.023.537 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.637 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.650 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.651 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.657 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.659 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.661 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.663 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.664 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.665 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.675 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.678 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.680 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.681 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.690 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.942 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.332.636 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.355.687 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.355.698 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.355.700 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.355.701 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.355.702 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.355.704 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.355.705 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.355.709 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.355.711 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.355.720 I llama_model_loader: - type  f32:   37 tensors
0.00.355.722 I llama_model_loader: - type q4_K:  108 tensors
0.00.355.723 I llama_model_loader: - type q6_K:   19 tensors
0.00.625.641 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.751.770 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.752.715 I llm_load_vocab: special tokens cache size = 5
0.00.951.135 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.951.207 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.951.211 I llm_load_print_meta: arch             = gemma
0.00.951.212 I llm_load_print_meta: vocab type       = SPM
0.00.951.213 I llm_load_print_meta: n_vocab          = 256000
0.00.951.215 I llm_load_print_meta: n_merges         = 0
0.00.951.215 I llm_load_print_meta: vocab_only       = 0
0.00.951.216 I llm_load_print_meta: n_ctx_train      = 8192
0.00.951.216 I llm_load_print_meta: n_embd           = 2048
0.00.951.217 I llm_load_print_meta: n_layer          = 18
0.00.951.282 I llm_load_print_meta: n_head           = 8
0.00.951.292 I llm_load_print_meta: n_head_kv        = 1
0.00.951.292 I llm_load_print_meta: n_rot            = 256
0.00.951.293 I llm_load_print_meta: n_swa            = 0
0.00.951.293 I llm_load_print_meta: n_embd_head_k    = 256
0.00.951.293 I llm_load_print_meta: n_embd_head_v    = 256
0.00.951.298 I llm_load_print_meta: n_gqa            = 8
0.00.951.302 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.951.307 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.951.308 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.951.310 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.951.310 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.951.311 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.951.311 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.951.317 I llm_load_print_meta: n_ff             = 16384
0.00.951.317 I llm_load_print_meta: n_expert         = 0
0.00.951.318 I llm_load_print_meta: n_expert_used    = 0
0.00.951.318 I llm_load_print_meta: causal attn      = 1
0.00.951.318 I llm_load_print_meta: pooling type     = 0
0.00.951.319 I llm_load_print_meta: rope type        = 2
0.00.951.319 I llm_load_print_meta: rope scaling     = linear
0.00.951.320 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.951.321 I llm_load_print_meta: freq_scale_train = 1
0.00.951.322 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.951.324 I llm_load_print_meta: rope_finetuned   = unknown
0.00.951.325 I llm_load_print_meta: ssm_d_conv       = 0
0.00.951.325 I llm_load_print_meta: ssm_d_inner      = 0
0.00.951.325 I llm_load_print_meta: ssm_d_state      = 0
0.00.951.326 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.951.326 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.951.327 I llm_load_print_meta: model type       = 2B
0.00.951.328 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.951.330 I llm_load_print_meta: model params     = 2.51 B
0.00.951.331 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.951.331 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.951.332 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.951.332 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.951.332 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.951.333 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.951.333 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.951.334 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.951.340 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.951.341 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.951.342 I llm_load_print_meta: max token length = 93
0.01.009.995 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.015.763 I llama_new_context_with_model: n_seq_max     = 1
0.01.015.770 I llama_new_context_with_model: n_ctx         = 4096
0.01.015.771 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.015.771 I llama_new_context_with_model: n_batch       = 2048
0.01.015.772 I llama_new_context_with_model: n_ubatch      = 512
0.01.015.772 I llama_new_context_with_model: flash_attn    = 0
0.01.015.775 I llama_new_context_with_model: freq_base     = 10000.0
0.01.015.776 I llama_new_context_with_model: freq_scale    = 1
0.01.015.778 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.031.006 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.031.049 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.031.170 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.033.640 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.033.644 I llama_new_context_with_model: graph nodes  = 601
0.01.033.644 I llama_new_context_with_model: graph splits = 1
0.01.033.668 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.620.976 I main: llama threadpool init, n_threads = 4
0.01.620.992 I 
0.01.621.116 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.621.120 I 
0.01.621.362 I sampler seed: 2065695514
0.01.621.375 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.621.388 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.621.388 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.621.389 I 
 seconally.

A woman is sitting on a park bench. She is crying, her eyes red and puffy. Her hands are clenched tight around a small,

0.12.765.711 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.85 tokens per second)
0.12.765.715 I llama_perf_context_print:        load time =    1620.02 ms
0.12.765.729 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.765.732 I llama_perf_context_print:        eval time =   11055.78 ms /    32 runs   (  345.49 ms per token,     2.89 tokens per second)
0.12.765.733 I llama_perf_context_print:       total time =   11144.74 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m42.578s
user	46m48.945s
sys	0m6.454s
