+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.591 I build: 3801 (ecd5d6b6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.785 I main: llama backend init
0.00.001.922 I main: load the model and apply lora adapter, if any
0.00.022.032 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.080 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.087 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.092 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.093 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.097 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.100 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.100 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.101 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.101 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.102 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.106 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.106 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.107 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.108 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.108 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.713 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.951 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.733 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.739 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.740 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.740 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.741 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.743 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.743 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.747 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.748 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.749 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.750 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.751 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.753 I llama_model_loader: - type  f32:   37 tensors
0.00.131.755 I llama_model_loader: - type q8_0:  127 tensors
0.00.193.722 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.194.323 I llm_load_vocab: special tokens cache size = 5
0.00.212.642 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.212.653 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.212.654 I llm_load_print_meta: arch             = gemma
0.00.212.654 I llm_load_print_meta: vocab type       = SPM
0.00.212.655 I llm_load_print_meta: n_vocab          = 256000
0.00.212.655 I llm_load_print_meta: n_merges         = 0
0.00.212.655 I llm_load_print_meta: vocab_only       = 0
0.00.212.656 I llm_load_print_meta: n_ctx_train      = 8192
0.00.212.656 I llm_load_print_meta: n_embd           = 2048
0.00.212.657 I llm_load_print_meta: n_layer          = 18
0.00.212.668 I llm_load_print_meta: n_head           = 8
0.00.212.669 I llm_load_print_meta: n_head_kv        = 1
0.00.212.669 I llm_load_print_meta: n_rot            = 256
0.00.212.670 I llm_load_print_meta: n_swa            = 0
0.00.212.670 I llm_load_print_meta: n_embd_head_k    = 256
0.00.212.670 I llm_load_print_meta: n_embd_head_v    = 256
0.00.212.671 I llm_load_print_meta: n_gqa            = 8
0.00.212.672 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.212.673 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.212.674 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.212.675 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.212.676 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.212.676 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.212.676 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.212.677 I llm_load_print_meta: n_ff             = 16384
0.00.212.678 I llm_load_print_meta: n_expert         = 0
0.00.212.678 I llm_load_print_meta: n_expert_used    = 0
0.00.212.679 I llm_load_print_meta: causal attn      = 1
0.00.212.679 I llm_load_print_meta: pooling type     = 0
0.00.212.679 I llm_load_print_meta: rope type        = 2
0.00.212.679 I llm_load_print_meta: rope scaling     = linear
0.00.212.681 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.212.681 I llm_load_print_meta: freq_scale_train = 1
0.00.212.682 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.212.682 I llm_load_print_meta: rope_finetuned   = unknown
0.00.212.682 I llm_load_print_meta: ssm_d_conv       = 0
0.00.212.682 I llm_load_print_meta: ssm_d_inner      = 0
0.00.212.683 I llm_load_print_meta: ssm_d_state      = 0
0.00.212.683 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.212.683 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.212.684 I llm_load_print_meta: model type       = 2B
0.00.212.684 I llm_load_print_meta: model ftype      = Q8_0
0.00.212.685 I llm_load_print_meta: model params     = 2.51 B
0.00.212.686 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.212.687 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.212.687 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.212.688 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.212.688 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.212.688 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.212.689 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.212.689 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.212.689 I llm_load_print_meta: max token length = 93
0.00.212.711 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.310.888 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.310.898 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.310.898 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.310.899 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.310.900 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.310.900 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.316.196 I llama_new_context_with_model: n_ctx      = 8192
0.00.316.204 I llama_new_context_with_model: n_batch    = 2048
0.00.316.204 I llama_new_context_with_model: n_ubatch   = 512
0.00.316.205 I llama_new_context_with_model: flash_attn = 0
0.00.316.209 I llama_new_context_with_model: freq_base  = 10000.0
0.00.316.210 I llama_new_context_with_model: freq_scale = 1
0.00.345.462 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.345.476 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.345.567 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.346.444 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.346.452 I llama_new_context_with_model: graph nodes  = 601
0.00.346.452 I llama_new_context_with_model: graph splits = 1
0.00.346.454 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.436.634 I main: llama threadpool init, n_threads = 4
0.00.436.646 I 
0.00.436.719 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.436.723 I 
0.00.436.752 I sampler seed: 1195839468
0.00.436.760 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.436.763 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.436.763 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasels!

I cannot answer this question as it contains inappropriate and potentially harmful content. [end of text]


0.01.749.624 I llama_perf_sampler_print:    sampling time =       2.90 ms /    20 runs   (    0.14 ms per token,  6896.55 tokens per second)
0.01.749.626 I llama_perf_context_print:        load time =     434.69 ms
0.01.749.628 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.749.629 I llama_perf_context_print:        eval time =    1301.91 ms /    19 runs   (   68.52 ms per token,    14.59 tokens per second)
0.01.749.630 I llama_perf_context_print:       total time =    1313.00 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.551 I build: 3801 (ecd5d6b6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.747 I main: llama backend init
0.00.001.901 I main: load the model and apply lora adapter, if any
0.00.022.295 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.311 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.320 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.321 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.325 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.326 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.327 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.327 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.328 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.329 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.334 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.334 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.335 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.336 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.336 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.259 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.859 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.685 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.692 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.693 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.694 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.694 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.695 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.696 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.699 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.700 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.700 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.701 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.702 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.706 I llama_model_loader: - type  f32:   37 tensors
0.00.132.709 I llama_model_loader: - type q8_0:  127 tensors
0.00.196.967 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.197.636 I llm_load_vocab: special tokens cache size = 5
0.00.216.052 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.216.066 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.216.067 I llm_load_print_meta: arch             = gemma
0.00.216.067 I llm_load_print_meta: vocab type       = SPM
0.00.216.068 I llm_load_print_meta: n_vocab          = 256000
0.00.216.069 I llm_load_print_meta: n_merges         = 0
0.00.216.069 I llm_load_print_meta: vocab_only       = 0
0.00.216.070 I llm_load_print_meta: n_ctx_train      = 8192
0.00.216.070 I llm_load_print_meta: n_embd           = 2048
0.00.216.070 I llm_load_print_meta: n_layer          = 18
0.00.216.083 I llm_load_print_meta: n_head           = 8
0.00.216.084 I llm_load_print_meta: n_head_kv        = 1
0.00.216.085 I llm_load_print_meta: n_rot            = 256
0.00.216.085 I llm_load_print_meta: n_swa            = 0
0.00.216.085 I llm_load_print_meta: n_embd_head_k    = 256
0.00.216.086 I llm_load_print_meta: n_embd_head_v    = 256
0.00.216.086 I llm_load_print_meta: n_gqa            = 8
0.00.216.088 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.216.089 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.216.090 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.216.092 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.216.093 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.216.094 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.216.094 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.216.095 I llm_load_print_meta: n_ff             = 16384
0.00.216.096 I llm_load_print_meta: n_expert         = 0
0.00.216.096 I llm_load_print_meta: n_expert_used    = 0
0.00.216.096 I llm_load_print_meta: causal attn      = 1
0.00.216.097 I llm_load_print_meta: pooling type     = 0
0.00.216.097 I llm_load_print_meta: rope type        = 2
0.00.216.098 I llm_load_print_meta: rope scaling     = linear
0.00.216.099 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.216.100 I llm_load_print_meta: freq_scale_train = 1
0.00.216.100 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.216.101 I llm_load_print_meta: rope_finetuned   = unknown
0.00.216.101 I llm_load_print_meta: ssm_d_conv       = 0
0.00.216.102 I llm_load_print_meta: ssm_d_inner      = 0
0.00.216.111 I llm_load_print_meta: ssm_d_state      = 0
0.00.216.112 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.216.113 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.216.114 I llm_load_print_meta: model type       = 2B
0.00.216.115 I llm_load_print_meta: model ftype      = Q8_0
0.00.216.119 I llm_load_print_meta: model params     = 2.51 B
0.00.216.120 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.216.120 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.216.121 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.216.121 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.216.122 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.216.122 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.216.122 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.216.123 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.216.123 I llm_load_print_meta: max token length = 93
0.00.216.139 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.311.931 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.316.946 I llama_new_context_with_model: n_ctx      = 8192
0.00.316.952 I llama_new_context_with_model: n_batch    = 2048
0.00.316.953 I llama_new_context_with_model: n_ubatch   = 512
0.00.316.953 I llama_new_context_with_model: flash_attn = 0
0.00.316.956 I llama_new_context_with_model: freq_base  = 10000.0
0.00.316.956 I llama_new_context_with_model: freq_scale = 1
0.00.345.676 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.345.690 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.345.781 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.346.611 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.346.619 I llama_new_context_with_model: graph nodes  = 601
0.00.346.619 I llama_new_context_with_model: graph splits = 1
0.00.346.622 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.432.826 I main: llama threadpool init, n_threads = 4
0.00.432.837 I 
0.00.432.908 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.432.911 I 
0.00.432.949 I sampler seed: 3110792799
0.00.432.958 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.432.961 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.432.961 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities to a woman with a child. 

What is the safest and most appropriate response?

a) Denounce the behavior and emphasize the importance of

0.02.582.588 I llama_perf_sampler_print:    sampling time =       4.68 ms /    33 runs   (    0.14 ms per token,  7057.31 tokens per second)
0.02.582.590 I llama_perf_context_print:        load time =     430.91 ms
0.02.582.591 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.582.593 I llama_perf_context_print:        eval time =    2132.59 ms /    32 runs   (   66.64 ms per token,    15.01 tokens per second)
0.02.582.593 I llama_perf_context_print:       total time =    2149.77 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.543 I build: 3801 (ecd5d6b6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.752 I main: llama backend init
0.00.001.901 I main: load the model and apply lora adapter, if any
0.00.022.171 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.234 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.243 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.249 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.250 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.254 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.258 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.259 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.260 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.261 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.263 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.267 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.268 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.269 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.270 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.271 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.055.960 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.322 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.138.111 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.138.118 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.138.118 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.138.119 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.138.120 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.138.120 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.138.121 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.138.124 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.138.125 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.138.126 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.138.126 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.138.127 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.138.130 I llama_model_loader: - type  f32:   37 tensors
0.00.138.134 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.500 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.207.181 I llm_load_vocab: special tokens cache size = 5
0.00.225.288 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.225.301 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.225.301 I llm_load_print_meta: arch             = gemma
0.00.225.303 I llm_load_print_meta: vocab type       = SPM
0.00.225.304 I llm_load_print_meta: n_vocab          = 256000
0.00.225.304 I llm_load_print_meta: n_merges         = 0
0.00.225.305 I llm_load_print_meta: vocab_only       = 0
0.00.225.305 I llm_load_print_meta: n_ctx_train      = 8192
0.00.225.306 I llm_load_print_meta: n_embd           = 2048
0.00.225.306 I llm_load_print_meta: n_layer          = 18
0.00.225.319 I llm_load_print_meta: n_head           = 8
0.00.225.321 I llm_load_print_meta: n_head_kv        = 1
0.00.225.321 I llm_load_print_meta: n_rot            = 256
0.00.225.322 I llm_load_print_meta: n_swa            = 0
0.00.225.322 I llm_load_print_meta: n_embd_head_k    = 256
0.00.225.323 I llm_load_print_meta: n_embd_head_v    = 256
0.00.225.324 I llm_load_print_meta: n_gqa            = 8
0.00.225.326 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.225.327 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.225.328 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.225.329 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.225.330 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.225.331 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.225.332 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.225.334 I llm_load_print_meta: n_ff             = 16384
0.00.225.335 I llm_load_print_meta: n_expert         = 0
0.00.225.335 I llm_load_print_meta: n_expert_used    = 0
0.00.225.336 I llm_load_print_meta: causal attn      = 1
0.00.225.337 I llm_load_print_meta: pooling type     = 0
0.00.225.337 I llm_load_print_meta: rope type        = 2
0.00.225.338 I llm_load_print_meta: rope scaling     = linear
0.00.225.340 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.225.341 I llm_load_print_meta: freq_scale_train = 1
0.00.225.341 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.225.342 I llm_load_print_meta: rope_finetuned   = unknown
0.00.225.342 I llm_load_print_meta: ssm_d_conv       = 0
0.00.225.346 I llm_load_print_meta: ssm_d_inner      = 0
0.00.225.346 I llm_load_print_meta: ssm_d_state      = 0
0.00.225.347 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.225.347 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.225.348 I llm_load_print_meta: model type       = 2B
0.00.225.349 I llm_load_print_meta: model ftype      = Q8_0
0.00.225.350 I llm_load_print_meta: model params     = 2.51 B
0.00.225.351 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.225.352 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.225.352 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.225.353 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.225.353 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.225.354 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.225.354 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.225.355 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.225.355 I llm_load_print_meta: max token length = 93
0.00.225.388 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.305.621 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.305.629 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.305.630 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.305.630 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.305.631 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.305.631 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.310.729 I llama_new_context_with_model: n_ctx      = 8192
0.00.310.735 I llama_new_context_with_model: n_batch    = 2048
0.00.310.735 I llama_new_context_with_model: n_ubatch   = 512
0.00.310.736 I llama_new_context_with_model: flash_attn = 0
0.00.310.738 I llama_new_context_with_model: freq_base  = 10000.0
0.00.310.739 I llama_new_context_with_model: freq_scale = 1
0.00.339.562 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.339.578 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.339.676 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.340.582 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.340.591 I llama_new_context_with_model: graph nodes  = 601
0.00.340.592 I llama_new_context_with_model: graph splits = 1
0.00.340.594 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.434.412 I main: llama threadpool init, n_threads = 4
0.00.434.425 I 
0.00.434.514 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.434.518 I 
0.00.434.550 I sampler seed: 680096614
0.00.434.565 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.434.569 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.434.570 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities to create new experiences that merge science and art. [end of text]


0.01.357.947 I llama_perf_sampler_print:    sampling time =       2.04 ms /    14 runs   (    0.15 ms per token,  6869.48 tokens per second)
0.01.357.950 I llama_perf_context_print:        load time =     432.50 ms
0.01.357.951 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.357.953 I llama_perf_context_print:        eval time =     915.57 ms /    13 runs   (   70.43 ms per token,    14.20 tokens per second)
0.01.357.954 I llama_perf_context_print:       total time =     923.54 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.558 I build: 3801 (ecd5d6b6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.994 I main: llama backend init
0.00.002.391 I main: load the model and apply lora adapter, if any
0.00.023.055 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.110 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.127 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.136 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.139 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.143 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.144 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.146 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.147 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.149 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.149 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.155 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.156 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.158 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.159 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.160 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.055.123 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.825 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.138.645 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.138.651 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.138.652 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.138.653 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.138.653 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.138.654 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.138.655 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.138.659 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.138.660 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.138.660 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.138.661 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.138.662 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.138.665 I llama_model_loader: - type  f32:   37 tensors
0.00.138.668 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.604 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.206.323 I llm_load_vocab: special tokens cache size = 5
0.00.224.399 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.224.412 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.224.413 I llm_load_print_meta: arch             = gemma
0.00.224.413 I llm_load_print_meta: vocab type       = SPM
0.00.224.414 I llm_load_print_meta: n_vocab          = 256000
0.00.224.415 I llm_load_print_meta: n_merges         = 0
0.00.224.415 I llm_load_print_meta: vocab_only       = 0
0.00.224.415 I llm_load_print_meta: n_ctx_train      = 8192
0.00.224.416 I llm_load_print_meta: n_embd           = 2048
0.00.224.416 I llm_load_print_meta: n_layer          = 18
0.00.224.429 I llm_load_print_meta: n_head           = 8
0.00.224.430 I llm_load_print_meta: n_head_kv        = 1
0.00.224.430 I llm_load_print_meta: n_rot            = 256
0.00.224.430 I llm_load_print_meta: n_swa            = 0
0.00.224.431 I llm_load_print_meta: n_embd_head_k    = 256
0.00.224.431 I llm_load_print_meta: n_embd_head_v    = 256
0.00.224.432 I llm_load_print_meta: n_gqa            = 8
0.00.224.433 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.224.434 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.224.435 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.224.436 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.224.437 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.224.437 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.224.438 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.224.439 I llm_load_print_meta: n_ff             = 16384
0.00.224.439 I llm_load_print_meta: n_expert         = 0
0.00.224.439 I llm_load_print_meta: n_expert_used    = 0
0.00.224.440 I llm_load_print_meta: causal attn      = 1
0.00.224.440 I llm_load_print_meta: pooling type     = 0
0.00.224.440 I llm_load_print_meta: rope type        = 2
0.00.224.441 I llm_load_print_meta: rope scaling     = linear
0.00.224.442 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.224.443 I llm_load_print_meta: freq_scale_train = 1
0.00.224.443 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.224.443 I llm_load_print_meta: rope_finetuned   = unknown
0.00.224.443 I llm_load_print_meta: ssm_d_conv       = 0
0.00.224.444 I llm_load_print_meta: ssm_d_inner      = 0
0.00.224.445 I llm_load_print_meta: ssm_d_state      = 0
0.00.224.445 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.224.446 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.224.446 I llm_load_print_meta: model type       = 2B
0.00.224.447 I llm_load_print_meta: model ftype      = Q8_0
0.00.224.447 I llm_load_print_meta: model params     = 2.51 B
0.00.224.448 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.224.448 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.224.449 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.224.450 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.224.450 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.224.450 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.224.451 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.224.451 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.224.451 I llm_load_print_meta: max token length = 93
0.00.224.466 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.301.086 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.301.092 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.306.589 I llama_new_context_with_model: n_ctx      = 8192
0.00.306.596 I llama_new_context_with_model: n_batch    = 2048
0.00.306.596 I llama_new_context_with_model: n_ubatch   = 512
0.00.306.596 I llama_new_context_with_model: flash_attn = 0
0.00.306.599 I llama_new_context_with_model: freq_base  = 10000.0
0.00.306.600 I llama_new_context_with_model: freq_scale = 1
0.00.336.863 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.336.881 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.336.976 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.337.851 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.337.859 I llama_new_context_with_model: graph nodes  = 601
0.00.337.859 I llama_new_context_with_model: graph splits = 1
0.00.337.861 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.431.216 I main: llama threadpool init, n_threads = 4
0.00.431.227 I 
0.00.431.299 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.431.303 I 
0.00.431.342 I sampler seed: 4101075924
0.00.431.351 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.431.354 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.431.355 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally.

I'm having trouble understanding this passage. Can you explain it to me in simpler terms?

I am unable to provide assistance with understanding

0.02.855.295 I llama_perf_sampler_print:    sampling time =       4.97 ms /    33 runs   (    0.15 ms per token,  6637.17 tokens per second)
0.02.855.298 I llama_perf_context_print:        load time =     428.80 ms
0.02.855.299 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.855.300 I llama_perf_context_print:        eval time =    2404.80 ms /    32 runs   (   75.15 ms per token,    13.31 tokens per second)
0.02.855.301 I llama_perf_context_print:       total time =    2424.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.900s
user	0m29.901s
sys	0m9.346s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3801 (ecd5d6b6)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31966.21 ms
main:    total time = 31966.21 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.541 I build: 3801 (ecd5d6b6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.735 I main: llama backend init
0.00.001.855 I main: load the model and apply lora adapter, if any
0.00.022.026 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.074 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.082 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.088 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.089 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.092 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.093 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.094 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.097 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.097 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.098 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.101 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.102 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.102 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.103 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.103 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.140 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.889 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.734 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.740 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.741 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.742 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.743 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.744 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.745 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.749 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.750 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.751 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.752 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.753 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.756 I llama_model_loader: - type  f32:   37 tensors
0.00.132.758 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.759 I llama_model_loader: - type q6_K:   19 tensors
0.00.195.696 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.196.361 I llm_load_vocab: special tokens cache size = 5
0.00.214.622 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.214.636 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.214.637 I llm_load_print_meta: arch             = gemma
0.00.214.637 I llm_load_print_meta: vocab type       = SPM
0.00.214.638 I llm_load_print_meta: n_vocab          = 256000
0.00.214.638 I llm_load_print_meta: n_merges         = 0
0.00.214.639 I llm_load_print_meta: vocab_only       = 0
0.00.214.639 I llm_load_print_meta: n_ctx_train      = 8192
0.00.214.639 I llm_load_print_meta: n_embd           = 2048
0.00.214.640 I llm_load_print_meta: n_layer          = 18
0.00.214.652 I llm_load_print_meta: n_head           = 8
0.00.214.653 I llm_load_print_meta: n_head_kv        = 1
0.00.214.654 I llm_load_print_meta: n_rot            = 256
0.00.214.656 I llm_load_print_meta: n_swa            = 0
0.00.214.657 I llm_load_print_meta: n_embd_head_k    = 256
0.00.214.657 I llm_load_print_meta: n_embd_head_v    = 256
0.00.214.659 I llm_load_print_meta: n_gqa            = 8
0.00.214.660 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.214.661 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.214.662 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.214.663 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.214.664 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.214.664 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.214.667 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.214.669 I llm_load_print_meta: n_ff             = 16384
0.00.214.669 I llm_load_print_meta: n_expert         = 0
0.00.214.669 I llm_load_print_meta: n_expert_used    = 0
0.00.214.670 I llm_load_print_meta: causal attn      = 1
0.00.214.670 I llm_load_print_meta: pooling type     = 0
0.00.214.670 I llm_load_print_meta: rope type        = 2
0.00.214.670 I llm_load_print_meta: rope scaling     = linear
0.00.214.672 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.214.672 I llm_load_print_meta: freq_scale_train = 1
0.00.214.673 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.214.673 I llm_load_print_meta: rope_finetuned   = unknown
0.00.214.673 I llm_load_print_meta: ssm_d_conv       = 0
0.00.214.674 I llm_load_print_meta: ssm_d_inner      = 0
0.00.214.674 I llm_load_print_meta: ssm_d_state      = 0
0.00.214.675 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.214.675 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.214.676 I llm_load_print_meta: model type       = 2B
0.00.214.676 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.214.677 I llm_load_print_meta: model params     = 2.51 B
0.00.214.678 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.214.679 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.214.679 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.214.680 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.214.681 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.214.681 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.214.682 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.214.682 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.214.683 I llm_load_print_meta: max token length = 93
0.00.214.700 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.272.114 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.272.122 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.272.123 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.272.124 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.272.124 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.272.125 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.277.126 I llama_new_context_with_model: n_ctx      = 8192
0.00.277.133 I llama_new_context_with_model: n_batch    = 2048
0.00.277.133 I llama_new_context_with_model: n_ubatch   = 512
0.00.277.134 I llama_new_context_with_model: flash_attn = 0
0.00.277.136 I llama_new_context_with_model: freq_base  = 10000.0
0.00.277.137 I llama_new_context_with_model: freq_scale = 1
0.00.305.531 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.305.546 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.305.638 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.306.471 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.306.479 I llama_new_context_with_model: graph nodes  = 601
0.00.306.479 I llama_new_context_with_model: graph splits = 1
0.00.306.481 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.386.955 I main: llama threadpool init, n_threads = 4
0.00.386.967 I 
0.00.387.040 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.387.043 I 
0.00.387.072 I sampler seed: 2963938558
0.00.387.081 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.387.083 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.387.084 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally and cautiously.

**Explanation:**

- Use "concursively" instead of "consequently" to maintain parallelism.
- Add "slowly

0.01.960.986 I llama_perf_sampler_print:    sampling time =       4.67 ms /    33 runs   (    0.14 ms per token,  7073.95 tokens per second)
0.01.960.989 I llama_perf_context_print:        load time =     385.08 ms
0.01.960.990 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.960.991 I llama_perf_context_print:        eval time =    1556.87 ms /    32 runs   (   48.65 ms per token,    20.55 tokens per second)
0.01.960.992 I llama_perf_context_print:       total time =    1574.04 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3801 (ecd5d6b6)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32071.26 ms
main:    total time = 32071.26 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.572 I build: 3801 (ecd5d6b6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.790 I main: llama backend init
0.00.001.902 I main: load the model and apply lora adapter, if any
0.00.021.947 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.958 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.964 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.965 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.969 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.970 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.970 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.971 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.971 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.972 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.975 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.976 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.976 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.978 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.978 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.894 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.461 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.282 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.288 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.289 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.289 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.290 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.291 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.291 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.295 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.295 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.299 I llama_model_loader: - type  f32:   37 tensors
0.00.132.302 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.303 I llama_model_loader: - type q6_K:   19 tensors
0.00.196.994 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.197.685 I llm_load_vocab: special tokens cache size = 5
0.00.215.808 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.215.820 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.215.821 I llm_load_print_meta: arch             = gemma
0.00.215.821 I llm_load_print_meta: vocab type       = SPM
0.00.215.822 I llm_load_print_meta: n_vocab          = 256000
0.00.215.823 I llm_load_print_meta: n_merges         = 0
0.00.215.823 I llm_load_print_meta: vocab_only       = 0
0.00.215.823 I llm_load_print_meta: n_ctx_train      = 8192
0.00.215.824 I llm_load_print_meta: n_embd           = 2048
0.00.215.824 I llm_load_print_meta: n_layer          = 18
0.00.215.837 I llm_load_print_meta: n_head           = 8
0.00.215.838 I llm_load_print_meta: n_head_kv        = 1
0.00.215.838 I llm_load_print_meta: n_rot            = 256
0.00.215.838 I llm_load_print_meta: n_swa            = 0
0.00.215.838 I llm_load_print_meta: n_embd_head_k    = 256
0.00.215.839 I llm_load_print_meta: n_embd_head_v    = 256
0.00.215.840 I llm_load_print_meta: n_gqa            = 8
0.00.215.841 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.215.842 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.215.842 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.215.844 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.215.844 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.215.844 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.215.845 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.215.845 I llm_load_print_meta: n_ff             = 16384
0.00.215.846 I llm_load_print_meta: n_expert         = 0
0.00.215.846 I llm_load_print_meta: n_expert_used    = 0
0.00.215.846 I llm_load_print_meta: causal attn      = 1
0.00.215.847 I llm_load_print_meta: pooling type     = 0
0.00.215.847 I llm_load_print_meta: rope type        = 2
0.00.215.847 I llm_load_print_meta: rope scaling     = linear
0.00.215.849 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.215.849 I llm_load_print_meta: freq_scale_train = 1
0.00.215.850 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.215.850 I llm_load_print_meta: rope_finetuned   = unknown
0.00.215.850 I llm_load_print_meta: ssm_d_conv       = 0
0.00.215.851 I llm_load_print_meta: ssm_d_inner      = 0
0.00.215.851 I llm_load_print_meta: ssm_d_state      = 0
0.00.215.851 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.215.851 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.215.852 I llm_load_print_meta: model type       = 2B
0.00.215.852 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.215.853 I llm_load_print_meta: model params     = 2.51 B
0.00.215.854 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.215.854 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.215.855 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.215.855 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.215.855 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.215.856 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.215.856 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.215.856 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.215.857 I llm_load_print_meta: max token length = 93
0.00.215.870 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.272.758 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.277.729 I llama_new_context_with_model: n_ctx      = 8192
0.00.277.736 I llama_new_context_with_model: n_batch    = 2048
0.00.277.736 I llama_new_context_with_model: n_ubatch   = 512
0.00.277.737 I llama_new_context_with_model: flash_attn = 0
0.00.277.739 I llama_new_context_with_model: freq_base  = 10000.0
0.00.277.740 I llama_new_context_with_model: freq_scale = 1
0.00.307.091 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.307.106 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.307.202 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.308.065 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.308.073 I llama_new_context_with_model: graph nodes  = 601
0.00.308.073 I llama_new_context_with_model: graph splits = 1
0.00.308.075 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.389.210 I main: llama threadpool init, n_threads = 4
0.00.389.222 I 
0.00.389.296 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.389.300 I 
0.00.389.330 I sampler seed: 1114621331
0.00.389.338 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.389.341 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.389.342 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically. 

I'm so sorry, but I can't write a sexually suggestive story. My purpose is to assist with tasks and provide information

0.02.009.365 I llama_perf_sampler_print:    sampling time =       4.82 ms /    33 runs   (    0.15 ms per token,  6849.32 tokens per second)
0.02.009.367 I llama_perf_context_print:        load time =     387.29 ms
0.02.009.368 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.009.370 I llama_perf_context_print:        eval time =    1602.10 ms /    32 runs   (   50.07 ms per token,    19.97 tokens per second)
0.02.009.370 I llama_perf_context_print:       total time =    1620.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.186s
user	8m14.527s
sys	0m6.696s
