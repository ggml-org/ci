+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.637 I build: 3801 (ecd5d6b6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.855 I main: llama backend init
0.00.002.792 I main: load the model and apply lora adapter, if any
0.00.024.915 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.096 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.179 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.189 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.191 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.195 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.196 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.197 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.198 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.199 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.199 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.205 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.206 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.207 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.207 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.208 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.988 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.933 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.071 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.079 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.080 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.080 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.081 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.082 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.083 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.087 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.087 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.089 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.089 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.091 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.098 I llama_model_loader: - type  f32:   37 tensors
0.00.197.102 I llama_model_loader: - type q8_0:  127 tensors
0.00.472.544 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.473.551 I llm_load_vocab: special tokens cache size = 5
0.00.532.214 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.532.277 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.532.278 I llm_load_print_meta: arch             = gemma
0.00.532.279 I llm_load_print_meta: vocab type       = SPM
0.00.532.280 I llm_load_print_meta: n_vocab          = 256000
0.00.532.282 I llm_load_print_meta: n_merges         = 0
0.00.532.282 I llm_load_print_meta: vocab_only       = 0
0.00.532.283 I llm_load_print_meta: n_ctx_train      = 8192
0.00.532.283 I llm_load_print_meta: n_embd           = 2048
0.00.532.284 I llm_load_print_meta: n_layer          = 18
0.00.532.318 I llm_load_print_meta: n_head           = 8
0.00.532.325 I llm_load_print_meta: n_head_kv        = 1
0.00.532.325 I llm_load_print_meta: n_rot            = 256
0.00.532.326 I llm_load_print_meta: n_swa            = 0
0.00.532.326 I llm_load_print_meta: n_embd_head_k    = 256
0.00.532.326 I llm_load_print_meta: n_embd_head_v    = 256
0.00.532.331 I llm_load_print_meta: n_gqa            = 8
0.00.532.336 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.532.340 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.532.341 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.532.343 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.532.343 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.532.344 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.532.344 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.532.349 I llm_load_print_meta: n_ff             = 16384
0.00.532.350 I llm_load_print_meta: n_expert         = 0
0.00.532.350 I llm_load_print_meta: n_expert_used    = 0
0.00.532.350 I llm_load_print_meta: causal attn      = 1
0.00.532.376 I llm_load_print_meta: pooling type     = 0
0.00.532.377 I llm_load_print_meta: rope type        = 2
0.00.532.377 I llm_load_print_meta: rope scaling     = linear
0.00.532.379 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.532.380 I llm_load_print_meta: freq_scale_train = 1
0.00.532.380 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.532.380 I llm_load_print_meta: rope_finetuned   = unknown
0.00.532.381 I llm_load_print_meta: ssm_d_conv       = 0
0.00.532.381 I llm_load_print_meta: ssm_d_inner      = 0
0.00.532.382 I llm_load_print_meta: ssm_d_state      = 0
0.00.532.383 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.532.383 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.532.384 I llm_load_print_meta: model type       = 2B
0.00.532.393 I llm_load_print_meta: model ftype      = Q8_0
0.00.532.395 I llm_load_print_meta: model params     = 2.51 B
0.00.532.396 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.532.404 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.532.406 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.532.407 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.532.407 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.532.408 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.532.408 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.532.409 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.532.409 I llm_load_print_meta: max token length = 93
0.00.532.609 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.632.379 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.632.392 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.632.393 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.632.393 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.632.394 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.632.395 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.638.050 I llama_new_context_with_model: n_ctx      = 8192
0.00.638.057 I llama_new_context_with_model: n_batch    = 2048
0.00.638.057 I llama_new_context_with_model: n_ubatch   = 512
0.00.638.058 I llama_new_context_with_model: flash_attn = 0
0.00.638.061 I llama_new_context_with_model: freq_base  = 10000.0
0.00.638.062 I llama_new_context_with_model: freq_scale = 1
0.00.667.437 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.667.479 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.667.597 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.669.011 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.669.017 I llama_new_context_with_model: graph nodes  = 601
0.00.669.018 I llama_new_context_with_model: graph splits = 1
0.00.669.034 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.282.327 I main: llama threadpool init, n_threads = 4
0.01.282.339 I 
0.01.282.434 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.282.438 I 
0.01.282.602 I sampler seed: 3790622823
0.01.282.612 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.282.616 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.282.617 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities!

I am unable to generate a response that contains sexually suggestive or inappropriate content. [end of text]


0.09.727.983 I llama_perf_sampler_print:    sampling time =      29.97 ms /    21 runs   (    1.43 ms per token,   700.72 tokens per second)
0.09.728.001 I llama_perf_context_print:        load time =    1279.45 ms
0.09.728.003 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.728.005 I llama_perf_context_print:        eval time =    8394.69 ms /    20 runs   (  419.73 ms per token,     2.38 tokens per second)
0.09.728.006 I llama_perf_context_print:       total time =    8445.67 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.626 I build: 3801 (ecd5d6b6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.002.786 I main: load the model and apply lora adapter, if any
0.00.027.953 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.028.045 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.028.059 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.028.061 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.028.065 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.028.066 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.028.066 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.028.068 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.028.069 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.028.078 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.028.084 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.028.085 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.028.086 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.028.087 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.028.088 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.098.068 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.188.164 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.200.348 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.200.356 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.200.357 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.200.358 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.200.359 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.200.360 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.200.361 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.200.364 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.200.365 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.200.366 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.200.366 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.200.367 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.200.375 I llama_model_loader: - type  f32:   37 tensors
0.00.200.380 I llama_model_loader: - type q8_0:  127 tensors
0.00.483.282 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.484.319 I llm_load_vocab: special tokens cache size = 5
0.00.542.920 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.542.980 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.542.981 I llm_load_print_meta: arch             = gemma
0.00.542.981 I llm_load_print_meta: vocab type       = SPM
0.00.542.982 I llm_load_print_meta: n_vocab          = 256000
0.00.542.985 I llm_load_print_meta: n_merges         = 0
0.00.542.986 I llm_load_print_meta: vocab_only       = 0
0.00.542.986 I llm_load_print_meta: n_ctx_train      = 8192
0.00.542.986 I llm_load_print_meta: n_embd           = 2048
0.00.542.987 I llm_load_print_meta: n_layer          = 18
0.00.543.022 I llm_load_print_meta: n_head           = 8
0.00.543.029 I llm_load_print_meta: n_head_kv        = 1
0.00.543.029 I llm_load_print_meta: n_rot            = 256
0.00.543.030 I llm_load_print_meta: n_swa            = 0
0.00.543.030 I llm_load_print_meta: n_embd_head_k    = 256
0.00.543.030 I llm_load_print_meta: n_embd_head_v    = 256
0.00.543.035 I llm_load_print_meta: n_gqa            = 8
0.00.543.040 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.543.045 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.543.046 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.543.048 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.543.048 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.543.048 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.543.049 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.543.069 I llm_load_print_meta: n_ff             = 16384
0.00.543.071 I llm_load_print_meta: n_expert         = 0
0.00.543.071 I llm_load_print_meta: n_expert_used    = 0
0.00.543.072 I llm_load_print_meta: causal attn      = 1
0.00.543.072 I llm_load_print_meta: pooling type     = 0
0.00.543.072 I llm_load_print_meta: rope type        = 2
0.00.543.073 I llm_load_print_meta: rope scaling     = linear
0.00.543.074 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.543.075 I llm_load_print_meta: freq_scale_train = 1
0.00.543.076 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.543.076 I llm_load_print_meta: rope_finetuned   = unknown
0.00.543.076 I llm_load_print_meta: ssm_d_conv       = 0
0.00.543.076 I llm_load_print_meta: ssm_d_inner      = 0
0.00.543.077 I llm_load_print_meta: ssm_d_state      = 0
0.00.543.077 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.543.077 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.543.078 I llm_load_print_meta: model type       = 2B
0.00.543.079 I llm_load_print_meta: model ftype      = Q8_0
0.00.543.080 I llm_load_print_meta: model params     = 2.51 B
0.00.543.081 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.543.081 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.543.082 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.543.082 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.543.082 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.543.083 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.543.084 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.543.084 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.543.084 I llm_load_print_meta: max token length = 93
0.00.543.266 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.636.741 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.642.414 I llama_new_context_with_model: n_ctx      = 8192
0.00.642.421 I llama_new_context_with_model: n_batch    = 2048
0.00.642.422 I llama_new_context_with_model: n_ubatch   = 512
0.00.642.422 I llama_new_context_with_model: flash_attn = 0
0.00.642.425 I llama_new_context_with_model: freq_base  = 10000.0
0.00.642.426 I llama_new_context_with_model: freq_scale = 1
0.00.673.933 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.673.978 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.674.094 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.675.464 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.675.470 I llama_new_context_with_model: graph nodes  = 601
0.00.675.470 I llama_new_context_with_model: graph splits = 1
0.00.675.487 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.286.738 I main: llama threadpool init, n_threads = 4
0.01.286.750 I 
0.01.286.842 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.286.846 I 
0.01.287.006 I sampler seed: 3274558800
0.01.287.018 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.287.023 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.287.024 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities. [end of text]


0.02.969.076 I llama_perf_sampler_print:    sampling time =       6.09 ms /     5 runs   (    1.22 ms per token,   821.29 tokens per second)
0.02.969.078 I llama_perf_context_print:        load time =    1283.87 ms
0.02.969.080 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.969.081 I llama_perf_context_print:        eval time =    1670.72 ms /     4 runs   (  417.68 ms per token,     2.39 tokens per second)
0.02.969.082 I llama_perf_context_print:       total time =    1682.35 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.659 I build: 3801 (ecd5d6b6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.865 I main: llama backend init
0.00.002.803 I main: load the model and apply lora adapter, if any
0.00.030.228 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.030.419 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.030.506 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.517 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.518 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.522 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.523 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.524 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.525 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.525 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.526 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.532 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.534 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.535 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.538 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.539 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.100.611 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.197.141 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.209.260 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.209.269 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.209.270 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.209.271 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.209.272 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.209.273 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.209.274 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.209.277 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.209.278 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.209.279 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.209.280 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.209.281 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.209.290 I llama_model_loader: - type  f32:   37 tensors
0.00.209.295 I llama_model_loader: - type q8_0:  127 tensors
0.00.484.859 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.485.866 I llm_load_vocab: special tokens cache size = 5
0.00.544.446 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.544.506 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.544.507 I llm_load_print_meta: arch             = gemma
0.00.544.507 I llm_load_print_meta: vocab type       = SPM
0.00.544.508 I llm_load_print_meta: n_vocab          = 256000
0.00.544.511 I llm_load_print_meta: n_merges         = 0
0.00.544.511 I llm_load_print_meta: vocab_only       = 0
0.00.544.512 I llm_load_print_meta: n_ctx_train      = 8192
0.00.544.512 I llm_load_print_meta: n_embd           = 2048
0.00.544.512 I llm_load_print_meta: n_layer          = 18
0.00.544.548 I llm_load_print_meta: n_head           = 8
0.00.544.554 I llm_load_print_meta: n_head_kv        = 1
0.00.544.555 I llm_load_print_meta: n_rot            = 256
0.00.544.555 I llm_load_print_meta: n_swa            = 0
0.00.544.555 I llm_load_print_meta: n_embd_head_k    = 256
0.00.544.556 I llm_load_print_meta: n_embd_head_v    = 256
0.00.544.560 I llm_load_print_meta: n_gqa            = 8
0.00.544.565 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.544.570 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.544.571 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.544.572 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.544.573 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.544.573 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.544.574 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.544.578 I llm_load_print_meta: n_ff             = 16384
0.00.544.579 I llm_load_print_meta: n_expert         = 0
0.00.544.579 I llm_load_print_meta: n_expert_used    = 0
0.00.544.580 I llm_load_print_meta: causal attn      = 1
0.00.544.580 I llm_load_print_meta: pooling type     = 0
0.00.544.580 I llm_load_print_meta: rope type        = 2
0.00.544.581 I llm_load_print_meta: rope scaling     = linear
0.00.544.582 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.544.582 I llm_load_print_meta: freq_scale_train = 1
0.00.544.583 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.544.583 I llm_load_print_meta: rope_finetuned   = unknown
0.00.544.583 I llm_load_print_meta: ssm_d_conv       = 0
0.00.544.583 I llm_load_print_meta: ssm_d_inner      = 0
0.00.544.584 I llm_load_print_meta: ssm_d_state      = 0
0.00.544.584 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.544.584 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.544.585 I llm_load_print_meta: model type       = 2B
0.00.544.586 I llm_load_print_meta: model ftype      = Q8_0
0.00.544.587 I llm_load_print_meta: model params     = 2.51 B
0.00.544.587 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.544.588 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.544.588 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.544.589 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.544.589 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.544.590 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.544.590 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.544.591 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.544.591 I llm_load_print_meta: max token length = 93
0.00.544.768 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.621.937 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.621.947 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.621.948 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.621.949 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.621.949 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.621.950 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.627.602 I llama_new_context_with_model: n_ctx      = 8192
0.00.627.610 I llama_new_context_with_model: n_batch    = 2048
0.00.627.610 I llama_new_context_with_model: n_ubatch   = 512
0.00.627.611 I llama_new_context_with_model: flash_attn = 0
0.00.627.614 I llama_new_context_with_model: freq_base  = 10000.0
0.00.627.615 I llama_new_context_with_model: freq_scale = 1
0.00.658.626 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.658.668 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.658.782 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.660.198 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.660.204 I llama_new_context_with_model: graph nodes  = 601
0.00.660.205 I llama_new_context_with_model: graph splits = 1
0.00.660.220 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.282.244 I main: llama threadpool init, n_threads = 4
0.01.282.256 I 
0.01.282.347 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.282.351 I 
0.01.282.516 I sampler seed: 4256892038
0.01.282.527 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.282.532 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.282.534 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably.

I understand. I will respond accordingly. [end of text]


0.06.857.587 I llama_perf_sampler_print:    sampling time =      19.57 ms /    14 runs   (    1.40 ms per token,   715.38 tokens per second)
0.06.857.590 I llama_perf_context_print:        load time =    1279.36 ms
0.06.857.591 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.857.612 I llama_perf_context_print:        eval time =    5541.35 ms /    13 runs   (  426.26 ms per token,     2.35 tokens per second)
0.06.857.613 I llama_perf_context_print:       total time =    5575.35 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.621 I build: 3801 (ecd5d6b6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.002.819 I main: load the model and apply lora adapter, if any
0.00.024.639 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.818 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.916 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.928 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.929 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.933 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.934 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.934 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.935 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.936 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.937 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.944 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.949 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.950 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.951 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.953 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.685 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.044 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.155 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.173 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.174 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.175 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.176 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.177 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.178 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.180 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.181 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.182 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.183 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.198.184 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.192 I llama_model_loader: - type  f32:   37 tensors
0.00.198.196 I llama_model_loader: - type q8_0:  127 tensors
0.00.473.907 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.474.934 I llm_load_vocab: special tokens cache size = 5
0.00.533.726 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.533.790 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.533.795 I llm_load_print_meta: arch             = gemma
0.00.533.796 I llm_load_print_meta: vocab type       = SPM
0.00.533.797 I llm_load_print_meta: n_vocab          = 256000
0.00.533.800 I llm_load_print_meta: n_merges         = 0
0.00.533.801 I llm_load_print_meta: vocab_only       = 0
0.00.533.801 I llm_load_print_meta: n_ctx_train      = 8192
0.00.533.803 I llm_load_print_meta: n_embd           = 2048
0.00.533.804 I llm_load_print_meta: n_layer          = 18
0.00.533.843 I llm_load_print_meta: n_head           = 8
0.00.533.853 I llm_load_print_meta: n_head_kv        = 1
0.00.533.854 I llm_load_print_meta: n_rot            = 256
0.00.533.855 I llm_load_print_meta: n_swa            = 0
0.00.533.855 I llm_load_print_meta: n_embd_head_k    = 256
0.00.533.855 I llm_load_print_meta: n_embd_head_v    = 256
0.00.533.860 I llm_load_print_meta: n_gqa            = 8
0.00.533.865 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.533.869 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.533.871 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.533.872 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.533.872 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.533.873 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.533.882 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.533.892 I llm_load_print_meta: n_ff             = 16384
0.00.533.895 I llm_load_print_meta: n_expert         = 0
0.00.533.896 I llm_load_print_meta: n_expert_used    = 0
0.00.533.896 I llm_load_print_meta: causal attn      = 1
0.00.533.897 I llm_load_print_meta: pooling type     = 0
0.00.533.897 I llm_load_print_meta: rope type        = 2
0.00.533.898 I llm_load_print_meta: rope scaling     = linear
0.00.533.910 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.533.911 I llm_load_print_meta: freq_scale_train = 1
0.00.533.912 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.533.912 I llm_load_print_meta: rope_finetuned   = unknown
0.00.533.913 I llm_load_print_meta: ssm_d_conv       = 0
0.00.533.913 I llm_load_print_meta: ssm_d_inner      = 0
0.00.533.914 I llm_load_print_meta: ssm_d_state      = 0
0.00.533.914 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.533.917 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.533.918 I llm_load_print_meta: model type       = 2B
0.00.533.919 I llm_load_print_meta: model ftype      = Q8_0
0.00.533.919 I llm_load_print_meta: model params     = 2.51 B
0.00.533.920 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.533.921 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.533.921 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.533.922 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.533.922 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.533.923 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.533.923 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.533.924 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.533.925 I llm_load_print_meta: max token length = 93
0.00.534.106 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.605.355 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.605.365 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.611.209 I llama_new_context_with_model: n_ctx      = 8192
0.00.611.216 I llama_new_context_with_model: n_batch    = 2048
0.00.611.217 I llama_new_context_with_model: n_ubatch   = 512
0.00.611.217 I llama_new_context_with_model: flash_attn = 0
0.00.611.220 I llama_new_context_with_model: freq_base  = 10000.0
0.00.611.220 I llama_new_context_with_model: freq_scale = 1
0.00.641.065 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.641.110 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.641.234 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.642.644 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.642.651 I llama_new_context_with_model: graph nodes  = 601
0.00.642.652 I llama_new_context_with_model: graph splits = 1
0.00.642.673 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.299.993 I main: llama threadpool init, n_threads = 4
0.01.300.005 I 
0.01.300.100 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.300.104 I 
0.01.300.266 I sampler seed: 1529514838
0.01.300.278 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.300.282 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.300.282 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably.

I understand that the following sentences are in a comical tone:

- "The world is a terrible place."
- "People are mean

0.14.816.923 I llama_perf_sampler_print:    sampling time =      48.03 ms /    33 runs   (    1.46 ms per token,   687.08 tokens per second)
0.14.816.926 I llama_perf_context_print:        load time =    1297.09 ms
0.14.816.927 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.816.929 I llama_perf_context_print:        eval time =   13436.36 ms /    32 runs   (  419.89 ms per token,     2.38 tokens per second)
0.14.816.930 I llama_perf_context_print:       total time =   13516.94 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m43.854s
user	2m9.449s
sys	0m9.365s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3801 (ecd5d6b6)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199821.12 ms
main:    total time = 199821.12 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.650 I build: 3801 (ecd5d6b6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.868 I main: llama backend init
0.00.002.830 I main: load the model and apply lora adapter, if any
0.00.024.534 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.726 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.816 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.828 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.830 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.834 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.839 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.840 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.841 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.843 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.848 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.859 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.860 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.862 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.864 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.865 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.599 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.398 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.672 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.679 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.680 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.681 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.682 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.683 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.684 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.687 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.688 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.689 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.689 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.690 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.698 I llama_model_loader: - type  f32:   37 tensors
0.00.196.701 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.702 I llama_model_loader: - type q6_K:   19 tensors
0.00.463.924 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.464.953 I llm_load_vocab: special tokens cache size = 5
0.00.523.413 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.523.469 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.523.470 I llm_load_print_meta: arch             = gemma
0.00.523.471 I llm_load_print_meta: vocab type       = SPM
0.00.523.471 I llm_load_print_meta: n_vocab          = 256000
0.00.523.474 I llm_load_print_meta: n_merges         = 0
0.00.523.474 I llm_load_print_meta: vocab_only       = 0
0.00.523.475 I llm_load_print_meta: n_ctx_train      = 8192
0.00.523.475 I llm_load_print_meta: n_embd           = 2048
0.00.523.475 I llm_load_print_meta: n_layer          = 18
0.00.523.507 I llm_load_print_meta: n_head           = 8
0.00.523.513 I llm_load_print_meta: n_head_kv        = 1
0.00.523.514 I llm_load_print_meta: n_rot            = 256
0.00.523.514 I llm_load_print_meta: n_swa            = 0
0.00.523.515 I llm_load_print_meta: n_embd_head_k    = 256
0.00.523.515 I llm_load_print_meta: n_embd_head_v    = 256
0.00.523.520 I llm_load_print_meta: n_gqa            = 8
0.00.523.524 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.523.529 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.523.530 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.523.531 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.523.532 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.523.532 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.523.532 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.523.539 I llm_load_print_meta: n_ff             = 16384
0.00.523.539 I llm_load_print_meta: n_expert         = 0
0.00.523.540 I llm_load_print_meta: n_expert_used    = 0
0.00.523.542 I llm_load_print_meta: causal attn      = 1
0.00.523.543 I llm_load_print_meta: pooling type     = 0
0.00.523.544 I llm_load_print_meta: rope type        = 2
0.00.523.544 I llm_load_print_meta: rope scaling     = linear
0.00.523.546 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.523.547 I llm_load_print_meta: freq_scale_train = 1
0.00.523.549 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.523.549 I llm_load_print_meta: rope_finetuned   = unknown
0.00.523.550 I llm_load_print_meta: ssm_d_conv       = 0
0.00.523.559 I llm_load_print_meta: ssm_d_inner      = 0
0.00.523.564 I llm_load_print_meta: ssm_d_state      = 0
0.00.523.564 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.523.565 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.523.566 I llm_load_print_meta: model type       = 2B
0.00.523.567 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.523.569 I llm_load_print_meta: model params     = 2.51 B
0.00.523.571 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.523.572 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.523.573 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.523.574 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.523.578 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.523.578 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.523.579 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.523.580 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.523.581 I llm_load_print_meta: max token length = 93
0.00.523.769 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.583.644 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.583.652 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.583.652 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.583.653 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.583.654 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.583.654 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.589.407 I llama_new_context_with_model: n_ctx      = 8192
0.00.589.414 I llama_new_context_with_model: n_batch    = 2048
0.00.589.414 I llama_new_context_with_model: n_ubatch   = 512
0.00.589.415 I llama_new_context_with_model: flash_attn = 0
0.00.589.418 I llama_new_context_with_model: freq_base  = 10000.0
0.00.589.418 I llama_new_context_with_model: freq_scale = 1
0.00.619.137 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.619.180 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.619.293 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.620.659 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.620.667 I llama_new_context_with_model: graph nodes  = 601
0.00.620.667 I llama_new_context_with_model: graph splits = 1
0.00.620.685 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.201.079 I main: llama threadpool init, n_threads = 4
0.01.201.091 I 
0.01.201.193 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.201.197 I 
0.01.201.363 I sampler seed: 3027316890
0.01.201.373 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.201.380 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.201.381 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally to the question.

The question asks to describe the features of the question. What information is contained within the question?

Please provide a detailed and

0.12.189.047 I llama_perf_sampler_print:    sampling time =      48.11 ms /    33 runs   (    1.46 ms per token,   685.87 tokens per second)
0.12.189.050 I llama_perf_context_print:        load time =    1198.17 ms
0.12.189.052 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.189.066 I llama_perf_context_print:        eval time =   10906.28 ms /    32 runs   (  340.82 ms per token,     2.93 tokens per second)
0.12.189.067 I llama_perf_context_print:       total time =   10987.98 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3801 (ecd5d6b6)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199823.50 ms
main:    total time = 199823.50 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.609 I build: 3801 (ecd5d6b6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.813 I main: llama backend init
0.00.002.750 I main: load the model and apply lora adapter, if any
0.00.024.590 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.677 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.690 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.691 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.694 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.695 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.696 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.697 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.699 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.707 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.713 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.714 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.715 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.716 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.717 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.433 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.477 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.582 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.590 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.591 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.592 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.592 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.594 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.594 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.597 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.598 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.606 I llama_model_loader: - type  f32:   37 tensors
0.00.196.610 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.611 I llama_model_loader: - type q6_K:   19 tensors
0.00.474.416 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.475.463 I llm_load_vocab: special tokens cache size = 5
0.00.533.841 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.533.897 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.533.898 I llm_load_print_meta: arch             = gemma
0.00.533.899 I llm_load_print_meta: vocab type       = SPM
0.00.533.900 I llm_load_print_meta: n_vocab          = 256000
0.00.533.902 I llm_load_print_meta: n_merges         = 0
0.00.533.903 I llm_load_print_meta: vocab_only       = 0
0.00.533.904 I llm_load_print_meta: n_ctx_train      = 8192
0.00.533.904 I llm_load_print_meta: n_embd           = 2048
0.00.533.904 I llm_load_print_meta: n_layer          = 18
0.00.533.938 I llm_load_print_meta: n_head           = 8
0.00.533.956 I llm_load_print_meta: n_head_kv        = 1
0.00.533.957 I llm_load_print_meta: n_rot            = 256
0.00.533.957 I llm_load_print_meta: n_swa            = 0
0.00.533.958 I llm_load_print_meta: n_embd_head_k    = 256
0.00.533.958 I llm_load_print_meta: n_embd_head_v    = 256
0.00.533.963 I llm_load_print_meta: n_gqa            = 8
0.00.533.968 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.533.973 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.533.978 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.533.980 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.533.981 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.533.981 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.533.981 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.533.986 I llm_load_print_meta: n_ff             = 16384
0.00.533.986 I llm_load_print_meta: n_expert         = 0
0.00.533.987 I llm_load_print_meta: n_expert_used    = 0
0.00.533.987 I llm_load_print_meta: causal attn      = 1
0.00.533.999 I llm_load_print_meta: pooling type     = 0
0.00.534.000 I llm_load_print_meta: rope type        = 2
0.00.534.001 I llm_load_print_meta: rope scaling     = linear
0.00.534.002 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.534.003 I llm_load_print_meta: freq_scale_train = 1
0.00.534.004 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.534.004 I llm_load_print_meta: rope_finetuned   = unknown
0.00.534.005 I llm_load_print_meta: ssm_d_conv       = 0
0.00.534.006 I llm_load_print_meta: ssm_d_inner      = 0
0.00.534.006 I llm_load_print_meta: ssm_d_state      = 0
0.00.534.007 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.534.007 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.534.008 I llm_load_print_meta: model type       = 2B
0.00.534.010 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.534.011 I llm_load_print_meta: model params     = 2.51 B
0.00.534.012 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.534.012 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.534.013 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.534.013 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.534.014 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.534.014 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.534.014 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.534.022 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.534.029 I llm_load_print_meta: max token length = 93
0.00.534.211 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.591.891 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.597.420 I llama_new_context_with_model: n_ctx      = 8192
0.00.597.426 I llama_new_context_with_model: n_batch    = 2048
0.00.597.427 I llama_new_context_with_model: n_ubatch   = 512
0.00.597.427 I llama_new_context_with_model: flash_attn = 0
0.00.597.430 I llama_new_context_with_model: freq_base  = 10000.0
0.00.597.431 I llama_new_context_with_model: freq_scale = 1
0.00.627.491 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.627.530 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.627.642 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.628.962 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.628.969 I llama_new_context_with_model: graph nodes  = 601
0.00.628.969 I llama_new_context_with_model: graph splits = 1
0.00.628.985 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.209.048 I main: llama threadpool init, n_threads = 4
0.01.209.058 I 
0.01.209.153 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.209.158 I 
0.01.209.318 I sampler seed: 409911826
0.01.209.329 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.209.335 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.209.336 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 squaRED!

## The Ballad of Squeaky Wheels: A Journey of Resilience

**Verse 1: The Humble Beginnings**

Squeaky Wheels, born

0.12.151.345 I llama_perf_sampler_print:    sampling time =      48.02 ms /    33 runs   (    1.46 ms per token,   687.23 tokens per second)
0.12.151.358 I llama_perf_context_print:        load time =    1206.22 ms
0.12.151.360 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.151.363 I llama_perf_context_print:        eval time =   10861.78 ms /    32 runs   (  339.43 ms per token,     2.95 tokens per second)
0.12.151.364 I llama_perf_context_print:       total time =   10942.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.785s
user	50m20.453s
sys	0m6.429s
