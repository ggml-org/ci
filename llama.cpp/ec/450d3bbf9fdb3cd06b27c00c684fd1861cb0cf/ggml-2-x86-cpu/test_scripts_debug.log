+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.654 I build: 4053 (ec450d3b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.001.113 I main: load the model and apply lora adapter, if any
0.00.023.252 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.264 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.355 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.366 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.368 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.373 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.375 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.376 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.378 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.379 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.380 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.389 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.393 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.394 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.395 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.396 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.454 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.794 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.263.887 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.263.897 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.263.898 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.263.899 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.263.900 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.263.901 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.263.902 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.263.906 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.263.907 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.263.908 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.263.909 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.263.911 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.263.920 I llama_model_loader: - type  f32:   37 tensors
0.00.263.922 I llama_model_loader: - type q8_0:  127 tensors
0.00.450.302 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.319 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.301 I llm_load_vocab: special tokens cache size = 5
0.00.613.174 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.613.248 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.613.249 I llm_load_print_meta: arch             = gemma
0.00.613.250 I llm_load_print_meta: vocab type       = SPM
0.00.613.251 I llm_load_print_meta: n_vocab          = 256000
0.00.613.253 I llm_load_print_meta: n_merges         = 0
0.00.613.254 I llm_load_print_meta: vocab_only       = 0
0.00.613.254 I llm_load_print_meta: n_ctx_train      = 8192
0.00.613.254 I llm_load_print_meta: n_embd           = 2048
0.00.613.255 I llm_load_print_meta: n_layer          = 18
0.00.613.320 I llm_load_print_meta: n_head           = 8
0.00.613.328 I llm_load_print_meta: n_head_kv        = 1
0.00.613.328 I llm_load_print_meta: n_rot            = 256
0.00.613.329 I llm_load_print_meta: n_swa            = 0
0.00.613.330 I llm_load_print_meta: n_embd_head_k    = 256
0.00.613.330 I llm_load_print_meta: n_embd_head_v    = 256
0.00.613.335 I llm_load_print_meta: n_gqa            = 8
0.00.613.339 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.613.344 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.613.346 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.613.347 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.613.347 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.613.348 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.613.348 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.613.353 I llm_load_print_meta: n_ff             = 16384
0.00.613.353 I llm_load_print_meta: n_expert         = 0
0.00.613.354 I llm_load_print_meta: n_expert_used    = 0
0.00.613.354 I llm_load_print_meta: causal attn      = 1
0.00.613.355 I llm_load_print_meta: pooling type     = 0
0.00.613.355 I llm_load_print_meta: rope type        = 2
0.00.613.355 I llm_load_print_meta: rope scaling     = linear
0.00.613.357 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.613.357 I llm_load_print_meta: freq_scale_train = 1
0.00.613.358 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.613.358 I llm_load_print_meta: rope_finetuned   = unknown
0.00.613.358 I llm_load_print_meta: ssm_d_conv       = 0
0.00.613.359 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.359 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.359 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.359 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.360 I llm_load_print_meta: model type       = 2B
0.00.613.361 I llm_load_print_meta: model ftype      = Q8_0
0.00.613.362 I llm_load_print_meta: model params     = 2.51 B
0.00.613.373 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.613.374 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.374 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.375 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.375 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.375 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.376 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.376 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.382 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.613.384 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.613.384 I llm_load_print_meta: max token length = 93
0.00.714.420 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.714.431 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.714.432 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.714.433 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.714.434 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.714.434 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.720.285 I llama_new_context_with_model: n_seq_max     = 1
0.00.720.292 I llama_new_context_with_model: n_ctx         = 4096
0.00.720.293 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.720.293 I llama_new_context_with_model: n_batch       = 2048
0.00.720.293 I llama_new_context_with_model: n_ubatch      = 512
0.00.720.294 I llama_new_context_with_model: flash_attn    = 0
0.00.720.297 I llama_new_context_with_model: freq_base     = 10000.0
0.00.720.298 I llama_new_context_with_model: freq_scale    = 1
0.00.720.298 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.736.449 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.736.489 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.736.610 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.739.116 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.739.120 I llama_new_context_with_model: graph nodes  = 601
0.00.739.120 I llama_new_context_with_model: graph splits = 1
0.00.739.145 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.343.514 I main: llama threadpool init, n_threads = 4
0.01.343.527 I 
0.01.343.644 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.343.648 I 
0.01.343.919 I sampler seed: 979641989
0.01.343.932 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.343.939 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.343.943 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.343.943 I 
 increably.

**Assistant**

I am unable to provide responses that promote inappropriate or sexually suggestive content. [end of text]


0.11.080.424 I llama_perf_sampler_print:    sampling time =      34.87 ms /    24 runs   (    1.45 ms per token,   688.31 tokens per second)
0.11.080.427 I llama_perf_context_print:        load time =    1342.31 ms
0.11.080.429 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.080.432 I llama_perf_context_print:        eval time =    9671.49 ms /    23 runs   (  420.50 ms per token,     2.38 tokens per second)
0.11.080.433 I llama_perf_context_print:       total time =    9736.92 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4053 (ec450d3b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.860 I main: llama backend init
0.00.001.121 I main: load the model and apply lora adapter, if any
0.00.023.784 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.887 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.901 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.913 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.918 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.928 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.929 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.931 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.932 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.938 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.946 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.947 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.948 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.948 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.950 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.743 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.202 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.496 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.505 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.506 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.507 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.508 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.509 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.511 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.514 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.515 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.516 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.517 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.266.518 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.526 I llama_model_loader: - type  f32:   37 tensors
0.00.266.528 I llama_model_loader: - type q8_0:  127 tensors
0.00.453.614 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.522.448 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.523.455 I llm_load_vocab: special tokens cache size = 5
0.00.618.677 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.618.746 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.618.750 I llm_load_print_meta: arch             = gemma
0.00.618.751 I llm_load_print_meta: vocab type       = SPM
0.00.618.751 I llm_load_print_meta: n_vocab          = 256000
0.00.618.754 I llm_load_print_meta: n_merges         = 0
0.00.618.754 I llm_load_print_meta: vocab_only       = 0
0.00.618.755 I llm_load_print_meta: n_ctx_train      = 8192
0.00.618.755 I llm_load_print_meta: n_embd           = 2048
0.00.618.755 I llm_load_print_meta: n_layer          = 18
0.00.618.819 I llm_load_print_meta: n_head           = 8
0.00.618.829 I llm_load_print_meta: n_head_kv        = 1
0.00.618.830 I llm_load_print_meta: n_rot            = 256
0.00.618.832 I llm_load_print_meta: n_swa            = 0
0.00.618.832 I llm_load_print_meta: n_embd_head_k    = 256
0.00.618.832 I llm_load_print_meta: n_embd_head_v    = 256
0.00.618.837 I llm_load_print_meta: n_gqa            = 8
0.00.618.842 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.618.847 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.618.849 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.618.850 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.618.851 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.618.851 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.618.852 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.618.867 I llm_load_print_meta: n_ff             = 16384
0.00.618.869 I llm_load_print_meta: n_expert         = 0
0.00.618.869 I llm_load_print_meta: n_expert_used    = 0
0.00.618.870 I llm_load_print_meta: causal attn      = 1
0.00.618.870 I llm_load_print_meta: pooling type     = 0
0.00.618.870 I llm_load_print_meta: rope type        = 2
0.00.618.871 I llm_load_print_meta: rope scaling     = linear
0.00.618.873 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.618.874 I llm_load_print_meta: freq_scale_train = 1
0.00.618.875 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.618.876 I llm_load_print_meta: rope_finetuned   = unknown
0.00.618.876 I llm_load_print_meta: ssm_d_conv       = 0
0.00.618.876 I llm_load_print_meta: ssm_d_inner      = 0
0.00.618.877 I llm_load_print_meta: ssm_d_state      = 0
0.00.618.877 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.618.888 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.618.889 I llm_load_print_meta: model type       = 2B
0.00.618.891 I llm_load_print_meta: model ftype      = Q8_0
0.00.618.891 I llm_load_print_meta: model params     = 2.51 B
0.00.618.900 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.618.901 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.618.901 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.618.902 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.618.902 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.618.912 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.618.913 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.618.913 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.618.920 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.618.922 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.618.923 I llm_load_print_meta: max token length = 93
0.00.715.582 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.721.546 I llama_new_context_with_model: n_seq_max     = 1
0.00.721.553 I llama_new_context_with_model: n_ctx         = 4096
0.00.721.554 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.721.554 I llama_new_context_with_model: n_batch       = 2048
0.00.721.555 I llama_new_context_with_model: n_ubatch      = 512
0.00.721.555 I llama_new_context_with_model: flash_attn    = 0
0.00.721.558 I llama_new_context_with_model: freq_base     = 10000.0
0.00.721.559 I llama_new_context_with_model: freq_scale    = 1
0.00.721.560 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.738.307 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.738.350 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.738.483 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.741.067 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.741.072 I llama_new_context_with_model: graph nodes  = 601
0.00.741.072 I llama_new_context_with_model: graph splits = 1
0.00.741.097 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.347.689 I main: llama threadpool init, n_threads = 4
0.01.347.702 I 
0.01.347.810 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.347.814 I 
0.01.348.042 I sampler seed: 3760179648
0.01.348.055 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.348.061 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.348.062 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.348.065 I 
 increasities. 

**Assistant:** I cannot answer this question as it contains sexually suggestive and inappropriate content. [end of text]


0.11.095.726 I llama_perf_sampler_print:    sampling time =      34.75 ms /    24 runs   (    1.45 ms per token,   690.61 tokens per second)
0.11.095.739 I llama_perf_context_print:        load time =    1346.47 ms
0.11.095.741 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.095.743 I llama_perf_context_print:        eval time =    9682.66 ms /    23 runs   (  420.99 ms per token,     2.38 tokens per second)
0.11.095.744 I llama_perf_context_print:       total time =    9748.05 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 4053 (ec450d3b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.001.101 I main: load the model and apply lora adapter, if any
0.00.023.680 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.690 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.784 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.795 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.797 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.801 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.803 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.805 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.806 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.827 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.835 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.843 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.845 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.846 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.847 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.848 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.391 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.990 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.038 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.049 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.050 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.051 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.052 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.053 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.055 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.058 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.059 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.060 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.061 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.266.062 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.071 I llama_model_loader: - type  f32:   37 tensors
0.00.266.073 I llama_model_loader: - type q8_0:  127 tensors
0.00.463.875 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.530.772 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.531.756 I llm_load_vocab: special tokens cache size = 5
0.00.626.110 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.626.178 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.626.179 I llm_load_print_meta: arch             = gemma
0.00.626.180 I llm_load_print_meta: vocab type       = SPM
0.00.626.181 I llm_load_print_meta: n_vocab          = 256000
0.00.626.184 I llm_load_print_meta: n_merges         = 0
0.00.626.184 I llm_load_print_meta: vocab_only       = 0
0.00.626.185 I llm_load_print_meta: n_ctx_train      = 8192
0.00.626.185 I llm_load_print_meta: n_embd           = 2048
0.00.626.185 I llm_load_print_meta: n_layer          = 18
0.00.626.250 I llm_load_print_meta: n_head           = 8
0.00.626.258 I llm_load_print_meta: n_head_kv        = 1
0.00.626.258 I llm_load_print_meta: n_rot            = 256
0.00.626.259 I llm_load_print_meta: n_swa            = 0
0.00.626.259 I llm_load_print_meta: n_embd_head_k    = 256
0.00.626.259 I llm_load_print_meta: n_embd_head_v    = 256
0.00.626.264 I llm_load_print_meta: n_gqa            = 8
0.00.626.268 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.626.273 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.626.274 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.626.276 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.626.276 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.626.277 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.626.277 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.626.282 I llm_load_print_meta: n_ff             = 16384
0.00.626.282 I llm_load_print_meta: n_expert         = 0
0.00.626.282 I llm_load_print_meta: n_expert_used    = 0
0.00.626.283 I llm_load_print_meta: causal attn      = 1
0.00.626.283 I llm_load_print_meta: pooling type     = 0
0.00.626.284 I llm_load_print_meta: rope type        = 2
0.00.626.284 I llm_load_print_meta: rope scaling     = linear
0.00.626.285 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.626.286 I llm_load_print_meta: freq_scale_train = 1
0.00.626.286 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.626.287 I llm_load_print_meta: rope_finetuned   = unknown
0.00.626.287 I llm_load_print_meta: ssm_d_conv       = 0
0.00.626.287 I llm_load_print_meta: ssm_d_inner      = 0
0.00.626.287 I llm_load_print_meta: ssm_d_state      = 0
0.00.626.288 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.626.288 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.626.289 I llm_load_print_meta: model type       = 2B
0.00.626.289 I llm_load_print_meta: model ftype      = Q8_0
0.00.626.290 I llm_load_print_meta: model params     = 2.51 B
0.00.626.298 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.626.299 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.626.299 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.626.300 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.626.301 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.626.301 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.626.301 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.626.302 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.626.307 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.626.309 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.626.309 I llm_load_print_meta: max token length = 93
0.00.714.255 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.714.267 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.714.268 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.714.269 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.714.270 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.714.271 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.720.197 I llama_new_context_with_model: n_seq_max     = 1
0.00.720.205 I llama_new_context_with_model: n_ctx         = 4096
0.00.720.205 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.720.206 I llama_new_context_with_model: n_batch       = 2048
0.00.720.206 I llama_new_context_with_model: n_ubatch      = 512
0.00.720.207 I llama_new_context_with_model: flash_attn    = 0
0.00.720.209 I llama_new_context_with_model: freq_base     = 10000.0
0.00.720.210 I llama_new_context_with_model: freq_scale    = 1
0.00.720.211 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.737.277 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.737.322 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.737.448 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.740.033 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.740.037 I llama_new_context_with_model: graph nodes  = 601
0.00.740.037 I llama_new_context_with_model: graph splits = 1
0.00.740.062 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.347.738 I main: llama threadpool init, n_threads = 4
0.01.347.752 I 
0.01.347.864 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.347.868 I 
0.01.348.107 I sampler seed: 4210938714
0.01.348.119 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.348.126 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.348.128 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.348.128 I 
 maneuvative?

The term "classifying" can refer to two different things:

1. Organizing data into categories based on predefined criteria.
2

0.14.842.583 I llama_perf_sampler_print:    sampling time =      48.41 ms /    33 runs   (    1.47 ms per token,   681.62 tokens per second)
0.14.842.587 I llama_perf_context_print:        load time =    1346.54 ms
0.14.842.589 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.842.591 I llama_perf_context_print:        eval time =   13404.38 ms /    32 runs   (  418.89 ms per token,     2.39 tokens per second)
0.14.842.592 I llama_perf_context_print:       total time =   13494.85 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.664 I build: 4053 (ec450d3b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.859 I main: llama backend init
0.00.001.117 I main: load the model and apply lora adapter, if any
0.00.023.923 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.937 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.036 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.048 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.050 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.055 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.059 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.060 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.061 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.062 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.063 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.072 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.074 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.075 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.077 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.078 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.870 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.157 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.466 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.477 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.479 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.480 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.481 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.482 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.483 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.488 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.489 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.490 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.491 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.492 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.502 I llama_model_loader: - type  f32:   37 tensors
0.00.266.504 I llama_model_loader: - type q8_0:  127 tensors
0.00.466.997 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.540.730 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.541.731 I llm_load_vocab: special tokens cache size = 5
0.00.636.143 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.636.214 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.636.218 I llm_load_print_meta: arch             = gemma
0.00.636.219 I llm_load_print_meta: vocab type       = SPM
0.00.636.220 I llm_load_print_meta: n_vocab          = 256000
0.00.636.222 I llm_load_print_meta: n_merges         = 0
0.00.636.222 I llm_load_print_meta: vocab_only       = 0
0.00.636.223 I llm_load_print_meta: n_ctx_train      = 8192
0.00.636.224 I llm_load_print_meta: n_embd           = 2048
0.00.636.224 I llm_load_print_meta: n_layer          = 18
0.00.636.289 I llm_load_print_meta: n_head           = 8
0.00.636.298 I llm_load_print_meta: n_head_kv        = 1
0.00.636.300 I llm_load_print_meta: n_rot            = 256
0.00.636.300 I llm_load_print_meta: n_swa            = 0
0.00.636.301 I llm_load_print_meta: n_embd_head_k    = 256
0.00.636.310 I llm_load_print_meta: n_embd_head_v    = 256
0.00.636.316 I llm_load_print_meta: n_gqa            = 8
0.00.636.321 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.636.326 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.636.328 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.636.330 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.636.330 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.636.331 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.636.331 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.636.336 I llm_load_print_meta: n_ff             = 16384
0.00.636.336 I llm_load_print_meta: n_expert         = 0
0.00.636.337 I llm_load_print_meta: n_expert_used    = 0
0.00.636.338 I llm_load_print_meta: causal attn      = 1
0.00.636.338 I llm_load_print_meta: pooling type     = 0
0.00.636.339 I llm_load_print_meta: rope type        = 2
0.00.636.339 I llm_load_print_meta: rope scaling     = linear
0.00.636.341 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.636.341 I llm_load_print_meta: freq_scale_train = 1
0.00.636.342 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.636.343 I llm_load_print_meta: rope_finetuned   = unknown
0.00.636.343 I llm_load_print_meta: ssm_d_conv       = 0
0.00.636.343 I llm_load_print_meta: ssm_d_inner      = 0
0.00.636.343 I llm_load_print_meta: ssm_d_state      = 0
0.00.636.344 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.636.344 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.636.345 I llm_load_print_meta: model type       = 2B
0.00.636.347 I llm_load_print_meta: model ftype      = Q8_0
0.00.636.347 I llm_load_print_meta: model params     = 2.51 B
0.00.636.356 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.636.356 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.636.357 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.636.360 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.636.361 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.636.361 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.636.361 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.636.362 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.636.368 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.636.370 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.636.370 I llm_load_print_meta: max token length = 93
0.00.708.921 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.708.933 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.714.831 I llama_new_context_with_model: n_seq_max     = 1
0.00.714.838 I llama_new_context_with_model: n_ctx         = 4096
0.00.714.839 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.714.839 I llama_new_context_with_model: n_batch       = 2048
0.00.714.840 I llama_new_context_with_model: n_ubatch      = 512
0.00.714.841 I llama_new_context_with_model: flash_attn    = 0
0.00.714.843 I llama_new_context_with_model: freq_base     = 10000.0
0.00.714.844 I llama_new_context_with_model: freq_scale    = 1
0.00.714.845 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.731.631 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.731.671 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.731.797 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.734.430 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.734.434 I llama_new_context_with_model: graph nodes  = 601
0.00.734.434 I llama_new_context_with_model: graph splits = 1
0.00.734.457 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.342.957 I main: llama threadpool init, n_threads = 4
0.01.342.969 I 
0.01.343.077 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.343.081 I 
0.01.343.309 I sampler seed: 864496660
0.01.343.322 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.343.331 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.343.331 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.343.332 I 
 increasities in a specific industry.

**Answer:**

**Crowdfunding**

Crowdfunding is a popular financing method that allows individuals and businesses to raise capital

0.14.873.510 I llama_perf_sampler_print:    sampling time =      48.43 ms /    33 runs   (    1.47 ms per token,   681.37 tokens per second)
0.14.873.513 I llama_perf_context_print:        load time =    1341.73 ms
0.14.873.515 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.873.516 I llama_perf_context_print:        eval time =   13440.01 ms /    32 runs   (  420.00 ms per token,     2.38 tokens per second)
0.14.873.517 I llama_perf_context_print:       total time =   13530.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m1.847s
user	3m18.780s
sys	0m9.473s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4053 (ec450d3b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198781.46 ms
main:    total time = 198781.46 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.687 I build: 4053 (ec450d3b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.884 I main: llama backend init
0.00.001.144 I main: load the model and apply lora adapter, if any
0.00.024.114 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.128 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.232 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.245 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.247 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.252 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.254 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.256 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.257 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.258 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.260 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.267 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.268 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.270 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.271 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.272 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.784 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.163 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.374 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.385 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.387 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.388 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.389 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.390 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.391 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.395 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.396 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.397 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.398 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.400 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.408 I llama_model_loader: - type  f32:   37 tensors
0.00.266.411 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.411 I llama_model_loader: - type q6_K:   19 tensors
0.00.472.289 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.550.775 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.552.207 I llm_load_vocab: special tokens cache size = 5
0.00.652.431 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.652.508 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.652.509 I llm_load_print_meta: arch             = gemma
0.00.652.510 I llm_load_print_meta: vocab type       = SPM
0.00.652.511 I llm_load_print_meta: n_vocab          = 256000
0.00.652.513 I llm_load_print_meta: n_merges         = 0
0.00.652.514 I llm_load_print_meta: vocab_only       = 0
0.00.652.514 I llm_load_print_meta: n_ctx_train      = 8192
0.00.652.514 I llm_load_print_meta: n_embd           = 2048
0.00.652.515 I llm_load_print_meta: n_layer          = 18
0.00.652.583 I llm_load_print_meta: n_head           = 8
0.00.652.591 I llm_load_print_meta: n_head_kv        = 1
0.00.652.591 I llm_load_print_meta: n_rot            = 256
0.00.652.592 I llm_load_print_meta: n_swa            = 0
0.00.652.592 I llm_load_print_meta: n_embd_head_k    = 256
0.00.652.592 I llm_load_print_meta: n_embd_head_v    = 256
0.00.652.597 I llm_load_print_meta: n_gqa            = 8
0.00.652.601 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.652.606 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.652.608 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.652.609 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.652.609 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.652.610 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.652.610 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.652.615 I llm_load_print_meta: n_ff             = 16384
0.00.652.616 I llm_load_print_meta: n_expert         = 0
0.00.652.616 I llm_load_print_meta: n_expert_used    = 0
0.00.652.617 I llm_load_print_meta: causal attn      = 1
0.00.652.617 I llm_load_print_meta: pooling type     = 0
0.00.652.617 I llm_load_print_meta: rope type        = 2
0.00.652.618 I llm_load_print_meta: rope scaling     = linear
0.00.652.619 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.652.620 I llm_load_print_meta: freq_scale_train = 1
0.00.652.620 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.652.620 I llm_load_print_meta: rope_finetuned   = unknown
0.00.652.621 I llm_load_print_meta: ssm_d_conv       = 0
0.00.652.643 I llm_load_print_meta: ssm_d_inner      = 0
0.00.652.644 I llm_load_print_meta: ssm_d_state      = 0
0.00.652.645 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.652.645 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.652.646 I llm_load_print_meta: model type       = 2B
0.00.652.647 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.652.648 I llm_load_print_meta: model params     = 2.51 B
0.00.652.657 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.652.657 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.652.658 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.652.659 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.652.659 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.652.659 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.652.660 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.652.668 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.652.676 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.652.677 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.652.678 I llm_load_print_meta: max token length = 93
0.00.716.030 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.716.039 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.716.039 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.716.040 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.716.041 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.716.042 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.722.102 I llama_new_context_with_model: n_seq_max     = 1
0.00.722.110 I llama_new_context_with_model: n_ctx         = 4096
0.00.722.111 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.722.111 I llama_new_context_with_model: n_batch       = 2048
0.00.722.111 I llama_new_context_with_model: n_ubatch      = 512
0.00.722.112 I llama_new_context_with_model: flash_attn    = 0
0.00.722.115 I llama_new_context_with_model: freq_base     = 10000.0
0.00.722.116 I llama_new_context_with_model: freq_scale    = 1
0.00.722.117 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.739.502 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.739.543 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.739.667 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.742.216 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.742.220 I llama_new_context_with_model: graph nodes  = 601
0.00.742.220 I llama_new_context_with_model: graph splits = 1
0.00.742.246 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.312.647 I main: llama threadpool init, n_threads = 4
0.01.312.659 I 
0.01.312.768 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.312.771 I 
0.01.313.004 I sampler seed: 3408872378
0.01.313.016 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.313.023 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.313.026 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.313.026 I 
 maneutruing to the fact that the mean of the population is equal to the mean of the sample.

a) What is the sampling distribution of the mean

0.12.140.123 I llama_perf_sampler_print:    sampling time =      48.23 ms /    33 runs   (    1.46 ms per token,   684.21 tokens per second)
0.12.140.126 I llama_perf_context_print:        load time =    1311.39 ms
0.12.140.150 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.140.152 I llama_perf_context_print:        eval time =   10738.77 ms /    32 runs   (  335.59 ms per token,     2.98 tokens per second)
0.12.140.153 I llama_perf_context_print:       total time =   10827.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4053 (ec450d3b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198784.76 ms
main:    total time = 198784.76 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.662 I build: 4053 (ec450d3b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.870 I main: llama backend init
0.00.001.139 I main: load the model and apply lora adapter, if any
0.00.023.721 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.840 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.858 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.863 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.871 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.873 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.876 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.878 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.881 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.882 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.893 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.898 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.899 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.918 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.923 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.370 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.717 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.704 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.717 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.718 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.719 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.721 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.722 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.723 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.728 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.729 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.738 I llama_model_loader: - type  f32:   37 tensors
0.00.266.741 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.741 I llama_model_loader: - type q6_K:   19 tensors
0.00.474.594 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.546.602 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.547.791 I llm_load_vocab: special tokens cache size = 5
0.00.642.803 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.642.880 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.642.881 I llm_load_print_meta: arch             = gemma
0.00.642.882 I llm_load_print_meta: vocab type       = SPM
0.00.642.883 I llm_load_print_meta: n_vocab          = 256000
0.00.642.886 I llm_load_print_meta: n_merges         = 0
0.00.642.887 I llm_load_print_meta: vocab_only       = 0
0.00.642.887 I llm_load_print_meta: n_ctx_train      = 8192
0.00.642.887 I llm_load_print_meta: n_embd           = 2048
0.00.642.888 I llm_load_print_meta: n_layer          = 18
0.00.642.952 I llm_load_print_meta: n_head           = 8
0.00.642.959 I llm_load_print_meta: n_head_kv        = 1
0.00.642.960 I llm_load_print_meta: n_rot            = 256
0.00.642.960 I llm_load_print_meta: n_swa            = 0
0.00.642.961 I llm_load_print_meta: n_embd_head_k    = 256
0.00.642.962 I llm_load_print_meta: n_embd_head_v    = 256
0.00.642.967 I llm_load_print_meta: n_gqa            = 8
0.00.642.971 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.642.977 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.642.978 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.642.980 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.642.980 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.642.981 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.642.981 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.642.987 I llm_load_print_meta: n_ff             = 16384
0.00.642.988 I llm_load_print_meta: n_expert         = 0
0.00.642.988 I llm_load_print_meta: n_expert_used    = 0
0.00.642.989 I llm_load_print_meta: causal attn      = 1
0.00.643.001 I llm_load_print_meta: pooling type     = 0
0.00.643.005 I llm_load_print_meta: rope type        = 2
0.00.643.005 I llm_load_print_meta: rope scaling     = linear
0.00.643.010 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.643.011 I llm_load_print_meta: freq_scale_train = 1
0.00.643.014 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.643.015 I llm_load_print_meta: rope_finetuned   = unknown
0.00.643.015 I llm_load_print_meta: ssm_d_conv       = 0
0.00.643.015 I llm_load_print_meta: ssm_d_inner      = 0
0.00.643.016 I llm_load_print_meta: ssm_d_state      = 0
0.00.643.016 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.643.016 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.643.017 I llm_load_print_meta: model type       = 2B
0.00.643.018 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.643.019 I llm_load_print_meta: model params     = 2.51 B
0.00.643.029 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.643.030 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.643.031 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.643.031 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.643.033 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.643.034 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.643.034 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.643.035 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.643.042 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.643.043 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.643.044 I llm_load_print_meta: max token length = 93
0.00.701.587 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.707.718 I llama_new_context_with_model: n_seq_max     = 1
0.00.707.726 I llama_new_context_with_model: n_ctx         = 4096
0.00.707.726 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.707.727 I llama_new_context_with_model: n_batch       = 2048
0.00.707.727 I llama_new_context_with_model: n_ubatch      = 512
0.00.707.728 I llama_new_context_with_model: flash_attn    = 0
0.00.707.731 I llama_new_context_with_model: freq_base     = 10000.0
0.00.707.732 I llama_new_context_with_model: freq_scale    = 1
0.00.707.733 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.725.052 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.725.093 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.725.226 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.727.855 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.727.860 I llama_new_context_with_model: graph nodes  = 601
0.00.727.860 I llama_new_context_with_model: graph splits = 1
0.00.727.885 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.303.117 I main: llama threadpool init, n_threads = 4
0.01.303.131 I 
0.01.303.243 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.303.247 I 
0.01.303.479 I sampler seed: 1535344728
0.01.303.491 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.303.498 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.303.501 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.303.501 I 
 seconals to the following questions:

1. What is the difference between a physical scientist and a physicist?


2. Explain the concept of quantum entanglement.

0.12.170.337 I llama_perf_sampler_print:    sampling time =      48.04 ms /    33 runs   (    1.46 ms per token,   686.87 tokens per second)
0.12.170.340 I llama_perf_context_print:        load time =    1301.87 ms
0.12.170.341 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.170.343 I llama_perf_context_print:        eval time =   10776.49 ms /    32 runs   (  336.77 ms per token,     2.97 tokens per second)
0.12.170.344 I llama_perf_context_print:       total time =   10867.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.767s
user	50m9.415s
sys	0m6.493s
