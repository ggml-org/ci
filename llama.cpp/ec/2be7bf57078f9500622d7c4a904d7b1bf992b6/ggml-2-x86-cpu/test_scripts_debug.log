+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.635 I build: 3985 (ec2be7bf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.002.780 I main: load the model and apply lora adapter, if any
0.00.024.720 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.919 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.008 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.019 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.020 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.025 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.027 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.028 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.029 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.030 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.031 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.037 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.039 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.040 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.041 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.042 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.624 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.288 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.228 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.236 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.237 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.238 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.239 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.240 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.242 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.245 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.246 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.247 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.249 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.251 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.259 I llama_model_loader: - type  f32:   37 tensors
0.00.269.264 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.235 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.454 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.365 I llm_load_vocab: special tokens cache size = 5
0.00.608.917 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.987 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.988 I llm_load_print_meta: arch             = gemma
0.00.608.989 I llm_load_print_meta: vocab type       = SPM
0.00.608.990 I llm_load_print_meta: n_vocab          = 256000
0.00.608.992 I llm_load_print_meta: n_merges         = 0
0.00.608.992 I llm_load_print_meta: vocab_only       = 0
0.00.608.993 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.993 I llm_load_print_meta: n_embd           = 2048
0.00.608.994 I llm_load_print_meta: n_layer          = 18
0.00.609.055 I llm_load_print_meta: n_head           = 8
0.00.609.062 I llm_load_print_meta: n_head_kv        = 1
0.00.609.063 I llm_load_print_meta: n_rot            = 256
0.00.609.064 I llm_load_print_meta: n_swa            = 0
0.00.609.064 I llm_load_print_meta: n_embd_head_k    = 256
0.00.609.065 I llm_load_print_meta: n_embd_head_v    = 256
0.00.609.069 I llm_load_print_meta: n_gqa            = 8
0.00.609.074 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.609.079 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.609.081 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.609.082 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.609.083 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.609.093 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.609.097 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.609.104 I llm_load_print_meta: n_ff             = 16384
0.00.609.104 I llm_load_print_meta: n_expert         = 0
0.00.609.105 I llm_load_print_meta: n_expert_used    = 0
0.00.609.108 I llm_load_print_meta: causal attn      = 1
0.00.609.108 I llm_load_print_meta: pooling type     = 0
0.00.609.109 I llm_load_print_meta: rope type        = 2
0.00.609.109 I llm_load_print_meta: rope scaling     = linear
0.00.609.110 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.609.111 I llm_load_print_meta: freq_scale_train = 1
0.00.609.111 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.609.112 I llm_load_print_meta: rope_finetuned   = unknown
0.00.609.112 I llm_load_print_meta: ssm_d_conv       = 0
0.00.609.112 I llm_load_print_meta: ssm_d_inner      = 0
0.00.609.113 I llm_load_print_meta: ssm_d_state      = 0
0.00.609.113 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.609.113 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.609.126 I llm_load_print_meta: model type       = 2B
0.00.609.128 I llm_load_print_meta: model ftype      = Q8_0
0.00.609.129 I llm_load_print_meta: model params     = 2.51 B
0.00.609.132 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.609.132 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.609.141 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.609.142 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.609.143 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.609.145 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.609.145 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.609.146 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.609.152 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.609.154 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.609.155 I llm_load_print_meta: max token length = 93
0.00.609.324 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.721.197 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.721.204 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.721.205 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.721.206 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.721.206 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.721.207 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.727.047 I llama_new_context_with_model: n_ctx      = 8192
0.00.727.057 I llama_new_context_with_model: n_batch    = 2048
0.00.727.058 I llama_new_context_with_model: n_ubatch   = 512
0.00.727.058 I llama_new_context_with_model: flash_attn = 0
0.00.727.062 I llama_new_context_with_model: freq_base  = 10000.0
0.00.727.062 I llama_new_context_with_model: freq_scale = 1
0.00.757.110 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.757.163 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.757.282 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.758.674 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.758.679 I llama_new_context_with_model: graph nodes  = 601
0.00.758.680 I llama_new_context_with_model: graph splits = 1
0.00.758.695 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.371.708 I main: llama threadpool init, n_threads = 4
0.01.371.720 I 
0.01.371.836 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.371.836 I 
0.01.372.069 I sampler seed: 3084970180
0.01.372.082 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.372.089 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.372.089 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.372.090 I 
 seconally to the provided text.

The text provided does not contain information regarding the second sentence, so I am unable to extract the requested data from the provided

0.14.755.778 I llama_perf_sampler_print:    sampling time =      48.96 ms /    33 runs   (    1.48 ms per token,   674.03 tokens per second)
0.14.755.780 I llama_perf_context_print:        load time =    1368.84 ms
0.14.755.782 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.755.784 I llama_perf_context_print:        eval time =   13289.90 ms /    32 runs   (  415.31 ms per token,     2.41 tokens per second)
0.14.755.785 I llama_perf_context_print:       total time =   13384.08 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.652 I build: 3985 (ec2be7bf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.002.792 I main: load the model and apply lora adapter, if any
0.00.024.580 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.752 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.765 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.766 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.770 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.771 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.772 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.773 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.774 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.776 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.782 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.783 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.784 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.794 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.795 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.350 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.396 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.341 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.348 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.350 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.351 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.352 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.353 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.354 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.357 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.358 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.360 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.361 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.269.362 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.370 I llama_model_loader: - type  f32:   37 tensors
0.00.269.374 I llama_model_loader: - type q8_0:  127 tensors
0.00.453.080 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.510.480 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.406 I llm_load_vocab: special tokens cache size = 5
0.00.606.107 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.606.173 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.606.174 I llm_load_print_meta: arch             = gemma
0.00.606.175 I llm_load_print_meta: vocab type       = SPM
0.00.606.176 I llm_load_print_meta: n_vocab          = 256000
0.00.606.178 I llm_load_print_meta: n_merges         = 0
0.00.606.178 I llm_load_print_meta: vocab_only       = 0
0.00.606.179 I llm_load_print_meta: n_ctx_train      = 8192
0.00.606.179 I llm_load_print_meta: n_embd           = 2048
0.00.606.180 I llm_load_print_meta: n_layer          = 18
0.00.606.247 I llm_load_print_meta: n_head           = 8
0.00.606.253 I llm_load_print_meta: n_head_kv        = 1
0.00.606.254 I llm_load_print_meta: n_rot            = 256
0.00.606.254 I llm_load_print_meta: n_swa            = 0
0.00.606.255 I llm_load_print_meta: n_embd_head_k    = 256
0.00.606.255 I llm_load_print_meta: n_embd_head_v    = 256
0.00.606.261 I llm_load_print_meta: n_gqa            = 8
0.00.606.266 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.606.272 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.606.273 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.606.274 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.606.275 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.606.275 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.606.276 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.606.282 I llm_load_print_meta: n_ff             = 16384
0.00.606.282 I llm_load_print_meta: n_expert         = 0
0.00.606.283 I llm_load_print_meta: n_expert_used    = 0
0.00.606.283 I llm_load_print_meta: causal attn      = 1
0.00.606.284 I llm_load_print_meta: pooling type     = 0
0.00.606.284 I llm_load_print_meta: rope type        = 2
0.00.606.285 I llm_load_print_meta: rope scaling     = linear
0.00.606.287 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.606.287 I llm_load_print_meta: freq_scale_train = 1
0.00.606.287 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.606.288 I llm_load_print_meta: rope_finetuned   = unknown
0.00.606.288 I llm_load_print_meta: ssm_d_conv       = 0
0.00.606.289 I llm_load_print_meta: ssm_d_inner      = 0
0.00.606.289 I llm_load_print_meta: ssm_d_state      = 0
0.00.606.290 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.606.290 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.606.291 I llm_load_print_meta: model type       = 2B
0.00.606.292 I llm_load_print_meta: model ftype      = Q8_0
0.00.606.302 I llm_load_print_meta: model params     = 2.51 B
0.00.606.314 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.606.320 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.606.321 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.606.321 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.606.321 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.606.328 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.606.329 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.606.329 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.606.335 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.606.337 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.606.337 I llm_load_print_meta: max token length = 93
0.00.606.508 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.709.892 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.715.588 I llama_new_context_with_model: n_ctx      = 8192
0.00.715.595 I llama_new_context_with_model: n_batch    = 2048
0.00.715.596 I llama_new_context_with_model: n_ubatch   = 512
0.00.715.597 I llama_new_context_with_model: flash_attn = 0
0.00.715.599 I llama_new_context_with_model: freq_base  = 10000.0
0.00.715.600 I llama_new_context_with_model: freq_scale = 1
0.00.745.078 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.745.124 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.745.241 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.746.635 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.746.640 I llama_new_context_with_model: graph nodes  = 601
0.00.746.640 I llama_new_context_with_model: graph splits = 1
0.00.746.656 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.362.123 I main: llama threadpool init, n_threads = 4
0.01.362.137 I 
0.01.362.243 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.362.247 I 
0.01.362.474 I sampler seed: 3671417637
0.01.362.487 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.362.494 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.362.495 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.362.495 I 
 increably. [end of text]


0.03.066.223 I llama_perf_sampler_print:    sampling time =       6.20 ms /     5 runs   (    1.24 ms per token,   806.32 tokens per second)
0.03.066.227 I llama_perf_context_print:        load time =    1359.24 ms
0.03.066.229 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.066.231 I llama_perf_context_print:        eval time =    1690.45 ms /     4 runs   (  422.61 ms per token,     2.37 tokens per second)
0.03.066.232 I llama_perf_context_print:       total time =    1704.11 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.687 I build: 3985 (ec2be7bf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.889 I main: llama backend init
0.00.002.844 I main: load the model and apply lora adapter, if any
0.00.024.831 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.049 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.140 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.151 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.152 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.157 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.158 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.159 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.160 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.161 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.162 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.170 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.171 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.175 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.176 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.177 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.414 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.961 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.917 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.925 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.926 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.927 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.929 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.930 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.931 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.935 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.936 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.937 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.938 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.268.939 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.947 I llama_model_loader: - type  f32:   37 tensors
0.00.268.951 I llama_model_loader: - type q8_0:  127 tensors
0.00.437.078 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.495.547 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.496.441 I llm_load_vocab: special tokens cache size = 5
0.00.590.869 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.590.935 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.590.936 I llm_load_print_meta: arch             = gemma
0.00.590.937 I llm_load_print_meta: vocab type       = SPM
0.00.590.937 I llm_load_print_meta: n_vocab          = 256000
0.00.590.940 I llm_load_print_meta: n_merges         = 0
0.00.590.941 I llm_load_print_meta: vocab_only       = 0
0.00.590.941 I llm_load_print_meta: n_ctx_train      = 8192
0.00.590.942 I llm_load_print_meta: n_embd           = 2048
0.00.590.942 I llm_load_print_meta: n_layer          = 18
0.00.591.007 I llm_load_print_meta: n_head           = 8
0.00.591.014 I llm_load_print_meta: n_head_kv        = 1
0.00.591.015 I llm_load_print_meta: n_rot            = 256
0.00.591.016 I llm_load_print_meta: n_swa            = 0
0.00.591.016 I llm_load_print_meta: n_embd_head_k    = 256
0.00.591.017 I llm_load_print_meta: n_embd_head_v    = 256
0.00.591.022 I llm_load_print_meta: n_gqa            = 8
0.00.591.026 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.591.032 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.591.037 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.591.040 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.591.041 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.591.041 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.591.042 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.591.047 I llm_load_print_meta: n_ff             = 16384
0.00.591.048 I llm_load_print_meta: n_expert         = 0
0.00.591.049 I llm_load_print_meta: n_expert_used    = 0
0.00.591.049 I llm_load_print_meta: causal attn      = 1
0.00.591.050 I llm_load_print_meta: pooling type     = 0
0.00.591.050 I llm_load_print_meta: rope type        = 2
0.00.591.050 I llm_load_print_meta: rope scaling     = linear
0.00.591.052 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.591.052 I llm_load_print_meta: freq_scale_train = 1
0.00.591.053 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.591.053 I llm_load_print_meta: rope_finetuned   = unknown
0.00.591.054 I llm_load_print_meta: ssm_d_conv       = 0
0.00.591.055 I llm_load_print_meta: ssm_d_inner      = 0
0.00.591.055 I llm_load_print_meta: ssm_d_state      = 0
0.00.591.056 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.591.056 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.591.057 I llm_load_print_meta: model type       = 2B
0.00.591.058 I llm_load_print_meta: model ftype      = Q8_0
0.00.591.059 I llm_load_print_meta: model params     = 2.51 B
0.00.591.059 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.591.060 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.591.060 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.591.079 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.591.080 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.591.080 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.591.081 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.591.090 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.591.096 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.591.098 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.591.098 I llm_load_print_meta: max token length = 93
0.00.591.266 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.689.085 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.689.095 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.689.096 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.689.097 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.689.097 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.689.098 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.694.784 I llama_new_context_with_model: n_ctx      = 8192
0.00.694.792 I llama_new_context_with_model: n_batch    = 2048
0.00.694.792 I llama_new_context_with_model: n_ubatch   = 512
0.00.694.793 I llama_new_context_with_model: flash_attn = 0
0.00.694.795 I llama_new_context_with_model: freq_base  = 10000.0
0.00.694.796 I llama_new_context_with_model: freq_scale = 1
0.00.724.598 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.724.648 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.724.769 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.726.211 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.726.216 I llama_new_context_with_model: graph nodes  = 601
0.00.726.216 I llama_new_context_with_model: graph splits = 1
0.00.726.232 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.341.434 I main: llama threadpool init, n_threads = 4
0.01.341.447 I 
0.01.341.553 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.341.557 I 
0.01.341.785 I sampler seed: 521523671
0.01.341.798 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.341.806 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.341.807 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.341.807 I 
 increably.

I am unable to access the requested data due to privacy and security restrictions. [end of text]


0.09.828.875 I llama_perf_sampler_print:    sampling time =      30.74 ms /    21 runs   (    1.46 ms per token,   683.24 tokens per second)
0.09.828.879 I llama_perf_context_print:        load time =    1338.49 ms
0.09.828.893 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.828.895 I llama_perf_context_print:        eval time =    8427.80 ms /    20 runs   (  421.39 ms per token,     2.37 tokens per second)
0.09.828.897 I llama_perf_context_print:       total time =    8487.45 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 3985 (ec2be7bf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.002.787 I main: load the model and apply lora adapter, if any
0.00.024.435 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.636 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.722 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.732 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.734 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.738 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.739 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.741 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.742 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.743 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.752 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.759 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.763 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.764 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.765 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.766 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.708 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.372 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.175 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.183 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.184 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.185 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.186 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.188 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.189 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.193 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.194 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.195 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.196 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.268.197 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.205 I llama_model_loader: - type  f32:   37 tensors
0.00.268.208 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.120 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.500.966 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.501.960 I llm_load_vocab: special tokens cache size = 5
0.00.596.165 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.596.236 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.596.237 I llm_load_print_meta: arch             = gemma
0.00.596.238 I llm_load_print_meta: vocab type       = SPM
0.00.596.239 I llm_load_print_meta: n_vocab          = 256000
0.00.596.241 I llm_load_print_meta: n_merges         = 0
0.00.596.241 I llm_load_print_meta: vocab_only       = 0
0.00.596.242 I llm_load_print_meta: n_ctx_train      = 8192
0.00.596.242 I llm_load_print_meta: n_embd           = 2048
0.00.596.243 I llm_load_print_meta: n_layer          = 18
0.00.596.306 I llm_load_print_meta: n_head           = 8
0.00.596.314 I llm_load_print_meta: n_head_kv        = 1
0.00.596.314 I llm_load_print_meta: n_rot            = 256
0.00.596.315 I llm_load_print_meta: n_swa            = 0
0.00.596.315 I llm_load_print_meta: n_embd_head_k    = 256
0.00.596.315 I llm_load_print_meta: n_embd_head_v    = 256
0.00.596.320 I llm_load_print_meta: n_gqa            = 8
0.00.596.325 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.596.330 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.596.331 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.596.333 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.596.334 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.596.335 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.596.335 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.596.340 I llm_load_print_meta: n_ff             = 16384
0.00.596.341 I llm_load_print_meta: n_expert         = 0
0.00.596.341 I llm_load_print_meta: n_expert_used    = 0
0.00.596.342 I llm_load_print_meta: causal attn      = 1
0.00.596.342 I llm_load_print_meta: pooling type     = 0
0.00.596.342 I llm_load_print_meta: rope type        = 2
0.00.596.343 I llm_load_print_meta: rope scaling     = linear
0.00.596.344 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.596.345 I llm_load_print_meta: freq_scale_train = 1
0.00.596.345 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.596.347 I llm_load_print_meta: rope_finetuned   = unknown
0.00.596.347 I llm_load_print_meta: ssm_d_conv       = 0
0.00.596.348 I llm_load_print_meta: ssm_d_inner      = 0
0.00.596.348 I llm_load_print_meta: ssm_d_state      = 0
0.00.596.353 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.596.353 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.596.354 I llm_load_print_meta: model type       = 2B
0.00.596.364 I llm_load_print_meta: model ftype      = Q8_0
0.00.596.366 I llm_load_print_meta: model params     = 2.51 B
0.00.596.370 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.596.370 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.596.371 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.596.371 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.596.372 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.596.372 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.596.372 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.596.373 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.596.380 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.596.381 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.596.382 I llm_load_print_meta: max token length = 93
0.00.596.549 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.690.758 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.690.766 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.696.319 I llama_new_context_with_model: n_ctx      = 8192
0.00.696.326 I llama_new_context_with_model: n_batch    = 2048
0.00.696.326 I llama_new_context_with_model: n_ubatch   = 512
0.00.696.327 I llama_new_context_with_model: flash_attn = 0
0.00.696.329 I llama_new_context_with_model: freq_base  = 10000.0
0.00.696.330 I llama_new_context_with_model: freq_scale = 1
0.00.725.218 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.725.264 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.725.379 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.726.793 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.726.798 I llama_new_context_with_model: graph nodes  = 601
0.00.726.799 I llama_new_context_with_model: graph splits = 1
0.00.726.814 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.339.161 I main: llama threadpool init, n_threads = 4
0.01.339.175 I 
0.01.339.280 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.339.284 I 
0.01.339.508 I sampler seed: 3615279711
0.01.339.522 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.339.528 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.339.532 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.339.532 I 
 increasities, a group of white nationalists and neo-Nazis who espoused white supremacy and advocated for violence against Jews, Blacks, and other minorities.



0.14.779.006 I llama_perf_sampler_print:    sampling time =      49.21 ms /    33 runs   (    1.49 ms per token,   670.65 tokens per second)
0.14.779.009 I llama_perf_context_print:        load time =    1336.29 ms
0.14.779.010 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.779.025 I llama_perf_context_print:        eval time =   13345.18 ms /    32 runs   (  417.04 ms per token,     2.40 tokens per second)
0.14.779.026 I llama_perf_context_print:       total time =   13439.85 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m52.298s
user	2m40.770s
sys	0m9.721s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3985 (ec2be7bf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198710.22 ms
main:    total time = 198710.22 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.614 I build: 3985 (ec2be7bf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.819 I main: llama backend init
0.00.002.773 I main: load the model and apply lora adapter, if any
0.00.024.696 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.918 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.013 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.024 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.027 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.032 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.034 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.035 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.037 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.039 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.041 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.048 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.053 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.055 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.056 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.058 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.169 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.860 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.734 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.742 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.743 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.744 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.745 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.746 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.748 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.751 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.752 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.754 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.756 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.758 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.768 I llama_model_loader: - type  f32:   37 tensors
0.00.268.773 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.775 I llama_model_loader: - type q6_K:   19 tensors
0.00.455.982 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.518.315 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.519.269 I llm_load_vocab: special tokens cache size = 5
0.00.615.680 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.762 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.772 I llm_load_print_meta: arch             = gemma
0.00.615.772 I llm_load_print_meta: vocab type       = SPM
0.00.615.773 I llm_load_print_meta: n_vocab          = 256000
0.00.615.776 I llm_load_print_meta: n_merges         = 0
0.00.615.776 I llm_load_print_meta: vocab_only       = 0
0.00.615.777 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.777 I llm_load_print_meta: n_embd           = 2048
0.00.615.778 I llm_load_print_meta: n_layer          = 18
0.00.615.849 I llm_load_print_meta: n_head           = 8
0.00.615.859 I llm_load_print_meta: n_head_kv        = 1
0.00.615.859 I llm_load_print_meta: n_rot            = 256
0.00.615.860 I llm_load_print_meta: n_swa            = 0
0.00.615.860 I llm_load_print_meta: n_embd_head_k    = 256
0.00.615.860 I llm_load_print_meta: n_embd_head_v    = 256
0.00.615.867 I llm_load_print_meta: n_gqa            = 8
0.00.615.875 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.615.883 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.615.888 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.615.893 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.615.894 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.615.894 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.615.895 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.615.901 I llm_load_print_meta: n_ff             = 16384
0.00.615.901 I llm_load_print_meta: n_expert         = 0
0.00.615.902 I llm_load_print_meta: n_expert_used    = 0
0.00.615.902 I llm_load_print_meta: causal attn      = 1
0.00.615.903 I llm_load_print_meta: pooling type     = 0
0.00.615.903 I llm_load_print_meta: rope type        = 2
0.00.615.904 I llm_load_print_meta: rope scaling     = linear
0.00.615.906 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.615.908 I llm_load_print_meta: freq_scale_train = 1
0.00.615.909 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.615.910 I llm_load_print_meta: rope_finetuned   = unknown
0.00.615.910 I llm_load_print_meta: ssm_d_conv       = 0
0.00.615.911 I llm_load_print_meta: ssm_d_inner      = 0
0.00.615.912 I llm_load_print_meta: ssm_d_state      = 0
0.00.615.912 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.913 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.914 I llm_load_print_meta: model type       = 2B
0.00.615.915 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.615.917 I llm_load_print_meta: model params     = 2.51 B
0.00.615.921 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.615.922 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.615.922 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.615.923 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.615.924 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.615.924 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.615.925 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.615.926 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.615.932 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.615.935 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.615.938 I llm_load_print_meta: max token length = 93
0.00.616.118 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.681.194 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.681.204 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.681.204 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.681.205 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.681.206 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.681.206 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.687.025 I llama_new_context_with_model: n_ctx      = 8192
0.00.687.032 I llama_new_context_with_model: n_batch    = 2048
0.00.687.033 I llama_new_context_with_model: n_ubatch   = 512
0.00.687.033 I llama_new_context_with_model: flash_attn = 0
0.00.687.035 I llama_new_context_with_model: freq_base  = 10000.0
0.00.687.036 I llama_new_context_with_model: freq_scale = 1
0.00.716.247 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.716.293 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.716.420 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.717.833 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.717.837 I llama_new_context_with_model: graph nodes  = 601
0.00.717.838 I llama_new_context_with_model: graph splits = 1
0.00.717.855 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.298.727 I main: llama threadpool init, n_threads = 4
0.01.298.742 I 
0.01.298.866 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.298.870 I 
0.01.299.124 I sampler seed: 1613619226
0.01.299.136 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.299.144 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.299.145 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.299.146 I 
 squaRED text:

I am unable to access the requested resource.

The requested resource is currently unavailable.

Please try again later.

I have tried

0.12.308.525 I llama_perf_sampler_print:    sampling time =      48.95 ms /    33 runs   (    1.48 ms per token,   674.20 tokens per second)
0.12.308.528 I llama_perf_context_print:        load time =    1295.86 ms
0.12.308.530 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.308.544 I llama_perf_context_print:        eval time =   10916.31 ms /    32 runs   (  341.13 ms per token,     2.93 tokens per second)
0.12.308.545 I llama_perf_context_print:       total time =   11009.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3985 (ec2be7bf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198668.62 ms
main:    total time = 198668.62 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.610 I build: 3985 (ec2be7bf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.815 I main: llama backend init
0.00.002.764 I main: load the model and apply lora adapter, if any
0.00.024.682 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.779 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.792 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.795 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.799 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.804 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.806 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.808 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.809 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.811 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.819 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.820 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.822 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.823 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.825 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.552 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.201 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.115 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.124 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.125 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.126 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.127 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.128 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.129 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.133 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.134 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.143 I llama_model_loader: - type  f32:   37 tensors
0.00.268.148 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.149 I llama_model_loader: - type q6_K:   19 tensors
0.00.433.942 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.492.755 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.493.797 I llm_load_vocab: special tokens cache size = 5
0.00.588.353 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.588.427 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.588.429 I llm_load_print_meta: arch             = gemma
0.00.588.429 I llm_load_print_meta: vocab type       = SPM
0.00.588.430 I llm_load_print_meta: n_vocab          = 256000
0.00.588.433 I llm_load_print_meta: n_merges         = 0
0.00.588.433 I llm_load_print_meta: vocab_only       = 0
0.00.588.434 I llm_load_print_meta: n_ctx_train      = 8192
0.00.588.434 I llm_load_print_meta: n_embd           = 2048
0.00.588.435 I llm_load_print_meta: n_layer          = 18
0.00.588.504 I llm_load_print_meta: n_head           = 8
0.00.588.513 I llm_load_print_meta: n_head_kv        = 1
0.00.588.515 I llm_load_print_meta: n_rot            = 256
0.00.588.516 I llm_load_print_meta: n_swa            = 0
0.00.588.516 I llm_load_print_meta: n_embd_head_k    = 256
0.00.588.517 I llm_load_print_meta: n_embd_head_v    = 256
0.00.588.524 I llm_load_print_meta: n_gqa            = 8
0.00.588.530 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.588.538 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.588.543 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.588.545 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.588.546 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.588.547 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.588.548 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.588.558 I llm_load_print_meta: n_ff             = 16384
0.00.588.559 I llm_load_print_meta: n_expert         = 0
0.00.588.561 I llm_load_print_meta: n_expert_used    = 0
0.00.588.561 I llm_load_print_meta: causal attn      = 1
0.00.588.562 I llm_load_print_meta: pooling type     = 0
0.00.588.563 I llm_load_print_meta: rope type        = 2
0.00.588.563 I llm_load_print_meta: rope scaling     = linear
0.00.588.565 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.588.566 I llm_load_print_meta: freq_scale_train = 1
0.00.588.567 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.588.568 I llm_load_print_meta: rope_finetuned   = unknown
0.00.588.569 I llm_load_print_meta: ssm_d_conv       = 0
0.00.588.570 I llm_load_print_meta: ssm_d_inner      = 0
0.00.588.571 I llm_load_print_meta: ssm_d_state      = 0
0.00.588.572 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.588.573 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.588.574 I llm_load_print_meta: model type       = 2B
0.00.588.576 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.588.580 I llm_load_print_meta: model params     = 2.51 B
0.00.588.581 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.588.582 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.588.583 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.588.588 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.588.591 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.588.592 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.588.592 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.588.593 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.588.600 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.588.603 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.588.604 I llm_load_print_meta: max token length = 93
0.00.588.786 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.649.296 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.655.261 I llama_new_context_with_model: n_ctx      = 8192
0.00.655.268 I llama_new_context_with_model: n_batch    = 2048
0.00.655.268 I llama_new_context_with_model: n_ubatch   = 512
0.00.655.269 I llama_new_context_with_model: flash_attn = 0
0.00.655.273 I llama_new_context_with_model: freq_base  = 10000.0
0.00.655.273 I llama_new_context_with_model: freq_scale = 1
0.00.685.808 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.685.852 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.685.968 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.687.331 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.687.336 I llama_new_context_with_model: graph nodes  = 601
0.00.687.336 I llama_new_context_with_model: graph splits = 1
0.00.687.353 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.267.556 I main: llama threadpool init, n_threads = 4
0.01.267.568 I 
0.01.267.685 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.267.689 I 
0.01.267.921 I sampler seed: 3262042929
0.01.267.934 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.267.942 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.267.946 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.267.946 I 
 squaRED by the sun.

This is a poem about the sun's influence on life.

**Sun's Influence**

The sun's

0.12.297.274 I llama_perf_sampler_print:    sampling time =      49.01 ms /    33 runs   (    1.49 ms per token,   673.28 tokens per second)
0.12.297.278 I llama_perf_context_print:        load time =    1264.70 ms
0.12.297.280 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.297.282 I llama_perf_context_print:        eval time =   10934.61 ms /    32 runs   (  341.71 ms per token,     2.93 tokens per second)
0.12.297.283 I llama_perf_context_print:       total time =   11029.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.894s
user	50m9.172s
sys	0m6.309s
