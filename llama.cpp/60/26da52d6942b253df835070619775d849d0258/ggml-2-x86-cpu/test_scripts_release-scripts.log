+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.552 I build: 3787 (6026da52) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.746 I main: llama backend init
0.00.001.832 I main: load the model and apply lora adapter, if any
0.00.022.052 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.102 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.113 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.118 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.121 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.125 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.126 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.127 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.127 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.128 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.130 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.135 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.136 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.136 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.137 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.137 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.050 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.994 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.927 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.933 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.934 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.934 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.935 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.936 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.937 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.939 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.940 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.942 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.942 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.943 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.947 I llama_model_loader: - type  f32:   37 tensors
0.00.132.950 I llama_model_loader: - type q8_0:  127 tensors
0.00.197.937 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.198.660 I llm_load_vocab: special tokens cache size = 5
0.00.217.165 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.217.178 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.217.179 I llm_load_print_meta: arch             = gemma
0.00.217.180 I llm_load_print_meta: vocab type       = SPM
0.00.217.180 I llm_load_print_meta: n_vocab          = 256000
0.00.217.181 I llm_load_print_meta: n_merges         = 0
0.00.217.181 I llm_load_print_meta: vocab_only       = 0
0.00.217.181 I llm_load_print_meta: n_ctx_train      = 8192
0.00.217.182 I llm_load_print_meta: n_embd           = 2048
0.00.217.182 I llm_load_print_meta: n_layer          = 18
0.00.217.195 I llm_load_print_meta: n_head           = 8
0.00.217.196 I llm_load_print_meta: n_head_kv        = 1
0.00.217.197 I llm_load_print_meta: n_rot            = 256
0.00.217.197 I llm_load_print_meta: n_swa            = 0
0.00.217.197 I llm_load_print_meta: n_embd_head_k    = 256
0.00.217.197 I llm_load_print_meta: n_embd_head_v    = 256
0.00.217.198 I llm_load_print_meta: n_gqa            = 8
0.00.217.199 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.217.200 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.217.201 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.217.202 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.217.203 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.217.203 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.217.203 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.217.204 I llm_load_print_meta: n_ff             = 16384
0.00.217.205 I llm_load_print_meta: n_expert         = 0
0.00.217.205 I llm_load_print_meta: n_expert_used    = 0
0.00.217.205 I llm_load_print_meta: causal attn      = 1
0.00.217.205 I llm_load_print_meta: pooling type     = 0
0.00.217.206 I llm_load_print_meta: rope type        = 2
0.00.217.206 I llm_load_print_meta: rope scaling     = linear
0.00.217.207 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.217.208 I llm_load_print_meta: freq_scale_train = 1
0.00.217.208 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.217.209 I llm_load_print_meta: rope_finetuned   = unknown
0.00.217.209 I llm_load_print_meta: ssm_d_conv       = 0
0.00.217.209 I llm_load_print_meta: ssm_d_inner      = 0
0.00.217.209 I llm_load_print_meta: ssm_d_state      = 0
0.00.217.210 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.217.210 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.217.211 I llm_load_print_meta: model type       = 2B
0.00.217.211 I llm_load_print_meta: model ftype      = Q8_0
0.00.217.212 I llm_load_print_meta: model params     = 2.51 B
0.00.217.213 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.217.213 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.217.214 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.217.214 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.217.215 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.217.215 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.217.215 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.217.215 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.217.216 I llm_load_print_meta: max token length = 93
0.00.217.233 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.312.949 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.312.958 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.312.959 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.312.960 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.312.961 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.312.961 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.318.089 I llama_new_context_with_model: n_ctx      = 8192
0.00.318.096 I llama_new_context_with_model: n_batch    = 2048
0.00.318.096 I llama_new_context_with_model: n_ubatch   = 512
0.00.318.097 I llama_new_context_with_model: flash_attn = 0
0.00.318.099 I llama_new_context_with_model: freq_base  = 10000.0
0.00.318.100 I llama_new_context_with_model: freq_scale = 1
0.00.348.264 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.348.279 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.348.370 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.265 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.349.273 I llama_new_context_with_model: graph nodes  = 601
0.00.349.274 I llama_new_context_with_model: graph splits = 1
0.00.349.276 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.441.284 I main: llama threadpool init, n_threads = 4
0.00.441.298 I 
0.00.441.372 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.441.375 I 
0.00.441.412 I sampler seed: 3362286271
0.00.441.421 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.441.426 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.441.427 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities can be caused by:

**a) Viral infection**
**b) Autoimmune disorders**
**c) Nutritional deficiencies**
**d

0.02.676.156 I llama_perf_sampler_print:    sampling time =       4.88 ms /    33 runs   (    0.15 ms per token,  6767.84 tokens per second)
0.02.676.160 I llama_perf_context_print:        load time =     439.43 ms
0.02.676.162 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.676.164 I llama_perf_context_print:        eval time =    2216.54 ms /    32 runs   (   69.27 ms per token,    14.44 tokens per second)
0.02.676.165 I llama_perf_context_print:       total time =    2234.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.536 I build: 3787 (6026da52) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.728 I main: llama backend init
0.00.001.836 I main: load the model and apply lora adapter, if any
0.00.022.043 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.054 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.061 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.062 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.065 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.066 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.067 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.067 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.068 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.069 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.074 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.075 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.076 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.076 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.077 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.672 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.135 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.043 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.050 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.050 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.051 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.051 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.052 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.053 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.055 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.056 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.056 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.059 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.060 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.063 I llama_model_loader: - type  f32:   37 tensors
0.00.132.066 I llama_model_loader: - type q8_0:  127 tensors
0.00.198.929 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.199.648 I llm_load_vocab: special tokens cache size = 5
0.00.218.052 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.218.067 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.218.068 I llm_load_print_meta: arch             = gemma
0.00.218.068 I llm_load_print_meta: vocab type       = SPM
0.00.218.069 I llm_load_print_meta: n_vocab          = 256000
0.00.218.069 I llm_load_print_meta: n_merges         = 0
0.00.218.070 I llm_load_print_meta: vocab_only       = 0
0.00.218.071 I llm_load_print_meta: n_ctx_train      = 8192
0.00.218.074 I llm_load_print_meta: n_embd           = 2048
0.00.218.074 I llm_load_print_meta: n_layer          = 18
0.00.218.087 I llm_load_print_meta: n_head           = 8
0.00.218.088 I llm_load_print_meta: n_head_kv        = 1
0.00.218.088 I llm_load_print_meta: n_rot            = 256
0.00.218.089 I llm_load_print_meta: n_swa            = 0
0.00.218.090 I llm_load_print_meta: n_embd_head_k    = 256
0.00.218.090 I llm_load_print_meta: n_embd_head_v    = 256
0.00.218.092 I llm_load_print_meta: n_gqa            = 8
0.00.218.093 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.218.094 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.218.095 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.218.097 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.218.097 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.218.097 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.218.098 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.218.099 I llm_load_print_meta: n_ff             = 16384
0.00.218.099 I llm_load_print_meta: n_expert         = 0
0.00.218.100 I llm_load_print_meta: n_expert_used    = 0
0.00.218.100 I llm_load_print_meta: causal attn      = 1
0.00.218.103 I llm_load_print_meta: pooling type     = 0
0.00.218.103 I llm_load_print_meta: rope type        = 2
0.00.218.104 I llm_load_print_meta: rope scaling     = linear
0.00.218.105 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.218.106 I llm_load_print_meta: freq_scale_train = 1
0.00.218.106 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.218.106 I llm_load_print_meta: rope_finetuned   = unknown
0.00.218.106 I llm_load_print_meta: ssm_d_conv       = 0
0.00.218.107 I llm_load_print_meta: ssm_d_inner      = 0
0.00.218.107 I llm_load_print_meta: ssm_d_state      = 0
0.00.218.107 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.218.107 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.218.108 I llm_load_print_meta: model type       = 2B
0.00.218.109 I llm_load_print_meta: model ftype      = Q8_0
0.00.218.110 I llm_load_print_meta: model params     = 2.51 B
0.00.218.111 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.218.111 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.218.112 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.218.112 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.218.113 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.218.114 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.218.114 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.218.115 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.218.115 I llm_load_print_meta: max token length = 93
0.00.218.132 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.312.278 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.317.393 I llama_new_context_with_model: n_ctx      = 8192
0.00.317.400 I llama_new_context_with_model: n_batch    = 2048
0.00.317.400 I llama_new_context_with_model: n_ubatch   = 512
0.00.317.401 I llama_new_context_with_model: flash_attn = 0
0.00.317.404 I llama_new_context_with_model: freq_base  = 10000.0
0.00.317.405 I llama_new_context_with_model: freq_scale = 1
0.00.347.165 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.347.179 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.347.270 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.348.091 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.348.098 I llama_new_context_with_model: graph nodes  = 601
0.00.348.099 I llama_new_context_with_model: graph splits = 1
0.00.348.100 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.434.781 I main: llama threadpool init, n_threads = 4
0.00.434.793 I 
0.00.434.868 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.434.871 I 
0.00.434.903 I sampler seed: 1217247485
0.00.434.915 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.434.920 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.434.921 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities, and other forms of sexual harassment.

Sexual harassment is a pervasive issue that affects individuals across different genders, ages, cultures, and occupations. It

0.02.604.473 I llama_perf_sampler_print:    sampling time =       5.04 ms /    33 runs   (    0.15 ms per token,  6541.13 tokens per second)
0.02.604.476 I llama_perf_context_print:        load time =     432.93 ms
0.02.604.478 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.604.479 I llama_perf_context_print:        eval time =    2151.59 ms /    32 runs   (   67.24 ms per token,    14.87 tokens per second)
0.02.604.481 I llama_perf_context_print:       total time =    2169.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.549 I build: 3787 (6026da52) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.770 I main: llama backend init
0.00.001.899 I main: load the model and apply lora adapter, if any
0.00.021.946 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.014 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.028 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.034 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.036 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.040 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.040 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.041 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.042 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.042 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.043 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.047 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.047 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.048 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.050 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.052 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.681 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.570 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.507 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.513 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.514 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.514 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.515 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.516 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.517 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.519 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.521 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.522 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.522 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.523 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.526 I llama_model_loader: - type  f32:   37 tensors
0.00.131.530 I llama_model_loader: - type q8_0:  127 tensors
0.00.194.886 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.195.543 I llm_load_vocab: special tokens cache size = 5
0.00.214.030 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.214.044 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.214.044 I llm_load_print_meta: arch             = gemma
0.00.214.044 I llm_load_print_meta: vocab type       = SPM
0.00.214.045 I llm_load_print_meta: n_vocab          = 256000
0.00.214.046 I llm_load_print_meta: n_merges         = 0
0.00.214.046 I llm_load_print_meta: vocab_only       = 0
0.00.214.046 I llm_load_print_meta: n_ctx_train      = 8192
0.00.214.047 I llm_load_print_meta: n_embd           = 2048
0.00.214.047 I llm_load_print_meta: n_layer          = 18
0.00.214.059 I llm_load_print_meta: n_head           = 8
0.00.214.060 I llm_load_print_meta: n_head_kv        = 1
0.00.214.061 I llm_load_print_meta: n_rot            = 256
0.00.214.061 I llm_load_print_meta: n_swa            = 0
0.00.214.061 I llm_load_print_meta: n_embd_head_k    = 256
0.00.214.062 I llm_load_print_meta: n_embd_head_v    = 256
0.00.214.062 I llm_load_print_meta: n_gqa            = 8
0.00.214.064 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.214.065 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.214.066 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.214.066 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.214.067 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.214.067 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.214.068 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.214.069 I llm_load_print_meta: n_ff             = 16384
0.00.214.069 I llm_load_print_meta: n_expert         = 0
0.00.214.069 I llm_load_print_meta: n_expert_used    = 0
0.00.214.070 I llm_load_print_meta: causal attn      = 1
0.00.214.070 I llm_load_print_meta: pooling type     = 0
0.00.214.070 I llm_load_print_meta: rope type        = 2
0.00.214.070 I llm_load_print_meta: rope scaling     = linear
0.00.214.072 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.214.072 I llm_load_print_meta: freq_scale_train = 1
0.00.214.073 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.214.073 I llm_load_print_meta: rope_finetuned   = unknown
0.00.214.073 I llm_load_print_meta: ssm_d_conv       = 0
0.00.214.073 I llm_load_print_meta: ssm_d_inner      = 0
0.00.214.074 I llm_load_print_meta: ssm_d_state      = 0
0.00.214.074 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.214.074 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.214.075 I llm_load_print_meta: model type       = 2B
0.00.214.075 I llm_load_print_meta: model ftype      = Q8_0
0.00.214.076 I llm_load_print_meta: model params     = 2.51 B
0.00.214.077 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.214.077 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.214.078 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.214.078 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.214.079 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.214.079 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.214.080 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.214.080 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.214.080 I llm_load_print_meta: max token length = 93
0.00.214.097 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.288.956 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.288.964 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.288.964 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.288.965 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.288.966 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.288.966 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.294.057 I llama_new_context_with_model: n_ctx      = 8192
0.00.294.062 I llama_new_context_with_model: n_batch    = 2048
0.00.294.063 I llama_new_context_with_model: n_ubatch   = 512
0.00.294.063 I llama_new_context_with_model: flash_attn = 0
0.00.294.066 I llama_new_context_with_model: freq_base  = 10000.0
0.00.294.066 I llama_new_context_with_model: freq_scale = 1
0.00.322.702 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.322.716 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.322.811 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.323.709 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.323.717 I llama_new_context_with_model: graph nodes  = 601
0.00.323.717 I llama_new_context_with_model: graph splits = 1
0.00.323.719 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.417.250 I main: llama threadpool init, n_threads = 4
0.00.417.262 I 
0.00.417.344 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.417.348 I 
0.00.417.395 I sampler seed: 1864000398
0.00.417.406 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.417.408 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.417.409 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities and tragedies.

**Answer:** Nature.

**Explanation:** Nature encompasses all living and non-living things on Earth, and it is responsible for

0.02.696.395 I llama_perf_sampler_print:    sampling time =       4.64 ms /    33 runs   (    0.14 ms per token,  7113.60 tokens per second)
0.02.696.397 I llama_perf_context_print:        load time =     415.33 ms
0.02.696.398 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.696.399 I llama_perf_context_print:        eval time =    2260.91 ms /    32 runs   (   70.65 ms per token,    14.15 tokens per second)
0.02.696.400 I llama_perf_context_print:       total time =    2279.15 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.543 I build: 3787 (6026da52) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.757 I main: llama backend init
0.00.001.889 I main: load the model and apply lora adapter, if any
0.00.021.855 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.910 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.927 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.935 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.937 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.941 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.942 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.943 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.944 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.945 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.946 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.953 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.954 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.956 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.958 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.959 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.570 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.540 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.453 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.461 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.461 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.462 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.462 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.463 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.464 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.466 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.467 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.468 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.469 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.470 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.473 I llama_model_loader: - type  f32:   37 tensors
0.00.132.476 I llama_model_loader: - type q8_0:  127 tensors
0.00.196.983 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.197.736 I llm_load_vocab: special tokens cache size = 5
0.00.216.249 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.216.261 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.216.262 I llm_load_print_meta: arch             = gemma
0.00.216.262 I llm_load_print_meta: vocab type       = SPM
0.00.216.263 I llm_load_print_meta: n_vocab          = 256000
0.00.216.263 I llm_load_print_meta: n_merges         = 0
0.00.216.263 I llm_load_print_meta: vocab_only       = 0
0.00.216.264 I llm_load_print_meta: n_ctx_train      = 8192
0.00.216.264 I llm_load_print_meta: n_embd           = 2048
0.00.216.264 I llm_load_print_meta: n_layer          = 18
0.00.216.277 I llm_load_print_meta: n_head           = 8
0.00.216.278 I llm_load_print_meta: n_head_kv        = 1
0.00.216.278 I llm_load_print_meta: n_rot            = 256
0.00.216.278 I llm_load_print_meta: n_swa            = 0
0.00.216.279 I llm_load_print_meta: n_embd_head_k    = 256
0.00.216.279 I llm_load_print_meta: n_embd_head_v    = 256
0.00.216.280 I llm_load_print_meta: n_gqa            = 8
0.00.216.281 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.216.282 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.216.282 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.216.283 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.216.284 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.216.284 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.216.284 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.216.285 I llm_load_print_meta: n_ff             = 16384
0.00.216.286 I llm_load_print_meta: n_expert         = 0
0.00.216.286 I llm_load_print_meta: n_expert_used    = 0
0.00.216.286 I llm_load_print_meta: causal attn      = 1
0.00.216.286 I llm_load_print_meta: pooling type     = 0
0.00.216.287 I llm_load_print_meta: rope type        = 2
0.00.216.287 I llm_load_print_meta: rope scaling     = linear
0.00.216.288 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.216.289 I llm_load_print_meta: freq_scale_train = 1
0.00.216.289 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.216.290 I llm_load_print_meta: rope_finetuned   = unknown
0.00.216.290 I llm_load_print_meta: ssm_d_conv       = 0
0.00.216.291 I llm_load_print_meta: ssm_d_inner      = 0
0.00.216.291 I llm_load_print_meta: ssm_d_state      = 0
0.00.216.292 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.216.293 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.216.293 I llm_load_print_meta: model type       = 2B
0.00.216.294 I llm_load_print_meta: model ftype      = Q8_0
0.00.216.295 I llm_load_print_meta: model params     = 2.51 B
0.00.216.296 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.216.297 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.216.297 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.216.297 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.216.298 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.216.298 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.216.299 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.216.299 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.216.299 I llm_load_print_meta: max token length = 93
0.00.216.319 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.286.916 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.286.921 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.292.086 I llama_new_context_with_model: n_ctx      = 8192
0.00.292.092 I llama_new_context_with_model: n_batch    = 2048
0.00.292.092 I llama_new_context_with_model: n_ubatch   = 512
0.00.292.093 I llama_new_context_with_model: flash_attn = 0
0.00.292.095 I llama_new_context_with_model: freq_base  = 10000.0
0.00.292.096 I llama_new_context_with_model: freq_scale = 1
0.00.320.587 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.320.604 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.320.702 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.321.529 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.321.539 I llama_new_context_with_model: graph nodes  = 601
0.00.321.539 I llama_new_context_with_model: graph splits = 1
0.00.321.541 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.416.739 I main: llama threadpool init, n_threads = 4
0.00.416.751 I 
0.00.416.830 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.416.834 I 
0.00.416.886 I sampler seed: 1014320504
0.00.416.896 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.416.898 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.416.899 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably.

I'm trying to understand the concept of time dilation and special relativity. However, I'm having difficulty understanding the relationship between the two

0.02.843.677 I llama_perf_sampler_print:    sampling time =       4.69 ms /    33 runs   (    0.14 ms per token,  7040.75 tokens per second)
0.02.843.680 I llama_perf_context_print:        load time =     414.83 ms
0.02.843.681 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.843.682 I llama_perf_context_print:        eval time =    2408.19 ms /    32 runs   (   75.26 ms per token,    13.29 tokens per second)
0.02.843.683 I llama_perf_context_print:       total time =    2426.95 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.295s
user	0m39.175s
sys	0m9.353s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3787 (6026da52)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32031.32 ms
main:    total time = 32031.32 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.557 I build: 3787 (6026da52) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.768 I main: llama backend init
0.00.001.882 I main: load the model and apply lora adapter, if any
0.00.022.110 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.161 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.169 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.173 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.174 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.179 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.179 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.180 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.181 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.181 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.182 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.186 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.187 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.188 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.188 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.189 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.895 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.383 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.274 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.281 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.282 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.283 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.283 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.284 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.285 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.287 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.288 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.289 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.290 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.291 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.295 I llama_model_loader: - type  f32:   37 tensors
0.00.132.298 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.298 I llama_model_loader: - type q6_K:   19 tensors
0.00.197.989 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.198.694 I llm_load_vocab: special tokens cache size = 5
0.00.217.152 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.217.164 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.217.165 I llm_load_print_meta: arch             = gemma
0.00.217.165 I llm_load_print_meta: vocab type       = SPM
0.00.217.166 I llm_load_print_meta: n_vocab          = 256000
0.00.217.166 I llm_load_print_meta: n_merges         = 0
0.00.217.167 I llm_load_print_meta: vocab_only       = 0
0.00.217.167 I llm_load_print_meta: n_ctx_train      = 8192
0.00.217.167 I llm_load_print_meta: n_embd           = 2048
0.00.217.168 I llm_load_print_meta: n_layer          = 18
0.00.217.179 I llm_load_print_meta: n_head           = 8
0.00.217.180 I llm_load_print_meta: n_head_kv        = 1
0.00.217.181 I llm_load_print_meta: n_rot            = 256
0.00.217.181 I llm_load_print_meta: n_swa            = 0
0.00.217.181 I llm_load_print_meta: n_embd_head_k    = 256
0.00.217.181 I llm_load_print_meta: n_embd_head_v    = 256
0.00.217.183 I llm_load_print_meta: n_gqa            = 8
0.00.217.184 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.217.185 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.217.185 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.217.187 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.217.187 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.217.187 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.217.188 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.217.189 I llm_load_print_meta: n_ff             = 16384
0.00.217.189 I llm_load_print_meta: n_expert         = 0
0.00.217.189 I llm_load_print_meta: n_expert_used    = 0
0.00.217.190 I llm_load_print_meta: causal attn      = 1
0.00.217.190 I llm_load_print_meta: pooling type     = 0
0.00.217.190 I llm_load_print_meta: rope type        = 2
0.00.217.191 I llm_load_print_meta: rope scaling     = linear
0.00.217.192 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.217.193 I llm_load_print_meta: freq_scale_train = 1
0.00.217.193 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.217.193 I llm_load_print_meta: rope_finetuned   = unknown
0.00.217.194 I llm_load_print_meta: ssm_d_conv       = 0
0.00.217.194 I llm_load_print_meta: ssm_d_inner      = 0
0.00.217.196 I llm_load_print_meta: ssm_d_state      = 0
0.00.217.196 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.217.197 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.217.202 I llm_load_print_meta: model type       = 2B
0.00.217.202 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.217.203 I llm_load_print_meta: model params     = 2.51 B
0.00.217.204 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.217.204 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.217.205 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.217.205 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.217.205 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.217.206 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.217.206 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.217.206 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.217.206 I llm_load_print_meta: max token length = 93
0.00.217.230 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.274.208 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.274.217 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.274.217 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.274.218 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.274.219 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.274.219 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.279.299 I llama_new_context_with_model: n_ctx      = 8192
0.00.279.305 I llama_new_context_with_model: n_batch    = 2048
0.00.279.305 I llama_new_context_with_model: n_ubatch   = 512
0.00.279.306 I llama_new_context_with_model: flash_attn = 0
0.00.279.309 I llama_new_context_with_model: freq_base  = 10000.0
0.00.279.309 I llama_new_context_with_model: freq_scale = 1
0.00.308.601 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.308.617 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.308.704 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.309.541 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.309.549 I llama_new_context_with_model: graph nodes  = 601
0.00.309.550 I llama_new_context_with_model: graph splits = 1
0.00.309.551 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.390.154 I main: llama threadpool init, n_threads = 4
0.00.390.167 I 
0.00.390.240 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.390.244 I 
0.00.390.272 I sampler seed: 293192907
0.00.390.282 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.390.284 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.390.285 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally in a line of text, each word separated by a space. [end of text]


0.01.205.244 I llama_perf_sampler_print:    sampling time =       2.37 ms /    17 runs   (    0.14 ms per token,  7166.95 tokens per second)
0.01.205.247 I llama_perf_context_print:        load time =     388.25 ms
0.01.205.248 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.205.250 I llama_perf_context_print:        eval time =     805.75 ms /    16 runs   (   50.36 ms per token,    19.86 tokens per second)
0.01.205.252 I llama_perf_context_print:       total time =     815.10 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3787 (6026da52)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32154.81 ms
main:    total time = 32154.81 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.554 I build: 3787 (6026da52) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.755 I main: llama backend init
0.00.001.861 I main: load the model and apply lora adapter, if any
0.00.021.927 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.942 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.948 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.950 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.953 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.954 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.955 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.955 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.956 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.956 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.959 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.960 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.961 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.962 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.962 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.640 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.145 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.073 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.079 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.079 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.080 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.080 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.081 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.082 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.085 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.085 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.088 I llama_model_loader: - type  f32:   37 tensors
0.00.132.091 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.092 I llama_model_loader: - type q6_K:   19 tensors
0.00.196.015 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.196.691 I llm_load_vocab: special tokens cache size = 5
0.00.215.132 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.215.148 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.215.148 I llm_load_print_meta: arch             = gemma
0.00.215.149 I llm_load_print_meta: vocab type       = SPM
0.00.215.149 I llm_load_print_meta: n_vocab          = 256000
0.00.215.150 I llm_load_print_meta: n_merges         = 0
0.00.215.150 I llm_load_print_meta: vocab_only       = 0
0.00.215.151 I llm_load_print_meta: n_ctx_train      = 8192
0.00.215.151 I llm_load_print_meta: n_embd           = 2048
0.00.215.151 I llm_load_print_meta: n_layer          = 18
0.00.215.163 I llm_load_print_meta: n_head           = 8
0.00.215.164 I llm_load_print_meta: n_head_kv        = 1
0.00.215.165 I llm_load_print_meta: n_rot            = 256
0.00.215.165 I llm_load_print_meta: n_swa            = 0
0.00.215.166 I llm_load_print_meta: n_embd_head_k    = 256
0.00.215.166 I llm_load_print_meta: n_embd_head_v    = 256
0.00.215.168 I llm_load_print_meta: n_gqa            = 8
0.00.215.169 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.215.170 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.215.170 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.215.172 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.215.172 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.215.172 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.215.173 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.215.173 I llm_load_print_meta: n_ff             = 16384
0.00.215.174 I llm_load_print_meta: n_expert         = 0
0.00.215.174 I llm_load_print_meta: n_expert_used    = 0
0.00.215.175 I llm_load_print_meta: causal attn      = 1
0.00.215.175 I llm_load_print_meta: pooling type     = 0
0.00.215.176 I llm_load_print_meta: rope type        = 2
0.00.215.176 I llm_load_print_meta: rope scaling     = linear
0.00.215.178 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.215.178 I llm_load_print_meta: freq_scale_train = 1
0.00.215.179 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.215.179 I llm_load_print_meta: rope_finetuned   = unknown
0.00.215.179 I llm_load_print_meta: ssm_d_conv       = 0
0.00.215.179 I llm_load_print_meta: ssm_d_inner      = 0
0.00.215.180 I llm_load_print_meta: ssm_d_state      = 0
0.00.215.180 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.215.180 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.215.181 I llm_load_print_meta: model type       = 2B
0.00.215.181 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.215.182 I llm_load_print_meta: model params     = 2.51 B
0.00.215.183 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.215.183 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.215.184 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.215.184 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.215.185 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.215.185 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.215.185 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.215.186 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.215.186 I llm_load_print_meta: max token length = 93
0.00.215.205 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.272.474 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.277.400 I llama_new_context_with_model: n_ctx      = 8192
0.00.277.406 I llama_new_context_with_model: n_batch    = 2048
0.00.277.406 I llama_new_context_with_model: n_ubatch   = 512
0.00.277.407 I llama_new_context_with_model: flash_attn = 0
0.00.277.410 I llama_new_context_with_model: freq_base  = 10000.0
0.00.277.410 I llama_new_context_with_model: freq_scale = 1
0.00.307.453 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.307.468 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.307.560 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.308.392 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.308.399 I llama_new_context_with_model: graph nodes  = 601
0.00.308.399 I llama_new_context_with_model: graph splits = 1
0.00.308.401 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.389.550 I main: llama threadpool init, n_threads = 4
0.00.389.562 I 
0.00.389.637 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.389.640 I 
0.00.389.678 I sampler seed: 3080878116
0.00.389.687 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.389.690 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.389.690 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities, and other forms of deception or misrepresentation in the workplace.

**Answer the following questions about workplace deception:**

**1. What are the

0.02.005.572 I llama_perf_sampler_print:    sampling time =       4.70 ms /    33 runs   (    0.14 ms per token,  7016.80 tokens per second)
0.02.005.575 I llama_perf_context_print:        load time =     387.67 ms
0.02.005.576 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.005.578 I llama_perf_context_print:        eval time =    1597.75 ms /    32 runs   (   49.93 ms per token,    20.03 tokens per second)
0.02.005.579 I llama_perf_context_print:       total time =    1616.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.242s
user	8m11.464s
sys	0m6.904s
