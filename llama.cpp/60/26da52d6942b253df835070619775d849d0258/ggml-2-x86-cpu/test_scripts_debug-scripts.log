+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.615 I build: 3787 (6026da52) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.002.793 I main: load the model and apply lora adapter, if any
0.00.024.591 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.781 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.865 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.876 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.877 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.882 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.883 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.884 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.886 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.886 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.887 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.893 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.895 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.896 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.896 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.897 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.205 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.995 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.020 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.027 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.028 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.028 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.029 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.030 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.031 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.034 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.035 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.036 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.037 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.038 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.046 I llama_model_loader: - type  f32:   37 tensors
0.00.196.049 I llama_model_loader: - type q8_0:  127 tensors
0.00.467.351 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.468.385 I llm_load_vocab: special tokens cache size = 5
0.00.526.336 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.526.393 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.526.394 I llm_load_print_meta: arch             = gemma
0.00.526.395 I llm_load_print_meta: vocab type       = SPM
0.00.526.396 I llm_load_print_meta: n_vocab          = 256000
0.00.526.398 I llm_load_print_meta: n_merges         = 0
0.00.526.399 I llm_load_print_meta: vocab_only       = 0
0.00.526.399 I llm_load_print_meta: n_ctx_train      = 8192
0.00.526.400 I llm_load_print_meta: n_embd           = 2048
0.00.526.400 I llm_load_print_meta: n_layer          = 18
0.00.526.435 I llm_load_print_meta: n_head           = 8
0.00.526.441 I llm_load_print_meta: n_head_kv        = 1
0.00.526.442 I llm_load_print_meta: n_rot            = 256
0.00.526.442 I llm_load_print_meta: n_swa            = 0
0.00.526.443 I llm_load_print_meta: n_embd_head_k    = 256
0.00.526.443 I llm_load_print_meta: n_embd_head_v    = 256
0.00.526.447 I llm_load_print_meta: n_gqa            = 8
0.00.526.451 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.526.470 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.526.472 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.526.473 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.526.474 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.526.474 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.526.475 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.526.480 I llm_load_print_meta: n_ff             = 16384
0.00.526.480 I llm_load_print_meta: n_expert         = 0
0.00.526.481 I llm_load_print_meta: n_expert_used    = 0
0.00.526.481 I llm_load_print_meta: causal attn      = 1
0.00.526.481 I llm_load_print_meta: pooling type     = 0
0.00.526.482 I llm_load_print_meta: rope type        = 2
0.00.526.482 I llm_load_print_meta: rope scaling     = linear
0.00.526.484 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.526.484 I llm_load_print_meta: freq_scale_train = 1
0.00.526.485 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.526.485 I llm_load_print_meta: rope_finetuned   = unknown
0.00.526.485 I llm_load_print_meta: ssm_d_conv       = 0
0.00.526.501 I llm_load_print_meta: ssm_d_inner      = 0
0.00.526.506 I llm_load_print_meta: ssm_d_state      = 0
0.00.526.506 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.526.507 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.526.508 I llm_load_print_meta: model type       = 2B
0.00.526.511 I llm_load_print_meta: model ftype      = Q8_0
0.00.526.512 I llm_load_print_meta: model params     = 2.51 B
0.00.526.513 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.526.513 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.526.514 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.526.514 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.526.515 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.526.515 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.526.515 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.526.516 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.526.516 I llm_load_print_meta: max token length = 93
0.00.526.690 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.624.419 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.624.431 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.624.432 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.624.433 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.624.433 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.624.434 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.629.930 I llama_new_context_with_model: n_ctx      = 8192
0.00.629.937 I llama_new_context_with_model: n_batch    = 2048
0.00.629.937 I llama_new_context_with_model: n_ubatch   = 512
0.00.629.938 I llama_new_context_with_model: flash_attn = 0
0.00.629.941 I llama_new_context_with_model: freq_base  = 10000.0
0.00.629.941 I llama_new_context_with_model: freq_scale = 1
0.00.659.567 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.659.608 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.659.728 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.661.198 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.661.205 I llama_new_context_with_model: graph nodes  = 601
0.00.661.205 I llama_new_context_with_model: graph splits = 1
0.00.661.221 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.270.868 I main: llama threadpool init, n_threads = 4
0.01.270.880 I 
0.01.270.974 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.270.978 I 
0.01.271.141 I sampler seed: 3627722923
0.01.271.153 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.271.159 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.271.160 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities with a mischievous grin.

This is the description of a:

a) Fairy
b) Demon
c) Vampire

The answer is a

0.14.836.892 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.28 tokens per second)
0.14.836.895 I llama_perf_context_print:        load time =    1267.99 ms
0.14.836.896 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.836.898 I llama_perf_context_print:        eval time =   13483.77 ms /    32 runs   (  421.37 ms per token,     2.37 tokens per second)
0.14.836.912 I llama_perf_context_print:       total time =   13566.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.664 I build: 3787 (6026da52) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.893 I main: llama backend init
0.00.002.864 I main: load the model and apply lora adapter, if any
0.00.025.447 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.563 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.581 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.585 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.591 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.592 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.594 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.597 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.598 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.599 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.609 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.614 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.615 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.617 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.619 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.704 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.413 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.513 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.521 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.522 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.523 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.524 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.525 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.526 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.529 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.530 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.531 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.532 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.196.533 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.540 I llama_model_loader: - type  f32:   37 tensors
0.00.196.545 I llama_model_loader: - type q8_0:  127 tensors
0.00.469.645 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.470.716 I llm_load_vocab: special tokens cache size = 5
0.00.528.781 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.528.842 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.528.846 I llm_load_print_meta: arch             = gemma
0.00.528.847 I llm_load_print_meta: vocab type       = SPM
0.00.528.848 I llm_load_print_meta: n_vocab          = 256000
0.00.528.850 I llm_load_print_meta: n_merges         = 0
0.00.528.851 I llm_load_print_meta: vocab_only       = 0
0.00.528.851 I llm_load_print_meta: n_ctx_train      = 8192
0.00.528.852 I llm_load_print_meta: n_embd           = 2048
0.00.528.852 I llm_load_print_meta: n_layer          = 18
0.00.528.888 I llm_load_print_meta: n_head           = 8
0.00.528.897 I llm_load_print_meta: n_head_kv        = 1
0.00.528.897 I llm_load_print_meta: n_rot            = 256
0.00.528.898 I llm_load_print_meta: n_swa            = 0
0.00.528.899 I llm_load_print_meta: n_embd_head_k    = 256
0.00.528.900 I llm_load_print_meta: n_embd_head_v    = 256
0.00.528.905 I llm_load_print_meta: n_gqa            = 8
0.00.528.909 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.528.914 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.528.915 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.528.917 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.528.918 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.528.919 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.528.919 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.528.924 I llm_load_print_meta: n_ff             = 16384
0.00.528.924 I llm_load_print_meta: n_expert         = 0
0.00.528.925 I llm_load_print_meta: n_expert_used    = 0
0.00.528.925 I llm_load_print_meta: causal attn      = 1
0.00.528.928 I llm_load_print_meta: pooling type     = 0
0.00.528.928 I llm_load_print_meta: rope type        = 2
0.00.528.929 I llm_load_print_meta: rope scaling     = linear
0.00.528.930 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.528.931 I llm_load_print_meta: freq_scale_train = 1
0.00.528.931 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.528.932 I llm_load_print_meta: rope_finetuned   = unknown
0.00.528.932 I llm_load_print_meta: ssm_d_conv       = 0
0.00.528.932 I llm_load_print_meta: ssm_d_inner      = 0
0.00.528.932 I llm_load_print_meta: ssm_d_state      = 0
0.00.528.933 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.528.933 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.528.934 I llm_load_print_meta: model type       = 2B
0.00.528.935 I llm_load_print_meta: model ftype      = Q8_0
0.00.528.945 I llm_load_print_meta: model params     = 2.51 B
0.00.528.948 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.528.949 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.528.950 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.528.950 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.528.951 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.528.951 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.528.952 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.528.952 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.528.953 I llm_load_print_meta: max token length = 93
0.00.529.135 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.623.023 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.628.724 I llama_new_context_with_model: n_ctx      = 8192
0.00.628.732 I llama_new_context_with_model: n_batch    = 2048
0.00.628.732 I llama_new_context_with_model: n_ubatch   = 512
0.00.628.733 I llama_new_context_with_model: flash_attn = 0
0.00.628.736 I llama_new_context_with_model: freq_base  = 10000.0
0.00.628.737 I llama_new_context_with_model: freq_scale = 1
0.00.659.132 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.659.175 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.659.288 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.660.658 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.660.666 I llama_new_context_with_model: graph nodes  = 601
0.00.660.666 I llama_new_context_with_model: graph splits = 1
0.00.660.685 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.270.749 I main: llama threadpool init, n_threads = 4
0.01.270.761 I 
0.01.270.863 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.270.868 I 
0.01.271.041 I sampler seed: 2292343286
0.01.271.053 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.271.060 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.271.061 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically in importance in human societies.

**a. Economic impact**
**b. Social impact**
**c. Political impact**
**d

0.14.812.288 I llama_perf_sampler_print:    sampling time =      49.08 ms /    33 runs   (    1.49 ms per token,   672.39 tokens per second)
0.14.812.292 I llama_perf_context_print:        load time =    1267.79 ms
0.14.812.293 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.812.316 I llama_perf_context_print:        eval time =   13459.49 ms /    32 runs   (  420.61 ms per token,     2.38 tokens per second)
0.14.812.318 I llama_perf_context_print:       total time =   13541.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.628 I build: 3787 (6026da52) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.002.772 I main: load the model and apply lora adapter, if any
0.00.024.871 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.066 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.156 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.167 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.168 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.172 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.174 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.175 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.176 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.177 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.178 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.185 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.186 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.186 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.187 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.188 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.307 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.480 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.626 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.633 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.634 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.635 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.636 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.637 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.638 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.641 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.641 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.643 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.643 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.196.644 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.652 I llama_model_loader: - type  f32:   37 tensors
0.00.196.656 I llama_model_loader: - type q8_0:  127 tensors
0.00.472.730 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.473.723 I llm_load_vocab: special tokens cache size = 5
0.00.531.761 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.531.818 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.531.822 I llm_load_print_meta: arch             = gemma
0.00.531.823 I llm_load_print_meta: vocab type       = SPM
0.00.531.824 I llm_load_print_meta: n_vocab          = 256000
0.00.531.826 I llm_load_print_meta: n_merges         = 0
0.00.531.826 I llm_load_print_meta: vocab_only       = 0
0.00.531.827 I llm_load_print_meta: n_ctx_train      = 8192
0.00.531.827 I llm_load_print_meta: n_embd           = 2048
0.00.531.828 I llm_load_print_meta: n_layer          = 18
0.00.531.862 I llm_load_print_meta: n_head           = 8
0.00.531.872 I llm_load_print_meta: n_head_kv        = 1
0.00.531.873 I llm_load_print_meta: n_rot            = 256
0.00.531.873 I llm_load_print_meta: n_swa            = 0
0.00.531.873 I llm_load_print_meta: n_embd_head_k    = 256
0.00.531.874 I llm_load_print_meta: n_embd_head_v    = 256
0.00.531.879 I llm_load_print_meta: n_gqa            = 8
0.00.531.883 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.531.888 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.531.889 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.531.891 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.531.892 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.531.893 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.531.893 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.531.898 I llm_load_print_meta: n_ff             = 16384
0.00.531.898 I llm_load_print_meta: n_expert         = 0
0.00.531.899 I llm_load_print_meta: n_expert_used    = 0
0.00.531.901 I llm_load_print_meta: causal attn      = 1
0.00.531.901 I llm_load_print_meta: pooling type     = 0
0.00.531.902 I llm_load_print_meta: rope type        = 2
0.00.531.902 I llm_load_print_meta: rope scaling     = linear
0.00.531.904 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.531.905 I llm_load_print_meta: freq_scale_train = 1
0.00.531.905 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.531.905 I llm_load_print_meta: rope_finetuned   = unknown
0.00.531.905 I llm_load_print_meta: ssm_d_conv       = 0
0.00.531.906 I llm_load_print_meta: ssm_d_inner      = 0
0.00.531.906 I llm_load_print_meta: ssm_d_state      = 0
0.00.531.906 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.531.908 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.531.909 I llm_load_print_meta: model type       = 2B
0.00.531.910 I llm_load_print_meta: model ftype      = Q8_0
0.00.531.911 I llm_load_print_meta: model params     = 2.51 B
0.00.531.912 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.531.912 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.531.913 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.531.925 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.531.925 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.531.926 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.531.926 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.531.927 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.531.927 I llm_load_print_meta: max token length = 93
0.00.532.101 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.608.831 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.608.841 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.608.842 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.608.843 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.608.844 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.608.844 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.614.458 I llama_new_context_with_model: n_ctx      = 8192
0.00.614.466 I llama_new_context_with_model: n_batch    = 2048
0.00.614.467 I llama_new_context_with_model: n_ubatch   = 512
0.00.614.467 I llama_new_context_with_model: flash_attn = 0
0.00.614.470 I llama_new_context_with_model: freq_base  = 10000.0
0.00.614.471 I llama_new_context_with_model: freq_scale = 1
0.00.643.928 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.643.968 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.644.083 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.645.541 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.645.547 I llama_new_context_with_model: graph nodes  = 601
0.00.645.547 I llama_new_context_with_model: graph splits = 1
0.00.645.564 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.290.587 I main: llama threadpool init, n_threads = 4
0.01.290.598 I 
0.01.290.689 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.290.693 I 
0.01.290.855 I sampler seed: 1706407283
0.01.290.866 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.290.885 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.290.887 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities.

I am unable to generate a response as the provided text contains sexually suggestive content that is not appropriate for me to provide. [end of text]


0.13.553.676 I llama_perf_sampler_print:    sampling time =      44.64 ms /    30 runs   (    1.49 ms per token,   672.10 tokens per second)
0.13.553.679 I llama_perf_context_print:        load time =    1287.73 ms
0.13.553.694 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.553.696 I llama_perf_context_print:        eval time =   12188.07 ms /    29 runs   (  420.28 ms per token,     2.38 tokens per second)
0.13.553.696 I llama_perf_context_print:       total time =   12263.10 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.645 I build: 3787 (6026da52) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.881 I main: llama backend init
0.00.002.822 I main: load the model and apply lora adapter, if any
0.00.024.622 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.815 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.903 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.915 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.918 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.922 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.925 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.926 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.927 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.929 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.931 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.938 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.940 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.942 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.943 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.945 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.914 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.943 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.159 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.166 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.167 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.168 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.169 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.170 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.171 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.173 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.174 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.175 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.176 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.196.177 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.185 I llama_model_loader: - type  f32:   37 tensors
0.00.196.189 I llama_model_loader: - type q8_0:  127 tensors
0.00.462.364 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.463.387 I llm_load_vocab: special tokens cache size = 5
0.00.521.336 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.521.400 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.521.401 I llm_load_print_meta: arch             = gemma
0.00.521.402 I llm_load_print_meta: vocab type       = SPM
0.00.521.403 I llm_load_print_meta: n_vocab          = 256000
0.00.521.405 I llm_load_print_meta: n_merges         = 0
0.00.521.406 I llm_load_print_meta: vocab_only       = 0
0.00.521.406 I llm_load_print_meta: n_ctx_train      = 8192
0.00.521.407 I llm_load_print_meta: n_embd           = 2048
0.00.521.407 I llm_load_print_meta: n_layer          = 18
0.00.521.442 I llm_load_print_meta: n_head           = 8
0.00.521.448 I llm_load_print_meta: n_head_kv        = 1
0.00.521.449 I llm_load_print_meta: n_rot            = 256
0.00.521.449 I llm_load_print_meta: n_swa            = 0
0.00.521.449 I llm_load_print_meta: n_embd_head_k    = 256
0.00.521.450 I llm_load_print_meta: n_embd_head_v    = 256
0.00.521.454 I llm_load_print_meta: n_gqa            = 8
0.00.521.459 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.521.463 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.521.464 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.521.465 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.521.466 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.521.466 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.521.467 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.521.472 I llm_load_print_meta: n_ff             = 16384
0.00.521.472 I llm_load_print_meta: n_expert         = 0
0.00.521.473 I llm_load_print_meta: n_expert_used    = 0
0.00.521.473 I llm_load_print_meta: causal attn      = 1
0.00.521.473 I llm_load_print_meta: pooling type     = 0
0.00.521.474 I llm_load_print_meta: rope type        = 2
0.00.521.474 I llm_load_print_meta: rope scaling     = linear
0.00.521.475 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.521.476 I llm_load_print_meta: freq_scale_train = 1
0.00.521.476 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.521.476 I llm_load_print_meta: rope_finetuned   = unknown
0.00.521.477 I llm_load_print_meta: ssm_d_conv       = 0
0.00.521.477 I llm_load_print_meta: ssm_d_inner      = 0
0.00.521.477 I llm_load_print_meta: ssm_d_state      = 0
0.00.521.477 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.521.478 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.521.479 I llm_load_print_meta: model type       = 2B
0.00.521.480 I llm_load_print_meta: model ftype      = Q8_0
0.00.521.480 I llm_load_print_meta: model params     = 2.51 B
0.00.521.481 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.521.506 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.521.507 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.521.507 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.521.508 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.521.508 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.521.509 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.521.509 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.521.509 I llm_load_print_meta: max token length = 93
0.00.521.683 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.592.534 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.592.546 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.598.317 I llama_new_context_with_model: n_ctx      = 8192
0.00.598.325 I llama_new_context_with_model: n_batch    = 2048
0.00.598.326 I llama_new_context_with_model: n_ubatch   = 512
0.00.598.326 I llama_new_context_with_model: flash_attn = 0
0.00.598.329 I llama_new_context_with_model: freq_base  = 10000.0
0.00.598.330 I llama_new_context_with_model: freq_scale = 1
0.00.627.571 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.627.612 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.627.736 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.629.086 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.629.094 I llama_new_context_with_model: graph nodes  = 601
0.00.629.095 I llama_new_context_with_model: graph splits = 1
0.00.629.111 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.241.533 I main: llama threadpool init, n_threads = 4
0.01.241.544 I 
0.01.241.647 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.241.652 I 
0.01.241.818 I sampler seed: 3962301919
0.01.241.829 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.241.836 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.241.837 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably. 

I apologize for the delay, but I am currently experiencing technical difficulties. I am working on resolving them as soon as possible.

I

0.14.737.824 I llama_perf_sampler_print:    sampling time =      49.05 ms /    33 runs   (    1.49 ms per token,   672.82 tokens per second)
0.14.737.828 I llama_perf_context_print:        load time =    1238.63 ms
0.14.737.829 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.737.832 I llama_perf_context_print:        eval time =   13414.33 ms /    32 runs   (  419.20 ms per token,     2.39 tokens per second)
0.14.737.843 I llama_perf_context_print:       total time =   13496.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m7.748s
user	3m43.855s
sys	0m9.490s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3787 (6026da52)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198176.16 ms
main:    total time = 198176.16 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.658 I build: 3787 (6026da52) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.892 I main: llama backend init
0.00.002.850 I main: load the model and apply lora adapter, if any
0.00.024.924 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.101 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.187 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.198 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.199 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.204 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.205 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.206 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.219 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.220 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.221 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.227 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.228 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.234 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.236 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.237 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.422 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.178 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.229 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.238 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.239 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.240 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.241 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.242 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.243 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.246 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.247 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.248 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.249 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.250 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.258 I llama_model_loader: - type  f32:   37 tensors
0.00.196.262 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.262 I llama_model_loader: - type q6_K:   19 tensors
0.00.472.843 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.473.842 I llm_load_vocab: special tokens cache size = 5
0.00.531.995 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.532.053 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.532.054 I llm_load_print_meta: arch             = gemma
0.00.532.055 I llm_load_print_meta: vocab type       = SPM
0.00.532.056 I llm_load_print_meta: n_vocab          = 256000
0.00.532.058 I llm_load_print_meta: n_merges         = 0
0.00.532.058 I llm_load_print_meta: vocab_only       = 0
0.00.532.059 I llm_load_print_meta: n_ctx_train      = 8192
0.00.532.059 I llm_load_print_meta: n_embd           = 2048
0.00.532.059 I llm_load_print_meta: n_layer          = 18
0.00.532.093 I llm_load_print_meta: n_head           = 8
0.00.532.099 I llm_load_print_meta: n_head_kv        = 1
0.00.532.100 I llm_load_print_meta: n_rot            = 256
0.00.532.100 I llm_load_print_meta: n_swa            = 0
0.00.532.100 I llm_load_print_meta: n_embd_head_k    = 256
0.00.532.101 I llm_load_print_meta: n_embd_head_v    = 256
0.00.532.105 I llm_load_print_meta: n_gqa            = 8
0.00.532.109 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.532.114 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.532.115 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.532.117 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.532.117 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.532.118 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.532.118 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.532.123 I llm_load_print_meta: n_ff             = 16384
0.00.532.123 I llm_load_print_meta: n_expert         = 0
0.00.532.124 I llm_load_print_meta: n_expert_used    = 0
0.00.532.124 I llm_load_print_meta: causal attn      = 1
0.00.532.125 I llm_load_print_meta: pooling type     = 0
0.00.532.125 I llm_load_print_meta: rope type        = 2
0.00.532.125 I llm_load_print_meta: rope scaling     = linear
0.00.532.127 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.532.127 I llm_load_print_meta: freq_scale_train = 1
0.00.532.127 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.532.128 I llm_load_print_meta: rope_finetuned   = unknown
0.00.532.128 I llm_load_print_meta: ssm_d_conv       = 0
0.00.532.128 I llm_load_print_meta: ssm_d_inner      = 0
0.00.532.129 I llm_load_print_meta: ssm_d_state      = 0
0.00.532.129 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.532.129 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.532.130 I llm_load_print_meta: model type       = 2B
0.00.532.131 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.532.131 I llm_load_print_meta: model params     = 2.51 B
0.00.532.132 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.532.133 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.532.134 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.532.134 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.532.134 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.532.135 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.532.135 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.532.136 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.532.136 I llm_load_print_meta: max token length = 93
0.00.532.309 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.591.025 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.591.035 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.591.036 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.591.037 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.591.037 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.591.038 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.596.662 I llama_new_context_with_model: n_ctx      = 8192
0.00.596.670 I llama_new_context_with_model: n_batch    = 2048
0.00.596.671 I llama_new_context_with_model: n_ubatch   = 512
0.00.596.672 I llama_new_context_with_model: flash_attn = 0
0.00.596.674 I llama_new_context_with_model: freq_base  = 10000.0
0.00.596.675 I llama_new_context_with_model: freq_scale = 1
0.00.625.896 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.625.937 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.626.053 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.627.393 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.627.399 I llama_new_context_with_model: graph nodes  = 601
0.00.627.400 I llama_new_context_with_model: graph splits = 1
0.00.627.416 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.210.935 I main: llama threadpool init, n_threads = 4
0.01.210.946 I 
0.01.211.040 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.211.043 I 
0.01.211.204 I sampler seed: 2343913236
0.01.211.215 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.211.219 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.211.220 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities

I am unable to generate textual responses that contain sexually suggestive or inappropriate content. My purpose is to assist users with tasks and provide information. [end of text]


0.11.807.306 I llama_perf_sampler_print:    sampling time =      47.78 ms /    32 runs   (    1.49 ms per token,   669.78 tokens per second)
0.11.807.310 I llama_perf_context_print:        load time =    1208.00 ms
0.11.807.312 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.807.324 I llama_perf_context_print:        eval time =   10517.11 ms /    31 runs   (  339.26 ms per token,     2.95 tokens per second)
0.11.807.325 I llama_perf_context_print:       total time =   10596.38 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3787 (6026da52)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198224.54 ms
main:    total time = 198224.54 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.629 I build: 3787 (6026da52) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.002.800 I main: load the model and apply lora adapter, if any
0.00.024.738 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.829 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.841 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.843 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.847 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.848 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.849 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.849 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.850 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.851 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.857 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.858 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.858 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.859 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.860 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.987 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.095 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.193 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.200 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.202 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.202 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.203 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.204 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.205 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.208 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.209 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.217 I llama_model_loader: - type  f32:   37 tensors
0.00.196.220 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.221 I llama_model_loader: - type q6_K:   19 tensors
0.00.476.630 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.477.638 I llm_load_vocab: special tokens cache size = 5
0.00.535.636 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.535.702 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.535.703 I llm_load_print_meta: arch             = gemma
0.00.535.703 I llm_load_print_meta: vocab type       = SPM
0.00.535.704 I llm_load_print_meta: n_vocab          = 256000
0.00.535.707 I llm_load_print_meta: n_merges         = 0
0.00.535.707 I llm_load_print_meta: vocab_only       = 0
0.00.535.708 I llm_load_print_meta: n_ctx_train      = 8192
0.00.535.708 I llm_load_print_meta: n_embd           = 2048
0.00.535.708 I llm_load_print_meta: n_layer          = 18
0.00.535.742 I llm_load_print_meta: n_head           = 8
0.00.535.749 I llm_load_print_meta: n_head_kv        = 1
0.00.535.749 I llm_load_print_meta: n_rot            = 256
0.00.535.750 I llm_load_print_meta: n_swa            = 0
0.00.535.750 I llm_load_print_meta: n_embd_head_k    = 256
0.00.535.750 I llm_load_print_meta: n_embd_head_v    = 256
0.00.535.755 I llm_load_print_meta: n_gqa            = 8
0.00.535.759 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.535.764 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.535.765 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.535.767 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.535.767 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.535.767 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.535.768 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.535.772 I llm_load_print_meta: n_ff             = 16384
0.00.535.773 I llm_load_print_meta: n_expert         = 0
0.00.535.773 I llm_load_print_meta: n_expert_used    = 0
0.00.535.774 I llm_load_print_meta: causal attn      = 1
0.00.535.783 I llm_load_print_meta: pooling type     = 0
0.00.535.784 I llm_load_print_meta: rope type        = 2
0.00.535.784 I llm_load_print_meta: rope scaling     = linear
0.00.535.786 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.535.786 I llm_load_print_meta: freq_scale_train = 1
0.00.535.786 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.535.787 I llm_load_print_meta: rope_finetuned   = unknown
0.00.535.787 I llm_load_print_meta: ssm_d_conv       = 0
0.00.535.787 I llm_load_print_meta: ssm_d_inner      = 0
0.00.535.788 I llm_load_print_meta: ssm_d_state      = 0
0.00.535.788 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.535.788 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.535.789 I llm_load_print_meta: model type       = 2B
0.00.535.790 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.535.791 I llm_load_print_meta: model params     = 2.51 B
0.00.535.792 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.535.792 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.535.793 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.535.793 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.535.793 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.535.794 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.535.794 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.535.794 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.535.795 I llm_load_print_meta: max token length = 93
0.00.535.965 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.594.540 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.599.997 I llama_new_context_with_model: n_ctx      = 8192
0.00.600.005 I llama_new_context_with_model: n_batch    = 2048
0.00.600.005 I llama_new_context_with_model: n_ubatch   = 512
0.00.600.006 I llama_new_context_with_model: flash_attn = 0
0.00.600.008 I llama_new_context_with_model: freq_base  = 10000.0
0.00.600.009 I llama_new_context_with_model: freq_scale = 1
0.00.629.216 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.629.260 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.629.368 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.630.718 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.630.725 I llama_new_context_with_model: graph nodes  = 601
0.00.630.725 I llama_new_context_with_model: graph splits = 1
0.00.630.741 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.206.769 I main: llama threadpool init, n_threads = 4
0.01.206.782 I 
0.01.206.876 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.206.880 I 
0.01.207.044 I sampler seed: 2476990627
0.01.207.055 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.207.060 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.207.061 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 encompassing a multitude of roles, responsibilities, and relationships within an organization.

**Key Functions of a Project Manager:**

* Plan and organize project activities

0.12.124.631 I llama_perf_sampler_print:    sampling time =      49.20 ms /    33 runs   (    1.49 ms per token,   670.80 tokens per second)
0.12.124.634 I llama_perf_context_print:        load time =    1203.88 ms
0.12.124.636 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.124.637 I llama_perf_context_print:        eval time =   10835.89 ms /    32 runs   (  338.62 ms per token,     2.95 tokens per second)
0.12.124.639 I llama_perf_context_print:       total time =   10917.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m3.243s
user	50m3.677s
sys	0m6.365s
