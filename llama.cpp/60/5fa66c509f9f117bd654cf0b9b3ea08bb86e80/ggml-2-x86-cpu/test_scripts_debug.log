+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.657 I build: 4204 (605fa66c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.865 I main: llama backend init
0.00.000.873 I main: load the model and apply lora adapter, if any
0.00.023.438 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.449 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.543 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.555 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.557 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.563 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.568 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.569 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.570 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.572 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.574 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.583 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.584 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.586 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.587 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.589 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.701 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.053 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.570 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.578 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.579 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.581 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.582 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.583 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.585 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.589 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.591 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.593 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.594 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.348.595 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.603 I llama_model_loader: - type  f32:   37 tensors
0.00.348.605 I llama_model_loader: - type q8_0:  127 tensors
0.00.563.825 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.630.082 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.631.158 I llm_load_vocab: special tokens cache size = 5
0.00.831.371 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.831.447 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.831.448 I llm_load_print_meta: arch             = gemma
0.00.831.449 I llm_load_print_meta: vocab type       = SPM
0.00.831.450 I llm_load_print_meta: n_vocab          = 256000
0.00.831.452 I llm_load_print_meta: n_merges         = 0
0.00.831.453 I llm_load_print_meta: vocab_only       = 0
0.00.831.453 I llm_load_print_meta: n_ctx_train      = 8192
0.00.831.454 I llm_load_print_meta: n_embd           = 2048
0.00.831.454 I llm_load_print_meta: n_layer          = 18
0.00.831.518 I llm_load_print_meta: n_head           = 8
0.00.831.525 I llm_load_print_meta: n_head_kv        = 1
0.00.831.526 I llm_load_print_meta: n_rot            = 256
0.00.831.526 I llm_load_print_meta: n_swa            = 0
0.00.831.527 I llm_load_print_meta: n_embd_head_k    = 256
0.00.831.528 I llm_load_print_meta: n_embd_head_v    = 256
0.00.831.532 I llm_load_print_meta: n_gqa            = 8
0.00.831.537 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.831.542 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.831.543 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.831.549 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.831.550 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.831.551 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.831.551 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.831.557 I llm_load_print_meta: n_ff             = 16384
0.00.831.557 I llm_load_print_meta: n_expert         = 0
0.00.831.558 I llm_load_print_meta: n_expert_used    = 0
0.00.831.558 I llm_load_print_meta: causal attn      = 1
0.00.831.559 I llm_load_print_meta: pooling type     = 0
0.00.831.559 I llm_load_print_meta: rope type        = 2
0.00.831.559 I llm_load_print_meta: rope scaling     = linear
0.00.831.561 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.831.562 I llm_load_print_meta: freq_scale_train = 1
0.00.831.562 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.831.562 I llm_load_print_meta: rope_finetuned   = unknown
0.00.831.563 I llm_load_print_meta: ssm_d_conv       = 0
0.00.831.564 I llm_load_print_meta: ssm_d_inner      = 0
0.00.831.565 I llm_load_print_meta: ssm_d_state      = 0
0.00.831.565 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.831.565 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.831.566 I llm_load_print_meta: model type       = 2B
0.00.831.567 I llm_load_print_meta: model ftype      = Q8_0
0.00.831.568 I llm_load_print_meta: model params     = 2.51 B
0.00.831.577 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.831.581 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.831.581 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.831.582 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.831.582 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.831.583 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.831.583 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.831.584 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.831.589 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.831.591 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.831.591 I llm_load_print_meta: max token length = 93
0.00.933.820 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.933.828 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.933.829 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.933.830 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.933.831 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.933.831 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.939.710 I llama_new_context_with_model: n_seq_max     = 1
0.00.939.719 I llama_new_context_with_model: n_ctx         = 4096
0.00.939.719 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.939.720 I llama_new_context_with_model: n_batch       = 2048
0.00.939.720 I llama_new_context_with_model: n_ubatch      = 512
0.00.939.721 I llama_new_context_with_model: flash_attn    = 0
0.00.939.724 I llama_new_context_with_model: freq_base     = 10000.0
0.00.939.724 I llama_new_context_with_model: freq_scale    = 1
0.00.939.725 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.954.537 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.954.581 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.954.711 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.957.226 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.957.230 I llama_new_context_with_model: graph nodes  = 601
0.00.957.230 I llama_new_context_with_model: graph splits = 1
0.00.957.252 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.567.806 I main: llama threadpool init, n_threads = 4
0.01.567.823 I 
0.01.567.933 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.567.937 I 
0.01.568.179 I sampler seed: 1972274020
0.01.568.193 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.568.202 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.568.206 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.568.206 I 
 maneuvring is the process by which a virus uses the host cell machinery to replicate its genome. This process involves attachment of the virus to the host cell surface

0.15.157.857 I llama_perf_sampler_print:    sampling time =      48.97 ms /    33 runs   (    1.48 ms per token,   673.90 tokens per second)
0.15.157.861 I llama_perf_context_print:        load time =    1566.83 ms
0.15.157.863 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.157.865 I llama_perf_context_print:        eval time =   13501.25 ms /    32 runs   (  421.91 ms per token,     2.37 tokens per second)
0.15.157.866 I llama_perf_context_print:       total time =   13590.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.666 I build: 4204 (605fa66c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.872 I main: llama backend init
0.00.000.880 I main: load the model and apply lora adapter, if any
0.00.023.137 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.230 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.244 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.248 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.254 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.255 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.257 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.258 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.259 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.260 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.267 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.272 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.273 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.274 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.275 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.417 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.154 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.578 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.586 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.588 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.589 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.590 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.592 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.593 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.597 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.598 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.600 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.601 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.348.603 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.611 I llama_model_loader: - type  f32:   37 tensors
0.00.348.613 I llama_model_loader: - type q8_0:  127 tensors
0.00.583.560 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.645.176 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.646.155 I llm_load_vocab: special tokens cache size = 5
0.00.835.935 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.836.008 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.836.009 I llm_load_print_meta: arch             = gemma
0.00.836.009 I llm_load_print_meta: vocab type       = SPM
0.00.836.010 I llm_load_print_meta: n_vocab          = 256000
0.00.836.013 I llm_load_print_meta: n_merges         = 0
0.00.836.013 I llm_load_print_meta: vocab_only       = 0
0.00.836.014 I llm_load_print_meta: n_ctx_train      = 8192
0.00.836.014 I llm_load_print_meta: n_embd           = 2048
0.00.836.014 I llm_load_print_meta: n_layer          = 18
0.00.836.080 I llm_load_print_meta: n_head           = 8
0.00.836.087 I llm_load_print_meta: n_head_kv        = 1
0.00.836.088 I llm_load_print_meta: n_rot            = 256
0.00.836.089 I llm_load_print_meta: n_swa            = 0
0.00.836.090 I llm_load_print_meta: n_embd_head_k    = 256
0.00.836.090 I llm_load_print_meta: n_embd_head_v    = 256
0.00.836.095 I llm_load_print_meta: n_gqa            = 8
0.00.836.099 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.836.104 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.836.105 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.836.106 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.836.107 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.836.107 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.836.108 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.836.112 I llm_load_print_meta: n_ff             = 16384
0.00.836.113 I llm_load_print_meta: n_expert         = 0
0.00.836.113 I llm_load_print_meta: n_expert_used    = 0
0.00.836.114 I llm_load_print_meta: causal attn      = 1
0.00.836.114 I llm_load_print_meta: pooling type     = 0
0.00.836.115 I llm_load_print_meta: rope type        = 2
0.00.836.115 I llm_load_print_meta: rope scaling     = linear
0.00.836.117 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.836.117 I llm_load_print_meta: freq_scale_train = 1
0.00.836.118 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.836.118 I llm_load_print_meta: rope_finetuned   = unknown
0.00.836.119 I llm_load_print_meta: ssm_d_conv       = 0
0.00.836.119 I llm_load_print_meta: ssm_d_inner      = 0
0.00.836.119 I llm_load_print_meta: ssm_d_state      = 0
0.00.836.120 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.836.120 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.836.121 I llm_load_print_meta: model type       = 2B
0.00.836.122 I llm_load_print_meta: model ftype      = Q8_0
0.00.836.122 I llm_load_print_meta: model params     = 2.51 B
0.00.836.132 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.836.133 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.836.133 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.836.134 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.836.135 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.836.135 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.836.135 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.836.136 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.836.142 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.836.143 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.836.144 I llm_load_print_meta: max token length = 93
0.00.933.300 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.939.168 I llama_new_context_with_model: n_seq_max     = 1
0.00.939.176 I llama_new_context_with_model: n_ctx         = 4096
0.00.939.176 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.939.177 I llama_new_context_with_model: n_batch       = 2048
0.00.939.177 I llama_new_context_with_model: n_ubatch      = 512
0.00.939.177 I llama_new_context_with_model: flash_attn    = 0
0.00.939.180 I llama_new_context_with_model: freq_base     = 10000.0
0.00.939.180 I llama_new_context_with_model: freq_scale    = 1
0.00.939.181 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.954.112 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.954.154 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.954.278 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.956.836 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.956.840 I llama_new_context_with_model: graph nodes  = 601
0.00.956.841 I llama_new_context_with_model: graph splits = 1
0.00.956.864 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.568.256 I main: llama threadpool init, n_threads = 4
0.01.568.272 I 
0.01.568.385 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.568.385 I 
0.01.568.620 I sampler seed: 1164050468
0.01.568.652 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.568.661 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.568.665 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.568.665 I 
 increably.

The world is full of wonders, and they're waiting to be discovered. The key is to open your mind and explore.

**

0.15.338.886 I llama_perf_sampler_print:    sampling time =      49.05 ms /    33 runs   (    1.49 ms per token,   672.82 tokens per second)
0.15.338.900 I llama_perf_context_print:        load time =    1567.28 ms
0.15.338.903 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.338.905 I llama_perf_context_print:        eval time =   13681.23 ms /    32 runs   (  427.54 ms per token,     2.34 tokens per second)
0.15.338.906 I llama_perf_context_print:       total time =   13770.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.715 I build: 4204 (605fa66c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.912 I main: llama backend init
0.00.000.921 I main: load the model and apply lora adapter, if any
0.00.023.814 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.827 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.921 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.935 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.936 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.942 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.944 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.945 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.947 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.948 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.949 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.956 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.966 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.968 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.977 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.981 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.780 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.614 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.163 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.174 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.175 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.177 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.178 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.180 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.183 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.188 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.189 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.191 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.192 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.350.204 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.215 I llama_model_loader: - type  f32:   37 tensors
0.00.350.217 I llama_model_loader: - type q8_0:  127 tensors
0.00.573.667 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.633.997 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.635.029 I llm_load_vocab: special tokens cache size = 5
0.00.833.054 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.833.126 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.833.130 I llm_load_print_meta: arch             = gemma
0.00.833.131 I llm_load_print_meta: vocab type       = SPM
0.00.833.132 I llm_load_print_meta: n_vocab          = 256000
0.00.833.134 I llm_load_print_meta: n_merges         = 0
0.00.833.135 I llm_load_print_meta: vocab_only       = 0
0.00.833.135 I llm_load_print_meta: n_ctx_train      = 8192
0.00.833.135 I llm_load_print_meta: n_embd           = 2048
0.00.833.136 I llm_load_print_meta: n_layer          = 18
0.00.833.198 I llm_load_print_meta: n_head           = 8
0.00.833.208 I llm_load_print_meta: n_head_kv        = 1
0.00.833.209 I llm_load_print_meta: n_rot            = 256
0.00.833.209 I llm_load_print_meta: n_swa            = 0
0.00.833.210 I llm_load_print_meta: n_embd_head_k    = 256
0.00.833.210 I llm_load_print_meta: n_embd_head_v    = 256
0.00.833.215 I llm_load_print_meta: n_gqa            = 8
0.00.833.220 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.833.226 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.833.227 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.833.228 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.833.229 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.833.229 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.833.230 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.833.235 I llm_load_print_meta: n_ff             = 16384
0.00.833.235 I llm_load_print_meta: n_expert         = 0
0.00.833.236 I llm_load_print_meta: n_expert_used    = 0
0.00.833.237 I llm_load_print_meta: causal attn      = 1
0.00.833.237 I llm_load_print_meta: pooling type     = 0
0.00.833.238 I llm_load_print_meta: rope type        = 2
0.00.833.238 I llm_load_print_meta: rope scaling     = linear
0.00.833.240 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.833.241 I llm_load_print_meta: freq_scale_train = 1
0.00.833.241 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.833.241 I llm_load_print_meta: rope_finetuned   = unknown
0.00.833.242 I llm_load_print_meta: ssm_d_conv       = 0
0.00.833.242 I llm_load_print_meta: ssm_d_inner      = 0
0.00.833.242 I llm_load_print_meta: ssm_d_state      = 0
0.00.833.243 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.833.243 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.833.244 I llm_load_print_meta: model type       = 2B
0.00.833.245 I llm_load_print_meta: model ftype      = Q8_0
0.00.833.245 I llm_load_print_meta: model params     = 2.51 B
0.00.833.253 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.833.253 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.833.254 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.833.255 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.833.256 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.833.256 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.833.256 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.833.257 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.833.264 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.833.265 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.833.265 I llm_load_print_meta: max token length = 93
0.00.911.812 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.911.821 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.911.822 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.911.823 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.911.823 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.911.824 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.917.716 I llama_new_context_with_model: n_seq_max     = 1
0.00.917.724 I llama_new_context_with_model: n_ctx         = 4096
0.00.917.724 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.917.724 I llama_new_context_with_model: n_batch       = 2048
0.00.917.725 I llama_new_context_with_model: n_ubatch      = 512
0.00.917.725 I llama_new_context_with_model: flash_attn    = 0
0.00.917.728 I llama_new_context_with_model: freq_base     = 10000.0
0.00.917.729 I llama_new_context_with_model: freq_scale    = 1
0.00.917.729 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.933.173 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.933.214 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.933.348 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.935.863 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.935.867 I llama_new_context_with_model: graph nodes  = 601
0.00.935.868 I llama_new_context_with_model: graph splits = 1
0.00.935.890 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.564.644 I main: llama threadpool init, n_threads = 4
0.01.564.661 I 
0.01.564.780 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.564.784 I 
0.01.565.029 I sampler seed: 3218673188
0.01.565.043 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.565.056 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.565.056 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.565.059 I 
 maneuvres.

Answer: A magician.

A magician is a person who performs tricks or illusions that amaze and entertain an audience. They use their skills and

0.15.295.325 I llama_perf_sampler_print:    sampling time =      48.94 ms /    33 runs   (    1.48 ms per token,   674.36 tokens per second)
0.15.295.329 I llama_perf_context_print:        load time =    1563.63 ms
0.15.295.330 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.295.332 I llama_perf_context_print:        eval time =   13642.41 ms /    32 runs   (  426.33 ms per token,     2.35 tokens per second)
0.15.295.333 I llama_perf_context_print:       total time =   13730.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.666 I build: 4204 (605fa66c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.000.871 I main: load the model and apply lora adapter, if any
0.00.023.131 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.141 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.226 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.238 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.240 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.245 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.248 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.249 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.250 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.252 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.253 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.259 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.260 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.262 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.263 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.264 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.237.221 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.338.908 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.362.364 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.362.373 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.362.374 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.362.375 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.362.377 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.362.378 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.362.379 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.362.384 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.362.385 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.362.387 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.362.388 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.362.390 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.362.398 I llama_model_loader: - type  f32:   37 tensors
0.00.362.400 I llama_model_loader: - type q8_0:  127 tensors
0.00.572.202 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.629.812 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.630.745 I llm_load_vocab: special tokens cache size = 5
0.00.828.952 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.829.024 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.829.025 I llm_load_print_meta: arch             = gemma
0.00.829.026 I llm_load_print_meta: vocab type       = SPM
0.00.829.027 I llm_load_print_meta: n_vocab          = 256000
0.00.829.029 I llm_load_print_meta: n_merges         = 0
0.00.829.030 I llm_load_print_meta: vocab_only       = 0
0.00.829.030 I llm_load_print_meta: n_ctx_train      = 8192
0.00.829.030 I llm_load_print_meta: n_embd           = 2048
0.00.829.031 I llm_load_print_meta: n_layer          = 18
0.00.829.097 I llm_load_print_meta: n_head           = 8
0.00.829.105 I llm_load_print_meta: n_head_kv        = 1
0.00.829.106 I llm_load_print_meta: n_rot            = 256
0.00.829.107 I llm_load_print_meta: n_swa            = 0
0.00.829.107 I llm_load_print_meta: n_embd_head_k    = 256
0.00.829.108 I llm_load_print_meta: n_embd_head_v    = 256
0.00.829.112 I llm_load_print_meta: n_gqa            = 8
0.00.829.117 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.829.122 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.829.123 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.829.125 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.829.125 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.829.127 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.829.127 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.829.132 I llm_load_print_meta: n_ff             = 16384
0.00.829.142 I llm_load_print_meta: n_expert         = 0
0.00.829.147 I llm_load_print_meta: n_expert_used    = 0
0.00.829.148 I llm_load_print_meta: causal attn      = 1
0.00.829.148 I llm_load_print_meta: pooling type     = 0
0.00.829.149 I llm_load_print_meta: rope type        = 2
0.00.829.149 I llm_load_print_meta: rope scaling     = linear
0.00.829.151 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.829.151 I llm_load_print_meta: freq_scale_train = 1
0.00.829.152 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.829.152 I llm_load_print_meta: rope_finetuned   = unknown
0.00.829.153 I llm_load_print_meta: ssm_d_conv       = 0
0.00.829.153 I llm_load_print_meta: ssm_d_inner      = 0
0.00.829.153 I llm_load_print_meta: ssm_d_state      = 0
0.00.829.169 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.829.170 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.829.172 I llm_load_print_meta: model type       = 2B
0.00.829.173 I llm_load_print_meta: model ftype      = Q8_0
0.00.829.180 I llm_load_print_meta: model params     = 2.51 B
0.00.829.188 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.829.189 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.829.197 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.829.198 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.829.199 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.829.199 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.829.199 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.829.200 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.829.206 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.829.207 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.829.215 I llm_load_print_meta: max token length = 93
0.00.902.194 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.902.205 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.908.136 I llama_new_context_with_model: n_seq_max     = 1
0.00.908.144 I llama_new_context_with_model: n_ctx         = 4096
0.00.908.144 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.908.145 I llama_new_context_with_model: n_batch       = 2048
0.00.908.145 I llama_new_context_with_model: n_ubatch      = 512
0.00.908.145 I llama_new_context_with_model: flash_attn    = 0
0.00.908.149 I llama_new_context_with_model: freq_base     = 10000.0
0.00.908.150 I llama_new_context_with_model: freq_scale    = 1
0.00.908.151 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.923.515 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.923.557 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.923.685 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.926.343 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.926.347 I llama_new_context_with_model: graph nodes  = 601
0.00.926.348 I llama_new_context_with_model: graph splits = 1
0.00.926.371 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.536.370 I main: llama threadpool init, n_threads = 4
0.01.536.385 I 
0.01.536.492 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.536.496 I 
0.01.536.730 I sampler seed: 2317080391
0.01.536.745 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.536.754 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.536.757 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.536.757 I 
 increasities in the comments and downvote those that are offensive or inappropriate.

I am unable to provide a response that promotes offensive or inappropriate content. [end of text]


0.14.283.009 I llama_perf_sampler_print:    sampling time =      46.14 ms /    31 runs   (    1.49 ms per token,   671.84 tokens per second)
0.14.283.027 I llama_perf_context_print:        load time =    1535.41 ms
0.14.283.029 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.283.031 I llama_perf_context_print:        eval time =   12662.61 ms /    30 runs   (  422.09 ms per token,     2.37 tokens per second)
0.14.283.032 I llama_perf_context_print:       total time =   12746.65 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m10.972s
user	3m49.061s
sys	0m9.379s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4204 (605fa66c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186776.60 ms
main:    total time = 186776.60 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4204 (605fa66c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.000.847 I main: load the model and apply lora adapter, if any
0.00.023.481 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.491 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.582 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.594 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.595 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.601 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.605 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.607 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.608 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.609 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.611 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.620 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.622 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.624 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.626 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.628 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.673 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.079 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.547 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.554 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.556 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.557 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.558 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.560 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.561 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.566 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.567 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.569 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.570 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.348.572 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.580 I llama_model_loader: - type  f32:   37 tensors
0.00.348.582 I llama_model_loader: - type q4_K:  108 tensors
0.00.348.583 I llama_model_loader: - type q6_K:   19 tensors
0.00.576.000 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.640.418 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.641.509 I llm_load_vocab: special tokens cache size = 5
0.00.837.321 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.837.398 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.837.399 I llm_load_print_meta: arch             = gemma
0.00.837.400 I llm_load_print_meta: vocab type       = SPM
0.00.837.400 I llm_load_print_meta: n_vocab          = 256000
0.00.837.403 I llm_load_print_meta: n_merges         = 0
0.00.837.403 I llm_load_print_meta: vocab_only       = 0
0.00.837.403 I llm_load_print_meta: n_ctx_train      = 8192
0.00.837.404 I llm_load_print_meta: n_embd           = 2048
0.00.837.404 I llm_load_print_meta: n_layer          = 18
0.00.837.469 I llm_load_print_meta: n_head           = 8
0.00.837.486 I llm_load_print_meta: n_head_kv        = 1
0.00.837.488 I llm_load_print_meta: n_rot            = 256
0.00.837.489 I llm_load_print_meta: n_swa            = 0
0.00.837.489 I llm_load_print_meta: n_embd_head_k    = 256
0.00.837.490 I llm_load_print_meta: n_embd_head_v    = 256
0.00.837.496 I llm_load_print_meta: n_gqa            = 8
0.00.837.501 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.837.505 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.837.507 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.837.509 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.837.509 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.837.509 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.837.510 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.837.514 I llm_load_print_meta: n_ff             = 16384
0.00.837.515 I llm_load_print_meta: n_expert         = 0
0.00.837.515 I llm_load_print_meta: n_expert_used    = 0
0.00.837.515 I llm_load_print_meta: causal attn      = 1
0.00.837.516 I llm_load_print_meta: pooling type     = 0
0.00.837.517 I llm_load_print_meta: rope type        = 2
0.00.837.517 I llm_load_print_meta: rope scaling     = linear
0.00.837.519 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.837.520 I llm_load_print_meta: freq_scale_train = 1
0.00.837.520 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.837.521 I llm_load_print_meta: rope_finetuned   = unknown
0.00.837.522 I llm_load_print_meta: ssm_d_conv       = 0
0.00.837.522 I llm_load_print_meta: ssm_d_inner      = 0
0.00.837.522 I llm_load_print_meta: ssm_d_state      = 0
0.00.837.523 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.837.524 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.837.524 I llm_load_print_meta: model type       = 2B
0.00.837.525 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.837.526 I llm_load_print_meta: model params     = 2.51 B
0.00.837.538 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.837.538 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.837.539 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.837.539 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.837.540 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.837.540 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.837.540 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.837.541 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.837.559 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.837.561 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.837.561 I llm_load_print_meta: max token length = 93
0.00.901.402 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.901.412 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.901.413 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.901.413 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.901.414 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.901.415 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.907.277 I llama_new_context_with_model: n_seq_max     = 1
0.00.907.283 I llama_new_context_with_model: n_ctx         = 4096
0.00.907.284 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.907.284 I llama_new_context_with_model: n_batch       = 2048
0.00.907.285 I llama_new_context_with_model: n_ubatch      = 512
0.00.907.285 I llama_new_context_with_model: flash_attn    = 0
0.00.907.287 I llama_new_context_with_model: freq_base     = 10000.0
0.00.907.288 I llama_new_context_with_model: freq_scale    = 1
0.00.907.288 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.922.048 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.922.089 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.922.233 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.924.824 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.924.828 I llama_new_context_with_model: graph nodes  = 601
0.00.924.829 I llama_new_context_with_model: graph splits = 1
0.00.924.852 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.507.389 I main: llama threadpool init, n_threads = 4
0.01.507.405 I 
0.01.507.518 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.507.522 I 
0.01.507.756 I sampler seed: 4266431901
0.01.507.770 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.507.780 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.507.783 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.507.783 I 
 encompassing the needs of a growing business.

**Problem:**

* Business growth outstrips the capabilities of the existing accounting software.
* Lack of real

0.12.621.762 I llama_perf_sampler_print:    sampling time =      49.14 ms /    33 runs   (    1.49 ms per token,   671.58 tokens per second)
0.12.621.765 I llama_perf_context_print:        load time =    1506.45 ms
0.12.621.766 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.621.768 I llama_perf_context_print:        eval time =   11025.42 ms /    32 runs   (  344.54 ms per token,     2.90 tokens per second)
0.12.621.769 I llama_perf_context_print:       total time =   11114.38 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4204 (605fa66c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186549.42 ms
main:    total time = 186549.42 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.656 I build: 4204 (605fa66c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.000.856 I main: load the model and apply lora adapter, if any
0.00.022.789 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.887 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.902 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.904 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.910 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.914 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.915 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.917 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.918 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.919 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.925 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.926 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.927 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.929 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.930 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.400 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.323.761 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.347.275 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.347.283 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.347.284 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.347.286 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.347.287 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.347.289 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.347.290 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.347.294 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.347.296 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.347.303 I llama_model_loader: - type  f32:   37 tensors
0.00.347.306 I llama_model_loader: - type q4_K:  108 tensors
0.00.347.306 I llama_model_loader: - type q6_K:   19 tensors
0.00.560.136 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.620.412 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.621.275 I llm_load_vocab: special tokens cache size = 5
0.00.812.515 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.812.587 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.812.588 I llm_load_print_meta: arch             = gemma
0.00.812.589 I llm_load_print_meta: vocab type       = SPM
0.00.812.590 I llm_load_print_meta: n_vocab          = 256000
0.00.812.592 I llm_load_print_meta: n_merges         = 0
0.00.812.593 I llm_load_print_meta: vocab_only       = 0
0.00.812.593 I llm_load_print_meta: n_ctx_train      = 8192
0.00.812.593 I llm_load_print_meta: n_embd           = 2048
0.00.812.594 I llm_load_print_meta: n_layer          = 18
0.00.812.663 I llm_load_print_meta: n_head           = 8
0.00.812.671 I llm_load_print_meta: n_head_kv        = 1
0.00.812.672 I llm_load_print_meta: n_rot            = 256
0.00.812.673 I llm_load_print_meta: n_swa            = 0
0.00.812.673 I llm_load_print_meta: n_embd_head_k    = 256
0.00.812.674 I llm_load_print_meta: n_embd_head_v    = 256
0.00.812.678 I llm_load_print_meta: n_gqa            = 8
0.00.812.683 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.812.688 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.812.689 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.812.691 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.812.691 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.812.691 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.812.692 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.812.696 I llm_load_print_meta: n_ff             = 16384
0.00.812.697 I llm_load_print_meta: n_expert         = 0
0.00.812.697 I llm_load_print_meta: n_expert_used    = 0
0.00.812.698 I llm_load_print_meta: causal attn      = 1
0.00.812.699 I llm_load_print_meta: pooling type     = 0
0.00.812.700 I llm_load_print_meta: rope type        = 2
0.00.812.700 I llm_load_print_meta: rope scaling     = linear
0.00.812.702 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.812.715 I llm_load_print_meta: freq_scale_train = 1
0.00.812.716 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.812.716 I llm_load_print_meta: rope_finetuned   = unknown
0.00.812.717 I llm_load_print_meta: ssm_d_conv       = 0
0.00.812.717 I llm_load_print_meta: ssm_d_inner      = 0
0.00.812.717 I llm_load_print_meta: ssm_d_state      = 0
0.00.812.719 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.812.719 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.812.720 I llm_load_print_meta: model type       = 2B
0.00.812.721 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.812.722 I llm_load_print_meta: model params     = 2.51 B
0.00.812.733 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.812.733 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.812.734 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.812.734 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.812.735 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.812.735 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.812.740 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.812.740 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.812.748 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.812.749 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.812.750 I llm_load_print_meta: max token length = 93
0.00.871.414 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.877.053 I llama_new_context_with_model: n_seq_max     = 1
0.00.877.061 I llama_new_context_with_model: n_ctx         = 4096
0.00.877.061 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.877.062 I llama_new_context_with_model: n_batch       = 2048
0.00.877.062 I llama_new_context_with_model: n_ubatch      = 512
0.00.877.063 I llama_new_context_with_model: flash_attn    = 0
0.00.877.065 I llama_new_context_with_model: freq_base     = 10000.0
0.00.877.066 I llama_new_context_with_model: freq_scale    = 1
0.00.877.066 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.891.707 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.891.750 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.891.889 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.894.492 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.894.496 I llama_new_context_with_model: graph nodes  = 601
0.00.894.497 I llama_new_context_with_model: graph splits = 1
0.00.894.519 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.479.992 I main: llama threadpool init, n_threads = 4
0.01.480.009 I 
0.01.480.123 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.480.127 I 
0.01.480.370 I sampler seed: 4162295780
0.01.480.384 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.480.393 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.480.397 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.480.397 I 
 seconally.

I have a list of data points, and I need to organize them into groups based on their values.

**Example:**

```


0.12.596.821 I llama_perf_sampler_print:    sampling time =      48.91 ms /    33 runs   (    1.48 ms per token,   674.67 tokens per second)
0.12.596.834 I llama_perf_context_print:        load time =    1479.05 ms
0.12.596.836 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.596.838 I llama_perf_context_print:        eval time =   11027.55 ms /    32 runs   (  344.61 ms per token,     2.90 tokens per second)
0.12.596.839 I llama_perf_context_print:       total time =   11116.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m41.449s
user	46m46.536s
sys	0m6.385s
