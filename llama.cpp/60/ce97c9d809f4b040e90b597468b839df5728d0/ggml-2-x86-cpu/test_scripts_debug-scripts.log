+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 3940 (60ce97c9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.002.779 I main: load the model and apply lora adapter, if any
0.00.024.778 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.988 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.074 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.085 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.086 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.090 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.092 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.094 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.102 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.106 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.107 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.114 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.115 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.116 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.123 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.125 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.199 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.387 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.475 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.481 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.483 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.484 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.485 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.486 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.488 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.491 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.492 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.493 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.494 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.264.495 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.503 I llama_model_loader: - type  f32:   37 tensors
0.00.264.507 I llama_model_loader: - type q8_0:  127 tensors
0.00.435.697 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.496.626 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.497.576 I llm_load_vocab: special tokens cache size = 5
0.00.592.344 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.592.411 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.592.412 I llm_load_print_meta: arch             = gemma
0.00.592.412 I llm_load_print_meta: vocab type       = SPM
0.00.592.413 I llm_load_print_meta: n_vocab          = 256000
0.00.592.415 I llm_load_print_meta: n_merges         = 0
0.00.592.416 I llm_load_print_meta: vocab_only       = 0
0.00.592.416 I llm_load_print_meta: n_ctx_train      = 8192
0.00.592.417 I llm_load_print_meta: n_embd           = 2048
0.00.592.417 I llm_load_print_meta: n_layer          = 18
0.00.592.480 I llm_load_print_meta: n_head           = 8
0.00.592.488 I llm_load_print_meta: n_head_kv        = 1
0.00.592.488 I llm_load_print_meta: n_rot            = 256
0.00.592.488 I llm_load_print_meta: n_swa            = 0
0.00.592.489 I llm_load_print_meta: n_embd_head_k    = 256
0.00.592.489 I llm_load_print_meta: n_embd_head_v    = 256
0.00.592.494 I llm_load_print_meta: n_gqa            = 8
0.00.592.498 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.592.503 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.592.504 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.592.507 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.592.507 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.592.508 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.592.509 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.592.514 I llm_load_print_meta: n_ff             = 16384
0.00.592.514 I llm_load_print_meta: n_expert         = 0
0.00.592.515 I llm_load_print_meta: n_expert_used    = 0
0.00.592.515 I llm_load_print_meta: causal attn      = 1
0.00.592.525 I llm_load_print_meta: pooling type     = 0
0.00.592.525 I llm_load_print_meta: rope type        = 2
0.00.592.526 I llm_load_print_meta: rope scaling     = linear
0.00.592.527 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.592.528 I llm_load_print_meta: freq_scale_train = 1
0.00.592.528 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.592.532 I llm_load_print_meta: rope_finetuned   = unknown
0.00.592.533 I llm_load_print_meta: ssm_d_conv       = 0
0.00.592.533 I llm_load_print_meta: ssm_d_inner      = 0
0.00.592.533 I llm_load_print_meta: ssm_d_state      = 0
0.00.592.534 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.592.534 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.592.546 I llm_load_print_meta: model type       = 2B
0.00.592.547 I llm_load_print_meta: model ftype      = Q8_0
0.00.592.548 I llm_load_print_meta: model params     = 2.51 B
0.00.592.549 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.592.549 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.592.550 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.592.559 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.592.567 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.592.568 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.592.568 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.592.568 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.592.574 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.592.575 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.592.576 I llm_load_print_meta: max token length = 93
0.00.592.742 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.693.034 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.693.043 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.693.044 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.693.045 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.693.046 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.693.046 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.698.748 I llama_new_context_with_model: n_ctx      = 8192
0.00.698.755 I llama_new_context_with_model: n_batch    = 2048
0.00.698.755 I llama_new_context_with_model: n_ubatch   = 512
0.00.698.756 I llama_new_context_with_model: flash_attn = 0
0.00.698.758 I llama_new_context_with_model: freq_base  = 10000.0
0.00.698.759 I llama_new_context_with_model: freq_scale = 1
0.00.727.003 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.727.048 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.727.161 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.728.575 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.728.580 I llama_new_context_with_model: graph nodes  = 601
0.00.728.581 I llama_new_context_with_model: graph splits = 1
0.00.728.598 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.337.935 I main: llama threadpool init, n_threads = 4
0.01.337.947 I 
0.01.338.052 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.338.055 I 
0.01.338.233 I sampler seed: 3382306150
0.01.338.244 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.338.252 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.338.253 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.338.253 I 
 increasively. 

**Answer: Incredibly!** [end of text]


0.06.817.786 I llama_perf_sampler_print:    sampling time =      20.01 ms /    14 runs   (    1.43 ms per token,   699.79 tokens per second)
0.06.817.807 I llama_perf_context_print:        load time =    1335.07 ms
0.06.817.809 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.817.811 I llama_perf_context_print:        eval time =    5445.74 ms /    13 runs   (  418.90 ms per token,     2.39 tokens per second)
0.06.817.811 I llama_perf_context_print:       total time =    5479.86 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.659 I build: 3940 (60ce97c9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.855 I main: llama backend init
0.00.002.804 I main: load the model and apply lora adapter, if any
0.00.025.171 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.267 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.278 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.280 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.284 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.285 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.286 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.287 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.288 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.288 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.296 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.297 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.297 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.298 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.299 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.671 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.554 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.764 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.775 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.776 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.777 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.777 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.779 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.780 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.784 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.785 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.786 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.787 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.267.788 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.797 I llama_model_loader: - type  f32:   37 tensors
0.00.267.800 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.142 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.904 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.937 I llm_load_vocab: special tokens cache size = 5
0.00.626.087 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.626.155 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.626.156 I llm_load_print_meta: arch             = gemma
0.00.626.157 I llm_load_print_meta: vocab type       = SPM
0.00.626.158 I llm_load_print_meta: n_vocab          = 256000
0.00.626.160 I llm_load_print_meta: n_merges         = 0
0.00.626.161 I llm_load_print_meta: vocab_only       = 0
0.00.626.161 I llm_load_print_meta: n_ctx_train      = 8192
0.00.626.161 I llm_load_print_meta: n_embd           = 2048
0.00.626.162 I llm_load_print_meta: n_layer          = 18
0.00.626.226 I llm_load_print_meta: n_head           = 8
0.00.626.233 I llm_load_print_meta: n_head_kv        = 1
0.00.626.233 I llm_load_print_meta: n_rot            = 256
0.00.626.233 I llm_load_print_meta: n_swa            = 0
0.00.626.234 I llm_load_print_meta: n_embd_head_k    = 256
0.00.626.234 I llm_load_print_meta: n_embd_head_v    = 256
0.00.626.239 I llm_load_print_meta: n_gqa            = 8
0.00.626.243 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.626.248 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.626.249 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.626.251 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.626.251 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.626.251 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.626.252 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.626.257 I llm_load_print_meta: n_ff             = 16384
0.00.626.257 I llm_load_print_meta: n_expert         = 0
0.00.626.258 I llm_load_print_meta: n_expert_used    = 0
0.00.626.258 I llm_load_print_meta: causal attn      = 1
0.00.626.259 I llm_load_print_meta: pooling type     = 0
0.00.626.260 I llm_load_print_meta: rope type        = 2
0.00.626.260 I llm_load_print_meta: rope scaling     = linear
0.00.626.262 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.626.262 I llm_load_print_meta: freq_scale_train = 1
0.00.626.263 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.626.264 I llm_load_print_meta: rope_finetuned   = unknown
0.00.626.264 I llm_load_print_meta: ssm_d_conv       = 0
0.00.626.264 I llm_load_print_meta: ssm_d_inner      = 0
0.00.626.264 I llm_load_print_meta: ssm_d_state      = 0
0.00.626.265 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.626.265 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.626.266 I llm_load_print_meta: model type       = 2B
0.00.626.267 I llm_load_print_meta: model ftype      = Q8_0
0.00.626.268 I llm_load_print_meta: model params     = 2.51 B
0.00.626.269 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.626.269 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.626.270 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.626.270 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.626.271 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.626.272 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.626.272 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.626.273 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.626.278 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.626.279 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.626.279 I llm_load_print_meta: max token length = 93
0.00.626.443 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.724.396 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.730.112 I llama_new_context_with_model: n_ctx      = 8192
0.00.730.120 I llama_new_context_with_model: n_batch    = 2048
0.00.730.120 I llama_new_context_with_model: n_ubatch   = 512
0.00.730.121 I llama_new_context_with_model: flash_attn = 0
0.00.730.123 I llama_new_context_with_model: freq_base  = 10000.0
0.00.730.124 I llama_new_context_with_model: freq_scale = 1
0.00.762.568 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.762.615 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.762.731 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.764.128 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.764.133 I llama_new_context_with_model: graph nodes  = 601
0.00.764.133 I llama_new_context_with_model: graph splits = 1
0.00.764.149 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.375.237 I main: llama threadpool init, n_threads = 4
0.01.375.251 I 
0.01.375.358 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.375.362 I 
0.01.375.544 I sampler seed: 2185800049
0.01.375.557 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.375.564 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.375.565 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.375.574 I 
 increably.

**Assistant:** I understand. I will ensure that your request is met promptly and efficiently.

**Explanation:**

The provided text appears to

0.14.984.568 I llama_perf_sampler_print:    sampling time =      49.87 ms /    33 runs   (    1.51 ms per token,   661.67 tokens per second)
0.14.984.572 I llama_perf_context_print:        load time =    1372.34 ms
0.14.984.574 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.984.577 I llama_perf_context_print:        eval time =   13525.48 ms /    32 runs   (  422.67 ms per token,     2.37 tokens per second)
0.14.984.579 I llama_perf_context_print:       total time =   13609.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 3940 (60ce97c9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.002.831 I main: load the model and apply lora adapter, if any
0.00.025.092 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.310 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.400 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.412 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.414 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.421 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.422 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.424 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.425 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.426 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.427 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.434 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.435 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.436 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.437 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.438 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.058 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.214 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.359 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.367 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.368 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.369 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.370 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.371 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.372 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.376 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.377 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.378 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.379 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.266.380 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.388 I llama_model_loader: - type  f32:   37 tensors
0.00.266.392 I llama_model_loader: - type q8_0:  127 tensors
0.00.435.716 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.500 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.499.434 I llm_load_vocab: special tokens cache size = 5
0.00.606.805 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.606.879 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.606.880 I llm_load_print_meta: arch             = gemma
0.00.606.881 I llm_load_print_meta: vocab type       = SPM
0.00.606.882 I llm_load_print_meta: n_vocab          = 256000
0.00.606.884 I llm_load_print_meta: n_merges         = 0
0.00.606.884 I llm_load_print_meta: vocab_only       = 0
0.00.606.885 I llm_load_print_meta: n_ctx_train      = 8192
0.00.606.885 I llm_load_print_meta: n_embd           = 2048
0.00.606.885 I llm_load_print_meta: n_layer          = 18
0.00.606.947 I llm_load_print_meta: n_head           = 8
0.00.606.954 I llm_load_print_meta: n_head_kv        = 1
0.00.606.955 I llm_load_print_meta: n_rot            = 256
0.00.606.955 I llm_load_print_meta: n_swa            = 0
0.00.606.955 I llm_load_print_meta: n_embd_head_k    = 256
0.00.606.956 I llm_load_print_meta: n_embd_head_v    = 256
0.00.606.960 I llm_load_print_meta: n_gqa            = 8
0.00.606.965 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.606.971 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.606.973 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.606.974 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.606.974 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.606.975 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.606.975 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.606.980 I llm_load_print_meta: n_ff             = 16384
0.00.606.980 I llm_load_print_meta: n_expert         = 0
0.00.606.981 I llm_load_print_meta: n_expert_used    = 0
0.00.606.981 I llm_load_print_meta: causal attn      = 1
0.00.606.982 I llm_load_print_meta: pooling type     = 0
0.00.606.982 I llm_load_print_meta: rope type        = 2
0.00.606.982 I llm_load_print_meta: rope scaling     = linear
0.00.606.984 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.606.984 I llm_load_print_meta: freq_scale_train = 1
0.00.606.985 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.606.985 I llm_load_print_meta: rope_finetuned   = unknown
0.00.606.985 I llm_load_print_meta: ssm_d_conv       = 0
0.00.606.985 I llm_load_print_meta: ssm_d_inner      = 0
0.00.606.986 I llm_load_print_meta: ssm_d_state      = 0
0.00.606.986 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.606.986 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.606.987 I llm_load_print_meta: model type       = 2B
0.00.606.988 I llm_load_print_meta: model ftype      = Q8_0
0.00.606.988 I llm_load_print_meta: model params     = 2.51 B
0.00.606.989 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.606.990 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.606.990 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.606.991 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.606.991 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.606.992 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.606.993 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.606.993 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.607.011 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.607.013 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.607.013 I llm_load_print_meta: max token length = 93
0.00.607.184 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.682.944 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.682.954 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.682.955 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.682.956 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.682.956 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.682.957 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.688.630 I llama_new_context_with_model: n_ctx      = 8192
0.00.688.639 I llama_new_context_with_model: n_batch    = 2048
0.00.688.639 I llama_new_context_with_model: n_ubatch   = 512
0.00.688.640 I llama_new_context_with_model: flash_attn = 0
0.00.688.643 I llama_new_context_with_model: freq_base  = 10000.0
0.00.688.644 I llama_new_context_with_model: freq_scale = 1
0.00.717.994 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.718.034 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.718.148 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.719.576 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.719.581 I llama_new_context_with_model: graph nodes  = 601
0.00.719.582 I llama_new_context_with_model: graph splits = 1
0.00.719.597 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.329.290 I main: llama threadpool init, n_threads = 4
0.01.329.304 I 
0.01.329.408 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.329.411 I 
0.01.329.592 I sampler seed: 1030184261
0.01.329.603 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.329.610 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.329.611 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.329.611 I 
 increasels around a campfire, their eyes gleaming with mischief.

The fire crackled merrily, casting warm shadows on their faces. Laughter echoed through the trees as

0.14.765.936 I llama_perf_sampler_print:    sampling time =      49.38 ms /    33 runs   (    1.50 ms per token,   668.27 tokens per second)
0.14.765.940 I llama_perf_context_print:        load time =    1326.37 ms
0.14.765.942 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.765.945 I llama_perf_context_print:        eval time =   13353.85 ms /    32 runs   (  417.31 ms per token,     2.40 tokens per second)
0.14.765.946 I llama_perf_context_print:       total time =   13436.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 3940 (60ce97c9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.002.795 I main: load the model and apply lora adapter, if any
0.00.024.841 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.063 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.157 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.169 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.171 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.177 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.182 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.183 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.186 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.189 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.190 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.199 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.204 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.206 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.210 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.212 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.666 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.586 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.832 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.844 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.846 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.846 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.847 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.849 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.850 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.853 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.854 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.855 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.856 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.265.858 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.869 I llama_model_loader: - type  f32:   37 tensors
0.00.265.872 I llama_model_loader: - type q8_0:  127 tensors
0.00.444.025 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.171 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.142 I llm_load_vocab: special tokens cache size = 5
0.00.610.839 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.909 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.910 I llm_load_print_meta: arch             = gemma
0.00.610.911 I llm_load_print_meta: vocab type       = SPM
0.00.610.912 I llm_load_print_meta: n_vocab          = 256000
0.00.610.914 I llm_load_print_meta: n_merges         = 0
0.00.610.914 I llm_load_print_meta: vocab_only       = 0
0.00.610.914 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.915 I llm_load_print_meta: n_embd           = 2048
0.00.610.915 I llm_load_print_meta: n_layer          = 18
0.00.610.979 I llm_load_print_meta: n_head           = 8
0.00.610.989 I llm_load_print_meta: n_head_kv        = 1
0.00.610.990 I llm_load_print_meta: n_rot            = 256
0.00.610.991 I llm_load_print_meta: n_swa            = 0
0.00.610.992 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.993 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.000 I llm_load_print_meta: n_gqa            = 8
0.00.611.017 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.026 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.029 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.030 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.031 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.032 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.033 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.042 I llm_load_print_meta: n_ff             = 16384
0.00.611.043 I llm_load_print_meta: n_expert         = 0
0.00.611.052 I llm_load_print_meta: n_expert_used    = 0
0.00.611.054 I llm_load_print_meta: causal attn      = 1
0.00.611.055 I llm_load_print_meta: pooling type     = 0
0.00.611.055 I llm_load_print_meta: rope type        = 2
0.00.611.056 I llm_load_print_meta: rope scaling     = linear
0.00.611.058 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.059 I llm_load_print_meta: freq_scale_train = 1
0.00.611.059 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.060 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.060 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.061 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.061 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.065 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.065 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.067 I llm_load_print_meta: model type       = 2B
0.00.611.068 I llm_load_print_meta: model ftype      = Q8_0
0.00.611.069 I llm_load_print_meta: model params     = 2.51 B
0.00.611.071 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.611.072 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.072 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.073 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.074 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.074 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.084 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.085 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.093 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.095 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.098 I llm_load_print_meta: max token length = 93
0.00.611.272 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.683.906 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.683.918 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.689.618 I llama_new_context_with_model: n_ctx      = 8192
0.00.689.624 I llama_new_context_with_model: n_batch    = 2048
0.00.689.625 I llama_new_context_with_model: n_ubatch   = 512
0.00.689.625 I llama_new_context_with_model: flash_attn = 0
0.00.689.627 I llama_new_context_with_model: freq_base  = 10000.0
0.00.689.628 I llama_new_context_with_model: freq_scale = 1
0.00.719.092 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.719.133 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.719.246 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.720.607 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.720.612 I llama_new_context_with_model: graph nodes  = 601
0.00.720.612 I llama_new_context_with_model: graph splits = 1
0.00.720.629 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.328.661 I main: llama threadpool init, n_threads = 4
0.01.328.676 I 
0.01.328.799 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.328.803 I 
0.01.329.008 I sampler seed: 2361647378
0.01.329.019 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.329.027 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.329.028 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.329.029 I 
 seconary to a medical degree.

**Medical Terminology**

**Definition:** Medical terminology is the use of standardized words and phrases to describe medical concepts, procedures

0.14.804.518 I llama_perf_sampler_print:    sampling time =      49.53 ms /    33 runs   (    1.50 ms per token,   666.24 tokens per second)
0.14.804.523 I llama_perf_context_print:        load time =    1325.77 ms
0.14.804.525 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.804.527 I llama_perf_context_print:        eval time =   13392.57 ms /    32 runs   (  418.52 ms per token,     2.39 tokens per second)
0.14.804.528 I llama_perf_context_print:       total time =   13475.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m1.050s
user	3m16.691s
sys	0m9.377s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3940 (60ce97c9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198439.78 ms
main:    total time = 198439.78 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 3940 (60ce97c9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.821 I main: llama backend init
0.00.002.768 I main: load the model and apply lora adapter, if any
0.00.024.670 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.946 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.033 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.045 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.046 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.050 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.051 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.052 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.054 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.056 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.056 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.062 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.066 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.067 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.067 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.068 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.743 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.110 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.331 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.340 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.341 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.342 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.343 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.344 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.346 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.349 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.350 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.351 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.352 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.264.353 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.362 I llama_model_loader: - type  f32:   37 tensors
0.00.264.365 I llama_model_loader: - type q4_K:  108 tensors
0.00.264.366 I llama_model_loader: - type q6_K:   19 tensors
0.00.436.435 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.073 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.029 I llm_load_vocab: special tokens cache size = 5
0.00.607.102 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.607.171 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.607.172 I llm_load_print_meta: arch             = gemma
0.00.607.173 I llm_load_print_meta: vocab type       = SPM
0.00.607.174 I llm_load_print_meta: n_vocab          = 256000
0.00.607.176 I llm_load_print_meta: n_merges         = 0
0.00.607.176 I llm_load_print_meta: vocab_only       = 0
0.00.607.177 I llm_load_print_meta: n_ctx_train      = 8192
0.00.607.177 I llm_load_print_meta: n_embd           = 2048
0.00.607.177 I llm_load_print_meta: n_layer          = 18
0.00.607.243 I llm_load_print_meta: n_head           = 8
0.00.607.250 I llm_load_print_meta: n_head_kv        = 1
0.00.607.251 I llm_load_print_meta: n_rot            = 256
0.00.607.251 I llm_load_print_meta: n_swa            = 0
0.00.607.251 I llm_load_print_meta: n_embd_head_k    = 256
0.00.607.252 I llm_load_print_meta: n_embd_head_v    = 256
0.00.607.256 I llm_load_print_meta: n_gqa            = 8
0.00.607.261 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.607.266 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.607.267 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.607.268 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.607.268 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.607.268 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.607.269 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.607.274 I llm_load_print_meta: n_ff             = 16384
0.00.607.274 I llm_load_print_meta: n_expert         = 0
0.00.607.275 I llm_load_print_meta: n_expert_used    = 0
0.00.607.275 I llm_load_print_meta: causal attn      = 1
0.00.607.277 I llm_load_print_meta: pooling type     = 0
0.00.607.277 I llm_load_print_meta: rope type        = 2
0.00.607.287 I llm_load_print_meta: rope scaling     = linear
0.00.607.290 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.607.290 I llm_load_print_meta: freq_scale_train = 1
0.00.607.291 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.607.304 I llm_load_print_meta: rope_finetuned   = unknown
0.00.607.304 I llm_load_print_meta: ssm_d_conv       = 0
0.00.607.305 I llm_load_print_meta: ssm_d_inner      = 0
0.00.607.305 I llm_load_print_meta: ssm_d_state      = 0
0.00.607.314 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.607.314 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.607.316 I llm_load_print_meta: model type       = 2B
0.00.607.317 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.607.318 I llm_load_print_meta: model params     = 2.51 B
0.00.607.319 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.607.320 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.607.321 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.607.321 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.607.322 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.607.322 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.607.328 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.607.329 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.607.335 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.607.336 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.607.337 I llm_load_print_meta: max token length = 93
0.00.607.505 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.668.140 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.668.149 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.668.150 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.668.151 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.668.151 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.668.152 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.673.730 I llama_new_context_with_model: n_ctx      = 8192
0.00.673.737 I llama_new_context_with_model: n_batch    = 2048
0.00.673.737 I llama_new_context_with_model: n_ubatch   = 512
0.00.673.738 I llama_new_context_with_model: flash_attn = 0
0.00.673.740 I llama_new_context_with_model: freq_base  = 10000.0
0.00.673.740 I llama_new_context_with_model: freq_scale = 1
0.00.703.245 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.703.286 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.703.403 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.704.844 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.704.849 I llama_new_context_with_model: graph nodes  = 601
0.00.704.850 I llama_new_context_with_model: graph splits = 1
0.00.704.865 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.285.601 I main: llama threadpool init, n_threads = 4
0.01.285.612 I 
0.01.285.721 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.285.725 I 
0.01.285.903 I sampler seed: 4098606010
0.01.285.916 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.285.923 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.285.926 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.285.926 I 
 increamically with the rising sun.

The sun blazed relentlessly, casting long shadows across the land. The wind whistled through the tall grass, rustling the leaves and

0.12.170.321 I llama_perf_sampler_print:    sampling time =      49.41 ms /    33 runs   (    1.50 ms per token,   667.95 tokens per second)
0.12.170.327 I llama_perf_context_print:        load time =    1282.75 ms
0.12.170.329 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.170.330 I llama_perf_context_print:        eval time =   10802.60 ms /    32 runs   (  337.58 ms per token,     2.96 tokens per second)
0.12.170.338 I llama_perf_context_print:       total time =   10884.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3940 (60ce97c9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198337.84 ms
main:    total time = 198337.84 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.661 I build: 3940 (60ce97c9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.872 I main: llama backend init
0.00.002.812 I main: load the model and apply lora adapter, if any
0.00.024.752 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.850 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.866 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.870 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.876 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.877 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.879 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.880 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.881 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.882 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.889 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.890 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.891 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.892 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.893 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.173 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.943 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.069 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.076 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.077 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.079 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.080 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.082 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.083 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.087 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.088 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.096 I llama_model_loader: - type  f32:   37 tensors
0.00.264.100 I llama_model_loader: - type q4_K:  108 tensors
0.00.264.101 I llama_model_loader: - type q6_K:   19 tensors
0.00.427.289 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.484.046 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.484.950 I llm_load_vocab: special tokens cache size = 5
0.00.587.119 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.587.186 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.587.186 I llm_load_print_meta: arch             = gemma
0.00.587.187 I llm_load_print_meta: vocab type       = SPM
0.00.587.188 I llm_load_print_meta: n_vocab          = 256000
0.00.587.190 I llm_load_print_meta: n_merges         = 0
0.00.587.191 I llm_load_print_meta: vocab_only       = 0
0.00.587.191 I llm_load_print_meta: n_ctx_train      = 8192
0.00.587.191 I llm_load_print_meta: n_embd           = 2048
0.00.587.192 I llm_load_print_meta: n_layer          = 18
0.00.587.254 I llm_load_print_meta: n_head           = 8
0.00.587.261 I llm_load_print_meta: n_head_kv        = 1
0.00.587.262 I llm_load_print_meta: n_rot            = 256
0.00.587.262 I llm_load_print_meta: n_swa            = 0
0.00.587.262 I llm_load_print_meta: n_embd_head_k    = 256
0.00.587.262 I llm_load_print_meta: n_embd_head_v    = 256
0.00.587.268 I llm_load_print_meta: n_gqa            = 8
0.00.587.273 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.587.278 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.587.280 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.587.282 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.587.282 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.587.283 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.587.283 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.587.288 I llm_load_print_meta: n_ff             = 16384
0.00.587.288 I llm_load_print_meta: n_expert         = 0
0.00.587.289 I llm_load_print_meta: n_expert_used    = 0
0.00.587.290 I llm_load_print_meta: causal attn      = 1
0.00.587.290 I llm_load_print_meta: pooling type     = 0
0.00.587.291 I llm_load_print_meta: rope type        = 2
0.00.587.291 I llm_load_print_meta: rope scaling     = linear
0.00.587.292 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.587.293 I llm_load_print_meta: freq_scale_train = 1
0.00.587.294 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.587.294 I llm_load_print_meta: rope_finetuned   = unknown
0.00.587.295 I llm_load_print_meta: ssm_d_conv       = 0
0.00.587.295 I llm_load_print_meta: ssm_d_inner      = 0
0.00.587.295 I llm_load_print_meta: ssm_d_state      = 0
0.00.587.296 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.587.297 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.587.297 I llm_load_print_meta: model type       = 2B
0.00.587.298 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.587.299 I llm_load_print_meta: model params     = 2.51 B
0.00.587.300 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.587.311 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.587.313 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.587.313 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.587.313 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.587.327 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.587.328 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.587.336 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.587.353 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.587.355 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.587.356 I llm_load_print_meta: max token length = 93
0.00.587.524 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.646.354 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.651.962 I llama_new_context_with_model: n_ctx      = 8192
0.00.651.967 I llama_new_context_with_model: n_batch    = 2048
0.00.651.967 I llama_new_context_with_model: n_ubatch   = 512
0.00.651.968 I llama_new_context_with_model: flash_attn = 0
0.00.651.970 I llama_new_context_with_model: freq_base  = 10000.0
0.00.651.971 I llama_new_context_with_model: freq_scale = 1
0.00.681.508 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.681.551 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.681.673 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.683.059 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.683.064 I llama_new_context_with_model: graph nodes  = 601
0.00.683.064 I llama_new_context_with_model: graph splits = 1
0.00.683.079 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.264.859 I main: llama threadpool init, n_threads = 4
0.01.264.871 I 
0.01.264.979 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.264.984 I 
0.01.265.169 I sampler seed: 3307925624
0.01.265.182 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.265.190 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.265.194 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.265.194 I 
 increasities and the nature of consciousness.

**Philosophical Inquiry:**

The nature of consciousness and the relationship between consciousness and the brain has been a topic of

0.12.184.460 I llama_perf_sampler_print:    sampling time =      50.34 ms /    33 runs   (    1.53 ms per token,   655.54 tokens per second)
0.12.184.463 I llama_perf_context_print:        load time =    1261.95 ms
0.12.184.475 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.184.477 I llama_perf_context_print:        eval time =   10836.31 ms /    32 runs   (  338.63 ms per token,     2.95 tokens per second)
0.12.184.478 I llama_perf_context_print:       total time =   10919.61 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m3.992s
user	50m5.304s
sys	0m6.274s
