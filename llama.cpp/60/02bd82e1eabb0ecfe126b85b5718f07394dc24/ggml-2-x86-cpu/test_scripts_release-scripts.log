+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.585 I build: 4437 (6002bd82) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.791 I main: llama backend init
0.00.000.798 I main: load the model and apply lora adapter, if any
0.00.021.765 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.778 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.786 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.794 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.795 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.798 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.798 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.799 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.800 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.801 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.801 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.806 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.807 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.807 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.808 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.809 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.800 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.011 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.810 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.816 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.818 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.818 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.819 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.820 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.820 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.823 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.823 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.825 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.825 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.826 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.831 I llama_model_loader: - type  f32:   37 tensors
0.00.133.832 I llama_model_loader: - type q8_0:  127 tensors
0.00.133.834 I print_info: file format = GGUF V3 (latest)
0.00.133.835 I print_info: file type   = Q8_0
0.00.133.837 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.214.030 W load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.174 W load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.744 I load_vocab: special tokens cache size = 5
0.00.281.978 I load_vocab: token to piece cache size = 1.6014 MB
0.00.281.997 I print_info: arch             = gemma
0.00.281.998 I print_info: vocab type       = SPM
0.00.281.999 I print_info: n_vocab          = 256000
0.00.282.000 I print_info: n_merges         = 0
0.00.282.000 I print_info: vocab_only       = 0
0.00.282.000 I print_info: n_ctx_train      = 8192
0.00.282.001 I print_info: n_embd           = 2048
0.00.282.001 I print_info: n_layer          = 18
0.00.282.012 I print_info: n_head           = 8
0.00.282.015 I print_info: n_head_kv        = 1
0.00.282.015 I print_info: n_rot            = 256
0.00.282.015 I print_info: n_swa            = 0
0.00.282.016 I print_info: n_embd_head_k    = 256
0.00.282.016 I print_info: n_embd_head_v    = 256
0.00.282.018 I print_info: n_gqa            = 8
0.00.282.020 I print_info: n_embd_k_gqa     = 256
0.00.282.021 I print_info: n_embd_v_gqa     = 256
0.00.282.023 I print_info: f_norm_eps       = 0.0e+00
0.00.282.024 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.282.024 I print_info: f_clamp_kqv      = 0.0e+00
0.00.282.025 I print_info: f_max_alibi_bias = 0.0e+00
0.00.282.025 I print_info: f_logit_scale    = 0.0e+00
0.00.282.027 I print_info: n_ff             = 16384
0.00.282.027 I print_info: n_expert         = 0
0.00.282.027 I print_info: n_expert_used    = 0
0.00.282.028 I print_info: causal attn      = 1
0.00.282.028 I print_info: pooling type     = 0
0.00.282.028 I print_info: rope type        = 2
0.00.282.029 I print_info: rope scaling     = linear
0.00.282.030 I print_info: freq_base_train  = 10000.0
0.00.282.031 I print_info: freq_scale_train = 1
0.00.282.031 I print_info: n_ctx_orig_yarn  = 8192
0.00.282.031 I print_info: rope_finetuned   = unknown
0.00.282.032 I print_info: ssm_d_conv       = 0
0.00.282.032 I print_info: ssm_d_inner      = 0
0.00.282.032 I print_info: ssm_d_state      = 0
0.00.282.033 I print_info: ssm_dt_rank      = 0
0.00.282.033 I print_info: ssm_dt_b_c_rms   = 0
0.00.282.033 I print_info: model type       = 2B
0.00.282.034 I print_info: model params     = 2.51 B
0.00.282.034 I print_info: general.name     = gemma-1.1-2b-it
0.00.282.035 I print_info: BOS token        = 2 '<bos>'
0.00.282.035 I print_info: EOS token        = 1 '<eos>'
0.00.282.035 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.282.036 I print_info: UNK token        = 3 '<unk>'
0.00.282.036 I print_info: PAD token        = 0 '<pad>'
0.00.282.036 I print_info: LF token         = 227 '<0x0A>'
0.00.282.037 I print_info: EOG token        = 1 '<eos>'
0.00.282.038 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.282.038 I print_info: max token length = 93
0.00.384.441 I load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.384.447 I load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.384.448 I load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.384.449 I load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.384.449 I load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.384.450 I load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
0.00.389.762 I llama_new_context_with_model: n_seq_max     = 1
0.00.389.769 I llama_new_context_with_model: n_ctx         = 4096
0.00.389.770 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.389.770 I llama_new_context_with_model: n_batch       = 2048
0.00.389.771 I llama_new_context_with_model: n_ubatch      = 512
0.00.389.771 I llama_new_context_with_model: flash_attn    = 0
0.00.389.774 I llama_new_context_with_model: freq_base     = 10000.0
0.00.389.775 I llama_new_context_with_model: freq_scale    = 1
0.00.389.776 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.389.796 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.404.469 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.404.481 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.404.582 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.405.952 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.405.959 I llama_new_context_with_model: graph nodes  = 601
0.00.405.959 I llama_new_context_with_model: graph splits = 1
0.00.405.963 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.405.963 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.491.284 I main: llama threadpool init, n_threads = 4
0.00.491.299 I 
0.00.491.372 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.491.375 I 
0.00.491.408 I sampler seed: 302125465
0.00.491.419 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.491.431 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.491.435 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.491.435 I 
 increably. [end of text]


0.00.775.672 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8130.08 tokens per second)
0.00.775.675 I llama_perf_context_print:        load time =     490.46 ms
0.00.775.676 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.775.677 I llama_perf_context_print:        eval time =     281.14 ms /     4 runs   (   70.29 ms per token,    14.23 tokens per second)
0.00.775.678 I llama_perf_context_print:       total time =     284.40 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.547 I build: 4437 (6002bd82) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.763 I main: llama backend init
0.00.000.770 I main: load the model and apply lora adapter, if any
0.00.021.373 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.388 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.397 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.398 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.402 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.403 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.405 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.407 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.408 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.409 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.415 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.416 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.417 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.421 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.422 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.089 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.286 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.166 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.174 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.174 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.175 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.176 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.177 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.177 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.180 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.181 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.181 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.182 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.183 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.188 I llama_model_loader: - type  f32:   37 tensors
0.00.133.189 I llama_model_loader: - type q8_0:  127 tensors
0.00.133.193 I print_info: file format = GGUF V3 (latest)
0.00.133.193 I print_info: file type   = Q8_0
0.00.133.196 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.211.984 W load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.687 W load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.329 I load_vocab: special tokens cache size = 5
0.00.277.711 I load_vocab: token to piece cache size = 1.6014 MB
0.00.277.732 I print_info: arch             = gemma
0.00.277.733 I print_info: vocab type       = SPM
0.00.277.733 I print_info: n_vocab          = 256000
0.00.277.734 I print_info: n_merges         = 0
0.00.277.734 I print_info: vocab_only       = 0
0.00.277.734 I print_info: n_ctx_train      = 8192
0.00.277.735 I print_info: n_embd           = 2048
0.00.277.735 I print_info: n_layer          = 18
0.00.277.745 I print_info: n_head           = 8
0.00.277.747 I print_info: n_head_kv        = 1
0.00.277.747 I print_info: n_rot            = 256
0.00.277.748 I print_info: n_swa            = 0
0.00.277.748 I print_info: n_embd_head_k    = 256
0.00.277.748 I print_info: n_embd_head_v    = 256
0.00.277.750 I print_info: n_gqa            = 8
0.00.277.751 I print_info: n_embd_k_gqa     = 256
0.00.277.753 I print_info: n_embd_v_gqa     = 256
0.00.277.754 I print_info: f_norm_eps       = 0.0e+00
0.00.277.755 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.277.756 I print_info: f_clamp_kqv      = 0.0e+00
0.00.277.756 I print_info: f_max_alibi_bias = 0.0e+00
0.00.277.756 I print_info: f_logit_scale    = 0.0e+00
0.00.277.758 I print_info: n_ff             = 16384
0.00.277.758 I print_info: n_expert         = 0
0.00.277.759 I print_info: n_expert_used    = 0
0.00.277.759 I print_info: causal attn      = 1
0.00.277.759 I print_info: pooling type     = 0
0.00.277.759 I print_info: rope type        = 2
0.00.277.759 I print_info: rope scaling     = linear
0.00.277.761 I print_info: freq_base_train  = 10000.0
0.00.277.762 I print_info: freq_scale_train = 1
0.00.277.762 I print_info: n_ctx_orig_yarn  = 8192
0.00.277.763 I print_info: rope_finetuned   = unknown
0.00.277.763 I print_info: ssm_d_conv       = 0
0.00.277.763 I print_info: ssm_d_inner      = 0
0.00.277.763 I print_info: ssm_d_state      = 0
0.00.277.764 I print_info: ssm_dt_rank      = 0
0.00.277.764 I print_info: ssm_dt_b_c_rms   = 0
0.00.277.765 I print_info: model type       = 2B
0.00.277.765 I print_info: model params     = 2.51 B
0.00.277.766 I print_info: general.name     = gemma-1.1-2b-it
0.00.277.766 I print_info: BOS token        = 2 '<bos>'
0.00.277.766 I print_info: EOS token        = 1 '<eos>'
0.00.277.767 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.277.767 I print_info: UNK token        = 3 '<unk>'
0.00.277.767 I print_info: PAD token        = 0 '<pad>'
0.00.277.768 I print_info: LF token         = 227 '<0x0A>'
0.00.277.768 I print_info: EOG token        = 1 '<eos>'
0.00.277.769 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.277.769 I print_info: max token length = 93
0.00.375.154 I load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
0.00.380.456 I llama_new_context_with_model: n_seq_max     = 1
0.00.380.464 I llama_new_context_with_model: n_ctx         = 4096
0.00.380.464 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.380.465 I llama_new_context_with_model: n_batch       = 2048
0.00.380.465 I llama_new_context_with_model: n_ubatch      = 512
0.00.380.466 I llama_new_context_with_model: flash_attn    = 0
0.00.380.468 I llama_new_context_with_model: freq_base     = 10000.0
0.00.380.469 I llama_new_context_with_model: freq_scale    = 1
0.00.380.470 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.500 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.395.534 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.395.549 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.395.661 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.396.959 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.396.966 I llama_new_context_with_model: graph nodes  = 601
0.00.396.966 I llama_new_context_with_model: graph splits = 1
0.00.396.970 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.396.970 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.479.505 I main: llama threadpool init, n_threads = 4
0.00.479.520 I 
0.00.479.610 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.479.613 I 
0.00.479.651 I sampler seed: 70982421
0.00.479.662 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.479.666 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.479.667 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.479.667 I 
 increably.

I'm unable to generate the requested output due to limitations in my programming capabilities. [end of text]


0.01.991.392 I llama_perf_sampler_print:    sampling time =       3.34 ms /    23 runs   (    0.15 ms per token,  6884.17 tokens per second)
0.01.991.395 I llama_perf_context_print:        load time =     478.72 ms
0.01.991.396 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.991.397 I llama_perf_context_print:        eval time =    1498.39 ms /    22 runs   (   68.11 ms per token,    14.68 tokens per second)
0.01.991.398 I llama_perf_context_print:       total time =    1511.90 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.568 I build: 4437 (6002bd82) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.791 I main: llama backend init
0.00.000.799 I main: load the model and apply lora adapter, if any
0.00.021.632 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.644 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.653 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.660 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.661 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.666 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.667 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.668 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.669 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.670 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.671 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.677 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.678 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.679 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.680 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.681 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.632 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.812 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.667 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.674 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.675 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.675 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.676 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.677 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.677 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.681 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.682 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.682 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.683 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.684 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.690 I llama_model_loader: - type  f32:   37 tensors
0.00.133.691 I llama_model_loader: - type q8_0:  127 tensors
0.00.133.694 I print_info: file format = GGUF V3 (latest)
0.00.133.695 I print_info: file type   = Q8_0
0.00.133.698 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.216.770 W load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.517 W load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.102 I load_vocab: special tokens cache size = 5
0.00.282.615 I load_vocab: token to piece cache size = 1.6014 MB
0.00.282.633 I print_info: arch             = gemma
0.00.282.634 I print_info: vocab type       = SPM
0.00.282.634 I print_info: n_vocab          = 256000
0.00.282.635 I print_info: n_merges         = 0
0.00.282.635 I print_info: vocab_only       = 0
0.00.282.636 I print_info: n_ctx_train      = 8192
0.00.282.636 I print_info: n_embd           = 2048
0.00.282.636 I print_info: n_layer          = 18
0.00.282.647 I print_info: n_head           = 8
0.00.282.649 I print_info: n_head_kv        = 1
0.00.282.650 I print_info: n_rot            = 256
0.00.282.650 I print_info: n_swa            = 0
0.00.282.651 I print_info: n_embd_head_k    = 256
0.00.282.651 I print_info: n_embd_head_v    = 256
0.00.282.654 I print_info: n_gqa            = 8
0.00.282.656 I print_info: n_embd_k_gqa     = 256
0.00.282.659 I print_info: n_embd_v_gqa     = 256
0.00.282.661 I print_info: f_norm_eps       = 0.0e+00
0.00.282.663 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.282.663 I print_info: f_clamp_kqv      = 0.0e+00
0.00.282.667 I print_info: f_max_alibi_bias = 0.0e+00
0.00.282.668 I print_info: f_logit_scale    = 0.0e+00
0.00.282.670 I print_info: n_ff             = 16384
0.00.282.670 I print_info: n_expert         = 0
0.00.282.671 I print_info: n_expert_used    = 0
0.00.282.675 I print_info: causal attn      = 1
0.00.282.675 I print_info: pooling type     = 0
0.00.282.676 I print_info: rope type        = 2
0.00.282.676 I print_info: rope scaling     = linear
0.00.282.678 I print_info: freq_base_train  = 10000.0
0.00.282.679 I print_info: freq_scale_train = 1
0.00.282.680 I print_info: n_ctx_orig_yarn  = 8192
0.00.282.681 I print_info: rope_finetuned   = unknown
0.00.282.682 I print_info: ssm_d_conv       = 0
0.00.282.682 I print_info: ssm_d_inner      = 0
0.00.282.683 I print_info: ssm_d_state      = 0
0.00.282.684 I print_info: ssm_dt_rank      = 0
0.00.282.684 I print_info: ssm_dt_b_c_rms   = 0
0.00.282.686 I print_info: model type       = 2B
0.00.282.689 I print_info: model params     = 2.51 B
0.00.282.690 I print_info: general.name     = gemma-1.1-2b-it
0.00.282.690 I print_info: BOS token        = 2 '<bos>'
0.00.282.691 I print_info: EOS token        = 1 '<eos>'
0.00.282.692 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.282.692 I print_info: UNK token        = 3 '<unk>'
0.00.282.693 I print_info: PAD token        = 0 '<pad>'
0.00.282.693 I print_info: LF token         = 227 '<0x0A>'
0.00.282.694 I print_info: EOG token        = 1 '<eos>'
0.00.282.695 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.282.695 I print_info: max token length = 93
0.00.359.196 I load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.359.200 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.359.201 I load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.359.202 I load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.359.202 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.359.203 I load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
0.00.364.369 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.375 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.376 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.376 I llama_new_context_with_model: n_batch       = 2048
0.00.364.377 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.377 I llama_new_context_with_model: flash_attn    = 0
0.00.364.380 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.381 I llama_new_context_with_model: freq_scale    = 1
0.00.364.381 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.364.403 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.379.129 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.143 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.233 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.505 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.510 I llama_new_context_with_model: graph nodes  = 601
0.00.380.510 I llama_new_context_with_model: graph splits = 1
0.00.380.513 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.380.514 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.384 I main: llama threadpool init, n_threads = 4
0.00.464.402 I 
0.00.464.486 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.464.490 I 
0.00.464.527 I sampler seed: 3194247914
0.00.464.539 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.543 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.543 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.545 I 
 increabling and rolling.

**Answer:** Gymnastics.

Gymnastics is a sport that involves a combination of exercise and artistry. It requires physical coordination, balance

0.02.799.636 I llama_perf_sampler_print:    sampling time =       4.80 ms /    33 runs   (    0.15 ms per token,  6870.71 tokens per second)
0.02.799.638 I llama_perf_context_print:        load time =     463.56 ms
0.02.799.639 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.799.640 I llama_perf_context_print:        eval time =    2315.31 ms /    32 runs   (   72.35 ms per token,    13.82 tokens per second)
0.02.799.641 I llama_perf_context_print:       total time =    2335.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.557 I build: 4437 (6002bd82) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.782 I main: llama backend init
0.00.000.791 I main: load the model and apply lora adapter, if any
0.00.020.971 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.983 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.992 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.999 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.002 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.006 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.007 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.008 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.009 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.010 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.011 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.017 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.018 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.018 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.019 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.020 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.691 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.569 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.450 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.458 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.459 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.460 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.460 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.461 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.462 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.465 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.466 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.466 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.467 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.468 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.473 I llama_model_loader: - type  f32:   37 tensors
0.00.132.474 I llama_model_loader: - type q8_0:  127 tensors
0.00.132.477 I print_info: file format = GGUF V3 (latest)
0.00.132.478 I print_info: file type   = Q8_0
0.00.132.481 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.229.026 W load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.283.995 W load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.284.677 I load_vocab: special tokens cache size = 5
0.00.305.996 I load_vocab: token to piece cache size = 1.6014 MB
0.00.306.015 I print_info: arch             = gemma
0.00.306.016 I print_info: vocab type       = SPM
0.00.306.017 I print_info: n_vocab          = 256000
0.00.306.018 I print_info: n_merges         = 0
0.00.306.018 I print_info: vocab_only       = 0
0.00.306.018 I print_info: n_ctx_train      = 8192
0.00.306.019 I print_info: n_embd           = 2048
0.00.306.019 I print_info: n_layer          = 18
0.00.306.032 I print_info: n_head           = 8
0.00.306.034 I print_info: n_head_kv        = 1
0.00.306.034 I print_info: n_rot            = 256
0.00.306.035 I print_info: n_swa            = 0
0.00.306.035 I print_info: n_embd_head_k    = 256
0.00.306.036 I print_info: n_embd_head_v    = 256
0.00.306.038 I print_info: n_gqa            = 8
0.00.306.040 I print_info: n_embd_k_gqa     = 256
0.00.306.043 I print_info: n_embd_v_gqa     = 256
0.00.306.044 I print_info: f_norm_eps       = 0.0e+00
0.00.306.046 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.306.047 I print_info: f_clamp_kqv      = 0.0e+00
0.00.306.048 I print_info: f_max_alibi_bias = 0.0e+00
0.00.306.048 I print_info: f_logit_scale    = 0.0e+00
0.00.306.051 I print_info: n_ff             = 16384
0.00.306.051 I print_info: n_expert         = 0
0.00.306.054 I print_info: n_expert_used    = 0
0.00.306.054 I print_info: causal attn      = 1
0.00.306.055 I print_info: pooling type     = 0
0.00.306.055 I print_info: rope type        = 2
0.00.306.059 I print_info: rope scaling     = linear
0.00.306.061 I print_info: freq_base_train  = 10000.0
0.00.306.062 I print_info: freq_scale_train = 1
0.00.306.062 I print_info: n_ctx_orig_yarn  = 8192
0.00.306.063 I print_info: rope_finetuned   = unknown
0.00.306.064 I print_info: ssm_d_conv       = 0
0.00.306.064 I print_info: ssm_d_inner      = 0
0.00.306.065 I print_info: ssm_d_state      = 0
0.00.306.065 I print_info: ssm_dt_rank      = 0
0.00.306.065 I print_info: ssm_dt_b_c_rms   = 0
0.00.306.066 I print_info: model type       = 2B
0.00.306.068 I print_info: model params     = 2.51 B
0.00.306.069 I print_info: general.name     = gemma-1.1-2b-it
0.00.306.070 I print_info: BOS token        = 2 '<bos>'
0.00.306.070 I print_info: EOS token        = 1 '<eos>'
0.00.306.071 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.306.072 I print_info: UNK token        = 3 '<unk>'
0.00.306.072 I print_info: PAD token        = 0 '<pad>'
0.00.306.073 I print_info: LF token         = 227 '<0x0A>'
0.00.306.074 I print_info: EOG token        = 1 '<eos>'
0.00.306.075 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.306.075 I print_info: max token length = 93
0.00.377.253 I load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.377.263 I load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
0.00.382.439 I llama_new_context_with_model: n_seq_max     = 1
0.00.382.445 I llama_new_context_with_model: n_ctx         = 4096
0.00.382.445 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.382.446 I llama_new_context_with_model: n_batch       = 2048
0.00.382.446 I llama_new_context_with_model: n_ubatch      = 512
0.00.382.447 I llama_new_context_with_model: flash_attn    = 0
0.00.382.450 I llama_new_context_with_model: freq_base     = 10000.0
0.00.382.450 I llama_new_context_with_model: freq_scale    = 1
0.00.382.451 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.479 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.396.918 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.396.933 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.397.026 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.398.267 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.398.273 I llama_new_context_with_model: graph nodes  = 601
0.00.398.273 I llama_new_context_with_model: graph splits = 1
0.00.398.276 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.398.277 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.485.874 I main: llama threadpool init, n_threads = 4
0.00.485.889 I 
0.00.485.977 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.485.981 I 
0.00.486.019 I sampler seed: 2957999429
0.00.486.030 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.486.035 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.486.036 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.486.036 I 
 increasities, the rise of fascism, and the Cold War. [end of text]


0.01.548.487 I llama_perf_sampler_print:    sampling time =       2.47 ms /    15 runs   (    0.16 ms per token,  6075.33 tokens per second)
0.01.548.489 I llama_perf_context_print:        load time =     485.06 ms
0.01.548.490 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.548.492 I llama_perf_context_print:        eval time =    1052.71 ms /    14 runs   (   75.19 ms per token,    13.30 tokens per second)
0.01.548.492 I llama_perf_context_print:       total time =    1062.62 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m16.695s
user	0m23.682s
sys	0m9.504s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4437 (6002bd82)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40288.53 ms
main:    total time = 40288.53 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.535 I build: 4437 (6002bd82) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.000.732 I main: load the model and apply lora adapter, if any
0.00.021.475 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.484 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.493 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.499 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.503 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.505 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.506 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.506 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.507 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.507 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.508 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.511 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.512 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.512 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.513 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.514 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.952 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.566 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.424 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.430 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.431 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.432 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.433 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.434 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.435 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.439 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.440 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.441 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.442 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.443 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.447 I llama_model_loader: - type  f32:   37 tensors
0.00.132.448 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.449 I llama_model_loader: - type q6_K:   19 tensors
0.00.132.451 I print_info: file format = GGUF V3 (latest)
0.00.132.452 I print_info: file type   = Q4_K - Medium
0.00.132.454 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.209.731 W load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.272 W load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.887 I load_vocab: special tokens cache size = 5
0.00.277.346 I load_vocab: token to piece cache size = 1.6014 MB
0.00.277.367 I print_info: arch             = gemma
0.00.277.368 I print_info: vocab type       = SPM
0.00.277.369 I print_info: n_vocab          = 256000
0.00.277.369 I print_info: n_merges         = 0
0.00.277.369 I print_info: vocab_only       = 0
0.00.277.370 I print_info: n_ctx_train      = 8192
0.00.277.370 I print_info: n_embd           = 2048
0.00.277.371 I print_info: n_layer          = 18
0.00.277.381 I print_info: n_head           = 8
0.00.277.383 I print_info: n_head_kv        = 1
0.00.277.383 I print_info: n_rot            = 256
0.00.277.384 I print_info: n_swa            = 0
0.00.277.384 I print_info: n_embd_head_k    = 256
0.00.277.384 I print_info: n_embd_head_v    = 256
0.00.277.386 I print_info: n_gqa            = 8
0.00.277.388 I print_info: n_embd_k_gqa     = 256
0.00.277.390 I print_info: n_embd_v_gqa     = 256
0.00.277.391 I print_info: f_norm_eps       = 0.0e+00
0.00.277.392 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.277.393 I print_info: f_clamp_kqv      = 0.0e+00
0.00.277.393 I print_info: f_max_alibi_bias = 0.0e+00
0.00.277.393 I print_info: f_logit_scale    = 0.0e+00
0.00.277.395 I print_info: n_ff             = 16384
0.00.277.395 I print_info: n_expert         = 0
0.00.277.396 I print_info: n_expert_used    = 0
0.00.277.396 I print_info: causal attn      = 1
0.00.277.396 I print_info: pooling type     = 0
0.00.277.396 I print_info: rope type        = 2
0.00.277.397 I print_info: rope scaling     = linear
0.00.277.399 I print_info: freq_base_train  = 10000.0
0.00.277.399 I print_info: freq_scale_train = 1
0.00.277.399 I print_info: n_ctx_orig_yarn  = 8192
0.00.277.400 I print_info: rope_finetuned   = unknown
0.00.277.400 I print_info: ssm_d_conv       = 0
0.00.277.400 I print_info: ssm_d_inner      = 0
0.00.277.401 I print_info: ssm_d_state      = 0
0.00.277.401 I print_info: ssm_dt_rank      = 0
0.00.277.401 I print_info: ssm_dt_b_c_rms   = 0
0.00.277.402 I print_info: model type       = 2B
0.00.277.403 I print_info: model params     = 2.51 B
0.00.277.403 I print_info: general.name     = gemma-1.1-2b-it
0.00.277.403 I print_info: BOS token        = 2 '<bos>'
0.00.277.404 I print_info: EOS token        = 1 '<eos>'
0.00.277.404 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.277.405 I print_info: UNK token        = 3 '<unk>'
0.00.277.405 I print_info: PAD token        = 0 '<pad>'
0.00.277.405 I print_info: LF token         = 227 '<0x0A>'
0.00.277.406 I print_info: EOG token        = 1 '<eos>'
0.00.277.406 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.277.406 I print_info: max token length = 93
0.00.336.548 I load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.336.557 I load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.336.558 I load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.336.559 I load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.336.560 I load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.336.560 I load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
0.00.341.923 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.930 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.931 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.931 I llama_new_context_with_model: n_batch       = 2048
0.00.341.932 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.932 I llama_new_context_with_model: flash_attn    = 0
0.00.341.935 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.936 I llama_new_context_with_model: freq_scale    = 1
0.00.341.937 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.341.959 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.357.320 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.357.335 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.432 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.748 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.755 I llama_new_context_with_model: graph nodes  = 601
0.00.358.755 I llama_new_context_with_model: graph splits = 1
0.00.358.759 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.358.759 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.437.053 I main: llama threadpool init, n_threads = 4
0.00.437.071 I 
0.00.437.146 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.437.149 I 
0.00.437.182 I sampler seed: 2381897156
0.00.437.193 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.437.196 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.437.197 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.437.198 I 
 seconded with a playful grin. "I'm just kidding! We can do this!"

**Scene:** A bustling city street, teeming with pedestrians and

0.02.052.741 I llama_perf_sampler_print:    sampling time =       5.13 ms /    33 runs   (    0.16 ms per token,  6435.26 tokens per second)
0.02.052.743 I llama_perf_context_print:        load time =     436.30 ms
0.02.052.745 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.052.747 I llama_perf_context_print:        eval time =    1595.66 ms /    32 runs   (   49.86 ms per token,    20.05 tokens per second)
0.02.052.748 I llama_perf_context_print:       total time =    1615.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4437 (6002bd82)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40279.24 ms
main:    total time = 40279.24 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.563 I build: 4437 (6002bd82) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.747 I main: llama backend init
0.00.000.752 I main: load the model and apply lora adapter, if any
0.00.021.308 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.323 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.330 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.331 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.333 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.334 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.334 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.335 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.335 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.336 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.339 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.339 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.340 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.341 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.341 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.260 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.769 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.644 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.651 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.652 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.653 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.653 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.655 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.655 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.658 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.658 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.663 I llama_model_loader: - type  f32:   37 tensors
0.00.132.664 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.664 I llama_model_loader: - type q6_K:   19 tensors
0.00.132.667 I print_info: file format = GGUF V3 (latest)
0.00.132.668 I print_info: file type   = Q4_K - Medium
0.00.132.670 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.209.875 W load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.262.403 W load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.263.128 I load_vocab: special tokens cache size = 5
0.00.284.707 I load_vocab: token to piece cache size = 1.6014 MB
0.00.284.730 I print_info: arch             = gemma
0.00.284.731 I print_info: vocab type       = SPM
0.00.284.732 I print_info: n_vocab          = 256000
0.00.284.732 I print_info: n_merges         = 0
0.00.284.733 I print_info: vocab_only       = 0
0.00.284.733 I print_info: n_ctx_train      = 8192
0.00.284.733 I print_info: n_embd           = 2048
0.00.284.734 I print_info: n_layer          = 18
0.00.284.745 I print_info: n_head           = 8
0.00.284.747 I print_info: n_head_kv        = 1
0.00.284.748 I print_info: n_rot            = 256
0.00.284.748 I print_info: n_swa            = 0
0.00.284.748 I print_info: n_embd_head_k    = 256
0.00.284.748 I print_info: n_embd_head_v    = 256
0.00.284.750 I print_info: n_gqa            = 8
0.00.284.752 I print_info: n_embd_k_gqa     = 256
0.00.284.753 I print_info: n_embd_v_gqa     = 256
0.00.284.754 I print_info: f_norm_eps       = 0.0e+00
0.00.284.756 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.284.756 I print_info: f_clamp_kqv      = 0.0e+00
0.00.284.757 I print_info: f_max_alibi_bias = 0.0e+00
0.00.284.757 I print_info: f_logit_scale    = 0.0e+00
0.00.284.759 I print_info: n_ff             = 16384
0.00.284.759 I print_info: n_expert         = 0
0.00.284.759 I print_info: n_expert_used    = 0
0.00.284.760 I print_info: causal attn      = 1
0.00.284.760 I print_info: pooling type     = 0
0.00.284.760 I print_info: rope type        = 2
0.00.284.760 I print_info: rope scaling     = linear
0.00.284.763 I print_info: freq_base_train  = 10000.0
0.00.284.763 I print_info: freq_scale_train = 1
0.00.284.763 I print_info: n_ctx_orig_yarn  = 8192
0.00.284.764 I print_info: rope_finetuned   = unknown
0.00.284.764 I print_info: ssm_d_conv       = 0
0.00.284.764 I print_info: ssm_d_inner      = 0
0.00.284.765 I print_info: ssm_d_state      = 0
0.00.284.765 I print_info: ssm_dt_rank      = 0
0.00.284.765 I print_info: ssm_dt_b_c_rms   = 0
0.00.284.766 I print_info: model type       = 2B
0.00.284.767 I print_info: model params     = 2.51 B
0.00.284.767 I print_info: general.name     = gemma-1.1-2b-it
0.00.284.768 I print_info: BOS token        = 2 '<bos>'
0.00.284.768 I print_info: EOS token        = 1 '<eos>'
0.00.284.768 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.284.769 I print_info: UNK token        = 3 '<unk>'
0.00.284.769 I print_info: PAD token        = 0 '<pad>'
0.00.284.769 I print_info: LF token         = 227 '<0x0A>'
0.00.284.770 I print_info: EOG token        = 1 '<eos>'
0.00.284.771 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.284.771 I print_info: max token length = 93
0.00.342.009 I load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
0.00.347.279 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.286 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.286 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.287 I llama_new_context_with_model: n_batch       = 2048
0.00.347.287 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.288 I llama_new_context_with_model: flash_attn    = 0
0.00.347.291 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.292 I llama_new_context_with_model: freq_scale    = 1
0.00.347.293 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.347.315 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.362.952 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.966 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.363.060 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.307 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.314 I llama_new_context_with_model: graph nodes  = 601
0.00.364.315 I llama_new_context_with_model: graph splits = 1
0.00.364.319 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.364.319 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.440.735 I main: llama threadpool init, n_threads = 4
0.00.440.751 I 
0.00.440.828 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.440.831 I 
0.00.440.863 I sampler seed: 358256535
0.00.440.874 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.440.876 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.440.877 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.440.877 I 
 squaRED, the leading provider of data visualization solutions for BI professionals.

**Q1 FY23 Revenue and Profitability Analysis**

**Revenue:**


0.02.037.177 I llama_perf_sampler_print:    sampling time =       5.43 ms /    33 runs   (    0.16 ms per token,  6077.35 tokens per second)
0.02.037.180 I llama_perf_context_print:        load time =     439.96 ms
0.02.037.181 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.037.182 I llama_perf_context_print:        eval time =    1575.92 ms /    32 runs   (   49.25 ms per token,    20.31 tokens per second)
0.02.037.183 I llama_perf_context_print:       total time =    1596.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.524s
user	10m24.800s
sys	0m7.027s
