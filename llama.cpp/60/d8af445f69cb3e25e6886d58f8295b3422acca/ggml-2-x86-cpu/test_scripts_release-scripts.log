+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.578 I build: 3923 (60d8af44) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.776 I main: llama backend init
0.00.001.925 I main: load the model and apply lora adapter, if any
0.00.022.293 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.343 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.354 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.360 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.362 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.366 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.366 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.367 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.368 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.368 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.369 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.373 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.373 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.374 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.374 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.375 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.163 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.583 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.535 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.542 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.542 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.543 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.543 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.544 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.545 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.547 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.547 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.548 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.548 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.549 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.553 I llama_model_loader: - type  f32:   37 tensors
0.00.133.556 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.850 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.029 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.249.709 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.254.961 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.266.100 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.266.819 I llm_load_vocab: special tokens cache size = 5
0.00.287.762 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.287.784 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.287.785 I llm_load_print_meta: arch             = gemma
0.00.287.785 I llm_load_print_meta: vocab type       = SPM
0.00.287.786 I llm_load_print_meta: n_vocab          = 256000
0.00.287.786 I llm_load_print_meta: n_merges         = 0
0.00.287.786 I llm_load_print_meta: vocab_only       = 0
0.00.287.787 I llm_load_print_meta: n_ctx_train      = 8192
0.00.287.787 I llm_load_print_meta: n_embd           = 2048
0.00.287.787 I llm_load_print_meta: n_layer          = 18
0.00.287.800 I llm_load_print_meta: n_head           = 8
0.00.287.801 I llm_load_print_meta: n_head_kv        = 1
0.00.287.802 I llm_load_print_meta: n_rot            = 256
0.00.287.802 I llm_load_print_meta: n_swa            = 0
0.00.287.802 I llm_load_print_meta: n_embd_head_k    = 256
0.00.287.803 I llm_load_print_meta: n_embd_head_v    = 256
0.00.287.803 I llm_load_print_meta: n_gqa            = 8
0.00.287.804 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.287.805 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.287.807 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.287.808 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.287.808 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.287.809 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.287.809 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.287.810 I llm_load_print_meta: n_ff             = 16384
0.00.287.810 I llm_load_print_meta: n_expert         = 0
0.00.287.811 I llm_load_print_meta: n_expert_used    = 0
0.00.287.811 I llm_load_print_meta: causal attn      = 1
0.00.287.811 I llm_load_print_meta: pooling type     = 0
0.00.287.812 I llm_load_print_meta: rope type        = 2
0.00.287.812 I llm_load_print_meta: rope scaling     = linear
0.00.287.814 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.287.814 I llm_load_print_meta: freq_scale_train = 1
0.00.287.815 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.287.815 I llm_load_print_meta: rope_finetuned   = unknown
0.00.287.815 I llm_load_print_meta: ssm_d_conv       = 0
0.00.287.816 I llm_load_print_meta: ssm_d_inner      = 0
0.00.287.816 I llm_load_print_meta: ssm_d_state      = 0
0.00.287.816 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.287.816 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.287.817 I llm_load_print_meta: model type       = 2B
0.00.287.817 I llm_load_print_meta: model ftype      = Q8_0
0.00.287.818 I llm_load_print_meta: model params     = 2.51 B
0.00.287.819 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.287.819 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.287.820 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.287.820 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.287.821 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.287.821 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.287.821 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.287.822 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.287.822 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.287.822 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.287.823 I llm_load_print_meta: max token length = 93
0.00.287.844 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.388.552 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.388.562 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.388.563 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.388.563 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.388.564 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.388.564 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.393.638 I llama_new_context_with_model: n_ctx      = 8192
0.00.393.644 I llama_new_context_with_model: n_batch    = 2048
0.00.393.645 I llama_new_context_with_model: n_ubatch   = 512
0.00.393.645 I llama_new_context_with_model: flash_attn = 0
0.00.393.648 I llama_new_context_with_model: freq_base  = 10000.0
0.00.393.649 I llama_new_context_with_model: freq_scale = 1
0.00.422.964 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.422.980 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.423.077 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.423.925 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.423.933 I llama_new_context_with_model: graph nodes  = 601
0.00.423.934 I llama_new_context_with_model: graph splits = 1
0.00.423.936 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.516.401 I main: llama threadpool init, n_threads = 4
0.00.516.414 I 
0.00.516.490 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.516.493 I 
0.00.516.534 I sampler seed: 3645543212
0.00.516.545 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.516.548 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.516.549 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.516.549 I 
 seconally.

I. Choose the correct word to fill in the blank.
a) Opportunity
b) Advantage
c) Advantage
d) Opportunity

0.02.786.358 I llama_perf_sampler_print:    sampling time =       4.64 ms /    33 runs   (    0.14 ms per token,  7116.67 tokens per second)
0.02.786.361 I llama_perf_context_print:        load time =     514.45 ms
0.02.786.362 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.786.363 I llama_perf_context_print:        eval time =    2252.10 ms /    32 runs   (   70.38 ms per token,    14.21 tokens per second)
0.02.786.364 I llama_perf_context_print:       total time =    2269.97 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.576 I build: 3923 (60d8af44) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.806 I main: llama backend init
0.00.001.946 I main: load the model and apply lora adapter, if any
0.00.022.448 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.458 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.465 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.466 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.469 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.470 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.471 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.471 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.472 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.472 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.477 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.477 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.478 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.478 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.479 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.822 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.958 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.964 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.975 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.975 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.976 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.977 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.978 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.978 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.981 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.981 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.982 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.982 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.983 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.987 I llama_model_loader: - type  f32:   37 tensors
0.00.132.990 I llama_model_loader: - type q8_0:  127 tensors
0.00.220.538 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.350 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.254.729 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.259.029 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.267.908 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.268.548 I llm_load_vocab: special tokens cache size = 5
0.00.289.098 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.289.116 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.289.116 I llm_load_print_meta: arch             = gemma
0.00.289.117 I llm_load_print_meta: vocab type       = SPM
0.00.289.117 I llm_load_print_meta: n_vocab          = 256000
0.00.289.118 I llm_load_print_meta: n_merges         = 0
0.00.289.118 I llm_load_print_meta: vocab_only       = 0
0.00.289.119 I llm_load_print_meta: n_ctx_train      = 8192
0.00.289.119 I llm_load_print_meta: n_embd           = 2048
0.00.289.119 I llm_load_print_meta: n_layer          = 18
0.00.289.131 I llm_load_print_meta: n_head           = 8
0.00.289.132 I llm_load_print_meta: n_head_kv        = 1
0.00.289.132 I llm_load_print_meta: n_rot            = 256
0.00.289.132 I llm_load_print_meta: n_swa            = 0
0.00.289.133 I llm_load_print_meta: n_embd_head_k    = 256
0.00.289.133 I llm_load_print_meta: n_embd_head_v    = 256
0.00.289.134 I llm_load_print_meta: n_gqa            = 8
0.00.289.135 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.289.136 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.289.137 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.289.138 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.289.138 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.289.138 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.289.138 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.289.139 I llm_load_print_meta: n_ff             = 16384
0.00.289.140 I llm_load_print_meta: n_expert         = 0
0.00.289.140 I llm_load_print_meta: n_expert_used    = 0
0.00.289.141 I llm_load_print_meta: causal attn      = 1
0.00.289.141 I llm_load_print_meta: pooling type     = 0
0.00.289.142 I llm_load_print_meta: rope type        = 2
0.00.289.142 I llm_load_print_meta: rope scaling     = linear
0.00.289.143 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.289.144 I llm_load_print_meta: freq_scale_train = 1
0.00.289.144 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.289.145 I llm_load_print_meta: rope_finetuned   = unknown
0.00.289.145 I llm_load_print_meta: ssm_d_conv       = 0
0.00.289.145 I llm_load_print_meta: ssm_d_inner      = 0
0.00.289.145 I llm_load_print_meta: ssm_d_state      = 0
0.00.289.145 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.289.146 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.289.146 I llm_load_print_meta: model type       = 2B
0.00.289.146 I llm_load_print_meta: model ftype      = Q8_0
0.00.289.148 I llm_load_print_meta: model params     = 2.51 B
0.00.289.148 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.289.149 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.289.149 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.289.150 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.289.150 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.289.150 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.289.150 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.289.151 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.289.151 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.289.151 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.289.152 I llm_load_print_meta: max token length = 93
0.00.289.179 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.383.238 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.388.426 I llama_new_context_with_model: n_ctx      = 8192
0.00.388.433 I llama_new_context_with_model: n_batch    = 2048
0.00.388.434 I llama_new_context_with_model: n_ubatch   = 512
0.00.388.434 I llama_new_context_with_model: flash_attn = 0
0.00.388.437 I llama_new_context_with_model: freq_base  = 10000.0
0.00.388.438 I llama_new_context_with_model: freq_scale = 1
0.00.417.486 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.417.503 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.417.598 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.418.491 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.418.499 I llama_new_context_with_model: graph nodes  = 601
0.00.418.499 I llama_new_context_with_model: graph splits = 1
0.00.418.501 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.505.883 I main: llama threadpool init, n_threads = 4
0.00.505.896 I 
0.00.505.976 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.505.980 I 
0.00.506.027 I sampler seed: 1606955611
0.00.506.037 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.506.055 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.506.056 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.506.057 I 
 increasities in the media, it's important to remember that violence is never an acceptable solution. There are always other ways to resolve conflict.

However,

0.02.708.043 I llama_perf_sampler_print:    sampling time =       4.77 ms /    33 runs   (    0.14 ms per token,  6915.34 tokens per second)
0.02.708.046 I llama_perf_context_print:        load time =     503.91 ms
0.02.708.047 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.708.049 I llama_perf_context_print:        eval time =    2183.64 ms /    32 runs   (   68.24 ms per token,    14.65 tokens per second)
0.02.708.050 I llama_perf_context_print:       total time =    2202.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.598 I build: 3923 (60d8af44) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.811 I main: llama backend init
0.00.001.934 I main: load the model and apply lora adapter, if any
0.00.022.103 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.161 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.170 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.188 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.194 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.199 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.200 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.201 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.202 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.203 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.207 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.220 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.221 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.222 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.223 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.226 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.460 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.086 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.003 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.010 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.011 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.012 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.012 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.013 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.014 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.016 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.017 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.018 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.019 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.019 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.023 I llama_model_loader: - type  f32:   37 tensors
0.00.133.026 I llama_model_loader: - type q8_0:  127 tensors
0.00.214.445 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.488 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.249.902 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.254.046 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.262.515 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.263.103 I llm_load_vocab: special tokens cache size = 5
0.00.283.885 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.901 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.902 I llm_load_print_meta: arch             = gemma
0.00.283.902 I llm_load_print_meta: vocab type       = SPM
0.00.283.903 I llm_load_print_meta: n_vocab          = 256000
0.00.283.903 I llm_load_print_meta: n_merges         = 0
0.00.283.904 I llm_load_print_meta: vocab_only       = 0
0.00.283.904 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.904 I llm_load_print_meta: n_embd           = 2048
0.00.283.905 I llm_load_print_meta: n_layer          = 18
0.00.283.916 I llm_load_print_meta: n_head           = 8
0.00.283.917 I llm_load_print_meta: n_head_kv        = 1
0.00.283.917 I llm_load_print_meta: n_rot            = 256
0.00.283.918 I llm_load_print_meta: n_swa            = 0
0.00.283.918 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.918 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.919 I llm_load_print_meta: n_gqa            = 8
0.00.283.920 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.921 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.921 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.922 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.923 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.923 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.923 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.924 I llm_load_print_meta: n_ff             = 16384
0.00.283.925 I llm_load_print_meta: n_expert         = 0
0.00.283.925 I llm_load_print_meta: n_expert_used    = 0
0.00.283.926 I llm_load_print_meta: causal attn      = 1
0.00.283.926 I llm_load_print_meta: pooling type     = 0
0.00.283.927 I llm_load_print_meta: rope type        = 2
0.00.283.927 I llm_load_print_meta: rope scaling     = linear
0.00.283.928 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.929 I llm_load_print_meta: freq_scale_train = 1
0.00.283.929 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.929 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.930 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.930 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.930 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.930 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.931 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.931 I llm_load_print_meta: model type       = 2B
0.00.283.932 I llm_load_print_meta: model ftype      = Q8_0
0.00.283.933 I llm_load_print_meta: model params     = 2.51 B
0.00.283.933 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.283.934 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.934 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.934 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.935 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.936 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.936 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.936 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.937 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.937 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.938 I llm_load_print_meta: max token length = 93
0.00.283.968 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.360.639 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.360.648 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.360.649 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.360.649 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.360.650 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.360.651 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.365.815 I llama_new_context_with_model: n_ctx      = 8192
0.00.365.824 I llama_new_context_with_model: n_batch    = 2048
0.00.365.824 I llama_new_context_with_model: n_ubatch   = 512
0.00.365.825 I llama_new_context_with_model: flash_attn = 0
0.00.365.829 I llama_new_context_with_model: freq_base  = 10000.0
0.00.365.830 I llama_new_context_with_model: freq_scale = 1
0.00.396.892 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.396.909 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.397.005 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.397.883 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.397.891 I llama_new_context_with_model: graph nodes  = 601
0.00.397.892 I llama_new_context_with_model: graph splits = 1
0.00.397.893 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.491.618 I main: llama threadpool init, n_threads = 4
0.00.491.632 I 
0.00.491.717 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.491.721 I 
0.00.491.789 I sampler seed: 1075549973
0.00.491.801 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.491.804 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.491.805 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.491.805 I 
 increasities. [end of text]


0.00.784.084 I llama_perf_sampler_print:    sampling time =       0.63 ms /     5 runs   (    0.13 ms per token,  7974.48 tokens per second)
0.00.784.087 I llama_perf_context_print:        load time =     489.66 ms
0.00.784.088 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.784.089 I llama_perf_context_print:        eval time =     289.35 ms /     4 runs   (   72.34 ms per token,    13.82 tokens per second)
0.00.784.090 I llama_perf_context_print:       total time =     292.47 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.580 I build: 3923 (60d8af44) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.778 I main: llama backend init
0.00.001.896 I main: load the model and apply lora adapter, if any
0.00.022.022 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.070 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.078 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.083 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.084 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.088 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.089 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.090 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.090 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.091 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.091 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.096 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.096 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.097 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.097 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.098 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.855 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.197 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.076 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.082 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.083 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.083 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.084 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.085 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.086 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.088 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.089 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.090 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.091 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.092 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.096 I llama_model_loader: - type  f32:   37 tensors
0.00.133.099 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.870 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.676 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.244.959 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.248.978 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.257.645 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.280 I llm_load_vocab: special tokens cache size = 5
0.00.279.164 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.184 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.184 I llm_load_print_meta: arch             = gemma
0.00.279.185 I llm_load_print_meta: vocab type       = SPM
0.00.279.186 I llm_load_print_meta: n_vocab          = 256000
0.00.279.186 I llm_load_print_meta: n_merges         = 0
0.00.279.186 I llm_load_print_meta: vocab_only       = 0
0.00.279.187 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.187 I llm_load_print_meta: n_embd           = 2048
0.00.279.187 I llm_load_print_meta: n_layer          = 18
0.00.279.199 I llm_load_print_meta: n_head           = 8
0.00.279.200 I llm_load_print_meta: n_head_kv        = 1
0.00.279.201 I llm_load_print_meta: n_rot            = 256
0.00.279.201 I llm_load_print_meta: n_swa            = 0
0.00.279.201 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.201 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.202 I llm_load_print_meta: n_gqa            = 8
0.00.279.203 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.204 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.205 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.206 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.207 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.207 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.207 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.208 I llm_load_print_meta: n_ff             = 16384
0.00.279.209 I llm_load_print_meta: n_expert         = 0
0.00.279.209 I llm_load_print_meta: n_expert_used    = 0
0.00.279.209 I llm_load_print_meta: causal attn      = 1
0.00.279.209 I llm_load_print_meta: pooling type     = 0
0.00.279.210 I llm_load_print_meta: rope type        = 2
0.00.279.210 I llm_load_print_meta: rope scaling     = linear
0.00.279.212 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.212 I llm_load_print_meta: freq_scale_train = 1
0.00.279.213 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.213 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.213 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.213 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.213 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.214 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.214 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.215 I llm_load_print_meta: model type       = 2B
0.00.279.215 I llm_load_print_meta: model ftype      = Q8_0
0.00.279.216 I llm_load_print_meta: model params     = 2.51 B
0.00.279.217 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.279.217 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.218 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.218 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.219 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.219 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.219 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.219 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.220 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.220 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.221 I llm_load_print_meta: max token length = 93
0.00.279.242 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.350.909 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.350.916 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.355.940 I llama_new_context_with_model: n_ctx      = 8192
0.00.355.947 I llama_new_context_with_model: n_batch    = 2048
0.00.355.947 I llama_new_context_with_model: n_ubatch   = 512
0.00.355.948 I llama_new_context_with_model: flash_attn = 0
0.00.355.950 I llama_new_context_with_model: freq_base  = 10000.0
0.00.355.951 I llama_new_context_with_model: freq_scale = 1
0.00.385.740 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.385.757 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.385.849 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.720 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.386.728 I llama_new_context_with_model: graph nodes  = 601
0.00.386.729 I llama_new_context_with_model: graph splits = 1
0.00.386.731 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.483.253 I main: llama threadpool init, n_threads = 4
0.00.483.266 I 
0.00.483.343 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.483.347 I 
0.00.483.384 I sampler seed: 1307380309
0.00.483.393 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.483.395 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.483.396 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.483.396 I 
 increasities of the past and the present.

**Answer:** History.

**Explanation:**

History is the study of the past and present. It encompasses

0.02.927.542 I llama_perf_sampler_print:    sampling time =       4.97 ms /    33 runs   (    0.15 ms per token,  6634.50 tokens per second)
0.02.927.544 I llama_perf_context_print:        load time =     481.33 ms
0.02.927.546 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.927.548 I llama_perf_context_print:        eval time =    2425.91 ms /    32 runs   (   75.81 ms per token,    13.19 tokens per second)
0.02.927.548 I llama_perf_context_print:       total time =    2444.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.738s
user	0m31.798s
sys	0m9.500s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3923 (60d8af44)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32025.56 ms
main:    total time = 32025.56 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.545 I build: 3923 (60d8af44) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.741 I main: llama backend init
0.00.001.868 I main: load the model and apply lora adapter, if any
0.00.022.207 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.257 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.265 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.270 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.270 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.275 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.275 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.276 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.276 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.277 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.277 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.281 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.281 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.282 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.282 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.283 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.672 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.714 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.602 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.608 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.609 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.610 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.610 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.611 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.612 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.615 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.615 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.616 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.616 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.617 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.621 I llama_model_loader: - type  f32:   37 tensors
0.00.132.624 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.625 I llama_model_loader: - type q6_K:   19 tensors
0.00.212.691 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.753 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.245.065 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.249.033 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.257.119 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.737 I llm_load_vocab: special tokens cache size = 5
0.00.278.488 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.504 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.504 I llm_load_print_meta: arch             = gemma
0.00.278.505 I llm_load_print_meta: vocab type       = SPM
0.00.278.505 I llm_load_print_meta: n_vocab          = 256000
0.00.278.506 I llm_load_print_meta: n_merges         = 0
0.00.278.506 I llm_load_print_meta: vocab_only       = 0
0.00.278.506 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.507 I llm_load_print_meta: n_embd           = 2048
0.00.278.507 I llm_load_print_meta: n_layer          = 18
0.00.278.517 I llm_load_print_meta: n_head           = 8
0.00.278.518 I llm_load_print_meta: n_head_kv        = 1
0.00.278.518 I llm_load_print_meta: n_rot            = 256
0.00.278.518 I llm_load_print_meta: n_swa            = 0
0.00.278.519 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.519 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.520 I llm_load_print_meta: n_gqa            = 8
0.00.278.521 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.522 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.523 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.525 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.525 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.525 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.526 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.527 I llm_load_print_meta: n_ff             = 16384
0.00.278.527 I llm_load_print_meta: n_expert         = 0
0.00.278.527 I llm_load_print_meta: n_expert_used    = 0
0.00.278.528 I llm_load_print_meta: causal attn      = 1
0.00.278.528 I llm_load_print_meta: pooling type     = 0
0.00.278.528 I llm_load_print_meta: rope type        = 2
0.00.278.528 I llm_load_print_meta: rope scaling     = linear
0.00.278.530 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.530 I llm_load_print_meta: freq_scale_train = 1
0.00.278.531 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.531 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.531 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.531 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.532 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.532 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.532 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.533 I llm_load_print_meta: model type       = 2B
0.00.278.534 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.278.535 I llm_load_print_meta: model params     = 2.51 B
0.00.278.536 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.278.536 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.537 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.537 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.538 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.538 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.539 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.539 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.539 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.540 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.545 I llm_load_print_meta: max token length = 93
0.00.278.572 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.336.304 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.336.311 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.336.312 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.336.313 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.336.313 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.336.314 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.341.539 I llama_new_context_with_model: n_ctx      = 8192
0.00.341.545 I llama_new_context_with_model: n_batch    = 2048
0.00.341.545 I llama_new_context_with_model: n_ubatch   = 512
0.00.341.546 I llama_new_context_with_model: flash_attn = 0
0.00.341.548 I llama_new_context_with_model: freq_base  = 10000.0
0.00.341.549 I llama_new_context_with_model: freq_scale = 1
0.00.370.557 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.370.573 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.370.665 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.371.548 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.371.556 I llama_new_context_with_model: graph nodes  = 601
0.00.371.556 I llama_new_context_with_model: graph splits = 1
0.00.371.558 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.229 I main: llama threadpool init, n_threads = 4
0.00.453.241 I 
0.00.453.319 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.453.322 I 
0.00.453.362 I sampler seed: 3767815606
0.00.453.372 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.374 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.453.375 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.376 I 
 seconded the question and provided the following response:

**Response:**

"The provided context does not contain sufficient information to determine the nature of the question or

0.02.131.668 I llama_perf_sampler_print:    sampling time =       5.24 ms /    33 runs   (    0.16 ms per token,  6298.91 tokens per second)
0.02.131.670 I llama_perf_context_print:        load time =     451.34 ms
0.02.131.671 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.131.673 I llama_perf_context_print:        eval time =    1659.70 ms /    32 runs   (   51.87 ms per token,    19.28 tokens per second)
0.02.131.673 I llama_perf_context_print:       total time =    1678.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3923 (60d8af44)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32114.67 ms
main:    total time = 32114.67 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.537 I build: 3923 (60d8af44) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.739 I main: llama backend init
0.00.001.850 I main: load the model and apply lora adapter, if any
0.00.022.215 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.229 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.237 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.238 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.242 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.242 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.244 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.245 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.253 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.255 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.259 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.260 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.261 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.261 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.262 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.895 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.955 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.944 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.950 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.951 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.951 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.952 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.953 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.953 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.956 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.956 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.960 I llama_model_loader: - type  f32:   37 tensors
0.00.132.962 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.962 I llama_model_loader: - type q6_K:   19 tensors
0.00.212.908 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.915 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.247.241 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.251.300 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.259.424 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.009 I llm_load_vocab: special tokens cache size = 5
0.00.280.817 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.837 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.837 I llm_load_print_meta: arch             = gemma
0.00.280.838 I llm_load_print_meta: vocab type       = SPM
0.00.280.839 I llm_load_print_meta: n_vocab          = 256000
0.00.280.839 I llm_load_print_meta: n_merges         = 0
0.00.280.840 I llm_load_print_meta: vocab_only       = 0
0.00.280.840 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.840 I llm_load_print_meta: n_embd           = 2048
0.00.280.841 I llm_load_print_meta: n_layer          = 18
0.00.280.854 I llm_load_print_meta: n_head           = 8
0.00.280.855 I llm_load_print_meta: n_head_kv        = 1
0.00.280.855 I llm_load_print_meta: n_rot            = 256
0.00.280.855 I llm_load_print_meta: n_swa            = 0
0.00.280.856 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.856 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.857 I llm_load_print_meta: n_gqa            = 8
0.00.280.858 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.859 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.860 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.861 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.862 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.862 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.862 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.863 I llm_load_print_meta: n_ff             = 16384
0.00.280.863 I llm_load_print_meta: n_expert         = 0
0.00.280.864 I llm_load_print_meta: n_expert_used    = 0
0.00.280.864 I llm_load_print_meta: causal attn      = 1
0.00.280.864 I llm_load_print_meta: pooling type     = 0
0.00.280.865 I llm_load_print_meta: rope type        = 2
0.00.280.865 I llm_load_print_meta: rope scaling     = linear
0.00.280.866 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.867 I llm_load_print_meta: freq_scale_train = 1
0.00.280.868 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.868 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.869 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.869 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.869 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.869 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.870 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.870 I llm_load_print_meta: model type       = 2B
0.00.280.871 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.280.872 I llm_load_print_meta: model params     = 2.51 B
0.00.280.873 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.280.873 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.874 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.874 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.874 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.875 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.875 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.875 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.876 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.876 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.877 I llm_load_print_meta: max token length = 93
0.00.280.898 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.337.835 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.342.913 I llama_new_context_with_model: n_ctx      = 8192
0.00.342.920 I llama_new_context_with_model: n_batch    = 2048
0.00.342.920 I llama_new_context_with_model: n_ubatch   = 512
0.00.342.921 I llama_new_context_with_model: flash_attn = 0
0.00.342.923 I llama_new_context_with_model: freq_base  = 10000.0
0.00.342.924 I llama_new_context_with_model: freq_scale = 1
0.00.373.195 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.373.212 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.373.304 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.181 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.374.186 I llama_new_context_with_model: graph nodes  = 601
0.00.374.187 I llama_new_context_with_model: graph splits = 1
0.00.374.189 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.455.260 I main: llama threadpool init, n_threads = 4
0.00.455.271 I 
0.00.455.347 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.455.350 I 
0.00.455.391 I sampler seed: 1602072697
0.00.455.401 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.455.403 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.455.404 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.455.404 I 
 fufilling. 

The given sentence is nonsensical and lacks coherence. It appears to be a random collection of words strung together without any apparent meaning or organization

0.02.093.972 I llama_perf_sampler_print:    sampling time =       5.17 ms /    33 runs   (    0.16 ms per token,  6376.81 tokens per second)
0.02.093.976 I llama_perf_context_print:        load time =     453.39 ms
0.02.093.977 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.093.979 I llama_perf_context_print:        eval time =    1619.34 ms /    32 runs   (   50.60 ms per token,    19.76 tokens per second)
0.02.093.980 I llama_perf_context_print:       total time =    1638.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.195s
user	8m15.319s
sys	0m7.162s
