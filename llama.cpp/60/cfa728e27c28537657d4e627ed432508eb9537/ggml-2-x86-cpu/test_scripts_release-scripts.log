+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.560 I build: 4387 (60cfa728) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.000.760 I main: load the model and apply lora adapter, if any
0.00.021.368 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.378 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.386 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.391 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.392 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.398 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.399 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.400 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.400 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.401 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.401 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.405 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.406 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.407 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.407 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.408 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.547 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.772 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.557 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.562 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.563 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.563 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.564 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.565 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.566 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.567 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.568 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.569 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.569 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.570 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.574 I llama_model_loader: - type  f32:   37 tensors
0.00.130.575 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.381 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.297 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.037 I llm_load_vocab: special tokens cache size = 5
0.00.281.214 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.232 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.233 I llm_load_print_meta: arch             = gemma
0.00.281.233 I llm_load_print_meta: vocab type       = SPM
0.00.281.234 I llm_load_print_meta: n_vocab          = 256000
0.00.281.235 I llm_load_print_meta: n_merges         = 0
0.00.281.235 I llm_load_print_meta: vocab_only       = 0
0.00.281.236 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.236 I llm_load_print_meta: n_embd           = 2048
0.00.281.236 I llm_load_print_meta: n_layer          = 18
0.00.281.247 I llm_load_print_meta: n_head           = 8
0.00.281.248 I llm_load_print_meta: n_head_kv        = 1
0.00.281.248 I llm_load_print_meta: n_rot            = 256
0.00.281.248 I llm_load_print_meta: n_swa            = 0
0.00.281.249 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.249 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.250 I llm_load_print_meta: n_gqa            = 8
0.00.281.251 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.252 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.253 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.254 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.254 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.255 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.255 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.256 I llm_load_print_meta: n_ff             = 16384
0.00.281.256 I llm_load_print_meta: n_expert         = 0
0.00.281.256 I llm_load_print_meta: n_expert_used    = 0
0.00.281.257 I llm_load_print_meta: causal attn      = 1
0.00.281.257 I llm_load_print_meta: pooling type     = 0
0.00.281.257 I llm_load_print_meta: rope type        = 2
0.00.281.257 I llm_load_print_meta: rope scaling     = linear
0.00.281.259 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.259 I llm_load_print_meta: freq_scale_train = 1
0.00.281.260 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.260 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.260 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.261 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.261 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.261 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.261 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.262 I llm_load_print_meta: model type       = 2B
0.00.281.262 I llm_load_print_meta: model ftype      = Q8_0
0.00.281.263 I llm_load_print_meta: model params     = 2.51 B
0.00.281.264 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.281.264 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.265 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.265 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.265 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.266 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.266 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.266 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.266 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.267 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.267 I llm_load_print_meta: max token length = 93
0.00.380.574 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.380.580 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.380.581 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.380.581 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.380.582 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.380.583 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.385.816 I llama_new_context_with_model: n_seq_max     = 1
0.00.385.822 I llama_new_context_with_model: n_ctx         = 4096
0.00.385.823 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.385.823 I llama_new_context_with_model: n_batch       = 2048
0.00.385.823 I llama_new_context_with_model: n_ubatch      = 512
0.00.385.824 I llama_new_context_with_model: flash_attn    = 0
0.00.385.826 I llama_new_context_with_model: freq_base     = 10000.0
0.00.385.827 I llama_new_context_with_model: freq_scale    = 1
0.00.385.828 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.848 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.400.114 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.400.128 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.400.218 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.401.477 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.401.484 I llama_new_context_with_model: graph nodes  = 601
0.00.401.485 I llama_new_context_with_model: graph splits = 1
0.00.401.487 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.401.487 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.485.812 I main: llama threadpool init, n_threads = 4
0.00.485.827 I 
0.00.485.900 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.485.903 I 
0.00.485.943 I sampler seed: 4095554537
0.00.485.954 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.485.961 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.485.965 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.485.965 I 
 increadibly! [end of text]


0.00.764.951 I llama_perf_sampler_print:    sampling time =       0.71 ms /     5 runs   (    0.14 ms per token,  7062.15 tokens per second)
0.00.764.953 I llama_perf_context_print:        load time =     485.04 ms
0.00.764.954 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.764.955 I llama_perf_context_print:        eval time =     276.01 ms /     4 runs   (   69.00 ms per token,    14.49 tokens per second)
0.00.764.956 I llama_perf_context_print:       total time =     279.15 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.547 I build: 4387 (60cfa728) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.000.755 I main: load the model and apply lora adapter, if any
0.00.021.130 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.148 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.157 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.161 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.166 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.166 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.167 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.168 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.168 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.168 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.172 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.172 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.173 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.174 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.174 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.982 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.239 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.109 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.116 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.117 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.117 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.118 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.120 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.121 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.124 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.125 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.126 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.126 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.128 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.132 I llama_model_loader: - type  f32:   37 tensors
0.00.131.133 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.462 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.120 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.644 I llm_load_vocab: special tokens cache size = 5
0.00.269.734 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.750 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.751 I llm_load_print_meta: arch             = gemma
0.00.269.751 I llm_load_print_meta: vocab type       = SPM
0.00.269.752 I llm_load_print_meta: n_vocab          = 256000
0.00.269.752 I llm_load_print_meta: n_merges         = 0
0.00.269.752 I llm_load_print_meta: vocab_only       = 0
0.00.269.753 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.753 I llm_load_print_meta: n_embd           = 2048
0.00.269.753 I llm_load_print_meta: n_layer          = 18
0.00.269.764 I llm_load_print_meta: n_head           = 8
0.00.269.765 I llm_load_print_meta: n_head_kv        = 1
0.00.269.765 I llm_load_print_meta: n_rot            = 256
0.00.269.766 I llm_load_print_meta: n_swa            = 0
0.00.269.766 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.766 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.767 I llm_load_print_meta: n_gqa            = 8
0.00.269.768 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.769 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.769 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.771 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.771 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.771 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.772 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.772 I llm_load_print_meta: n_ff             = 16384
0.00.269.773 I llm_load_print_meta: n_expert         = 0
0.00.269.773 I llm_load_print_meta: n_expert_used    = 0
0.00.269.773 I llm_load_print_meta: causal attn      = 1
0.00.269.773 I llm_load_print_meta: pooling type     = 0
0.00.269.774 I llm_load_print_meta: rope type        = 2
0.00.269.774 I llm_load_print_meta: rope scaling     = linear
0.00.269.775 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.776 I llm_load_print_meta: freq_scale_train = 1
0.00.269.776 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.776 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.776 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.777 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.777 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.777 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.777 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.778 I llm_load_print_meta: model type       = 2B
0.00.269.778 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.779 I llm_load_print_meta: model params     = 2.51 B
0.00.269.780 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.780 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.781 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.781 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.782 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.782 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.782 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.783 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.783 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.783 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.784 I llm_load_print_meta: max token length = 93
0.00.364.532 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.369.723 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.729 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.729 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.730 I llama_new_context_with_model: n_batch       = 2048
0.00.369.730 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.731 I llama_new_context_with_model: flash_attn    = 0
0.00.369.735 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.736 I llama_new_context_with_model: freq_scale    = 1
0.00.369.737 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.369.758 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.385.109 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.123 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.216 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.458 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.464 I llama_new_context_with_model: graph nodes  = 601
0.00.386.464 I llama_new_context_with_model: graph splits = 1
0.00.386.467 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.386.467 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.283 I main: llama threadpool init, n_threads = 4
0.00.470.298 I 
0.00.470.371 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.470.374 I 
0.00.470.415 I sampler seed: 2287075393
0.00.470.426 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.428 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.429 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.429 I 
 increasities and misinterpretations of scientific evidence. [end of text]


0.01.213.600 I llama_perf_sampler_print:    sampling time =       1.88 ms /    12 runs   (    0.16 ms per token,  6396.59 tokens per second)
0.01.213.603 I llama_perf_context_print:        load time =     469.51 ms
0.01.213.604 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.213.605 I llama_perf_context_print:        eval time =     736.34 ms /    11 runs   (   66.94 ms per token,    14.94 tokens per second)
0.01.213.606 I llama_perf_context_print:       total time =     743.32 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.535 I build: 4387 (60cfa728) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.745 I main: llama backend init
0.00.000.751 I main: load the model and apply lora adapter, if any
0.00.021.204 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.214 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.226 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.230 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.234 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.246 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.250 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.251 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.252 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.253 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.254 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.258 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.259 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.260 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.261 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.261 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.681 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.977 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.861 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.869 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.870 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.871 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.872 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.873 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.874 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.877 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.878 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.879 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.880 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.881 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.884 I llama_model_loader: - type  f32:   37 tensors
0.00.131.885 I llama_model_loader: - type q8_0:  127 tensors
0.00.221.535 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.266.659 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.267.097 I llm_load_vocab: special tokens cache size = 5
0.00.288.229 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.288.246 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.288.247 I llm_load_print_meta: arch             = gemma
0.00.288.247 I llm_load_print_meta: vocab type       = SPM
0.00.288.248 I llm_load_print_meta: n_vocab          = 256000
0.00.288.248 I llm_load_print_meta: n_merges         = 0
0.00.288.248 I llm_load_print_meta: vocab_only       = 0
0.00.288.249 I llm_load_print_meta: n_ctx_train      = 8192
0.00.288.249 I llm_load_print_meta: n_embd           = 2048
0.00.288.249 I llm_load_print_meta: n_layer          = 18
0.00.288.260 I llm_load_print_meta: n_head           = 8
0.00.288.261 I llm_load_print_meta: n_head_kv        = 1
0.00.288.262 I llm_load_print_meta: n_rot            = 256
0.00.288.262 I llm_load_print_meta: n_swa            = 0
0.00.288.262 I llm_load_print_meta: n_embd_head_k    = 256
0.00.288.262 I llm_load_print_meta: n_embd_head_v    = 256
0.00.288.263 I llm_load_print_meta: n_gqa            = 8
0.00.288.264 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.288.265 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.288.266 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.288.268 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.288.268 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.288.268 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.288.269 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.288.270 I llm_load_print_meta: n_ff             = 16384
0.00.288.270 I llm_load_print_meta: n_expert         = 0
0.00.288.270 I llm_load_print_meta: n_expert_used    = 0
0.00.288.271 I llm_load_print_meta: causal attn      = 1
0.00.288.271 I llm_load_print_meta: pooling type     = 0
0.00.288.271 I llm_load_print_meta: rope type        = 2
0.00.288.272 I llm_load_print_meta: rope scaling     = linear
0.00.288.273 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.288.274 I llm_load_print_meta: freq_scale_train = 1
0.00.288.274 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.288.274 I llm_load_print_meta: rope_finetuned   = unknown
0.00.288.275 I llm_load_print_meta: ssm_d_conv       = 0
0.00.288.275 I llm_load_print_meta: ssm_d_inner      = 0
0.00.288.275 I llm_load_print_meta: ssm_d_state      = 0
0.00.288.275 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.288.276 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.288.276 I llm_load_print_meta: model type       = 2B
0.00.288.277 I llm_load_print_meta: model ftype      = Q8_0
0.00.288.278 I llm_load_print_meta: model params     = 2.51 B
0.00.288.278 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.288.279 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.288.279 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.288.279 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.288.280 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.288.280 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.288.280 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.288.281 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.288.281 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.288.282 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.288.282 I llm_load_print_meta: max token length = 93
0.00.366.473 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.366.481 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.366.482 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.366.482 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.366.483 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.366.483 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.372.029 I llama_new_context_with_model: n_seq_max     = 1
0.00.372.037 I llama_new_context_with_model: n_ctx         = 4096
0.00.372.038 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.372.038 I llama_new_context_with_model: n_batch       = 2048
0.00.372.038 I llama_new_context_with_model: n_ubatch      = 512
0.00.372.039 I llama_new_context_with_model: flash_attn    = 0
0.00.372.042 I llama_new_context_with_model: freq_base     = 10000.0
0.00.372.042 I llama_new_context_with_model: freq_scale    = 1
0.00.372.043 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.372.063 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.386.675 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.386.690 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.386.781 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.076 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.388.083 I llama_new_context_with_model: graph nodes  = 601
0.00.388.083 I llama_new_context_with_model: graph splits = 1
0.00.388.085 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.388.085 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.473.162 I main: llama threadpool init, n_threads = 4
0.00.473.182 I 
0.00.473.266 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.473.273 I 
0.00.473.326 I sampler seed: 182930855
0.00.473.341 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.473.347 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.473.348 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.473.349 I 
 increadibly, and I'm not sure what to make of it.

I'm not sure what's happening. I'm feeling confused and

0.02.730.448 I llama_perf_sampler_print:    sampling time =       5.43 ms /    33 runs   (    0.16 ms per token,  6072.87 tokens per second)
0.02.730.451 I llama_perf_context_print:        load time =     472.39 ms
0.02.730.453 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.730.454 I llama_perf_context_print:        eval time =    2238.33 ms /    32 runs   (   69.95 ms per token,    14.30 tokens per second)
0.02.730.455 I llama_perf_context_print:       total time =    2257.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.531 I build: 4387 (60cfa728) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.732 I main: llama backend init
0.00.000.739 I main: load the model and apply lora adapter, if any
0.00.027.460 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.027.470 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.027.482 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.488 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.491 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.494 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.495 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.496 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.497 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.497 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.498 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.502 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.502 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.503 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.504 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.027.504 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.054.977 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.137.178 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.144.011 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.144.018 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.144.018 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.144.019 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.144.020 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.144.020 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.144.021 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.144.024 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.144.024 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.144.025 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.144.026 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.144.026 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.144.030 I llama_model_loader: - type  f32:   37 tensors
0.00.144.031 I llama_model_loader: - type q8_0:  127 tensors
0.00.226.057 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.273.048 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.273.606 I llm_load_vocab: special tokens cache size = 5
0.00.294.630 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.294.649 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.294.650 I llm_load_print_meta: arch             = gemma
0.00.294.651 I llm_load_print_meta: vocab type       = SPM
0.00.294.651 I llm_load_print_meta: n_vocab          = 256000
0.00.294.652 I llm_load_print_meta: n_merges         = 0
0.00.294.652 I llm_load_print_meta: vocab_only       = 0
0.00.294.652 I llm_load_print_meta: n_ctx_train      = 8192
0.00.294.653 I llm_load_print_meta: n_embd           = 2048
0.00.294.653 I llm_load_print_meta: n_layer          = 18
0.00.294.665 I llm_load_print_meta: n_head           = 8
0.00.294.666 I llm_load_print_meta: n_head_kv        = 1
0.00.294.667 I llm_load_print_meta: n_rot            = 256
0.00.294.667 I llm_load_print_meta: n_swa            = 0
0.00.294.667 I llm_load_print_meta: n_embd_head_k    = 256
0.00.294.668 I llm_load_print_meta: n_embd_head_v    = 256
0.00.294.669 I llm_load_print_meta: n_gqa            = 8
0.00.294.670 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.294.671 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.294.671 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.294.673 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.294.673 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.294.673 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.294.674 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.294.674 I llm_load_print_meta: n_ff             = 16384
0.00.294.675 I llm_load_print_meta: n_expert         = 0
0.00.294.675 I llm_load_print_meta: n_expert_used    = 0
0.00.294.676 I llm_load_print_meta: causal attn      = 1
0.00.294.676 I llm_load_print_meta: pooling type     = 0
0.00.294.676 I llm_load_print_meta: rope type        = 2
0.00.294.677 I llm_load_print_meta: rope scaling     = linear
0.00.294.679 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.294.679 I llm_load_print_meta: freq_scale_train = 1
0.00.294.680 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.294.680 I llm_load_print_meta: rope_finetuned   = unknown
0.00.294.680 I llm_load_print_meta: ssm_d_conv       = 0
0.00.294.680 I llm_load_print_meta: ssm_d_inner      = 0
0.00.294.681 I llm_load_print_meta: ssm_d_state      = 0
0.00.294.681 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.294.681 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.294.682 I llm_load_print_meta: model type       = 2B
0.00.294.682 I llm_load_print_meta: model ftype      = Q8_0
0.00.294.683 I llm_load_print_meta: model params     = 2.51 B
0.00.294.684 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.294.684 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.294.685 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.294.685 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.294.686 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.294.686 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.294.686 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.294.686 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.294.687 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.294.687 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.294.687 I llm_load_print_meta: max token length = 93
0.00.371.417 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.371.424 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.376.611 I llama_new_context_with_model: n_seq_max     = 1
0.00.376.617 I llama_new_context_with_model: n_ctx         = 4096
0.00.376.618 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.376.618 I llama_new_context_with_model: n_batch       = 2048
0.00.376.618 I llama_new_context_with_model: n_ubatch      = 512
0.00.376.619 I llama_new_context_with_model: flash_attn    = 0
0.00.376.621 I llama_new_context_with_model: freq_base     = 10000.0
0.00.376.622 I llama_new_context_with_model: freq_scale    = 1
0.00.376.623 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.376.642 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.390.944 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.390.958 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.391.050 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.392.303 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.392.310 I llama_new_context_with_model: graph nodes  = 601
0.00.392.310 I llama_new_context_with_model: graph splits = 1
0.00.392.312 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.392.313 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.481.556 I main: llama threadpool init, n_threads = 4
0.00.481.570 I 
0.00.481.645 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.481.649 I 
0.00.481.693 I sampler seed: 3804083533
0.00.481.704 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.481.716 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.481.719 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.481.720 I 
 increamically. 

I am unable to provide a response due to the provided context suggesting harmful or potentially dangerous activities. [end of text]


0.02.372.929 I llama_perf_sampler_print:    sampling time =       4.76 ms /    26 runs   (    0.18 ms per token,  5461.04 tokens per second)
0.02.372.932 I llama_perf_context_print:        load time =     480.79 ms
0.02.372.933 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.372.934 I llama_perf_context_print:        eval time =    1874.60 ms /    25 runs   (   74.98 ms per token,    13.34 tokens per second)
0.02.372.935 I llama_perf_context_print:       total time =    1891.38 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m16.714s
user	0m23.596s
sys	0m9.263s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4387 (60cfa728)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40233.24 ms
main:    total time = 40233.24 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.526 I build: 4387 (60cfa728) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.727 I main: llama backend init
0.00.000.733 I main: load the model and apply lora adapter, if any
0.00.021.410 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.419 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.427 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.434 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.435 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.437 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.438 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.439 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.440 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.440 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.441 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.444 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.444 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.445 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.446 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.446 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.611 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.716 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.565 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.571 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.572 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.573 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.574 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.575 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.576 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.579 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.580 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.583 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.584 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.585 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.588 I llama_model_loader: - type  f32:   37 tensors
0.00.130.590 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.591 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.043 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.270 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.729 I llm_load_vocab: special tokens cache size = 5
0.00.269.300 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.316 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.317 I llm_load_print_meta: arch             = gemma
0.00.269.317 I llm_load_print_meta: vocab type       = SPM
0.00.269.318 I llm_load_print_meta: n_vocab          = 256000
0.00.269.318 I llm_load_print_meta: n_merges         = 0
0.00.269.319 I llm_load_print_meta: vocab_only       = 0
0.00.269.319 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.319 I llm_load_print_meta: n_embd           = 2048
0.00.269.319 I llm_load_print_meta: n_layer          = 18
0.00.269.330 I llm_load_print_meta: n_head           = 8
0.00.269.331 I llm_load_print_meta: n_head_kv        = 1
0.00.269.331 I llm_load_print_meta: n_rot            = 256
0.00.269.332 I llm_load_print_meta: n_swa            = 0
0.00.269.332 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.332 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.333 I llm_load_print_meta: n_gqa            = 8
0.00.269.334 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.335 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.336 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.338 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.338 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.339 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.339 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.340 I llm_load_print_meta: n_ff             = 16384
0.00.269.341 I llm_load_print_meta: n_expert         = 0
0.00.269.341 I llm_load_print_meta: n_expert_used    = 0
0.00.269.342 I llm_load_print_meta: causal attn      = 1
0.00.269.342 I llm_load_print_meta: pooling type     = 0
0.00.269.342 I llm_load_print_meta: rope type        = 2
0.00.269.343 I llm_load_print_meta: rope scaling     = linear
0.00.269.344 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.345 I llm_load_print_meta: freq_scale_train = 1
0.00.269.345 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.346 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.346 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.346 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.347 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.347 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.347 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.348 I llm_load_print_meta: model type       = 2B
0.00.269.348 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.350 I llm_load_print_meta: model params     = 2.51 B
0.00.269.350 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.351 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.351 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.351 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.352 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.352 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.352 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.353 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.353 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.354 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.354 I llm_load_print_meta: max token length = 93
0.00.331.511 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.331.520 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.331.521 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.331.521 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.331.522 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.331.522 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.336.936 I llama_new_context_with_model: n_seq_max     = 1
0.00.336.942 I llama_new_context_with_model: n_ctx         = 4096
0.00.336.943 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.336.943 I llama_new_context_with_model: n_batch       = 2048
0.00.336.944 I llama_new_context_with_model: n_ubatch      = 512
0.00.336.944 I llama_new_context_with_model: flash_attn    = 0
0.00.336.947 I llama_new_context_with_model: freq_base     = 10000.0
0.00.336.948 I llama_new_context_with_model: freq_scale    = 1
0.00.336.949 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.336.968 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.352.056 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.352.069 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.352.162 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.489 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.353.495 I llama_new_context_with_model: graph nodes  = 601
0.00.353.496 I llama_new_context_with_model: graph splits = 1
0.00.353.499 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.353.499 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.974 I main: llama threadpool init, n_threads = 4
0.00.429.990 I 
0.00.430.065 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.430.068 I 
0.00.430.112 I sampler seed: 3931749637
0.00.430.122 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.430.134 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.430.138 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.430.139 I 
 increasities, and the challenges and opportunities they present for learners.

**1. What are the different types of learner experiences that can be associated with increasities

0.02.026.670 I llama_perf_sampler_print:    sampling time =       5.82 ms /    33 runs   (    0.18 ms per token,  5670.10 tokens per second)
0.02.026.672 I llama_perf_context_print:        load time =     429.23 ms
0.02.026.673 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.026.674 I llama_perf_context_print:        eval time =    1577.19 ms /    32 runs   (   49.29 ms per token,    20.29 tokens per second)
0.02.026.675 I llama_perf_context_print:       total time =    1596.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4387 (60cfa728)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40209.55 ms
main:    total time = 40209.56 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.533 I build: 4387 (60cfa728) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.739 I main: llama backend init
0.00.000.745 I main: load the model and apply lora adapter, if any
0.00.021.534 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.553 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.563 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.564 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.567 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.567 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.568 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.569 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.569 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.570 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.574 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.575 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.576 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.577 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.577 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.937 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.216 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.012 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.018 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.018 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.019 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.020 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.021 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.021 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.024 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.024 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.029 I llama_model_loader: - type  f32:   37 tensors
0.00.131.030 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.030 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.600 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.200 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.715 I llm_load_vocab: special tokens cache size = 5
0.00.263.492 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.505 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.506 I llm_load_print_meta: arch             = gemma
0.00.263.506 I llm_load_print_meta: vocab type       = SPM
0.00.263.507 I llm_load_print_meta: n_vocab          = 256000
0.00.263.507 I llm_load_print_meta: n_merges         = 0
0.00.263.508 I llm_load_print_meta: vocab_only       = 0
0.00.263.508 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.508 I llm_load_print_meta: n_embd           = 2048
0.00.263.509 I llm_load_print_meta: n_layer          = 18
0.00.263.519 I llm_load_print_meta: n_head           = 8
0.00.263.520 I llm_load_print_meta: n_head_kv        = 1
0.00.263.520 I llm_load_print_meta: n_rot            = 256
0.00.263.521 I llm_load_print_meta: n_swa            = 0
0.00.263.521 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.521 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.522 I llm_load_print_meta: n_gqa            = 8
0.00.263.523 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.524 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.525 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.527 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.527 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.528 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.528 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.529 I llm_load_print_meta: n_ff             = 16384
0.00.263.529 I llm_load_print_meta: n_expert         = 0
0.00.263.529 I llm_load_print_meta: n_expert_used    = 0
0.00.263.530 I llm_load_print_meta: causal attn      = 1
0.00.263.530 I llm_load_print_meta: pooling type     = 0
0.00.263.530 I llm_load_print_meta: rope type        = 2
0.00.263.531 I llm_load_print_meta: rope scaling     = linear
0.00.263.532 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.533 I llm_load_print_meta: freq_scale_train = 1
0.00.263.533 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.534 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.534 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.534 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.534 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.535 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.535 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.535 I llm_load_print_meta: model type       = 2B
0.00.263.536 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.263.537 I llm_load_print_meta: model params     = 2.51 B
0.00.263.538 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.263.538 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.538 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.539 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.539 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.540 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.540 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.540 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.541 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.541 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.541 I llm_load_print_meta: max token length = 93
0.00.322.038 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.327.224 I llama_new_context_with_model: n_seq_max     = 1
0.00.327.230 I llama_new_context_with_model: n_ctx         = 4096
0.00.327.230 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.327.231 I llama_new_context_with_model: n_batch       = 2048
0.00.327.231 I llama_new_context_with_model: n_ubatch      = 512
0.00.327.232 I llama_new_context_with_model: flash_attn    = 0
0.00.327.233 I llama_new_context_with_model: freq_base     = 10000.0
0.00.327.234 I llama_new_context_with_model: freq_scale    = 1
0.00.327.235 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.327.255 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.341.669 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.341.683 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.341.772 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.050 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.343.055 I llama_new_context_with_model: graph nodes  = 601
0.00.343.055 I llama_new_context_with_model: graph splits = 1
0.00.343.058 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.343.058 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.417.476 I main: llama threadpool init, n_threads = 4
0.00.417.492 I 
0.00.417.567 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.417.570 I 
0.00.417.611 I sampler seed: 1042855990
0.00.417.622 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.417.633 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.417.635 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.417.635 I 
 susceptive.

**Assistant**

I understand. I will respond to your inquiries as quickly as possible. [end of text]


0.01.534.085 I llama_perf_sampler_print:    sampling time =       4.18 ms /    24 runs   (    0.17 ms per token,  5741.63 tokens per second)
0.01.534.087 I llama_perf_context_print:        load time =     416.72 ms
0.01.534.089 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.534.090 I llama_perf_context_print:        eval time =    1102.54 ms /    23 runs   (   47.94 ms per token,    20.86 tokens per second)
0.01.534.091 I llama_perf_context_print:       total time =    1116.62 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.771s
user	10m21.992s
sys	0m7.066s
