+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.537 I build: 4343 (e27c7119) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.735 I main: llama backend init
0.00.000.742 I main: load the model and apply lora adapter, if any
0.00.021.281 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.290 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.296 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.300 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.301 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.305 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.305 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.307 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.307 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.308 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.309 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.313 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.313 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.314 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.315 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.316 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.972 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.000 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.795 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.801 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.802 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.802 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.803 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.804 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.804 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.807 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.807 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.808 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.809 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.809 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.812 I llama_model_loader: - type  f32:   37 tensors
0.00.131.813 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.569 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.195 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.681 I llm_load_vocab: special tokens cache size = 5
0.00.262.632 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.647 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.648 I llm_load_print_meta: arch             = gemma
0.00.262.649 I llm_load_print_meta: vocab type       = SPM
0.00.262.649 I llm_load_print_meta: n_vocab          = 256000
0.00.262.650 I llm_load_print_meta: n_merges         = 0
0.00.262.650 I llm_load_print_meta: vocab_only       = 0
0.00.262.650 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.651 I llm_load_print_meta: n_embd           = 2048
0.00.262.651 I llm_load_print_meta: n_layer          = 18
0.00.262.662 I llm_load_print_meta: n_head           = 8
0.00.262.663 I llm_load_print_meta: n_head_kv        = 1
0.00.262.663 I llm_load_print_meta: n_rot            = 256
0.00.262.663 I llm_load_print_meta: n_swa            = 0
0.00.262.664 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.664 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.665 I llm_load_print_meta: n_gqa            = 8
0.00.262.666 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.666 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.667 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.668 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.669 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.669 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.669 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.670 I llm_load_print_meta: n_ff             = 16384
0.00.262.671 I llm_load_print_meta: n_expert         = 0
0.00.262.671 I llm_load_print_meta: n_expert_used    = 0
0.00.262.671 I llm_load_print_meta: causal attn      = 1
0.00.262.671 I llm_load_print_meta: pooling type     = 0
0.00.262.671 I llm_load_print_meta: rope type        = 2
0.00.262.672 I llm_load_print_meta: rope scaling     = linear
0.00.262.673 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.674 I llm_load_print_meta: freq_scale_train = 1
0.00.262.674 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.674 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.674 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.675 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.675 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.675 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.676 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.676 I llm_load_print_meta: model type       = 2B
0.00.262.677 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.677 I llm_load_print_meta: model params     = 2.51 B
0.00.262.678 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.678 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.679 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.679 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.679 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.679 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.680 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.680 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.681 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.681 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.682 I llm_load_print_meta: max token length = 93
0.00.364.749 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.364.755 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.364.756 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.364.757 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.364.758 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.364.758 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.370.003 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.009 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.010 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.010 I llama_new_context_with_model: n_batch       = 2048
0.00.370.011 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.011 I llama_new_context_with_model: flash_attn    = 0
0.00.370.013 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.014 I llama_new_context_with_model: freq_scale    = 1
0.00.370.015 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.339 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.354 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.444 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.723 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.730 I llama_new_context_with_model: graph nodes  = 601
0.00.385.730 I llama_new_context_with_model: graph splits = 1
0.00.385.732 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.385.733 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.310 I main: llama threadpool init, n_threads = 4
0.00.471.327 I 
0.00.471.400 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.471.403 I 
0.00.471.450 I sampler seed: 2763774032
0.00.471.462 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.476 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.480 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.480 I 
 increasities.

I cannot find any information about this term. [end of text]


0.01.457.628 I llama_perf_sampler_print:    sampling time =       2.25 ms /    15 runs   (    0.15 ms per token,  6660.75 tokens per second)
0.01.457.631 I llama_perf_context_print:        load time =     470.55 ms
0.01.457.632 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.457.633 I llama_perf_context_print:        eval time =     977.16 ms /    14 runs   (   69.80 ms per token,    14.33 tokens per second)
0.01.457.634 I llama_perf_context_print:       total time =     986.33 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.175 I build: 4343 (e27c7119) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.372 I main: llama backend init
0.00.000.379 I main: load the model and apply lora adapter, if any
0.00.020.604 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.621 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.631 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.634 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.638 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.639 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.640 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.640 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.641 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.641 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.644 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.645 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.646 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.647 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.648 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.685 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.613 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.519 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.526 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.527 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.528 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.528 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.529 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.530 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.533 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.534 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.535 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.536 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.537 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.541 I llama_model_loader: - type  f32:   37 tensors
0.00.132.542 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.821 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.800 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.314 I llm_load_vocab: special tokens cache size = 5
0.00.268.865 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.879 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.880 I llm_load_print_meta: arch             = gemma
0.00.268.880 I llm_load_print_meta: vocab type       = SPM
0.00.268.881 I llm_load_print_meta: n_vocab          = 256000
0.00.268.881 I llm_load_print_meta: n_merges         = 0
0.00.268.882 I llm_load_print_meta: vocab_only       = 0
0.00.268.882 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.882 I llm_load_print_meta: n_embd           = 2048
0.00.268.882 I llm_load_print_meta: n_layer          = 18
0.00.268.893 I llm_load_print_meta: n_head           = 8
0.00.268.894 I llm_load_print_meta: n_head_kv        = 1
0.00.268.894 I llm_load_print_meta: n_rot            = 256
0.00.268.894 I llm_load_print_meta: n_swa            = 0
0.00.268.894 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.895 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.896 I llm_load_print_meta: n_gqa            = 8
0.00.268.897 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.897 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.898 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.899 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.900 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.900 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.901 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.901 I llm_load_print_meta: n_ff             = 16384
0.00.268.902 I llm_load_print_meta: n_expert         = 0
0.00.268.902 I llm_load_print_meta: n_expert_used    = 0
0.00.268.902 I llm_load_print_meta: causal attn      = 1
0.00.268.903 I llm_load_print_meta: pooling type     = 0
0.00.268.903 I llm_load_print_meta: rope type        = 2
0.00.268.903 I llm_load_print_meta: rope scaling     = linear
0.00.268.904 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.905 I llm_load_print_meta: freq_scale_train = 1
0.00.268.905 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.905 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.906 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.906 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.906 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.906 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.907 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.907 I llm_load_print_meta: model type       = 2B
0.00.268.908 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.908 I llm_load_print_meta: model params     = 2.51 B
0.00.268.909 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.910 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.910 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.910 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.910 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.911 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.911 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.911 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.912 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.912 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.913 I llm_load_print_meta: max token length = 93
0.00.364.389 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.369.411 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.417 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.418 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.418 I llama_new_context_with_model: n_batch       = 2048
0.00.369.418 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.419 I llama_new_context_with_model: flash_attn    = 0
0.00.369.421 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.422 I llama_new_context_with_model: freq_scale    = 1
0.00.369.424 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.207 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.219 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.307 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.575 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.582 I llama_new_context_with_model: graph nodes  = 601
0.00.385.582 I llama_new_context_with_model: graph splits = 1
0.00.385.584 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.385.585 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.466.932 I main: llama threadpool init, n_threads = 4
0.00.466.950 I 
0.00.467.024 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.467.027 I 
0.00.467.068 I sampler seed: 3054658431
0.00.467.079 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.467.092 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.467.095 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.467.095 I 
 increasities. [end of text]


0.00.738.403 I llama_perf_sampler_print:    sampling time =       0.62 ms /     5 runs   (    0.12 ms per token,  8051.53 tokens per second)
0.00.738.405 I llama_perf_context_print:        load time =     466.54 ms
0.00.738.406 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.738.407 I llama_perf_context_print:        eval time =     268.40 ms /     4 runs   (   67.10 ms per token,    14.90 tokens per second)
0.00.738.408 I llama_perf_context_print:       total time =     271.48 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.544 I build: 4343 (e27c7119) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.000.743 I main: load the model and apply lora adapter, if any
0.00.021.268 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.279 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.286 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.291 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.292 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.295 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.296 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.297 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.297 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.297 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.298 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.302 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.303 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.305 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.306 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.306 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.544 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.937 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.812 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.819 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.819 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.820 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.820 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.821 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.822 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.824 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.825 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.826 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.827 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.828 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.832 I llama_model_loader: - type  f32:   37 tensors
0.00.132.833 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.446 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.834 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.349 I llm_load_vocab: special tokens cache size = 5
0.00.267.196 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.218 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.219 I llm_load_print_meta: arch             = gemma
0.00.267.219 I llm_load_print_meta: vocab type       = SPM
0.00.267.220 I llm_load_print_meta: n_vocab          = 256000
0.00.267.221 I llm_load_print_meta: n_merges         = 0
0.00.267.221 I llm_load_print_meta: vocab_only       = 0
0.00.267.221 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.222 I llm_load_print_meta: n_embd           = 2048
0.00.267.222 I llm_load_print_meta: n_layer          = 18
0.00.267.233 I llm_load_print_meta: n_head           = 8
0.00.267.236 I llm_load_print_meta: n_head_kv        = 1
0.00.267.236 I llm_load_print_meta: n_rot            = 256
0.00.267.237 I llm_load_print_meta: n_swa            = 0
0.00.267.237 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.237 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.238 I llm_load_print_meta: n_gqa            = 8
0.00.267.239 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.240 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.241 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.242 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.243 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.243 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.243 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.244 I llm_load_print_meta: n_ff             = 16384
0.00.267.245 I llm_load_print_meta: n_expert         = 0
0.00.267.245 I llm_load_print_meta: n_expert_used    = 0
0.00.267.245 I llm_load_print_meta: causal attn      = 1
0.00.267.245 I llm_load_print_meta: pooling type     = 0
0.00.267.246 I llm_load_print_meta: rope type        = 2
0.00.267.246 I llm_load_print_meta: rope scaling     = linear
0.00.267.247 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.248 I llm_load_print_meta: freq_scale_train = 1
0.00.267.248 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.249 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.249 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.249 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.250 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.250 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.250 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.251 I llm_load_print_meta: model type       = 2B
0.00.267.251 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.252 I llm_load_print_meta: model params     = 2.51 B
0.00.267.253 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.253 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.253 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.254 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.254 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.254 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.255 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.255 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.255 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.256 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.256 I llm_load_print_meta: max token length = 93
0.00.343.207 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.343.214 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.343.215 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.343.216 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.343.216 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.343.217 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.348.383 I llama_new_context_with_model: n_seq_max     = 1
0.00.348.390 I llama_new_context_with_model: n_ctx         = 4096
0.00.348.391 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.348.391 I llama_new_context_with_model: n_batch       = 2048
0.00.348.392 I llama_new_context_with_model: n_ubatch      = 512
0.00.348.393 I llama_new_context_with_model: flash_attn    = 0
0.00.348.396 I llama_new_context_with_model: freq_base     = 10000.0
0.00.348.397 I llama_new_context_with_model: freq_scale    = 1
0.00.348.398 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.363.646 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.363.659 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.363.759 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.365.016 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.365.023 I llama_new_context_with_model: graph nodes  = 601
0.00.365.023 I llama_new_context_with_model: graph splits = 1
0.00.365.026 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.365.026 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.458.631 I main: llama threadpool init, n_threads = 4
0.00.458.647 I 
0.00.458.720 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.458.723 I 
0.00.458.765 I sampler seed: 2161419970
0.00.458.776 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.458.778 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.458.778 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.458.779 I 
 increadibly. [end of text]


0.00.747.645 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8130.08 tokens per second)
0.00.747.647 I llama_perf_context_print:        load time =     457.87 ms
0.00.747.649 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.747.650 I llama_perf_context_print:        eval time =     285.88 ms /     4 runs   (   71.47 ms per token,    13.99 tokens per second)
0.00.747.651 I llama_perf_context_print:       total time =     289.02 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.533 I build: 4343 (e27c7119) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.728 I main: llama backend init
0.00.000.734 I main: load the model and apply lora adapter, if any
0.00.021.074 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.083 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.090 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.094 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.095 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.099 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.099 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.100 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.101 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.101 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.102 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.106 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.106 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.108 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.108 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.109 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.855 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.769 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.650 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.656 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.657 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.658 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.659 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.660 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.662 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.665 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.666 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.667 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.668 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.669 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.674 I llama_model_loader: - type  f32:   37 tensors
0.00.131.677 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.657 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.901 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.507 I llm_load_vocab: special tokens cache size = 5
0.00.266.215 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.232 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.233 I llm_load_print_meta: arch             = gemma
0.00.266.234 I llm_load_print_meta: vocab type       = SPM
0.00.266.234 I llm_load_print_meta: n_vocab          = 256000
0.00.266.235 I llm_load_print_meta: n_merges         = 0
0.00.266.235 I llm_load_print_meta: vocab_only       = 0
0.00.266.235 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.236 I llm_load_print_meta: n_embd           = 2048
0.00.266.236 I llm_load_print_meta: n_layer          = 18
0.00.266.247 I llm_load_print_meta: n_head           = 8
0.00.266.248 I llm_load_print_meta: n_head_kv        = 1
0.00.266.249 I llm_load_print_meta: n_rot            = 256
0.00.266.249 I llm_load_print_meta: n_swa            = 0
0.00.266.250 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.250 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.251 I llm_load_print_meta: n_gqa            = 8
0.00.266.252 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.253 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.254 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.255 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.255 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.257 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.257 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.258 I llm_load_print_meta: n_ff             = 16384
0.00.266.258 I llm_load_print_meta: n_expert         = 0
0.00.266.258 I llm_load_print_meta: n_expert_used    = 0
0.00.266.259 I llm_load_print_meta: causal attn      = 1
0.00.266.259 I llm_load_print_meta: pooling type     = 0
0.00.266.259 I llm_load_print_meta: rope type        = 2
0.00.266.259 I llm_load_print_meta: rope scaling     = linear
0.00.266.261 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.261 I llm_load_print_meta: freq_scale_train = 1
0.00.266.262 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.262 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.262 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.263 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.263 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.264 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.264 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.265 I llm_load_print_meta: model type       = 2B
0.00.266.265 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.266 I llm_load_print_meta: model params     = 2.51 B
0.00.266.267 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.268 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.268 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.269 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.269 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.269 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.270 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.270 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.270 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.271 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.272 I llm_load_print_meta: max token length = 93
0.00.337.208 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.337.215 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.342.439 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.445 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.446 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.446 I llama_new_context_with_model: n_batch       = 2048
0.00.342.446 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.447 I llama_new_context_with_model: flash_attn    = 0
0.00.342.450 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.451 I llama_new_context_with_model: freq_scale    = 1
0.00.342.452 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.116 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.129 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.358.222 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.359.510 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.359.516 I llama_new_context_with_model: graph nodes  = 601
0.00.359.517 I llama_new_context_with_model: graph splits = 1
0.00.359.519 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.359.519 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.497 I main: llama threadpool init, n_threads = 4
0.00.446.513 I 
0.00.446.584 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.446.587 I 
0.00.446.626 I sampler seed: 258368560
0.00.446.636 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.639 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.446.639 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.640 I 
 increasities, and other forms of genital mutilation are harmful and exploitative. They violate the rights and dignity of women and girls, and have lasting physical and

0.02.845.507 I llama_perf_sampler_print:    sampling time =       5.14 ms /    33 runs   (    0.16 ms per token,  6417.74 tokens per second)
0.02.845.510 I llama_perf_context_print:        load time =     445.75 ms
0.02.845.511 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.845.513 I llama_perf_context_print:        eval time =    2378.98 ms /    32 runs   (   74.34 ms per token,    13.45 tokens per second)
0.02.845.514 I llama_perf_context_print:       total time =    2399.02 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m15.280s
user	0m18.669s
sys	0m9.386s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4343 (e27c7119)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40205.78 ms
main:    total time = 40205.78 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.170 I build: 4343 (e27c7119) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.380 I main: llama backend init
0.00.000.387 I main: load the model and apply lora adapter, if any
0.00.020.636 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.644 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.656 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.661 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.665 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.668 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.669 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.670 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.670 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.671 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.671 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.675 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.675 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.676 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.676 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.677 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.021 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.815 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.642 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.648 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.649 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.649 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.650 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.651 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.652 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.653 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.654 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.655 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.655 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.656 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.658 I llama_model_loader: - type  f32:   37 tensors
0.00.130.659 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.659 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.403 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.199 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.760 I llm_load_vocab: special tokens cache size = 5
0.00.264.530 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.545 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.545 I llm_load_print_meta: arch             = gemma
0.00.264.546 I llm_load_print_meta: vocab type       = SPM
0.00.264.547 I llm_load_print_meta: n_vocab          = 256000
0.00.264.547 I llm_load_print_meta: n_merges         = 0
0.00.264.547 I llm_load_print_meta: vocab_only       = 0
0.00.264.548 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.548 I llm_load_print_meta: n_embd           = 2048
0.00.264.548 I llm_load_print_meta: n_layer          = 18
0.00.264.559 I llm_load_print_meta: n_head           = 8
0.00.264.560 I llm_load_print_meta: n_head_kv        = 1
0.00.264.561 I llm_load_print_meta: n_rot            = 256
0.00.264.561 I llm_load_print_meta: n_swa            = 0
0.00.264.561 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.561 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.562 I llm_load_print_meta: n_gqa            = 8
0.00.264.563 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.564 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.565 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.566 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.566 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.567 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.567 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.568 I llm_load_print_meta: n_ff             = 16384
0.00.264.568 I llm_load_print_meta: n_expert         = 0
0.00.264.568 I llm_load_print_meta: n_expert_used    = 0
0.00.264.569 I llm_load_print_meta: causal attn      = 1
0.00.264.569 I llm_load_print_meta: pooling type     = 0
0.00.264.569 I llm_load_print_meta: rope type        = 2
0.00.264.570 I llm_load_print_meta: rope scaling     = linear
0.00.264.571 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.572 I llm_load_print_meta: freq_scale_train = 1
0.00.264.572 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.572 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.573 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.573 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.573 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.573 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.574 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.574 I llm_load_print_meta: model type       = 2B
0.00.264.575 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.575 I llm_load_print_meta: model params     = 2.51 B
0.00.264.576 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.576 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.577 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.577 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.577 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.578 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.578 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.578 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.579 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.580 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.580 I llm_load_print_meta: max token length = 93
0.00.324.927 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.324.933 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.324.934 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.324.935 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.324.935 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.324.936 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.329.906 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.911 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.912 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.912 I llama_new_context_with_model: n_batch       = 2048
0.00.329.913 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.913 I llama_new_context_with_model: flash_attn    = 0
0.00.329.915 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.916 I llama_new_context_with_model: freq_scale    = 1
0.00.329.917 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.251 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.344.265 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.344.355 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.630 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.345.637 I llama_new_context_with_model: graph nodes  = 601
0.00.345.638 I llama_new_context_with_model: graph splits = 1
0.00.345.640 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.345.640 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.189 I main: llama threadpool init, n_threads = 4
0.00.421.203 I 
0.00.421.278 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.421.281 I 
0.00.421.322 I sampler seed: 305674229
0.00.421.333 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.345 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.421.349 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.421.349 I 
 increably. 

I am unable to generate a response due to the limitations in my capabilities. [end of text]


0.01.454.370 I llama_perf_sampler_print:    sampling time =       3.48 ms /    22 runs   (    0.16 ms per token,  6330.94 tokens per second)
0.01.454.372 I llama_perf_context_print:        load time =     420.79 ms
0.01.454.373 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.454.375 I llama_perf_context_print:        eval time =    1020.91 ms /    21 runs   (   48.61 ms per token,    20.57 tokens per second)
0.01.454.375 I llama_perf_context_print:       total time =    1033.19 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4343 (e27c7119)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40180.54 ms
main:    total time = 40180.54 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.165 I build: 4343 (e27c7119) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.380 I main: llama backend init
0.00.000.386 I main: load the model and apply lora adapter, if any
0.00.020.496 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.513 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.522 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.526 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.530 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.530 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.532 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.532 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.533 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.533 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.537 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.537 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.538 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.538 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.539 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.017 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.698 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.593 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.600 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.601 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.602 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.603 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.604 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.604 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.607 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.608 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.613 I llama_model_loader: - type  f32:   37 tensors
0.00.131.614 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.614 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.373 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.514 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.041 I llm_load_vocab: special tokens cache size = 5
0.00.266.747 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.763 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.763 I llm_load_print_meta: arch             = gemma
0.00.266.764 I llm_load_print_meta: vocab type       = SPM
0.00.266.765 I llm_load_print_meta: n_vocab          = 256000
0.00.266.765 I llm_load_print_meta: n_merges         = 0
0.00.266.765 I llm_load_print_meta: vocab_only       = 0
0.00.266.766 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.766 I llm_load_print_meta: n_embd           = 2048
0.00.266.766 I llm_load_print_meta: n_layer          = 18
0.00.266.777 I llm_load_print_meta: n_head           = 8
0.00.266.778 I llm_load_print_meta: n_head_kv        = 1
0.00.266.779 I llm_load_print_meta: n_rot            = 256
0.00.266.779 I llm_load_print_meta: n_swa            = 0
0.00.266.779 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.779 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.780 I llm_load_print_meta: n_gqa            = 8
0.00.266.781 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.782 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.783 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.784 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.784 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.785 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.785 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.786 I llm_load_print_meta: n_ff             = 16384
0.00.266.786 I llm_load_print_meta: n_expert         = 0
0.00.266.787 I llm_load_print_meta: n_expert_used    = 0
0.00.266.787 I llm_load_print_meta: causal attn      = 1
0.00.266.787 I llm_load_print_meta: pooling type     = 0
0.00.266.788 I llm_load_print_meta: rope type        = 2
0.00.266.788 I llm_load_print_meta: rope scaling     = linear
0.00.266.789 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.790 I llm_load_print_meta: freq_scale_train = 1
0.00.266.790 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.791 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.791 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.791 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.792 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.792 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.792 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.793 I llm_load_print_meta: model type       = 2B
0.00.266.793 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.794 I llm_load_print_meta: model params     = 2.51 B
0.00.266.795 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.795 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.796 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.796 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.796 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.796 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.797 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.797 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.797 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.798 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.798 I llm_load_print_meta: max token length = 93
0.00.325.393 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.330.456 I llama_new_context_with_model: n_seq_max     = 1
0.00.330.462 I llama_new_context_with_model: n_ctx         = 4096
0.00.330.462 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.330.463 I llama_new_context_with_model: n_batch       = 2048
0.00.330.463 I llama_new_context_with_model: n_ubatch      = 512
0.00.330.464 I llama_new_context_with_model: flash_attn    = 0
0.00.330.466 I llama_new_context_with_model: freq_base     = 10000.0
0.00.330.467 I llama_new_context_with_model: freq_scale    = 1
0.00.330.468 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.345.537 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.551 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.345.637 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.346.836 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.346.843 I llama_new_context_with_model: graph nodes  = 601
0.00.346.843 I llama_new_context_with_model: graph splits = 1
0.00.346.845 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.346.845 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.420.855 I main: llama threadpool init, n_threads = 4
0.00.420.870 I 
0.00.420.945 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.420.949 I 
0.00.420.990 I sampler seed: 2828246074
0.00.421.001 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.013 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.421.017 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.421.017 I 
 increasities with an innocent touch and a whimsical sense of wonder. [end of text]


0.01.109.824 I llama_perf_sampler_print:    sampling time =       2.18 ms /    15 runs   (    0.15 ms per token,  6893.38 tokens per second)
0.01.109.827 I llama_perf_context_print:        load time =     420.45 ms
0.01.109.828 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.109.830 I llama_perf_context_print:        eval time =     680.16 ms /    14 runs   (   48.58 ms per token,    20.58 tokens per second)
0.01.109.832 I llama_perf_context_print:       total time =     688.98 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m25.758s
user	10m18.293s
sys	0m6.861s
