+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.522 I build: 3814 (c087b6f1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.744 I main: llama backend init
0.00.001.871 I main: load the model and apply lora adapter, if any
0.00.022.217 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.265 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.275 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.280 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.282 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.286 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.286 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.287 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.287 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.288 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.288 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.293 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.294 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.294 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.295 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.295 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.547 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.887 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.991 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.997 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.998 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.999 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.000 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.001 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.002 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.005 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.007 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.008 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.009 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.010 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.013 I llama_model_loader: - type  f32:   37 tensors
0.00.133.016 I llama_model_loader: - type q8_0:  127 tensors
0.00.198.172 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.198.878 I llm_load_vocab: special tokens cache size = 5
0.00.217.409 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.217.422 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.217.423 I llm_load_print_meta: arch             = gemma
0.00.217.423 I llm_load_print_meta: vocab type       = SPM
0.00.217.424 I llm_load_print_meta: n_vocab          = 256000
0.00.217.424 I llm_load_print_meta: n_merges         = 0
0.00.217.424 I llm_load_print_meta: vocab_only       = 0
0.00.217.425 I llm_load_print_meta: n_ctx_train      = 8192
0.00.217.425 I llm_load_print_meta: n_embd           = 2048
0.00.217.426 I llm_load_print_meta: n_layer          = 18
0.00.217.438 I llm_load_print_meta: n_head           = 8
0.00.217.439 I llm_load_print_meta: n_head_kv        = 1
0.00.217.440 I llm_load_print_meta: n_rot            = 256
0.00.217.440 I llm_load_print_meta: n_swa            = 0
0.00.217.440 I llm_load_print_meta: n_embd_head_k    = 256
0.00.217.440 I llm_load_print_meta: n_embd_head_v    = 256
0.00.217.441 I llm_load_print_meta: n_gqa            = 8
0.00.217.442 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.217.443 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.217.444 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.217.445 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.217.446 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.217.446 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.217.446 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.217.447 I llm_load_print_meta: n_ff             = 16384
0.00.217.448 I llm_load_print_meta: n_expert         = 0
0.00.217.448 I llm_load_print_meta: n_expert_used    = 0
0.00.217.448 I llm_load_print_meta: causal attn      = 1
0.00.217.449 I llm_load_print_meta: pooling type     = 0
0.00.217.449 I llm_load_print_meta: rope type        = 2
0.00.217.449 I llm_load_print_meta: rope scaling     = linear
0.00.217.451 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.217.451 I llm_load_print_meta: freq_scale_train = 1
0.00.217.452 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.217.452 I llm_load_print_meta: rope_finetuned   = unknown
0.00.217.452 I llm_load_print_meta: ssm_d_conv       = 0
0.00.217.452 I llm_load_print_meta: ssm_d_inner      = 0
0.00.217.453 I llm_load_print_meta: ssm_d_state      = 0
0.00.217.453 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.217.453 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.217.454 I llm_load_print_meta: model type       = 2B
0.00.217.454 I llm_load_print_meta: model ftype      = Q8_0
0.00.217.455 I llm_load_print_meta: model params     = 2.51 B
0.00.217.456 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.217.456 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.217.457 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.217.457 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.217.457 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.217.458 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.217.458 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.217.458 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.217.459 I llm_load_print_meta: max token length = 93
0.00.217.473 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.315.597 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.315.603 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.315.604 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.315.605 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.315.605 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.315.606 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.320.696 I llama_new_context_with_model: n_ctx      = 8192
0.00.320.703 I llama_new_context_with_model: n_batch    = 2048
0.00.320.703 I llama_new_context_with_model: n_ubatch   = 512
0.00.320.704 I llama_new_context_with_model: flash_attn = 0
0.00.320.706 I llama_new_context_with_model: freq_base  = 10000.0
0.00.320.707 I llama_new_context_with_model: freq_scale = 1
0.00.350.211 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.350.225 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.350.312 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.351.177 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.351.184 I llama_new_context_with_model: graph nodes  = 601
0.00.351.184 I llama_new_context_with_model: graph splits = 1
0.00.351.187 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.442.371 I main: llama threadpool init, n_threads = 4
0.00.442.381 I 
0.00.442.456 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.442.459 I 
0.00.442.497 I sampler seed: 4078337817
0.00.442.507 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.442.509 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.442.510 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably! [end of text]


0.00.723.062 I llama_perf_sampler_print:    sampling time =       0.68 ms /     5 runs   (    0.14 ms per token,  7331.38 tokens per second)
0.00.723.064 I llama_perf_context_print:        load time =     440.48 ms
0.00.723.066 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.723.067 I llama_perf_context_print:        eval time =     277.51 ms /     4 runs   (   69.38 ms per token,    14.41 tokens per second)
0.00.723.068 I llama_perf_context_print:       total time =     280.70 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.545 I build: 3814 (c087b6f1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.747 I main: llama backend init
0.00.001.845 I main: load the model and apply lora adapter, if any
0.00.021.833 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.846 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.857 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.859 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.862 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.863 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.864 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.864 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.865 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.866 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.870 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.871 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.871 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.872 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.873 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.636 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.372 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.245 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.251 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.252 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.253 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.253 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.254 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.255 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.258 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.258 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.260 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.260 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.261 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.265 I llama_model_loader: - type  f32:   37 tensors
0.00.132.267 I llama_model_loader: - type q8_0:  127 tensors
0.00.194.975 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.195.584 I llm_load_vocab: special tokens cache size = 5
0.00.214.255 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.214.267 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.214.267 I llm_load_print_meta: arch             = gemma
0.00.214.268 I llm_load_print_meta: vocab type       = SPM
0.00.214.268 I llm_load_print_meta: n_vocab          = 256000
0.00.214.268 I llm_load_print_meta: n_merges         = 0
0.00.214.269 I llm_load_print_meta: vocab_only       = 0
0.00.214.269 I llm_load_print_meta: n_ctx_train      = 8192
0.00.214.270 I llm_load_print_meta: n_embd           = 2048
0.00.214.270 I llm_load_print_meta: n_layer          = 18
0.00.214.280 I llm_load_print_meta: n_head           = 8
0.00.214.281 I llm_load_print_meta: n_head_kv        = 1
0.00.214.282 I llm_load_print_meta: n_rot            = 256
0.00.214.282 I llm_load_print_meta: n_swa            = 0
0.00.214.282 I llm_load_print_meta: n_embd_head_k    = 256
0.00.214.283 I llm_load_print_meta: n_embd_head_v    = 256
0.00.214.283 I llm_load_print_meta: n_gqa            = 8
0.00.214.284 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.214.285 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.214.287 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.214.288 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.214.288 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.214.289 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.214.289 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.214.290 I llm_load_print_meta: n_ff             = 16384
0.00.214.290 I llm_load_print_meta: n_expert         = 0
0.00.214.291 I llm_load_print_meta: n_expert_used    = 0
0.00.214.291 I llm_load_print_meta: causal attn      = 1
0.00.214.291 I llm_load_print_meta: pooling type     = 0
0.00.214.291 I llm_load_print_meta: rope type        = 2
0.00.214.292 I llm_load_print_meta: rope scaling     = linear
0.00.214.293 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.214.294 I llm_load_print_meta: freq_scale_train = 1
0.00.214.294 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.214.295 I llm_load_print_meta: rope_finetuned   = unknown
0.00.214.295 I llm_load_print_meta: ssm_d_conv       = 0
0.00.214.295 I llm_load_print_meta: ssm_d_inner      = 0
0.00.214.295 I llm_load_print_meta: ssm_d_state      = 0
0.00.214.296 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.214.296 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.214.297 I llm_load_print_meta: model type       = 2B
0.00.214.298 I llm_load_print_meta: model ftype      = Q8_0
0.00.214.298 I llm_load_print_meta: model params     = 2.51 B
0.00.214.299 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.214.300 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.214.300 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.214.300 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.214.301 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.214.301 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.214.302 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.214.302 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.214.302 I llm_load_print_meta: max token length = 93
0.00.214.317 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.308.331 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.313.352 I llama_new_context_with_model: n_ctx      = 8192
0.00.313.358 I llama_new_context_with_model: n_batch    = 2048
0.00.313.358 I llama_new_context_with_model: n_ubatch   = 512
0.00.313.359 I llama_new_context_with_model: flash_attn = 0
0.00.313.361 I llama_new_context_with_model: freq_base  = 10000.0
0.00.313.361 I llama_new_context_with_model: freq_scale = 1
0.00.342.704 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.342.722 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.342.814 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.656 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.343.664 I llama_new_context_with_model: graph nodes  = 601
0.00.343.664 I llama_new_context_with_model: graph splits = 1
0.00.343.666 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.431.041 I main: llama threadpool init, n_threads = 4
0.00.431.053 I 
0.00.431.130 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.431.133 I 
0.00.431.172 I sampler seed: 683920944
0.00.431.181 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.431.184 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.431.184 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities. [end of text]


0.00.702.011 I llama_perf_sampler_print:    sampling time =       0.70 ms /     5 runs   (    0.14 ms per token,  7163.32 tokens per second)
0.00.702.013 I llama_perf_context_print:        load time =     429.18 ms
0.00.702.014 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.702.016 I llama_perf_context_print:        eval time =     267.88 ms /     4 runs   (   66.97 ms per token,    14.93 tokens per second)
0.00.702.016 I llama_perf_context_print:       total time =     270.98 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.537 I build: 3814 (c087b6f1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.001.818 I main: load the model and apply lora adapter, if any
0.00.021.989 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.036 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.049 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.058 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.059 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.062 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.063 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.064 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.064 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.064 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.065 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.069 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.070 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.070 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.071 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.071 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.199 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.384 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.240 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.247 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.248 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.249 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.249 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.250 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.251 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.254 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.254 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.255 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.256 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.257 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.260 I llama_model_loader: - type  f32:   37 tensors
0.00.133.262 I llama_model_loader: - type q8_0:  127 tensors
0.00.195.668 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.196.284 I llm_load_vocab: special tokens cache size = 5
0.00.214.716 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.214.728 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.214.728 I llm_load_print_meta: arch             = gemma
0.00.214.729 I llm_load_print_meta: vocab type       = SPM
0.00.214.729 I llm_load_print_meta: n_vocab          = 256000
0.00.214.730 I llm_load_print_meta: n_merges         = 0
0.00.214.730 I llm_load_print_meta: vocab_only       = 0
0.00.214.731 I llm_load_print_meta: n_ctx_train      = 8192
0.00.214.731 I llm_load_print_meta: n_embd           = 2048
0.00.214.731 I llm_load_print_meta: n_layer          = 18
0.00.214.743 I llm_load_print_meta: n_head           = 8
0.00.214.744 I llm_load_print_meta: n_head_kv        = 1
0.00.214.745 I llm_load_print_meta: n_rot            = 256
0.00.214.745 I llm_load_print_meta: n_swa            = 0
0.00.214.745 I llm_load_print_meta: n_embd_head_k    = 256
0.00.214.746 I llm_load_print_meta: n_embd_head_v    = 256
0.00.214.747 I llm_load_print_meta: n_gqa            = 8
0.00.214.748 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.214.748 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.214.749 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.214.750 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.214.751 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.214.751 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.214.751 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.214.752 I llm_load_print_meta: n_ff             = 16384
0.00.214.753 I llm_load_print_meta: n_expert         = 0
0.00.214.753 I llm_load_print_meta: n_expert_used    = 0
0.00.214.753 I llm_load_print_meta: causal attn      = 1
0.00.214.754 I llm_load_print_meta: pooling type     = 0
0.00.214.754 I llm_load_print_meta: rope type        = 2
0.00.214.754 I llm_load_print_meta: rope scaling     = linear
0.00.214.756 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.214.756 I llm_load_print_meta: freq_scale_train = 1
0.00.214.756 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.214.757 I llm_load_print_meta: rope_finetuned   = unknown
0.00.214.757 I llm_load_print_meta: ssm_d_conv       = 0
0.00.214.758 I llm_load_print_meta: ssm_d_inner      = 0
0.00.214.758 I llm_load_print_meta: ssm_d_state      = 0
0.00.214.758 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.214.759 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.214.759 I llm_load_print_meta: model type       = 2B
0.00.214.760 I llm_load_print_meta: model ftype      = Q8_0
0.00.214.761 I llm_load_print_meta: model params     = 2.51 B
0.00.214.762 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.214.762 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.214.763 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.214.763 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.214.763 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.214.763 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.214.764 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.214.764 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.214.765 I llm_load_print_meta: max token length = 93
0.00.214.780 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.289.977 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.289.982 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.289.983 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.289.984 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.289.985 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.289.985 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.294.970 I llama_new_context_with_model: n_ctx      = 8192
0.00.294.976 I llama_new_context_with_model: n_batch    = 2048
0.00.294.977 I llama_new_context_with_model: n_ubatch   = 512
0.00.294.977 I llama_new_context_with_model: flash_attn = 0
0.00.294.979 I llama_new_context_with_model: freq_base  = 10000.0
0.00.294.980 I llama_new_context_with_model: freq_scale = 1
0.00.323.594 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.323.611 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.323.700 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.324.568 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.324.576 I llama_new_context_with_model: graph nodes  = 601
0.00.324.577 I llama_new_context_with_model: graph splits = 1
0.00.324.578 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.417.462 I main: llama threadpool init, n_threads = 4
0.00.417.473 I 
0.00.417.549 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.417.552 I 
0.00.417.591 I sampler seed: 2141030590
0.00.417.599 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.417.602 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.417.602 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneupher.

The maneupher is a small, handheld device designed specifically for data entry in handwritten or printed documents. It has a touchscreen interface, a small

0.02.682.332 I llama_perf_sampler_print:    sampling time =       5.52 ms /    33 runs   (    0.17 ms per token,  5977.18 tokens per second)
0.02.682.335 I llama_perf_context_print:        load time =     415.63 ms
0.02.682.336 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.682.337 I llama_perf_context_print:        eval time =    2245.84 ms /    32 runs   (   70.18 ms per token,    14.25 tokens per second)
0.02.682.338 I llama_perf_context_print:       total time =    2264.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.550 I build: 3814 (c087b6f1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.757 I main: llama backend init
0.00.001.917 I main: load the model and apply lora adapter, if any
0.00.022.197 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.249 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.259 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.265 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.266 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.271 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.282 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.284 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.284 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.285 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.286 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.292 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.294 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.295 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.296 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.297 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.707 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.348 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.157 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.163 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.164 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.165 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.166 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.167 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.167 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.170 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.171 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.173 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.173 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.175 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.179 I llama_model_loader: - type  f32:   37 tensors
0.00.132.181 I llama_model_loader: - type q8_0:  127 tensors
0.00.196.812 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.197.578 I llm_load_vocab: special tokens cache size = 5
0.00.216.155 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.216.169 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.216.169 I llm_load_print_meta: arch             = gemma
0.00.216.170 I llm_load_print_meta: vocab type       = SPM
0.00.216.171 I llm_load_print_meta: n_vocab          = 256000
0.00.216.171 I llm_load_print_meta: n_merges         = 0
0.00.216.172 I llm_load_print_meta: vocab_only       = 0
0.00.216.172 I llm_load_print_meta: n_ctx_train      = 8192
0.00.216.172 I llm_load_print_meta: n_embd           = 2048
0.00.216.173 I llm_load_print_meta: n_layer          = 18
0.00.216.185 I llm_load_print_meta: n_head           = 8
0.00.216.186 I llm_load_print_meta: n_head_kv        = 1
0.00.216.186 I llm_load_print_meta: n_rot            = 256
0.00.216.187 I llm_load_print_meta: n_swa            = 0
0.00.216.187 I llm_load_print_meta: n_embd_head_k    = 256
0.00.216.187 I llm_load_print_meta: n_embd_head_v    = 256
0.00.216.188 I llm_load_print_meta: n_gqa            = 8
0.00.216.189 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.216.190 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.216.191 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.216.192 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.216.192 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.216.193 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.216.193 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.216.194 I llm_load_print_meta: n_ff             = 16384
0.00.216.194 I llm_load_print_meta: n_expert         = 0
0.00.216.195 I llm_load_print_meta: n_expert_used    = 0
0.00.216.195 I llm_load_print_meta: causal attn      = 1
0.00.216.195 I llm_load_print_meta: pooling type     = 0
0.00.216.196 I llm_load_print_meta: rope type        = 2
0.00.216.196 I llm_load_print_meta: rope scaling     = linear
0.00.216.197 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.216.198 I llm_load_print_meta: freq_scale_train = 1
0.00.216.198 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.216.198 I llm_load_print_meta: rope_finetuned   = unknown
0.00.216.199 I llm_load_print_meta: ssm_d_conv       = 0
0.00.216.199 I llm_load_print_meta: ssm_d_inner      = 0
0.00.216.199 I llm_load_print_meta: ssm_d_state      = 0
0.00.216.199 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.216.200 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.216.200 I llm_load_print_meta: model type       = 2B
0.00.216.201 I llm_load_print_meta: model ftype      = Q8_0
0.00.216.201 I llm_load_print_meta: model params     = 2.51 B
0.00.216.202 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.216.203 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.216.203 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.216.204 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.216.204 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.216.204 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.216.204 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.216.205 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.216.205 I llm_load_print_meta: max token length = 93
0.00.216.229 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.287.186 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.287.193 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.292.144 I llama_new_context_with_model: n_ctx      = 8192
0.00.292.149 I llama_new_context_with_model: n_batch    = 2048
0.00.292.150 I llama_new_context_with_model: n_ubatch   = 512
0.00.292.150 I llama_new_context_with_model: flash_attn = 0
0.00.292.152 I llama_new_context_with_model: freq_base  = 10000.0
0.00.292.153 I llama_new_context_with_model: freq_scale = 1
0.00.320.921 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.320.936 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.321.035 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.321.917 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.321.926 I llama_new_context_with_model: graph nodes  = 601
0.00.321.926 I llama_new_context_with_model: graph splits = 1
0.00.321.928 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.415.669 I main: llama threadpool init, n_threads = 4
0.00.415.683 I 
0.00.415.759 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.415.763 I 
0.00.415.800 I sampler seed: 1534930548
0.00.415.810 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.415.814 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.415.815 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasements of the 20th century. [end of text]


0.01.250.803 I llama_perf_sampler_print:    sampling time =       2.25 ms /    12 runs   (    0.19 ms per token,  5345.21 tokens per second)
0.01.250.806 I llama_perf_context_print:        load time =     413.73 ms
0.01.250.807 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.250.809 I llama_perf_context_print:        eval time =     827.01 ms /    11 runs   (   75.18 ms per token,    13.30 tokens per second)
0.01.250.809 I llama_perf_context_print:       total time =     835.14 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m15.260s
user	0m17.201s
sys	0m9.438s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3814 (c087b6f1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32197.73 ms
main:    total time = 32197.73 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.552 I build: 3814 (c087b6f1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.001.855 I main: load the model and apply lora adapter, if any
0.00.022.046 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.094 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.106 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.111 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.112 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.114 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.115 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.116 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.116 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.117 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.117 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.121 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.121 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.122 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.123 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.124 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.348 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.398 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.200 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.207 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.208 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.209 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.210 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.211 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.212 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.215 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.216 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.217 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.218 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.219 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.222 I llama_model_loader: - type  f32:   37 tensors
0.00.132.224 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.225 I llama_model_loader: - type q6_K:   19 tensors
0.00.197.565 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.198.312 I llm_load_vocab: special tokens cache size = 5
0.00.216.842 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.216.858 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.216.859 I llm_load_print_meta: arch             = gemma
0.00.216.860 I llm_load_print_meta: vocab type       = SPM
0.00.216.861 I llm_load_print_meta: n_vocab          = 256000
0.00.216.861 I llm_load_print_meta: n_merges         = 0
0.00.216.862 I llm_load_print_meta: vocab_only       = 0
0.00.216.862 I llm_load_print_meta: n_ctx_train      = 8192
0.00.216.863 I llm_load_print_meta: n_embd           = 2048
0.00.216.863 I llm_load_print_meta: n_layer          = 18
0.00.216.879 I llm_load_print_meta: n_head           = 8
0.00.216.880 I llm_load_print_meta: n_head_kv        = 1
0.00.216.881 I llm_load_print_meta: n_rot            = 256
0.00.216.881 I llm_load_print_meta: n_swa            = 0
0.00.216.882 I llm_load_print_meta: n_embd_head_k    = 256
0.00.216.882 I llm_load_print_meta: n_embd_head_v    = 256
0.00.216.883 I llm_load_print_meta: n_gqa            = 8
0.00.216.884 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.216.885 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.216.886 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.216.887 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.216.888 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.216.888 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.216.889 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.216.890 I llm_load_print_meta: n_ff             = 16384
0.00.216.891 I llm_load_print_meta: n_expert         = 0
0.00.216.891 I llm_load_print_meta: n_expert_used    = 0
0.00.216.891 I llm_load_print_meta: causal attn      = 1
0.00.216.892 I llm_load_print_meta: pooling type     = 0
0.00.216.892 I llm_load_print_meta: rope type        = 2
0.00.216.892 I llm_load_print_meta: rope scaling     = linear
0.00.216.894 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.216.894 I llm_load_print_meta: freq_scale_train = 1
0.00.216.895 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.216.895 I llm_load_print_meta: rope_finetuned   = unknown
0.00.216.896 I llm_load_print_meta: ssm_d_conv       = 0
0.00.216.896 I llm_load_print_meta: ssm_d_inner      = 0
0.00.216.897 I llm_load_print_meta: ssm_d_state      = 0
0.00.216.897 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.216.897 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.216.898 I llm_load_print_meta: model type       = 2B
0.00.216.898 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.216.899 I llm_load_print_meta: model params     = 2.51 B
0.00.216.900 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.216.900 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.216.901 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.216.901 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.216.901 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.216.902 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.216.902 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.216.903 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.216.903 I llm_load_print_meta: max token length = 93
0.00.216.920 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.277.107 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.277.113 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.277.114 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.277.115 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.277.115 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.277.116 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.282.163 I llama_new_context_with_model: n_ctx      = 8192
0.00.282.169 I llama_new_context_with_model: n_batch    = 2048
0.00.282.170 I llama_new_context_with_model: n_ubatch   = 512
0.00.282.170 I llama_new_context_with_model: flash_attn = 0
0.00.282.173 I llama_new_context_with_model: freq_base  = 10000.0
0.00.282.174 I llama_new_context_with_model: freq_scale = 1
0.00.310.844 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.310.858 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.310.962 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.311.910 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.311.918 I llama_new_context_with_model: graph nodes  = 601
0.00.311.919 I llama_new_context_with_model: graph splits = 1
0.00.311.921 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.392.886 I main: llama threadpool init, n_threads = 4
0.00.392.900 I 
0.00.392.994 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.392.997 I 
0.00.393.046 I sampler seed: 4028741756
0.00.393.055 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.393.058 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.393.058 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically.

I am not sure what I am.
I am everywhere.
I am beyond measure.

What am I? [end of text]


0.01.821.648 I llama_perf_sampler_print:    sampling time =       4.91 ms /    30 runs   (    0.16 ms per token,  6107.49 tokens per second)
0.01.821.651 I llama_perf_context_print:        load time =     391.01 ms
0.01.821.652 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.821.653 I llama_perf_context_print:        eval time =    1411.66 ms /    29 runs   (   48.68 ms per token,    20.54 tokens per second)
0.01.821.654 I llama_perf_context_print:       total time =    1428.77 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3814 (c087b6f1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32039.48 ms
main:    total time = 32039.48 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.542 I build: 3814 (c087b6f1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.001.862 I main: load the model and apply lora adapter, if any
0.00.023.141 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.153 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.160 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.161 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.164 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.165 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.166 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.166 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.166 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.167 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.171 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.171 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.172 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.173 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.174 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.863 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.631 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.466 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.472 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.473 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.473 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.474 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.475 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.475 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.478 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.479 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.483 I llama_model_loader: - type  f32:   37 tensors
0.00.133.485 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.487 I llama_model_loader: - type q6_K:   19 tensors
0.00.195.154 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.195.677 I llm_load_vocab: special tokens cache size = 5
0.00.214.212 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.214.225 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.214.226 I llm_load_print_meta: arch             = gemma
0.00.214.227 I llm_load_print_meta: vocab type       = SPM
0.00.214.228 I llm_load_print_meta: n_vocab          = 256000
0.00.214.229 I llm_load_print_meta: n_merges         = 0
0.00.214.230 I llm_load_print_meta: vocab_only       = 0
0.00.214.230 I llm_load_print_meta: n_ctx_train      = 8192
0.00.214.230 I llm_load_print_meta: n_embd           = 2048
0.00.214.230 I llm_load_print_meta: n_layer          = 18
0.00.214.241 I llm_load_print_meta: n_head           = 8
0.00.214.242 I llm_load_print_meta: n_head_kv        = 1
0.00.214.243 I llm_load_print_meta: n_rot            = 256
0.00.214.243 I llm_load_print_meta: n_swa            = 0
0.00.214.244 I llm_load_print_meta: n_embd_head_k    = 256
0.00.214.245 I llm_load_print_meta: n_embd_head_v    = 256
0.00.214.246 I llm_load_print_meta: n_gqa            = 8
0.00.214.247 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.214.248 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.214.249 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.214.251 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.214.252 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.214.252 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.214.252 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.214.254 I llm_load_print_meta: n_ff             = 16384
0.00.214.254 I llm_load_print_meta: n_expert         = 0
0.00.214.254 I llm_load_print_meta: n_expert_used    = 0
0.00.214.255 I llm_load_print_meta: causal attn      = 1
0.00.214.255 I llm_load_print_meta: pooling type     = 0
0.00.214.256 I llm_load_print_meta: rope type        = 2
0.00.214.256 I llm_load_print_meta: rope scaling     = linear
0.00.214.258 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.214.258 I llm_load_print_meta: freq_scale_train = 1
0.00.214.259 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.214.259 I llm_load_print_meta: rope_finetuned   = unknown
0.00.214.259 I llm_load_print_meta: ssm_d_conv       = 0
0.00.214.260 I llm_load_print_meta: ssm_d_inner      = 0
0.00.214.260 I llm_load_print_meta: ssm_d_state      = 0
0.00.214.261 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.214.261 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.214.262 I llm_load_print_meta: model type       = 2B
0.00.214.262 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.214.263 I llm_load_print_meta: model params     = 2.51 B
0.00.214.264 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.214.264 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.214.265 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.214.266 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.214.266 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.214.267 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.214.267 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.214.268 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.214.268 I llm_load_print_meta: max token length = 93
0.00.214.283 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.272.271 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.277.234 I llama_new_context_with_model: n_ctx      = 8192
0.00.277.240 I llama_new_context_with_model: n_batch    = 2048
0.00.277.241 I llama_new_context_with_model: n_ubatch   = 512
0.00.277.241 I llama_new_context_with_model: flash_attn = 0
0.00.277.243 I llama_new_context_with_model: freq_base  = 10000.0
0.00.277.244 I llama_new_context_with_model: freq_scale = 1
0.00.306.667 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.306.682 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.306.780 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.307.672 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.307.680 I llama_new_context_with_model: graph nodes  = 601
0.00.307.680 I llama_new_context_with_model: graph splits = 1
0.00.307.683 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.390.379 I main: llama threadpool init, n_threads = 4
0.00.390.391 I 
0.00.390.464 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.390.467 I 
0.00.390.495 I sampler seed: 2177632240
0.00.390.504 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.390.507 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.390.507 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneuvously.

I am unable to generate the requested response as it contains sexually suggestive and inappropriate content. [end of text]


0.01.522.138 I llama_perf_sampler_print:    sampling time =       3.88 ms /    24 runs   (    0.16 ms per token,  6191.95 tokens per second)
0.01.522.141 I llama_perf_context_print:        load time =     388.50 ms
0.01.522.142 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.522.144 I llama_perf_context_print:        eval time =    1118.00 ms /    23 runs   (   48.61 ms per token,    20.57 tokens per second)
0.01.522.145 I llama_perf_context_print:       total time =    1131.77 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.351s
user	8m11.909s
sys	0m7.002s
