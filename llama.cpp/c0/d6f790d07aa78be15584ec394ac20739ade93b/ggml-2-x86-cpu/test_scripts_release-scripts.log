+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.601 I build: 4432 (c0d6f790) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.798 I main: llama backend init
0.00.000.804 I main: load the model and apply lora adapter, if any
0.00.021.823 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.835 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.843 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.849 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.851 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.854 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.855 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.855 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.857 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.857 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.858 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.864 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.864 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.865 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.865 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.866 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.862 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.231 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.075 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.082 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.083 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.083 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.084 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.085 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.086 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.089 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.089 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.090 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.090 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.091 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.095 I llama_model_loader: - type  f32:   37 tensors
0.00.132.096 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.775 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.925 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.509 I llm_load_vocab: special tokens cache size = 5
0.00.271.303 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.321 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.323 I llm_load_print_meta: arch             = gemma
0.00.271.323 I llm_load_print_meta: vocab type       = SPM
0.00.271.324 I llm_load_print_meta: n_vocab          = 256000
0.00.271.324 I llm_load_print_meta: n_merges         = 0
0.00.271.325 I llm_load_print_meta: vocab_only       = 0
0.00.271.325 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.325 I llm_load_print_meta: n_embd           = 2048
0.00.271.326 I llm_load_print_meta: n_layer          = 18
0.00.271.337 I llm_load_print_meta: n_head           = 8
0.00.271.340 I llm_load_print_meta: n_head_kv        = 1
0.00.271.340 I llm_load_print_meta: n_rot            = 256
0.00.271.340 I llm_load_print_meta: n_swa            = 0
0.00.271.340 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.341 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.342 I llm_load_print_meta: n_gqa            = 8
0.00.271.344 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.345 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.346 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.347 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.348 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.348 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.348 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.350 I llm_load_print_meta: n_ff             = 16384
0.00.271.350 I llm_load_print_meta: n_expert         = 0
0.00.271.351 I llm_load_print_meta: n_expert_used    = 0
0.00.271.351 I llm_load_print_meta: causal attn      = 1
0.00.271.352 I llm_load_print_meta: pooling type     = 0
0.00.271.352 I llm_load_print_meta: rope type        = 2
0.00.271.352 I llm_load_print_meta: rope scaling     = linear
0.00.271.353 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.354 I llm_load_print_meta: freq_scale_train = 1
0.00.271.354 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.355 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.355 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.355 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.355 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.356 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.356 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.358 I llm_load_print_meta: model type       = 2B
0.00.271.359 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.360 I llm_load_print_meta: model params     = 2.51 B
0.00.271.361 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.361 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.361 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.361 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.362 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.362 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.362 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.363 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.363 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.364 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.364 I llm_load_print_meta: max token length = 93
0.00.374.022 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.374.029 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.374.030 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.374.031 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.374.031 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.374.032 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.379.246 I llama_new_context_with_model: n_seq_max     = 1
0.00.379.253 I llama_new_context_with_model: n_ctx         = 4096
0.00.379.253 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.379.254 I llama_new_context_with_model: n_batch       = 2048
0.00.379.254 I llama_new_context_with_model: n_ubatch      = 512
0.00.379.254 I llama_new_context_with_model: flash_attn    = 0
0.00.379.256 I llama_new_context_with_model: freq_base     = 10000.0
0.00.379.257 I llama_new_context_with_model: freq_scale    = 1
0.00.379.258 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.379.277 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.393.397 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.393.411 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.393.504 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.394.727 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.394.733 I llama_new_context_with_model: graph nodes  = 601
0.00.394.734 I llama_new_context_with_model: graph splits = 1
0.00.394.737 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.394.738 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.480.265 I main: llama threadpool init, n_threads = 4
0.00.480.281 I 
0.00.480.364 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.480.367 I 
0.00.480.399 I sampler seed: 2444533768
0.00.480.410 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.480.412 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.480.423 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.480.426 I 
 increasities by the gods.

These are divine pronouncements of fate that hold immense weight in the lives of mortals.

**What is the meaning of these

0.02.733.126 I llama_perf_sampler_print:    sampling time =       5.03 ms /    33 runs   (    0.15 ms per token,  6560.64 tokens per second)
0.02.733.128 I llama_perf_context_print:        load time =     479.44 ms
0.02.733.129 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.733.131 I llama_perf_context_print:        eval time =    2233.22 ms /    32 runs   (   69.79 ms per token,    14.33 tokens per second)
0.02.733.131 I llama_perf_context_print:       total time =    2252.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.189 I build: 4432 (c0d6f790) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.401 I main: llama backend init
0.00.000.407 I main: load the model and apply lora adapter, if any
0.00.020.641 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.656 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.664 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.666 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.670 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.671 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.672 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.673 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.673 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.674 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.679 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.680 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.681 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.682 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.683 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.224 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.877 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.681 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.687 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.688 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.689 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.690 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.690 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.691 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.693 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.694 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.696 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.696 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.129.697 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.700 I llama_model_loader: - type  f32:   37 tensors
0.00.129.701 I llama_model_loader: - type q8_0:  127 tensors
0.00.214.068 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.267.603 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.268.380 I llm_load_vocab: special tokens cache size = 5
0.00.289.536 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.289.557 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.289.558 I llm_load_print_meta: arch             = gemma
0.00.289.559 I llm_load_print_meta: vocab type       = SPM
0.00.289.560 I llm_load_print_meta: n_vocab          = 256000
0.00.289.560 I llm_load_print_meta: n_merges         = 0
0.00.289.561 I llm_load_print_meta: vocab_only       = 0
0.00.289.561 I llm_load_print_meta: n_ctx_train      = 8192
0.00.289.561 I llm_load_print_meta: n_embd           = 2048
0.00.289.562 I llm_load_print_meta: n_layer          = 18
0.00.289.575 I llm_load_print_meta: n_head           = 8
0.00.289.577 I llm_load_print_meta: n_head_kv        = 1
0.00.289.577 I llm_load_print_meta: n_rot            = 256
0.00.289.578 I llm_load_print_meta: n_swa            = 0
0.00.289.578 I llm_load_print_meta: n_embd_head_k    = 256
0.00.289.578 I llm_load_print_meta: n_embd_head_v    = 256
0.00.289.580 I llm_load_print_meta: n_gqa            = 8
0.00.289.582 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.289.584 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.289.584 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.289.586 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.289.586 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.289.587 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.289.587 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.289.589 I llm_load_print_meta: n_ff             = 16384
0.00.289.589 I llm_load_print_meta: n_expert         = 0
0.00.289.590 I llm_load_print_meta: n_expert_used    = 0
0.00.289.590 I llm_load_print_meta: causal attn      = 1
0.00.289.590 I llm_load_print_meta: pooling type     = 0
0.00.289.590 I llm_load_print_meta: rope type        = 2
0.00.289.591 I llm_load_print_meta: rope scaling     = linear
0.00.289.592 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.289.592 I llm_load_print_meta: freq_scale_train = 1
0.00.289.593 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.289.593 I llm_load_print_meta: rope_finetuned   = unknown
0.00.289.593 I llm_load_print_meta: ssm_d_conv       = 0
0.00.289.594 I llm_load_print_meta: ssm_d_inner      = 0
0.00.289.594 I llm_load_print_meta: ssm_d_state      = 0
0.00.289.594 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.289.594 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.289.596 I llm_load_print_meta: model type       = 2B
0.00.289.598 I llm_load_print_meta: model ftype      = Q8_0
0.00.289.598 I llm_load_print_meta: model params     = 2.51 B
0.00.289.599 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.289.600 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.289.600 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.289.600 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.289.601 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.289.601 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.289.601 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.289.602 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.289.602 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.289.602 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.289.603 I llm_load_print_meta: max token length = 93
0.00.384.962 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.390.118 I llama_new_context_with_model: n_seq_max     = 1
0.00.390.124 I llama_new_context_with_model: n_ctx         = 4096
0.00.390.125 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.390.125 I llama_new_context_with_model: n_batch       = 2048
0.00.390.125 I llama_new_context_with_model: n_ubatch      = 512
0.00.390.126 I llama_new_context_with_model: flash_attn    = 0
0.00.390.129 I llama_new_context_with_model: freq_base     = 10000.0
0.00.390.130 I llama_new_context_with_model: freq_scale    = 1
0.00.390.131 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.390.151 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.404.596 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.404.611 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.404.702 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.405.966 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.405.972 I llama_new_context_with_model: graph nodes  = 601
0.00.405.972 I llama_new_context_with_model: graph splits = 1
0.00.405.975 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.405.975 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.486.746 I main: llama threadpool init, n_threads = 4
0.00.486.762 I 
0.00.486.847 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.486.865 I 
0.00.486.902 I sampler seed: 88697510
0.00.486.913 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.486.918 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.486.919 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.486.919 I 
 increasels of the ancient world.

**Answer:** Minoans.

The Minoans were a group of ancient Greek-speaking people who lived in Crete and

0.02.662.316 I llama_perf_sampler_print:    sampling time =       4.76 ms /    33 runs   (    0.14 ms per token,  6926.95 tokens per second)
0.02.662.318 I llama_perf_context_print:        load time =     486.31 ms
0.02.662.319 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.662.321 I llama_perf_context_print:        eval time =    2157.39 ms /    32 runs   (   67.42 ms per token,    14.83 tokens per second)
0.02.662.322 I llama_perf_context_print:       total time =    2175.58 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.546 I build: 4432 (c0d6f790) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.751 I main: llama backend init
0.00.000.758 I main: load the model and apply lora adapter, if any
0.00.020.996 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.007 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.014 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.021 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.022 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.026 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.027 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.028 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.029 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.030 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.032 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.036 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.041 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.041 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.042 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.044 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.098 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.342 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.248 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.254 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.255 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.255 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.256 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.257 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.258 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.260 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.261 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.264 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.265 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.266 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.270 I llama_model_loader: - type  f32:   37 tensors
0.00.131.271 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.554 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.286 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.760 I llm_load_vocab: special tokens cache size = 5
0.00.265.751 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.769 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.771 I llm_load_print_meta: arch             = gemma
0.00.265.771 I llm_load_print_meta: vocab type       = SPM
0.00.265.772 I llm_load_print_meta: n_vocab          = 256000
0.00.265.773 I llm_load_print_meta: n_merges         = 0
0.00.265.773 I llm_load_print_meta: vocab_only       = 0
0.00.265.773 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.774 I llm_load_print_meta: n_embd           = 2048
0.00.265.774 I llm_load_print_meta: n_layer          = 18
0.00.265.785 I llm_load_print_meta: n_head           = 8
0.00.265.788 I llm_load_print_meta: n_head_kv        = 1
0.00.265.788 I llm_load_print_meta: n_rot            = 256
0.00.265.788 I llm_load_print_meta: n_swa            = 0
0.00.265.789 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.789 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.790 I llm_load_print_meta: n_gqa            = 8
0.00.265.792 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.794 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.794 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.795 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.796 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.796 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.797 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.798 I llm_load_print_meta: n_ff             = 16384
0.00.265.798 I llm_load_print_meta: n_expert         = 0
0.00.265.799 I llm_load_print_meta: n_expert_used    = 0
0.00.265.799 I llm_load_print_meta: causal attn      = 1
0.00.265.799 I llm_load_print_meta: pooling type     = 0
0.00.265.799 I llm_load_print_meta: rope type        = 2
0.00.265.800 I llm_load_print_meta: rope scaling     = linear
0.00.265.801 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.801 I llm_load_print_meta: freq_scale_train = 1
0.00.265.802 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.802 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.803 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.803 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.803 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.803 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.804 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.805 I llm_load_print_meta: model type       = 2B
0.00.265.807 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.807 I llm_load_print_meta: model params     = 2.51 B
0.00.265.808 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.809 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.809 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.809 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.809 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.810 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.810 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.810 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.811 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.811 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.811 I llm_load_print_meta: max token length = 93
0.00.343.067 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.343.073 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.343.074 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.343.074 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.343.075 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.343.075 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.348.302 I llama_new_context_with_model: n_seq_max     = 1
0.00.348.307 I llama_new_context_with_model: n_ctx         = 4096
0.00.348.308 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.348.308 I llama_new_context_with_model: n_batch       = 2048
0.00.348.309 I llama_new_context_with_model: n_ubatch      = 512
0.00.348.309 I llama_new_context_with_model: flash_attn    = 0
0.00.348.312 I llama_new_context_with_model: freq_base     = 10000.0
0.00.348.313 I llama_new_context_with_model: freq_scale    = 1
0.00.348.314 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.348.343 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.362.648 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.660 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.750 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.008 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.014 I llama_new_context_with_model: graph nodes  = 601
0.00.364.015 I llama_new_context_with_model: graph splits = 1
0.00.364.018 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.364.018 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.358 I main: llama threadpool init, n_threads = 4
0.00.459.380 I 
0.00.459.471 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.459.475 I 
0.00.459.540 I sampler seed: 4225799833
0.00.459.554 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.459.568 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.459.571 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.459.572 I 
 increably.

I am unable to generate a response due to the provided context being incomplete. Please provide additional information so I can assist you. [end of text]


0.02.600.468 I llama_perf_sampler_print:    sampling time =       4.62 ms /    31 runs   (    0.15 ms per token,  6705.60 tokens per second)
0.02.600.470 I llama_perf_context_print:        load time =     458.58 ms
0.02.600.471 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.600.472 I llama_perf_context_print:        eval time =    2123.03 ms /    30 runs   (   70.77 ms per token,    14.13 tokens per second)
0.02.600.473 I llama_perf_context_print:       total time =    2141.12 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.171 I build: 4432 (c0d6f790) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.397 I main: llama backend init
0.00.000.404 I main: load the model and apply lora adapter, if any
0.00.020.567 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.577 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.585 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.591 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.592 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.595 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.596 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.596 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.597 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.597 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.598 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.603 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.603 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.604 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.605 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.605 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.311 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.706 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.564 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.571 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.572 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.572 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.573 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.574 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.575 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.578 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.579 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.580 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.581 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.582 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.586 I llama_model_loader: - type  f32:   37 tensors
0.00.130.587 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.642 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.653 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.208 I llm_load_vocab: special tokens cache size = 5
0.00.267.186 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.205 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.206 I llm_load_print_meta: arch             = gemma
0.00.267.207 I llm_load_print_meta: vocab type       = SPM
0.00.267.208 I llm_load_print_meta: n_vocab          = 256000
0.00.267.208 I llm_load_print_meta: n_merges         = 0
0.00.267.209 I llm_load_print_meta: vocab_only       = 0
0.00.267.209 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.209 I llm_load_print_meta: n_embd           = 2048
0.00.267.210 I llm_load_print_meta: n_layer          = 18
0.00.267.222 I llm_load_print_meta: n_head           = 8
0.00.267.224 I llm_load_print_meta: n_head_kv        = 1
0.00.267.225 I llm_load_print_meta: n_rot            = 256
0.00.267.226 I llm_load_print_meta: n_swa            = 0
0.00.267.226 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.226 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.228 I llm_load_print_meta: n_gqa            = 8
0.00.267.230 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.232 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.233 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.235 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.235 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.236 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.236 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.239 I llm_load_print_meta: n_ff             = 16384
0.00.267.239 I llm_load_print_meta: n_expert         = 0
0.00.267.240 I llm_load_print_meta: n_expert_used    = 0
0.00.267.240 I llm_load_print_meta: causal attn      = 1
0.00.267.241 I llm_load_print_meta: pooling type     = 0
0.00.267.242 I llm_load_print_meta: rope type        = 2
0.00.267.243 I llm_load_print_meta: rope scaling     = linear
0.00.267.245 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.246 I llm_load_print_meta: freq_scale_train = 1
0.00.267.246 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.247 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.248 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.248 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.250 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.251 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.251 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.253 I llm_load_print_meta: model type       = 2B
0.00.267.255 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.256 I llm_load_print_meta: model params     = 2.51 B
0.00.267.257 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.261 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.261 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.262 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.262 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.263 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.263 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.264 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.265 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.265 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.266 I llm_load_print_meta: max token length = 93
0.00.338.878 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.338.886 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.344.008 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.015 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.016 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.016 I llama_new_context_with_model: n_batch       = 2048
0.00.344.017 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.017 I llama_new_context_with_model: flash_attn    = 0
0.00.344.020 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.021 I llama_new_context_with_model: freq_scale    = 1
0.00.344.022 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.043 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.358.875 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.887 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.358.989 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.256 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.263 I llama_new_context_with_model: graph nodes  = 601
0.00.360.264 I llama_new_context_with_model: graph splits = 1
0.00.360.267 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.360.267 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.448.481 I main: llama threadpool init, n_threads = 4
0.00.448.497 I 
0.00.448.576 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.448.581 I 
0.00.448.618 I sampler seed: 829648529
0.00.448.631 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.448.634 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.448.635 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.448.635 I 
 increasities.

The provided text contains a misspelling of "incestuous". I cannot find a context where this misspelling is used in a legitimate way

0.02.871.033 I llama_perf_sampler_print:    sampling time =       5.44 ms /    33 runs   (    0.16 ms per token,  6069.52 tokens per second)
0.02.871.035 I llama_perf_context_print:        load time =     448.06 ms
0.02.871.036 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.871.037 I llama_perf_context_print:        eval time =    2401.97 ms /    32 runs   (   75.06 ms per token,    13.32 tokens per second)
0.02.871.038 I llama_perf_context_print:       total time =    2422.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.363s
user	0m38.830s
sys	0m9.405s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4432 (c0d6f790)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40239.65 ms
main:    total time = 40239.65 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.533 I build: 4432 (c0d6f790) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.725 I main: llama backend init
0.00.000.731 I main: load the model and apply lora adapter, if any
0.00.021.277 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.287 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.295 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.300 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.304 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.306 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.307 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.308 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.308 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.309 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.309 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.313 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.314 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.314 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.315 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.316 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.751 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.532 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.320 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.326 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.327 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.328 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.329 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.330 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.331 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.334 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.334 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.335 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.336 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.337 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.340 I llama_model_loader: - type  f32:   37 tensors
0.00.130.341 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.341 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.899 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.489 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.986 I llm_load_vocab: special tokens cache size = 5
0.00.264.667 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.684 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.686 I llm_load_print_meta: arch             = gemma
0.00.264.687 I llm_load_print_meta: vocab type       = SPM
0.00.264.688 I llm_load_print_meta: n_vocab          = 256000
0.00.264.688 I llm_load_print_meta: n_merges         = 0
0.00.264.699 I llm_load_print_meta: vocab_only       = 0
0.00.264.700 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.700 I llm_load_print_meta: n_embd           = 2048
0.00.264.701 I llm_load_print_meta: n_layer          = 18
0.00.264.713 I llm_load_print_meta: n_head           = 8
0.00.264.715 I llm_load_print_meta: n_head_kv        = 1
0.00.264.716 I llm_load_print_meta: n_rot            = 256
0.00.264.716 I llm_load_print_meta: n_swa            = 0
0.00.264.716 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.716 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.718 I llm_load_print_meta: n_gqa            = 8
0.00.264.720 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.722 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.723 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.724 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.725 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.725 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.726 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.727 I llm_load_print_meta: n_ff             = 16384
0.00.264.728 I llm_load_print_meta: n_expert         = 0
0.00.264.729 I llm_load_print_meta: n_expert_used    = 0
0.00.264.729 I llm_load_print_meta: causal attn      = 1
0.00.264.729 I llm_load_print_meta: pooling type     = 0
0.00.264.730 I llm_load_print_meta: rope type        = 2
0.00.264.730 I llm_load_print_meta: rope scaling     = linear
0.00.264.732 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.733 I llm_load_print_meta: freq_scale_train = 1
0.00.264.733 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.734 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.734 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.735 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.735 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.736 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.736 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.738 I llm_load_print_meta: model type       = 2B
0.00.264.739 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.740 I llm_load_print_meta: model params     = 2.51 B
0.00.264.741 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.741 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.742 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.742 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.743 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.743 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.743 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.744 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.744 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.748 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.748 I llm_load_print_meta: max token length = 93
0.00.325.931 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.325.936 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.325.937 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.325.937 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.325.938 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.325.938 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.331.234 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.239 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.240 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.240 I llama_new_context_with_model: n_batch       = 2048
0.00.331.241 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.241 I llama_new_context_with_model: flash_attn    = 0
0.00.331.243 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.244 I llama_new_context_with_model: freq_scale    = 1
0.00.331.245 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.331.264 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.345.627 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.640 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.345.728 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.346.964 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.346.969 I llama_new_context_with_model: graph nodes  = 601
0.00.346.970 I llama_new_context_with_model: graph splits = 1
0.00.346.973 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.346.974 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.841 I main: llama threadpool init, n_threads = 4
0.00.421.857 I 
0.00.421.933 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.421.936 I 
0.00.421.969 I sampler seed: 2446038615
0.00.421.980 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.982 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.421.983 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.421.984 I 
 seconded 3-year-old boy to the hospital. The boy's mother is understandably concerned and wants to know more about the diagnosis and prognosis.

0.02.030.711 I llama_perf_sampler_print:    sampling time =       5.41 ms /    33 runs   (    0.16 ms per token,  6098.69 tokens per second)
0.02.030.714 I llama_perf_context_print:        load time =     421.09 ms
0.02.030.715 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.030.716 I llama_perf_context_print:        eval time =    1588.66 ms /    32 runs   (   49.65 ms per token,    20.14 tokens per second)
0.02.030.717 I llama_perf_context_print:       total time =    1608.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4432 (c0d6f790)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40209.82 ms
main:    total time = 40209.82 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.529 I build: 4432 (c0d6f790) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.719 I main: llama backend init
0.00.000.725 I main: load the model and apply lora adapter, if any
0.00.021.150 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.163 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.170 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.171 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.174 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.175 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.176 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.176 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.177 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.177 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.180 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.181 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.181 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.184 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.185 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.868 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.565 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.352 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.358 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.359 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.360 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.361 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.362 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.363 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.366 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.367 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.370 I llama_model_loader: - type  f32:   37 tensors
0.00.130.371 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.372 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.994 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.848 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.353 I llm_load_vocab: special tokens cache size = 5
0.00.265.300 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.316 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.318 I llm_load_print_meta: arch             = gemma
0.00.265.318 I llm_load_print_meta: vocab type       = SPM
0.00.265.319 I llm_load_print_meta: n_vocab          = 256000
0.00.265.319 I llm_load_print_meta: n_merges         = 0
0.00.265.319 I llm_load_print_meta: vocab_only       = 0
0.00.265.320 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.320 I llm_load_print_meta: n_embd           = 2048
0.00.265.320 I llm_load_print_meta: n_layer          = 18
0.00.265.332 I llm_load_print_meta: n_head           = 8
0.00.265.334 I llm_load_print_meta: n_head_kv        = 1
0.00.265.334 I llm_load_print_meta: n_rot            = 256
0.00.265.335 I llm_load_print_meta: n_swa            = 0
0.00.265.335 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.335 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.337 I llm_load_print_meta: n_gqa            = 8
0.00.265.339 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.340 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.341 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.342 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.343 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.343 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.344 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.346 I llm_load_print_meta: n_ff             = 16384
0.00.265.347 I llm_load_print_meta: n_expert         = 0
0.00.265.347 I llm_load_print_meta: n_expert_used    = 0
0.00.265.348 I llm_load_print_meta: causal attn      = 1
0.00.265.348 I llm_load_print_meta: pooling type     = 0
0.00.265.349 I llm_load_print_meta: rope type        = 2
0.00.265.349 I llm_load_print_meta: rope scaling     = linear
0.00.265.352 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.352 I llm_load_print_meta: freq_scale_train = 1
0.00.265.353 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.353 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.353 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.354 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.354 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.354 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.355 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.356 I llm_load_print_meta: model type       = 2B
0.00.265.358 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.358 I llm_load_print_meta: model params     = 2.51 B
0.00.265.359 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.359 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.360 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.361 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.361 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.361 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.362 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.362 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.366 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.366 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.367 I llm_load_print_meta: max token length = 93
0.00.324.532 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.329.729 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.735 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.735 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.736 I llama_new_context_with_model: n_batch       = 2048
0.00.329.736 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.737 I llama_new_context_with_model: flash_attn    = 0
0.00.329.739 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.740 I llama_new_context_with_model: freq_scale    = 1
0.00.329.741 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.329.761 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.344.745 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.344.760 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.344.862 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.346.123 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.346.129 I llama_new_context_with_model: graph nodes  = 601
0.00.346.130 I llama_new_context_with_model: graph splits = 1
0.00.346.133 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.346.134 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.420.446 I main: llama threadpool init, n_threads = 4
0.00.420.461 I 
0.00.420.535 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.420.539 I 
0.00.420.570 I sampler seed: 1209184834
0.00.420.580 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.420.583 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.420.583 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.420.584 I 
 increasively.

I am not sure how to use this feature. Could you give me some instructions on how to use it effectively?

I'm not

0.01.964.305 I llama_perf_sampler_print:    sampling time =       5.04 ms /    33 runs   (    0.15 ms per token,  6543.72 tokens per second)
0.01.964.308 I llama_perf_context_print:        load time =     419.70 ms
0.01.964.310 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.964.311 I llama_perf_context_print:        eval time =    1525.48 ms /    32 runs   (   47.67 ms per token,    20.98 tokens per second)
0.01.964.313 I llama_perf_context_print:       total time =    1543.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.205s
user	10m23.673s
sys	0m6.986s
