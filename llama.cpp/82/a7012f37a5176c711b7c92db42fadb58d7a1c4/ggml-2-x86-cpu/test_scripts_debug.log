+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.688 I build: 4022 (82a7012f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.898 I main: llama backend init
0.00.002.839 I main: load the model and apply lora adapter, if any
0.00.025.547 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.559 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.648 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.660 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.662 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.667 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.671 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.672 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.673 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.674 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.675 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.682 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.683 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.685 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.687 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.688 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.941 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.061 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.466 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.476 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.477 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.478 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.479 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.480 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.482 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.486 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.487 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.488 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.489 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.490 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.499 I llama_model_loader: - type  f32:   37 tensors
0.00.265.502 I llama_model_loader: - type q8_0:  127 tensors
0.00.449.383 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.126 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.126 I llm_load_vocab: special tokens cache size = 5
0.00.616.317 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.388 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.389 I llm_load_print_meta: arch             = gemma
0.00.616.390 I llm_load_print_meta: vocab type       = SPM
0.00.616.392 I llm_load_print_meta: n_vocab          = 256000
0.00.616.394 I llm_load_print_meta: n_merges         = 0
0.00.616.395 I llm_load_print_meta: vocab_only       = 0
0.00.616.395 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.396 I llm_load_print_meta: n_embd           = 2048
0.00.616.396 I llm_load_print_meta: n_layer          = 18
0.00.616.461 I llm_load_print_meta: n_head           = 8
0.00.616.468 I llm_load_print_meta: n_head_kv        = 1
0.00.616.469 I llm_load_print_meta: n_rot            = 256
0.00.616.470 I llm_load_print_meta: n_swa            = 0
0.00.616.471 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.471 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.476 I llm_load_print_meta: n_gqa            = 8
0.00.616.480 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.486 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.487 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.489 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.489 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.489 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.490 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.494 I llm_load_print_meta: n_ff             = 16384
0.00.616.495 I llm_load_print_meta: n_expert         = 0
0.00.616.496 I llm_load_print_meta: n_expert_used    = 0
0.00.616.497 I llm_load_print_meta: causal attn      = 1
0.00.616.497 I llm_load_print_meta: pooling type     = 0
0.00.616.512 I llm_load_print_meta: rope type        = 2
0.00.616.517 I llm_load_print_meta: rope scaling     = linear
0.00.616.518 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.520 I llm_load_print_meta: freq_scale_train = 1
0.00.616.520 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.520 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.521 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.521 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.532 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.549 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.551 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.552 I llm_load_print_meta: model type       = 2B
0.00.616.553 I llm_load_print_meta: model ftype      = Q8_0
0.00.616.554 I llm_load_print_meta: model params     = 2.51 B
0.00.616.563 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.616.564 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.565 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.565 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.566 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.566 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.567 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.567 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.574 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.576 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.576 I llm_load_print_meta: max token length = 93
0.00.718.927 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.718.939 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.718.940 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.718.940 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.718.941 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.718.942 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.724.950 I llama_new_context_with_model: n_seq_max     = 1
0.00.724.960 I llama_new_context_with_model: n_ctx         = 4096
0.00.724.960 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.724.960 I llama_new_context_with_model: n_batch       = 2048
0.00.724.961 I llama_new_context_with_model: n_ubatch      = 512
0.00.724.961 I llama_new_context_with_model: flash_attn    = 0
0.00.724.964 I llama_new_context_with_model: freq_base     = 10000.0
0.00.724.965 I llama_new_context_with_model: freq_scale    = 1
0.00.724.966 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.740.478 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.740.516 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.740.642 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.743.188 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.743.192 I llama_new_context_with_model: graph nodes  = 601
0.00.743.192 I llama_new_context_with_model: graph splits = 1
0.00.743.217 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.348.574 I main: llama threadpool init, n_threads = 4
0.01.348.587 I 
0.01.348.691 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.348.695 I 
0.01.348.928 I sampler seed: 610185816
0.01.348.949 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.348.956 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.348.958 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.348.958 I 
 increasities?

I cannot find any information regarding the requested term. Please provide additional context or specify the term you are referring to so that I can assist you

0.14.798.596 I llama_perf_sampler_print:    sampling time =      49.15 ms /    33 runs   (    1.49 ms per token,   671.46 tokens per second)
0.14.798.611 I llama_perf_context_print:        load time =    1345.64 ms
0.14.798.613 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.798.615 I llama_perf_context_print:        eval time =   13359.32 ms /    32 runs   (  417.48 ms per token,     2.40 tokens per second)
0.14.798.617 I llama_perf_context_print:       total time =   13450.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.715 I build: 4022 (82a7012f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.904 I main: llama backend init
0.00.002.835 I main: load the model and apply lora adapter, if any
0.00.025.211 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.307 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.321 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.326 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.330 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.332 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.333 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.334 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.335 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.336 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.343 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.345 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.347 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.348 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.350 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.604 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.642 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.128 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.138 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.139 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.140 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.142 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.143 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.144 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.148 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.149 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.150 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.151 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.266.152 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.160 I llama_model_loader: - type  f32:   37 tensors
0.00.266.162 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.996 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.179 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.102 I llm_load_vocab: special tokens cache size = 5
0.00.608.181 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.256 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.261 I llm_load_print_meta: arch             = gemma
0.00.608.261 I llm_load_print_meta: vocab type       = SPM
0.00.608.262 I llm_load_print_meta: n_vocab          = 256000
0.00.608.265 I llm_load_print_meta: n_merges         = 0
0.00.608.265 I llm_load_print_meta: vocab_only       = 0
0.00.608.266 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.266 I llm_load_print_meta: n_embd           = 2048
0.00.608.267 I llm_load_print_meta: n_layer          = 18
0.00.608.329 I llm_load_print_meta: n_head           = 8
0.00.608.339 I llm_load_print_meta: n_head_kv        = 1
0.00.608.340 I llm_load_print_meta: n_rot            = 256
0.00.608.341 I llm_load_print_meta: n_swa            = 0
0.00.608.341 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.341 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.347 I llm_load_print_meta: n_gqa            = 8
0.00.608.352 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.358 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.360 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.361 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.364 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.364 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.364 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.370 I llm_load_print_meta: n_ff             = 16384
0.00.608.370 I llm_load_print_meta: n_expert         = 0
0.00.608.381 I llm_load_print_meta: n_expert_used    = 0
0.00.608.384 I llm_load_print_meta: causal attn      = 1
0.00.608.385 I llm_load_print_meta: pooling type     = 0
0.00.608.385 I llm_load_print_meta: rope type        = 2
0.00.608.385 I llm_load_print_meta: rope scaling     = linear
0.00.608.387 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.388 I llm_load_print_meta: freq_scale_train = 1
0.00.608.388 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.389 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.389 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.389 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.390 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.390 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.391 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.392 I llm_load_print_meta: model type       = 2B
0.00.608.394 I llm_load_print_meta: model ftype      = Q8_0
0.00.608.395 I llm_load_print_meta: model params     = 2.51 B
0.00.608.404 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.608.404 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.405 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.405 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.406 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.406 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.407 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.408 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.414 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.417 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.417 I llm_load_print_meta: max token length = 93
0.00.709.284 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.714.982 I llama_new_context_with_model: n_seq_max     = 1
0.00.714.991 I llama_new_context_with_model: n_ctx         = 4096
0.00.714.991 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.714.991 I llama_new_context_with_model: n_batch       = 2048
0.00.714.992 I llama_new_context_with_model: n_ubatch      = 512
0.00.714.992 I llama_new_context_with_model: flash_attn    = 0
0.00.714.995 I llama_new_context_with_model: freq_base     = 10000.0
0.00.714.997 I llama_new_context_with_model: freq_scale    = 1
0.00.714.997 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.729.859 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.729.901 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.730.024 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.732.592 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.732.596 I llama_new_context_with_model: graph nodes  = 601
0.00.732.597 I llama_new_context_with_model: graph splits = 1
0.00.732.623 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.337.047 I main: llama threadpool init, n_threads = 4
0.01.337.059 I 
0.01.337.164 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.337.168 I 
0.01.337.399 I sampler seed: 1938478794
0.01.337.411 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.337.420 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.337.421 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.337.421 I 
 increadibly, and was about to attack the unsuspecting adventurer. Suddenly, a deafening roar echoed through the forest, causing the adventurer to look up.

What was

0.14.975.381 I llama_perf_sampler_print:    sampling time =      49.35 ms /    33 runs   (    1.50 ms per token,   668.75 tokens per second)
0.14.975.384 I llama_perf_context_print:        load time =    1334.11 ms
0.14.975.385 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.975.387 I llama_perf_context_print:        eval time =   13547.97 ms /    32 runs   (  423.37 ms per token,     2.36 tokens per second)
0.14.975.412 I llama_perf_context_print:       total time =   13638.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.618 I build: 4022 (82a7012f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.815 I main: llama backend init
0.00.002.739 I main: load the model and apply lora adapter, if any
0.00.025.231 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.242 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.330 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.341 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.345 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.349 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.350 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.351 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.353 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.355 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.355 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.361 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.365 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.366 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.367 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.376 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.350 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.830 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.264 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.272 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.273 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.274 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.275 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.276 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.278 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.281 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.282 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.283 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.284 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.265.286 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.293 I llama_model_loader: - type  f32:   37 tensors
0.00.265.295 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.527 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.646 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.614 I llm_load_vocab: special tokens cache size = 5
0.00.616.274 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.343 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.344 I llm_load_print_meta: arch             = gemma
0.00.616.345 I llm_load_print_meta: vocab type       = SPM
0.00.616.346 I llm_load_print_meta: n_vocab          = 256000
0.00.616.349 I llm_load_print_meta: n_merges         = 0
0.00.616.350 I llm_load_print_meta: vocab_only       = 0
0.00.616.350 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.350 I llm_load_print_meta: n_embd           = 2048
0.00.616.351 I llm_load_print_meta: n_layer          = 18
0.00.616.416 I llm_load_print_meta: n_head           = 8
0.00.616.423 I llm_load_print_meta: n_head_kv        = 1
0.00.616.424 I llm_load_print_meta: n_rot            = 256
0.00.616.424 I llm_load_print_meta: n_swa            = 0
0.00.616.425 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.426 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.431 I llm_load_print_meta: n_gqa            = 8
0.00.616.436 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.441 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.442 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.443 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.445 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.445 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.446 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.451 I llm_load_print_meta: n_ff             = 16384
0.00.616.452 I llm_load_print_meta: n_expert         = 0
0.00.616.453 I llm_load_print_meta: n_expert_used    = 0
0.00.616.453 I llm_load_print_meta: causal attn      = 1
0.00.616.454 I llm_load_print_meta: pooling type     = 0
0.00.616.455 I llm_load_print_meta: rope type        = 2
0.00.616.455 I llm_load_print_meta: rope scaling     = linear
0.00.616.457 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.457 I llm_load_print_meta: freq_scale_train = 1
0.00.616.468 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.469 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.470 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.470 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.487 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.489 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.489 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.490 I llm_load_print_meta: model type       = 2B
0.00.616.491 I llm_load_print_meta: model ftype      = Q8_0
0.00.616.492 I llm_load_print_meta: model params     = 2.51 B
0.00.616.502 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.616.502 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.503 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.503 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.504 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.512 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.513 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.514 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.519 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.521 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.522 I llm_load_print_meta: max token length = 93
0.00.712.679 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.712.688 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.712.689 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.712.690 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.712.690 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.712.691 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.718.433 I llama_new_context_with_model: n_seq_max     = 1
0.00.718.440 I llama_new_context_with_model: n_ctx         = 4096
0.00.718.441 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.718.441 I llama_new_context_with_model: n_batch       = 2048
0.00.718.441 I llama_new_context_with_model: n_ubatch      = 512
0.00.718.442 I llama_new_context_with_model: flash_attn    = 0
0.00.718.444 I llama_new_context_with_model: freq_base     = 10000.0
0.00.718.445 I llama_new_context_with_model: freq_scale    = 1
0.00.718.446 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.732.869 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.732.907 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.733.036 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.735.620 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.735.624 I llama_new_context_with_model: graph nodes  = 601
0.00.735.625 I llama_new_context_with_model: graph splits = 1
0.00.735.649 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.339.700 I main: llama threadpool init, n_threads = 4
0.01.339.711 I 
0.01.339.813 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.339.817 I 
0.01.340.053 I sampler seed: 2118780800
0.01.340.066 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.340.072 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.340.073 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.340.074 I 
 increasities:

I. The process of photosynthesis is a complex reaction involving multiple steps.
II. Photosynthesis is a crucial process for maintaining the balance of

0.14.777.698 I llama_perf_sampler_print:    sampling time =      48.95 ms /    33 runs   (    1.48 ms per token,   674.17 tokens per second)
0.14.777.713 I llama_perf_context_print:        load time =    1336.87 ms
0.14.777.715 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.777.717 I llama_perf_context_print:        eval time =   13347.21 ms /    32 runs   (  417.10 ms per token,     2.40 tokens per second)
0.14.777.718 I llama_perf_context_print:       total time =   13438.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4022 (82a7012f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.868 I main: llama backend init
0.00.002.799 I main: load the model and apply lora adapter, if any
0.00.025.491 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.502 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.591 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.603 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.607 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.612 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.614 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.616 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.625 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.629 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.630 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.637 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.639 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.640 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.641 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.643 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.524 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.872 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.122 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.131 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.132 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.133 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.135 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.136 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.138 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.141 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.142 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.143 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.144 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.145 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.153 I llama_model_loader: - type  f32:   37 tensors
0.00.266.155 I llama_model_loader: - type q8_0:  127 tensors
0.00.438.101 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.497.696 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.498.650 I llm_load_vocab: special tokens cache size = 5
0.00.597.422 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.597.495 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.597.496 I llm_load_print_meta: arch             = gemma
0.00.597.497 I llm_load_print_meta: vocab type       = SPM
0.00.597.498 I llm_load_print_meta: n_vocab          = 256000
0.00.597.500 I llm_load_print_meta: n_merges         = 0
0.00.597.501 I llm_load_print_meta: vocab_only       = 0
0.00.597.501 I llm_load_print_meta: n_ctx_train      = 8192
0.00.597.502 I llm_load_print_meta: n_embd           = 2048
0.00.597.502 I llm_load_print_meta: n_layer          = 18
0.00.597.565 I llm_load_print_meta: n_head           = 8
0.00.597.572 I llm_load_print_meta: n_head_kv        = 1
0.00.597.573 I llm_load_print_meta: n_rot            = 256
0.00.597.573 I llm_load_print_meta: n_swa            = 0
0.00.597.573 I llm_load_print_meta: n_embd_head_k    = 256
0.00.597.574 I llm_load_print_meta: n_embd_head_v    = 256
0.00.597.578 I llm_load_print_meta: n_gqa            = 8
0.00.597.583 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.597.588 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.597.589 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.597.611 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.597.611 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.597.612 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.597.613 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.597.619 I llm_load_print_meta: n_ff             = 16384
0.00.597.619 I llm_load_print_meta: n_expert         = 0
0.00.597.620 I llm_load_print_meta: n_expert_used    = 0
0.00.597.620 I llm_load_print_meta: causal attn      = 1
0.00.597.624 I llm_load_print_meta: pooling type     = 0
0.00.597.625 I llm_load_print_meta: rope type        = 2
0.00.597.626 I llm_load_print_meta: rope scaling     = linear
0.00.597.628 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.597.628 I llm_load_print_meta: freq_scale_train = 1
0.00.597.629 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.597.638 I llm_load_print_meta: rope_finetuned   = unknown
0.00.597.639 I llm_load_print_meta: ssm_d_conv       = 0
0.00.597.639 I llm_load_print_meta: ssm_d_inner      = 0
0.00.597.639 I llm_load_print_meta: ssm_d_state      = 0
0.00.597.639 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.597.652 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.597.653 I llm_load_print_meta: model type       = 2B
0.00.597.661 I llm_load_print_meta: model ftype      = Q8_0
0.00.597.662 I llm_load_print_meta: model params     = 2.51 B
0.00.597.672 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.597.672 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.597.674 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.597.674 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.597.675 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.597.676 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.597.676 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.597.677 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.597.682 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.597.684 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.597.684 I llm_load_print_meta: max token length = 93
0.00.671.008 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.671.019 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.676.752 I llama_new_context_with_model: n_seq_max     = 1
0.00.676.760 I llama_new_context_with_model: n_ctx         = 4096
0.00.676.760 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.676.761 I llama_new_context_with_model: n_batch       = 2048
0.00.676.761 I llama_new_context_with_model: n_ubatch      = 512
0.00.676.762 I llama_new_context_with_model: flash_attn    = 0
0.00.676.764 I llama_new_context_with_model: freq_base     = 10000.0
0.00.676.765 I llama_new_context_with_model: freq_scale    = 1
0.00.676.766 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.691.332 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.691.373 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.691.506 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.694.048 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.694.052 I llama_new_context_with_model: graph nodes  = 601
0.00.694.052 I llama_new_context_with_model: graph splits = 1
0.00.694.076 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.315.527 I main: llama threadpool init, n_threads = 4
0.01.315.541 I 
0.01.315.644 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.315.647 I 
0.01.315.907 I sampler seed: 2270566262
0.01.315.920 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.315.926 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.315.930 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.315.930 I 
 increasities of the 18th century and their impact on social structure and gender roles. [end of text]


0.09.728.452 I llama_perf_sampler_print:    sampling time =      30.55 ms /    21 runs   (    1.45 ms per token,   687.47 tokens per second)
0.09.728.454 I llama_perf_context_print:        load time =    1312.63 ms
0.09.728.456 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.728.457 I llama_perf_context_print:        eval time =    8355.94 ms /    20 runs   (  417.80 ms per token,     2.39 tokens per second)
0.09.728.458 I llama_perf_context_print:       total time =    8412.93 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m3.910s
user	3m28.386s
sys	0m9.462s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4022 (82a7012f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198896.08 ms
main:    total time = 198896.08 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.613 I build: 4022 (82a7012f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.808 I main: llama backend init
0.00.002.772 I main: load the model and apply lora adapter, if any
0.00.025.489 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.501 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.590 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.601 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.603 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.607 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.608 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.610 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.611 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.612 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.613 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.619 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.623 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.624 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.626 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.627 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.335 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.702 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.133 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.141 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.142 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.143 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.144 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.146 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.147 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.151 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.152 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.153 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.154 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.155 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.163 I llama_model_loader: - type  f32:   37 tensors
0.00.265.166 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.166 I llama_model_loader: - type q6_K:   19 tensors
0.00.442.493 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.711 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.681 I llm_load_vocab: special tokens cache size = 5
0.00.601.594 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.601.668 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.601.672 I llm_load_print_meta: arch             = gemma
0.00.601.673 I llm_load_print_meta: vocab type       = SPM
0.00.601.674 I llm_load_print_meta: n_vocab          = 256000
0.00.601.678 I llm_load_print_meta: n_merges         = 0
0.00.601.678 I llm_load_print_meta: vocab_only       = 0
0.00.601.679 I llm_load_print_meta: n_ctx_train      = 8192
0.00.601.679 I llm_load_print_meta: n_embd           = 2048
0.00.601.679 I llm_load_print_meta: n_layer          = 18
0.00.601.757 I llm_load_print_meta: n_head           = 8
0.00.601.767 I llm_load_print_meta: n_head_kv        = 1
0.00.601.768 I llm_load_print_meta: n_rot            = 256
0.00.601.771 I llm_load_print_meta: n_swa            = 0
0.00.601.771 I llm_load_print_meta: n_embd_head_k    = 256
0.00.601.772 I llm_load_print_meta: n_embd_head_v    = 256
0.00.601.776 I llm_load_print_meta: n_gqa            = 8
0.00.601.781 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.601.787 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.601.788 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.601.789 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.601.790 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.601.791 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.601.791 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.601.797 I llm_load_print_meta: n_ff             = 16384
0.00.601.797 I llm_load_print_meta: n_expert         = 0
0.00.601.798 I llm_load_print_meta: n_expert_used    = 0
0.00.601.799 I llm_load_print_meta: causal attn      = 1
0.00.601.799 I llm_load_print_meta: pooling type     = 0
0.00.601.800 I llm_load_print_meta: rope type        = 2
0.00.601.801 I llm_load_print_meta: rope scaling     = linear
0.00.601.803 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.601.804 I llm_load_print_meta: freq_scale_train = 1
0.00.601.804 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.601.805 I llm_load_print_meta: rope_finetuned   = unknown
0.00.601.805 I llm_load_print_meta: ssm_d_conv       = 0
0.00.601.805 I llm_load_print_meta: ssm_d_inner      = 0
0.00.601.806 I llm_load_print_meta: ssm_d_state      = 0
0.00.601.806 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.601.807 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.601.807 I llm_load_print_meta: model type       = 2B
0.00.601.809 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.601.809 I llm_load_print_meta: model params     = 2.51 B
0.00.601.819 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.601.820 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.601.821 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.601.822 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.601.822 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.601.823 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.601.823 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.601.824 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.601.830 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.601.831 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.601.832 I llm_load_print_meta: max token length = 93
0.00.666.503 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.666.511 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.666.512 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.666.513 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.666.513 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.666.514 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.672.376 I llama_new_context_with_model: n_seq_max     = 1
0.00.672.384 I llama_new_context_with_model: n_ctx         = 4096
0.00.672.384 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.672.384 I llama_new_context_with_model: n_batch       = 2048
0.00.672.385 I llama_new_context_with_model: n_ubatch      = 512
0.00.672.385 I llama_new_context_with_model: flash_attn    = 0
0.00.672.388 I llama_new_context_with_model: freq_base     = 10000.0
0.00.672.388 I llama_new_context_with_model: freq_scale    = 1
0.00.672.389 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.686.865 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.686.903 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.687.039 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.689.580 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.689.584 I llama_new_context_with_model: graph nodes  = 601
0.00.689.584 I llama_new_context_with_model: graph splits = 1
0.00.689.608 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.260.806 I main: llama threadpool init, n_threads = 4
0.01.260.820 I 
0.01.260.923 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.260.927 I 
0.01.261.161 I sampler seed: 1287015884
0.01.261.174 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.261.180 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.261.183 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.261.184 I 
 increasities

**Answer Key**

1. Precognition
2. Clairvoyance
3. Telekinesis
4. Premonition
5. Astral

0.12.114.871 I llama_perf_sampler_print:    sampling time =      48.93 ms /    33 runs   (    1.48 ms per token,   674.38 tokens per second)
0.12.114.874 I llama_perf_context_print:        load time =    1257.94 ms
0.12.114.876 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.114.878 I llama_perf_context_print:        eval time =   10764.67 ms /    32 runs   (  336.40 ms per token,     2.97 tokens per second)
0.12.114.880 I llama_perf_context_print:       total time =   10854.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4022 (82a7012f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199302.63 ms
main:    total time = 199302.63 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.615 I build: 4022 (82a7012f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.002.797 I main: load the model and apply lora adapter, if any
0.00.025.471 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.580 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.595 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.597 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.603 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.606 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.609 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.611 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.613 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.616 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.624 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.626 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.628 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.630 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.632 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.503 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.261 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.756 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.764 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.766 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.767 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.769 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.771 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.772 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.778 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.780 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.788 I llama_model_loader: - type  f32:   37 tensors
0.00.265.791 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.792 I llama_model_loader: - type q6_K:   19 tensors
0.00.453.681 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.523.842 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.524.799 I llm_load_vocab: special tokens cache size = 5
0.00.623.802 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.623.871 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.623.872 I llm_load_print_meta: arch             = gemma
0.00.623.873 I llm_load_print_meta: vocab type       = SPM
0.00.623.873 I llm_load_print_meta: n_vocab          = 256000
0.00.623.876 I llm_load_print_meta: n_merges         = 0
0.00.623.876 I llm_load_print_meta: vocab_only       = 0
0.00.623.876 I llm_load_print_meta: n_ctx_train      = 8192
0.00.623.877 I llm_load_print_meta: n_embd           = 2048
0.00.623.877 I llm_load_print_meta: n_layer          = 18
0.00.623.958 I llm_load_print_meta: n_head           = 8
0.00.623.969 I llm_load_print_meta: n_head_kv        = 1
0.00.623.970 I llm_load_print_meta: n_rot            = 256
0.00.623.971 I llm_load_print_meta: n_swa            = 0
0.00.623.972 I llm_load_print_meta: n_embd_head_k    = 256
0.00.623.972 I llm_load_print_meta: n_embd_head_v    = 256
0.00.623.979 I llm_load_print_meta: n_gqa            = 8
0.00.623.986 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.623.997 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.623.999 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.624.001 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.624.002 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.624.003 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.624.004 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.624.011 I llm_load_print_meta: n_ff             = 16384
0.00.624.015 I llm_load_print_meta: n_expert         = 0
0.00.624.016 I llm_load_print_meta: n_expert_used    = 0
0.00.624.017 I llm_load_print_meta: causal attn      = 1
0.00.624.018 I llm_load_print_meta: pooling type     = 0
0.00.624.018 I llm_load_print_meta: rope type        = 2
0.00.624.019 I llm_load_print_meta: rope scaling     = linear
0.00.624.021 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.624.022 I llm_load_print_meta: freq_scale_train = 1
0.00.624.026 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.624.026 I llm_load_print_meta: rope_finetuned   = unknown
0.00.624.027 I llm_load_print_meta: ssm_d_conv       = 0
0.00.624.027 I llm_load_print_meta: ssm_d_inner      = 0
0.00.624.027 I llm_load_print_meta: ssm_d_state      = 0
0.00.624.028 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.624.028 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.624.029 I llm_load_print_meta: model type       = 2B
0.00.624.030 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.624.030 I llm_load_print_meta: model params     = 2.51 B
0.00.624.040 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.624.041 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.624.042 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.624.043 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.624.052 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.624.054 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.624.055 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.624.056 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.624.063 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.624.066 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.624.066 I llm_load_print_meta: max token length = 93
0.00.684.278 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.690.473 I llama_new_context_with_model: n_seq_max     = 1
0.00.690.480 I llama_new_context_with_model: n_ctx         = 4096
0.00.690.480 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.690.480 I llama_new_context_with_model: n_batch       = 2048
0.00.690.481 I llama_new_context_with_model: n_ubatch      = 512
0.00.690.481 I llama_new_context_with_model: flash_attn    = 0
0.00.690.483 I llama_new_context_with_model: freq_base     = 10000.0
0.00.690.484 I llama_new_context_with_model: freq_scale    = 1
0.00.690.485 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.705.353 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.705.393 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.705.522 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.708.102 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.708.106 I llama_new_context_with_model: graph nodes  = 601
0.00.708.106 I llama_new_context_with_model: graph splits = 1
0.00.708.130 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.278.887 I main: llama threadpool init, n_threads = 4
0.01.278.900 I 
0.01.279.016 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.279.020 I 
0.01.279.255 I sampler seed: 2482363590
0.01.279.268 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.279.277 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.279.281 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.279.282 I 
 fufilling with the latest trends in web design.

**1. Responsive Design:**
- Adaptive design that adjusts to different screen sizes and devices.
-

0.12.142.714 I llama_perf_sampler_print:    sampling time =      48.98 ms /    33 runs   (    1.48 ms per token,   673.81 tokens per second)
0.12.142.730 I llama_perf_context_print:        load time =    1275.99 ms
0.12.142.732 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.142.734 I llama_perf_context_print:        eval time =   10773.97 ms /    32 runs   (  336.69 ms per token,     2.97 tokens per second)
0.12.142.734 I llama_perf_context_print:       total time =   10863.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.363s
user	50m8.700s
sys	0m6.357s
