+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.617 I build: 4022 (82a7012f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.834 I main: llama backend init
0.00.001.919 I main: load the model and apply lora adapter, if any
0.00.023.956 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.966 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.973 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.978 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.979 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.984 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.985 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.985 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.986 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.987 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.987 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.992 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.992 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.993 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.993 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.994 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.987 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.756 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.543 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.549 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.550 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.550 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.551 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.552 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.553 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.555 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.556 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.556 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.557 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.558 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.561 I llama_model_loader: - type  f32:   37 tensors
0.00.133.562 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.422 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.626 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.166 I llm_load_vocab: special tokens cache size = 5
0.00.268.587 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.601 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.602 I llm_load_print_meta: arch             = gemma
0.00.268.603 I llm_load_print_meta: vocab type       = SPM
0.00.268.603 I llm_load_print_meta: n_vocab          = 256000
0.00.268.604 I llm_load_print_meta: n_merges         = 0
0.00.268.604 I llm_load_print_meta: vocab_only       = 0
0.00.268.604 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.605 I llm_load_print_meta: n_embd           = 2048
0.00.268.605 I llm_load_print_meta: n_layer          = 18
0.00.268.617 I llm_load_print_meta: n_head           = 8
0.00.268.618 I llm_load_print_meta: n_head_kv        = 1
0.00.268.618 I llm_load_print_meta: n_rot            = 256
0.00.268.619 I llm_load_print_meta: n_swa            = 0
0.00.268.619 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.620 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.621 I llm_load_print_meta: n_gqa            = 8
0.00.268.622 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.623 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.623 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.624 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.625 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.625 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.625 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.627 I llm_load_print_meta: n_ff             = 16384
0.00.268.628 I llm_load_print_meta: n_expert         = 0
0.00.268.628 I llm_load_print_meta: n_expert_used    = 0
0.00.268.628 I llm_load_print_meta: causal attn      = 1
0.00.268.629 I llm_load_print_meta: pooling type     = 0
0.00.268.630 I llm_load_print_meta: rope type        = 2
0.00.268.630 I llm_load_print_meta: rope scaling     = linear
0.00.268.632 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.632 I llm_load_print_meta: freq_scale_train = 1
0.00.268.632 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.634 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.634 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.634 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.634 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.635 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.635 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.636 I llm_load_print_meta: model type       = 2B
0.00.268.637 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.638 I llm_load_print_meta: model params     = 2.51 B
0.00.268.638 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.639 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.639 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.640 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.640 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.640 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.641 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.641 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.641 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.642 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.642 I llm_load_print_meta: max token length = 93
0.00.369.606 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.369.613 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.369.614 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.369.615 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.369.615 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.369.616 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.374.868 I llama_new_context_with_model: n_seq_max     = 1
0.00.374.874 I llama_new_context_with_model: n_ctx         = 4096
0.00.374.874 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.374.874 I llama_new_context_with_model: n_batch       = 2048
0.00.374.875 I llama_new_context_with_model: n_ubatch      = 512
0.00.374.875 I llama_new_context_with_model: flash_attn    = 0
0.00.374.878 I llama_new_context_with_model: freq_base     = 10000.0
0.00.374.879 I llama_new_context_with_model: freq_scale    = 1
0.00.374.880 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.389.214 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.389.228 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.315 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.559 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.390.565 I llama_new_context_with_model: graph nodes  = 601
0.00.390.565 I llama_new_context_with_model: graph splits = 1
0.00.390.566 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.372 I main: llama threadpool init, n_threads = 4
0.00.475.385 I 
0.00.475.460 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.475.460 I 
0.00.475.500 I sampler seed: 1028239971
0.00.475.508 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.511 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.511 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.511 I 
 increasities

**I. Introduction**

The study of medieval culture is crucial for understanding the development and impact of our modern world. Medieval culture provides a rich

0.02.723.832 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6781.75 tokens per second)
0.02.723.834 I llama_perf_context_print:        load time =     473.43 ms
0.02.723.835 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.723.836 I llama_perf_context_print:        eval time =    2229.78 ms /    32 runs   (   69.68 ms per token,    14.35 tokens per second)
0.02.723.850 I llama_perf_context_print:       total time =    2248.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.562 I build: 4022 (82a7012f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.764 I main: llama backend init
0.00.001.848 I main: load the model and apply lora adapter, if any
0.00.022.434 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.447 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.454 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.455 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.459 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.460 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.461 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.462 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.463 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.463 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.468 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.468 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.469 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.469 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.471 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.786 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.440 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.699 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.705 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.706 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.706 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.707 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.708 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.709 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.711 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.712 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.713 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.714 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.715 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.718 I llama_model_loader: - type  f32:   37 tensors
0.00.133.719 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.835 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.863 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.478 I llm_load_vocab: special tokens cache size = 5
0.00.274.157 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.173 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.173 I llm_load_print_meta: arch             = gemma
0.00.274.174 I llm_load_print_meta: vocab type       = SPM
0.00.274.175 I llm_load_print_meta: n_vocab          = 256000
0.00.274.175 I llm_load_print_meta: n_merges         = 0
0.00.274.175 I llm_load_print_meta: vocab_only       = 0
0.00.274.176 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.176 I llm_load_print_meta: n_embd           = 2048
0.00.274.176 I llm_load_print_meta: n_layer          = 18
0.00.274.187 I llm_load_print_meta: n_head           = 8
0.00.274.188 I llm_load_print_meta: n_head_kv        = 1
0.00.274.189 I llm_load_print_meta: n_rot            = 256
0.00.274.189 I llm_load_print_meta: n_swa            = 0
0.00.274.189 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.190 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.190 I llm_load_print_meta: n_gqa            = 8
0.00.274.192 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.192 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.193 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.195 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.196 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.196 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.196 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.197 I llm_load_print_meta: n_ff             = 16384
0.00.274.198 I llm_load_print_meta: n_expert         = 0
0.00.274.198 I llm_load_print_meta: n_expert_used    = 0
0.00.274.198 I llm_load_print_meta: causal attn      = 1
0.00.274.199 I llm_load_print_meta: pooling type     = 0
0.00.274.200 I llm_load_print_meta: rope type        = 2
0.00.274.200 I llm_load_print_meta: rope scaling     = linear
0.00.274.202 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.203 I llm_load_print_meta: freq_scale_train = 1
0.00.274.203 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.204 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.204 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.204 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.205 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.205 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.205 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.206 I llm_load_print_meta: model type       = 2B
0.00.274.207 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.208 I llm_load_print_meta: model params     = 2.51 B
0.00.274.208 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.210 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.210 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.211 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.211 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.211 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.212 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.212 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.213 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.213 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.214 I llm_load_print_meta: max token length = 93
0.00.371.193 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.376.520 I llama_new_context_with_model: n_seq_max     = 1
0.00.376.527 I llama_new_context_with_model: n_ctx         = 4096
0.00.376.527 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.376.527 I llama_new_context_with_model: n_batch       = 2048
0.00.376.528 I llama_new_context_with_model: n_ubatch      = 512
0.00.376.529 I llama_new_context_with_model: flash_attn    = 0
0.00.376.532 I llama_new_context_with_model: freq_base     = 10000.0
0.00.376.532 I llama_new_context_with_model: freq_scale    = 1
0.00.376.533 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.391.335 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.391.353 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.391.445 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.392.748 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.392.755 I llama_new_context_with_model: graph nodes  = 601
0.00.392.756 I llama_new_context_with_model: graph splits = 1
0.00.392.757 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.696 I main: llama threadpool init, n_threads = 4
0.00.474.708 I 
0.00.474.781 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.474.784 I 
0.00.474.826 I sampler seed: 1097139362
0.00.474.837 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.839 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.841 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.842 I 
 increabling and truncation.

**1. Decremental Analysis:**

* In decremental analysis, the focus is on the difference between successive measurements.


0.02.686.181 I llama_perf_sampler_print:    sampling time =       4.99 ms /    33 runs   (    0.15 ms per token,  6610.58 tokens per second)
0.02.686.183 I llama_perf_context_print:        load time =     472.82 ms
0.02.686.184 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.686.187 I llama_perf_context_print:        eval time =    2191.64 ms /    32 runs   (   68.49 ms per token,    14.60 tokens per second)
0.02.686.187 I llama_perf_context_print:       total time =    2211.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.546 I build: 4022 (82a7012f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.001.839 I main: load the model and apply lora adapter, if any
0.00.022.442 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.454 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.462 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.472 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.474 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.478 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.479 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.480 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.480 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.481 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.482 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.487 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.488 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.488 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.489 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.489 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.414 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.474 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.297 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.303 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.304 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.304 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.305 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.306 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.307 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.309 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.309 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.310 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.311 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.312 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.315 I llama_model_loader: - type  f32:   37 tensors
0.00.133.316 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.494 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.933 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.531 I llm_load_vocab: special tokens cache size = 5
0.00.274.100 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.117 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.117 I llm_load_print_meta: arch             = gemma
0.00.274.118 I llm_load_print_meta: vocab type       = SPM
0.00.274.119 I llm_load_print_meta: n_vocab          = 256000
0.00.274.120 I llm_load_print_meta: n_merges         = 0
0.00.274.131 I llm_load_print_meta: vocab_only       = 0
0.00.274.132 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.132 I llm_load_print_meta: n_embd           = 2048
0.00.274.133 I llm_load_print_meta: n_layer          = 18
0.00.274.146 I llm_load_print_meta: n_head           = 8
0.00.274.147 I llm_load_print_meta: n_head_kv        = 1
0.00.274.148 I llm_load_print_meta: n_rot            = 256
0.00.274.148 I llm_load_print_meta: n_swa            = 0
0.00.274.149 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.149 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.150 I llm_load_print_meta: n_gqa            = 8
0.00.274.151 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.152 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.153 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.155 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.156 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.157 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.157 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.158 I llm_load_print_meta: n_ff             = 16384
0.00.274.158 I llm_load_print_meta: n_expert         = 0
0.00.274.161 I llm_load_print_meta: n_expert_used    = 0
0.00.274.162 I llm_load_print_meta: causal attn      = 1
0.00.274.162 I llm_load_print_meta: pooling type     = 0
0.00.274.162 I llm_load_print_meta: rope type        = 2
0.00.274.163 I llm_load_print_meta: rope scaling     = linear
0.00.274.165 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.165 I llm_load_print_meta: freq_scale_train = 1
0.00.274.166 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.166 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.167 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.167 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.167 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.168 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.168 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.169 I llm_load_print_meta: model type       = 2B
0.00.274.170 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.171 I llm_load_print_meta: model params     = 2.51 B
0.00.274.172 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.172 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.173 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.173 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.174 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.174 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.174 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.175 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.175 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.176 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.176 I llm_load_print_meta: max token length = 93
0.00.368.949 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.368.955 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.368.956 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.368.957 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.368.957 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.368.958 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.374.161 I llama_new_context_with_model: n_seq_max     = 1
0.00.374.168 I llama_new_context_with_model: n_ctx         = 4096
0.00.374.168 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.374.169 I llama_new_context_with_model: n_batch       = 2048
0.00.374.169 I llama_new_context_with_model: n_ubatch      = 512
0.00.374.170 I llama_new_context_with_model: flash_attn    = 0
0.00.374.172 I llama_new_context_with_model: freq_base     = 10000.0
0.00.374.173 I llama_new_context_with_model: freq_scale    = 1
0.00.374.174 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.389.201 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.389.216 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.306 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.542 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.390.549 I llama_new_context_with_model: graph nodes  = 601
0.00.390.549 I llama_new_context_with_model: graph splits = 1
0.00.390.550 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.035 I main: llama threadpool init, n_threads = 4
0.00.477.048 I 
0.00.477.119 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.477.122 I 
0.00.477.167 I sampler seed: 2284880179
0.00.477.178 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.181 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.477.182 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.477.182 I 
 increably! [end of text]


0.00.749.887 I llama_perf_sampler_print:    sampling time =       0.60 ms /     5 runs   (    0.12 ms per token,  8264.46 tokens per second)
0.00.749.889 I llama_perf_context_print:        load time =     475.17 ms
0.00.749.890 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.749.891 I llama_perf_context_print:        eval time =     269.39 ms /     4 runs   (   67.35 ms per token,    14.85 tokens per second)
0.00.749.892 I llama_perf_context_print:       total time =     272.86 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.572 I build: 4022 (82a7012f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.792 I main: llama backend init
0.00.001.872 I main: load the model and apply lora adapter, if any
0.00.022.472 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.482 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.491 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.501 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.502 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.505 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.506 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.507 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.507 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.508 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.508 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.512 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.513 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.513 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.514 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.514 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.988 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.694 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.602 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.608 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.609 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.609 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.614 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.615 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.616 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.620 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.620 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.625 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.625 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.626 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.630 I llama_model_loader: - type  f32:   37 tensors
0.00.132.631 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.092 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.865 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.411 I llm_load_vocab: special tokens cache size = 5
0.00.269.758 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.778 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.780 I llm_load_print_meta: arch             = gemma
0.00.269.781 I llm_load_print_meta: vocab type       = SPM
0.00.269.782 I llm_load_print_meta: n_vocab          = 256000
0.00.269.782 I llm_load_print_meta: n_merges         = 0
0.00.269.783 I llm_load_print_meta: vocab_only       = 0
0.00.269.783 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.783 I llm_load_print_meta: n_embd           = 2048
0.00.269.784 I llm_load_print_meta: n_layer          = 18
0.00.269.798 I llm_load_print_meta: n_head           = 8
0.00.269.799 I llm_load_print_meta: n_head_kv        = 1
0.00.269.800 I llm_load_print_meta: n_rot            = 256
0.00.269.800 I llm_load_print_meta: n_swa            = 0
0.00.269.800 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.801 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.801 I llm_load_print_meta: n_gqa            = 8
0.00.269.803 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.803 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.804 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.805 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.806 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.807 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.807 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.808 I llm_load_print_meta: n_ff             = 16384
0.00.269.809 I llm_load_print_meta: n_expert         = 0
0.00.269.810 I llm_load_print_meta: n_expert_used    = 0
0.00.269.810 I llm_load_print_meta: causal attn      = 1
0.00.269.811 I llm_load_print_meta: pooling type     = 0
0.00.269.811 I llm_load_print_meta: rope type        = 2
0.00.269.830 I llm_load_print_meta: rope scaling     = linear
0.00.269.832 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.833 I llm_load_print_meta: freq_scale_train = 1
0.00.269.833 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.833 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.834 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.835 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.835 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.835 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.836 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.836 I llm_load_print_meta: model type       = 2B
0.00.269.837 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.838 I llm_load_print_meta: model params     = 2.51 B
0.00.269.838 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.839 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.840 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.840 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.840 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.841 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.841 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.842 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.842 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.843 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.843 I llm_load_print_meta: max token length = 93
0.00.341.606 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.341.614 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.346.671 I llama_new_context_with_model: n_seq_max     = 1
0.00.346.678 I llama_new_context_with_model: n_ctx         = 4096
0.00.346.678 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.346.679 I llama_new_context_with_model: n_batch       = 2048
0.00.346.679 I llama_new_context_with_model: n_ubatch      = 512
0.00.346.680 I llama_new_context_with_model: flash_attn    = 0
0.00.346.682 I llama_new_context_with_model: freq_base     = 10000.0
0.00.346.683 I llama_new_context_with_model: freq_scale    = 1
0.00.346.684 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.360.705 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.360.721 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.360.813 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.362.012 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.362.018 I llama_new_context_with_model: graph nodes  = 601
0.00.362.018 I llama_new_context_with_model: graph splits = 1
0.00.362.020 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.447.722 I main: llama threadpool init, n_threads = 4
0.00.447.735 I 
0.00.447.810 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.447.813 I 
0.00.447.855 I sampler seed: 1975480728
0.00.447.867 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.447.874 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.447.875 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.447.877 I 
 increasively, oblivious to the implications of her actions. [end of text]


0.01.328.521 I llama_perf_sampler_print:    sampling time =       1.81 ms /    13 runs   (    0.14 ms per token,  7162.53 tokens per second)
0.01.328.523 I llama_perf_context_print:        load time =     445.83 ms
0.01.328.524 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.328.526 I llama_perf_context_print:        eval time =     873.23 ms /    12 runs   (   72.77 ms per token,    13.74 tokens per second)
0.01.328.527 I llama_perf_context_print:       total time =     880.81 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.040s
user	0m25.279s
sys	0m9.498s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4022 (82a7012f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31971.82 ms
main:    total time = 31971.82 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.596 I build: 4022 (82a7012f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.803 I main: llama backend init
0.00.001.892 I main: load the model and apply lora adapter, if any
0.00.022.113 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.122 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.130 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.135 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.138 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.143 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.143 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.144 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.145 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.146 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.147 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.150 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.150 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.152 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.152 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.153 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.425 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.610 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.528 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.534 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.535 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.536 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.537 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.538 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.539 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.543 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.543 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.544 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.545 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.546 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.550 I llama_model_loader: - type  f32:   37 tensors
0.00.132.551 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.552 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.165 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.385 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.944 I llm_load_vocab: special tokens cache size = 5
0.00.267.561 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.575 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.575 I llm_load_print_meta: arch             = gemma
0.00.267.576 I llm_load_print_meta: vocab type       = SPM
0.00.267.577 I llm_load_print_meta: n_vocab          = 256000
0.00.267.577 I llm_load_print_meta: n_merges         = 0
0.00.267.577 I llm_load_print_meta: vocab_only       = 0
0.00.267.578 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.578 I llm_load_print_meta: n_embd           = 2048
0.00.267.578 I llm_load_print_meta: n_layer          = 18
0.00.267.590 I llm_load_print_meta: n_head           = 8
0.00.267.591 I llm_load_print_meta: n_head_kv        = 1
0.00.267.592 I llm_load_print_meta: n_rot            = 256
0.00.267.592 I llm_load_print_meta: n_swa            = 0
0.00.267.592 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.593 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.594 I llm_load_print_meta: n_gqa            = 8
0.00.267.595 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.596 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.596 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.597 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.598 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.598 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.598 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.599 I llm_load_print_meta: n_ff             = 16384
0.00.267.599 I llm_load_print_meta: n_expert         = 0
0.00.267.600 I llm_load_print_meta: n_expert_used    = 0
0.00.267.600 I llm_load_print_meta: causal attn      = 1
0.00.267.601 I llm_load_print_meta: pooling type     = 0
0.00.267.601 I llm_load_print_meta: rope type        = 2
0.00.267.601 I llm_load_print_meta: rope scaling     = linear
0.00.267.603 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.603 I llm_load_print_meta: freq_scale_train = 1
0.00.267.603 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.604 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.604 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.604 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.604 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.605 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.605 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.605 I llm_load_print_meta: model type       = 2B
0.00.267.606 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.607 I llm_load_print_meta: model params     = 2.51 B
0.00.267.607 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.608 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.608 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.608 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.609 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.609 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.609 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.610 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.610 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.610 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.610 I llm_load_print_meta: max token length = 93
0.00.329.294 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.329.300 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.329.301 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.329.301 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.329.302 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.329.302 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.334.303 I llama_new_context_with_model: n_seq_max     = 1
0.00.334.308 I llama_new_context_with_model: n_ctx         = 4096
0.00.334.309 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.334.309 I llama_new_context_with_model: n_batch       = 2048
0.00.334.309 I llama_new_context_with_model: n_ubatch      = 512
0.00.334.310 I llama_new_context_with_model: flash_attn    = 0
0.00.334.313 I llama_new_context_with_model: freq_base     = 10000.0
0.00.334.313 I llama_new_context_with_model: freq_scale    = 1
0.00.334.314 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.348.369 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.348.384 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.348.472 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.687 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.349.693 I llama_new_context_with_model: graph nodes  = 601
0.00.349.694 I llama_new_context_with_model: graph splits = 1
0.00.349.695 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.425.135 I main: llama threadpool init, n_threads = 4
0.00.425.147 I 
0.00.425.219 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.425.222 I 
0.00.425.268 I sampler seed: 412775503
0.00.425.279 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.425.282 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.425.282 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.425.283 I 
 seconally in this question.

I am unable to answer the question as I do not have access to external websites or specific information regarding your location. Therefore,

0.02.101.591 I llama_perf_sampler_print:    sampling time =       5.37 ms /    33 runs   (    0.16 ms per token,  6147.54 tokens per second)
0.02.101.593 I llama_perf_context_print:        load time =     423.22 ms
0.02.101.594 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.101.595 I llama_perf_context_print:        eval time =    1657.15 ms /    32 runs   (   51.79 ms per token,    19.31 tokens per second)
0.02.101.596 I llama_perf_context_print:       total time =    1676.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4022 (82a7012f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32039.12 ms
main:    total time = 32039.12 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.531 I build: 4022 (82a7012f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.001.820 I main: load the model and apply lora adapter, if any
0.00.022.346 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.359 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.365 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.366 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.370 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.373 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.374 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.374 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.375 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.375 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.379 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.380 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.380 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.381 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.381 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.104 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.931 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.830 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.836 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.836 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.837 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.838 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.838 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.839 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.842 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.843 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.846 I llama_model_loader: - type  f32:   37 tensors
0.00.132.847 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.848 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.252 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.735 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.329 I llm_load_vocab: special tokens cache size = 5
0.00.270.889 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.905 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.905 I llm_load_print_meta: arch             = gemma
0.00.270.906 I llm_load_print_meta: vocab type       = SPM
0.00.270.906 I llm_load_print_meta: n_vocab          = 256000
0.00.270.907 I llm_load_print_meta: n_merges         = 0
0.00.270.907 I llm_load_print_meta: vocab_only       = 0
0.00.270.907 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.908 I llm_load_print_meta: n_embd           = 2048
0.00.270.908 I llm_load_print_meta: n_layer          = 18
0.00.270.919 I llm_load_print_meta: n_head           = 8
0.00.270.920 I llm_load_print_meta: n_head_kv        = 1
0.00.270.921 I llm_load_print_meta: n_rot            = 256
0.00.270.921 I llm_load_print_meta: n_swa            = 0
0.00.270.921 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.922 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.922 I llm_load_print_meta: n_gqa            = 8
0.00.270.923 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.924 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.925 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.926 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.927 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.927 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.928 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.929 I llm_load_print_meta: n_ff             = 16384
0.00.270.929 I llm_load_print_meta: n_expert         = 0
0.00.270.929 I llm_load_print_meta: n_expert_used    = 0
0.00.270.929 I llm_load_print_meta: causal attn      = 1
0.00.270.930 I llm_load_print_meta: pooling type     = 0
0.00.270.930 I llm_load_print_meta: rope type        = 2
0.00.270.930 I llm_load_print_meta: rope scaling     = linear
0.00.270.932 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.932 I llm_load_print_meta: freq_scale_train = 1
0.00.270.932 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.933 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.933 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.933 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.934 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.934 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.934 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.934 I llm_load_print_meta: model type       = 2B
0.00.270.935 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.270.936 I llm_load_print_meta: model params     = 2.51 B
0.00.270.937 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.270.937 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.937 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.938 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.938 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.938 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.939 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.939 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.940 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.940 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.940 I llm_load_print_meta: max token length = 93
0.00.329.603 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.334.728 I llama_new_context_with_model: n_seq_max     = 1
0.00.334.733 I llama_new_context_with_model: n_ctx         = 4096
0.00.334.734 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.334.734 I llama_new_context_with_model: n_batch       = 2048
0.00.334.735 I llama_new_context_with_model: n_ubatch      = 512
0.00.334.735 I llama_new_context_with_model: flash_attn    = 0
0.00.334.738 I llama_new_context_with_model: freq_base     = 10000.0
0.00.334.739 I llama_new_context_with_model: freq_scale    = 1
0.00.334.740 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.349.477 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.349.492 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.349.588 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.350.893 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.350.899 I llama_new_context_with_model: graph nodes  = 601
0.00.350.899 I llama_new_context_with_model: graph splits = 1
0.00.350.901 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.432.310 I main: llama threadpool init, n_threads = 4
0.00.432.325 I 
0.00.432.400 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.432.403 I 
0.00.432.444 I sampler seed: 1932409902
0.00.432.455 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.432.462 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.432.465 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.432.465 I 
 increasities. The sentence should read:

The company is committed to fostering a work culture that celebrates diversity and inclusion, creating a welcoming environment for all employees.

0.02.050.486 I llama_perf_sampler_print:    sampling time =       4.79 ms /    33 runs   (    0.15 ms per token,  6893.67 tokens per second)
0.02.050.488 I llama_perf_context_print:        load time =     430.47 ms
0.02.050.489 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.050.491 I llama_perf_context_print:        eval time =    1598.49 ms /    32 runs   (   49.95 ms per token,    20.02 tokens per second)
0.02.050.491 I llama_perf_context_print:       total time =    1618.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.968s
user	8m14.885s
sys	0m6.686s
