+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.643 I build: 3808 (8241bc71) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.840 I main: llama backend init
0.00.002.793 I main: load the model and apply lora adapter, if any
0.00.025.280 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.477 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.568 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.581 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.582 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.586 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.590 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.591 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.592 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.592 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.593 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.600 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.601 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.602 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.606 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.606 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.015 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.488 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.699 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.708 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.710 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.710 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.711 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.712 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.713 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.718 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.719 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.720 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.721 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.198.722 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.730 I llama_model_loader: - type  f32:   37 tensors
0.00.198.734 I llama_model_loader: - type q8_0:  127 tensors
0.00.487.878 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.488.887 I llm_load_vocab: special tokens cache size = 5
0.00.547.356 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.547.410 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.547.411 I llm_load_print_meta: arch             = gemma
0.00.547.412 I llm_load_print_meta: vocab type       = SPM
0.00.547.413 I llm_load_print_meta: n_vocab          = 256000
0.00.547.415 I llm_load_print_meta: n_merges         = 0
0.00.547.415 I llm_load_print_meta: vocab_only       = 0
0.00.547.416 I llm_load_print_meta: n_ctx_train      = 8192
0.00.547.416 I llm_load_print_meta: n_embd           = 2048
0.00.547.417 I llm_load_print_meta: n_layer          = 18
0.00.547.451 I llm_load_print_meta: n_head           = 8
0.00.547.457 I llm_load_print_meta: n_head_kv        = 1
0.00.547.458 I llm_load_print_meta: n_rot            = 256
0.00.547.458 I llm_load_print_meta: n_swa            = 0
0.00.547.459 I llm_load_print_meta: n_embd_head_k    = 256
0.00.547.459 I llm_load_print_meta: n_embd_head_v    = 256
0.00.547.464 I llm_load_print_meta: n_gqa            = 8
0.00.547.468 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.547.473 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.547.474 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.547.476 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.547.476 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.547.477 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.547.477 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.547.482 I llm_load_print_meta: n_ff             = 16384
0.00.547.483 I llm_load_print_meta: n_expert         = 0
0.00.547.504 I llm_load_print_meta: n_expert_used    = 0
0.00.547.505 I llm_load_print_meta: causal attn      = 1
0.00.547.505 I llm_load_print_meta: pooling type     = 0
0.00.547.506 I llm_load_print_meta: rope type        = 2
0.00.547.506 I llm_load_print_meta: rope scaling     = linear
0.00.547.507 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.547.508 I llm_load_print_meta: freq_scale_train = 1
0.00.547.508 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.547.518 I llm_load_print_meta: rope_finetuned   = unknown
0.00.547.518 I llm_load_print_meta: ssm_d_conv       = 0
0.00.547.519 I llm_load_print_meta: ssm_d_inner      = 0
0.00.547.527 I llm_load_print_meta: ssm_d_state      = 0
0.00.547.528 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.547.529 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.547.530 I llm_load_print_meta: model type       = 2B
0.00.547.538 I llm_load_print_meta: model ftype      = Q8_0
0.00.547.539 I llm_load_print_meta: model params     = 2.51 B
0.00.547.540 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.547.542 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.547.542 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.547.542 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.547.543 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.547.543 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.547.544 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.547.544 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.547.545 I llm_load_print_meta: max token length = 93
0.00.547.712 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.649.671 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.649.682 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.649.683 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.649.684 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.649.684 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.649.685 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.655.347 I llama_new_context_with_model: n_ctx      = 8192
0.00.655.354 I llama_new_context_with_model: n_batch    = 2048
0.00.655.355 I llama_new_context_with_model: n_ubatch   = 512
0.00.655.355 I llama_new_context_with_model: flash_attn = 0
0.00.655.357 I llama_new_context_with_model: freq_base  = 10000.0
0.00.655.358 I llama_new_context_with_model: freq_scale = 1
0.00.684.897 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.684.942 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.685.052 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.686.482 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.686.488 I llama_new_context_with_model: graph nodes  = 601
0.00.686.488 I llama_new_context_with_model: graph splits = 1
0.00.686.505 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.297.197 I main: llama threadpool init, n_threads = 4
0.01.297.208 I 
0.01.297.296 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.297.297 I 
0.01.297.454 I sampler seed: 2934681398
0.01.297.465 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.297.469 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.297.470 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities.

I am unable to generate a response as requested as I am unable to access or generate inappropriate or sexually suggestive content. [end of text]


0.13.158.835 I llama_perf_sampler_print:    sampling time =      41.99 ms /    29 runs   (    1.45 ms per token,   690.64 tokens per second)
0.13.158.839 I llama_perf_context_print:        load time =    1294.32 ms
0.13.158.841 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.158.843 I llama_perf_context_print:        eval time =   11789.57 ms /    28 runs   (  421.06 ms per token,     2.37 tokens per second)
0.13.158.844 I llama_perf_context_print:       total time =   11861.65 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.638 I build: 3808 (8241bc71) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.831 I main: llama backend init
0.00.002.799 I main: load the model and apply lora adapter, if any
0.00.027.962 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.028.059 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.028.074 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.028.078 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.028.082 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.028.084 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.028.086 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.028.086 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.028.087 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.028.088 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.028.095 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.028.096 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.028.097 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.028.097 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.028.098 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.098.361 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.188.469 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.200.744 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.200.754 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.200.755 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.200.756 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.200.757 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.200.758 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.200.759 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.200.762 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.200.763 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.200.764 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.200.765 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.200.766 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.200.775 I llama_model_loader: - type  f32:   37 tensors
0.00.200.780 I llama_model_loader: - type q8_0:  127 tensors
0.00.468.333 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.469.370 I llm_load_vocab: special tokens cache size = 5
0.00.527.727 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.527.782 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.527.783 I llm_load_print_meta: arch             = gemma
0.00.527.784 I llm_load_print_meta: vocab type       = SPM
0.00.527.784 I llm_load_print_meta: n_vocab          = 256000
0.00.527.787 I llm_load_print_meta: n_merges         = 0
0.00.527.787 I llm_load_print_meta: vocab_only       = 0
0.00.527.788 I llm_load_print_meta: n_ctx_train      = 8192
0.00.527.788 I llm_load_print_meta: n_embd           = 2048
0.00.527.788 I llm_load_print_meta: n_layer          = 18
0.00.527.823 I llm_load_print_meta: n_head           = 8
0.00.527.830 I llm_load_print_meta: n_head_kv        = 1
0.00.527.830 I llm_load_print_meta: n_rot            = 256
0.00.527.831 I llm_load_print_meta: n_swa            = 0
0.00.527.831 I llm_load_print_meta: n_embd_head_k    = 256
0.00.527.832 I llm_load_print_meta: n_embd_head_v    = 256
0.00.527.836 I llm_load_print_meta: n_gqa            = 8
0.00.527.841 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.527.845 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.527.846 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.527.848 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.527.848 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.527.848 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.527.850 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.527.854 I llm_load_print_meta: n_ff             = 16384
0.00.527.855 I llm_load_print_meta: n_expert         = 0
0.00.527.856 I llm_load_print_meta: n_expert_used    = 0
0.00.527.856 I llm_load_print_meta: causal attn      = 1
0.00.527.856 I llm_load_print_meta: pooling type     = 0
0.00.527.857 I llm_load_print_meta: rope type        = 2
0.00.527.857 I llm_load_print_meta: rope scaling     = linear
0.00.527.858 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.527.859 I llm_load_print_meta: freq_scale_train = 1
0.00.527.859 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.527.860 I llm_load_print_meta: rope_finetuned   = unknown
0.00.527.860 I llm_load_print_meta: ssm_d_conv       = 0
0.00.527.860 I llm_load_print_meta: ssm_d_inner      = 0
0.00.527.860 I llm_load_print_meta: ssm_d_state      = 0
0.00.527.861 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.527.861 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.527.862 I llm_load_print_meta: model type       = 2B
0.00.527.863 I llm_load_print_meta: model ftype      = Q8_0
0.00.527.863 I llm_load_print_meta: model params     = 2.51 B
0.00.527.864 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.527.865 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.527.865 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.527.865 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.527.866 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.527.866 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.527.867 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.527.867 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.527.867 I llm_load_print_meta: max token length = 93
0.00.528.036 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.622.646 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.628.392 I llama_new_context_with_model: n_ctx      = 8192
0.00.628.400 I llama_new_context_with_model: n_batch    = 2048
0.00.628.400 I llama_new_context_with_model: n_ubatch   = 512
0.00.628.401 I llama_new_context_with_model: flash_attn = 0
0.00.628.403 I llama_new_context_with_model: freq_base  = 10000.0
0.00.628.404 I llama_new_context_with_model: freq_scale = 1
0.00.658.057 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.658.103 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.658.214 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.659.577 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.659.583 I llama_new_context_with_model: graph nodes  = 601
0.00.659.584 I llama_new_context_with_model: graph splits = 1
0.00.659.599 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.272.939 I main: llama threadpool init, n_threads = 4
0.01.272.951 I 
0.01.273.041 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.273.045 I 
0.01.273.205 I sampler seed: 133350208
0.01.273.215 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.273.219 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.273.220 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably! [end of text]


0.02.955.598 I llama_perf_sampler_print:    sampling time =       6.14 ms /     5 runs   (    1.23 ms per token,   814.46 tokens per second)
0.02.955.601 I llama_perf_context_print:        load time =    1270.06 ms
0.02.955.602 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.955.604 I llama_perf_context_print:        eval time =    1671.06 ms /     4 runs   (  417.76 ms per token,     2.39 tokens per second)
0.02.955.604 I llama_perf_context_print:       total time =    1682.67 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.645 I build: 3808 (8241bc71) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.002.799 I main: load the model and apply lora adapter, if any
0.00.024.792 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.979 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.070 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.082 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.083 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.088 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.091 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.092 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.093 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.093 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.094 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.111 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.112 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.113 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.115 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.115 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.648 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.807 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.931 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.939 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.940 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.941 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.942 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.943 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.944 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.958 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.961 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.963 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.964 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.196.965 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.984 I llama_model_loader: - type  f32:   37 tensors
0.00.196.990 I llama_model_loader: - type q8_0:  127 tensors
0.00.463.504 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.464.515 I llm_load_vocab: special tokens cache size = 5
0.00.522.987 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.523.048 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.523.049 I llm_load_print_meta: arch             = gemma
0.00.523.049 I llm_load_print_meta: vocab type       = SPM
0.00.523.050 I llm_load_print_meta: n_vocab          = 256000
0.00.523.052 I llm_load_print_meta: n_merges         = 0
0.00.523.053 I llm_load_print_meta: vocab_only       = 0
0.00.523.053 I llm_load_print_meta: n_ctx_train      = 8192
0.00.523.053 I llm_load_print_meta: n_embd           = 2048
0.00.523.054 I llm_load_print_meta: n_layer          = 18
0.00.523.088 I llm_load_print_meta: n_head           = 8
0.00.523.095 I llm_load_print_meta: n_head_kv        = 1
0.00.523.096 I llm_load_print_meta: n_rot            = 256
0.00.523.097 I llm_load_print_meta: n_swa            = 0
0.00.523.097 I llm_load_print_meta: n_embd_head_k    = 256
0.00.523.097 I llm_load_print_meta: n_embd_head_v    = 256
0.00.523.102 I llm_load_print_meta: n_gqa            = 8
0.00.523.107 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.523.130 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.523.132 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.523.133 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.523.134 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.523.134 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.523.134 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.523.140 I llm_load_print_meta: n_ff             = 16384
0.00.523.141 I llm_load_print_meta: n_expert         = 0
0.00.523.141 I llm_load_print_meta: n_expert_used    = 0
0.00.523.142 I llm_load_print_meta: causal attn      = 1
0.00.523.149 I llm_load_print_meta: pooling type     = 0
0.00.523.150 I llm_load_print_meta: rope type        = 2
0.00.523.151 I llm_load_print_meta: rope scaling     = linear
0.00.523.152 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.523.153 I llm_load_print_meta: freq_scale_train = 1
0.00.523.153 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.523.154 I llm_load_print_meta: rope_finetuned   = unknown
0.00.523.154 I llm_load_print_meta: ssm_d_conv       = 0
0.00.523.154 I llm_load_print_meta: ssm_d_inner      = 0
0.00.523.155 I llm_load_print_meta: ssm_d_state      = 0
0.00.523.158 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.523.159 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.523.160 I llm_load_print_meta: model type       = 2B
0.00.523.161 I llm_load_print_meta: model ftype      = Q8_0
0.00.523.162 I llm_load_print_meta: model params     = 2.51 B
0.00.523.170 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.523.171 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.523.172 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.523.172 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.523.172 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.523.173 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.523.174 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.523.174 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.523.174 I llm_load_print_meta: max token length = 93
0.00.523.357 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.601.460 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.601.467 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.601.468 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.601.469 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.601.470 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.601.470 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.606.954 I llama_new_context_with_model: n_ctx      = 8192
0.00.606.960 I llama_new_context_with_model: n_batch    = 2048
0.00.606.961 I llama_new_context_with_model: n_ubatch   = 512
0.00.606.962 I llama_new_context_with_model: flash_attn = 0
0.00.606.964 I llama_new_context_with_model: freq_base  = 10000.0
0.00.606.965 I llama_new_context_with_model: freq_scale = 1
0.00.636.039 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.636.083 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.636.196 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.637.643 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.637.649 I llama_new_context_with_model: graph nodes  = 601
0.00.637.649 I llama_new_context_with_model: graph splits = 1
0.00.637.666 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.260.775 I main: llama threadpool init, n_threads = 4
0.01.260.789 I 
0.01.260.883 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.260.883 I 
0.01.261.045 I sampler seed: 3940121993
0.01.261.057 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.261.062 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.261.062 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities, an insatiable hunger for knowledge and an insatiable curiosity about the universe. [end of text]


0.08.536.631 I llama_perf_sampler_print:    sampling time =      25.79 ms /    18 runs   (    1.43 ms per token,   698.03 tokens per second)
0.08.536.634 I llama_perf_context_print:        load time =    1257.89 ms
0.08.536.636 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.536.637 I llama_perf_context_print:        eval time =    7231.26 ms /    17 runs   (  425.37 ms per token,     2.35 tokens per second)
0.08.536.638 I llama_perf_context_print:       total time =    7275.87 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.606 I build: 3808 (8241bc71) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.796 I main: llama backend init
0.00.002.727 I main: load the model and apply lora adapter, if any
0.00.024.503 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.683 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.772 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.784 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.785 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.789 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.799 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.803 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.804 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.805 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.806 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.812 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.813 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.814 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.815 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.816 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.103.820 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.194.019 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.206.451 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.206.460 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.206.461 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.206.462 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.206.463 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.206.464 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.206.465 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.206.469 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.206.470 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.206.471 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.206.472 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.206.473 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.206.482 I llama_model_loader: - type  f32:   37 tensors
0.00.206.486 I llama_model_loader: - type q8_0:  127 tensors
0.00.485.544 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.486.544 I llm_load_vocab: special tokens cache size = 5
0.00.545.611 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.545.679 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.545.683 I llm_load_print_meta: arch             = gemma
0.00.545.685 I llm_load_print_meta: vocab type       = SPM
0.00.545.685 I llm_load_print_meta: n_vocab          = 256000
0.00.545.688 I llm_load_print_meta: n_merges         = 0
0.00.545.688 I llm_load_print_meta: vocab_only       = 0
0.00.545.689 I llm_load_print_meta: n_ctx_train      = 8192
0.00.545.689 I llm_load_print_meta: n_embd           = 2048
0.00.545.690 I llm_load_print_meta: n_layer          = 18
0.00.545.723 I llm_load_print_meta: n_head           = 8
0.00.545.733 I llm_load_print_meta: n_head_kv        = 1
0.00.545.734 I llm_load_print_meta: n_rot            = 256
0.00.545.735 I llm_load_print_meta: n_swa            = 0
0.00.545.735 I llm_load_print_meta: n_embd_head_k    = 256
0.00.545.735 I llm_load_print_meta: n_embd_head_v    = 256
0.00.545.740 I llm_load_print_meta: n_gqa            = 8
0.00.545.745 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.545.750 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.545.752 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.545.753 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.545.753 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.545.754 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.545.755 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.545.760 I llm_load_print_meta: n_ff             = 16384
0.00.545.761 I llm_load_print_meta: n_expert         = 0
0.00.545.762 I llm_load_print_meta: n_expert_used    = 0
0.00.545.763 I llm_load_print_meta: causal attn      = 1
0.00.545.763 I llm_load_print_meta: pooling type     = 0
0.00.545.764 I llm_load_print_meta: rope type        = 2
0.00.545.764 I llm_load_print_meta: rope scaling     = linear
0.00.545.766 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.545.766 I llm_load_print_meta: freq_scale_train = 1
0.00.545.767 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.545.767 I llm_load_print_meta: rope_finetuned   = unknown
0.00.545.767 I llm_load_print_meta: ssm_d_conv       = 0
0.00.545.767 I llm_load_print_meta: ssm_d_inner      = 0
0.00.545.768 I llm_load_print_meta: ssm_d_state      = 0
0.00.545.777 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.545.777 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.545.779 I llm_load_print_meta: model type       = 2B
0.00.545.804 I llm_load_print_meta: model ftype      = Q8_0
0.00.545.806 I llm_load_print_meta: model params     = 2.51 B
0.00.545.807 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.545.808 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.545.812 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.545.812 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.545.813 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.545.813 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.545.814 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.545.814 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.545.815 I llm_load_print_meta: max token length = 93
0.00.545.984 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.617.476 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.617.486 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.623.036 I llama_new_context_with_model: n_ctx      = 8192
0.00.623.044 I llama_new_context_with_model: n_batch    = 2048
0.00.623.045 I llama_new_context_with_model: n_ubatch   = 512
0.00.623.045 I llama_new_context_with_model: flash_attn = 0
0.00.623.048 I llama_new_context_with_model: freq_base  = 10000.0
0.00.623.049 I llama_new_context_with_model: freq_scale = 1
0.00.652.093 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.652.135 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.652.247 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.653.627 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.653.633 I llama_new_context_with_model: graph nodes  = 601
0.00.653.634 I llama_new_context_with_model: graph splits = 1
0.00.653.660 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.267.747 I main: llama threadpool init, n_threads = 4
0.01.267.757 I 
0.01.267.848 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.267.852 I 
0.01.268.009 I sampler seed: 2651978836
0.01.268.020 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.268.026 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.268.027 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconded with the following errors:

1. The word "conjointed" should be "connected".
2. The word "seconded" should be

0.14.845.149 I llama_perf_sampler_print:    sampling time =      47.31 ms /    33 runs   (    1.43 ms per token,   697.47 tokens per second)
0.14.845.152 I llama_perf_context_print:        load time =    1264.94 ms
0.14.845.153 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.845.155 I llama_perf_context_print:        eval time =   13497.62 ms /    32 runs   (  421.80 ms per token,     2.37 tokens per second)
0.14.845.156 I llama_perf_context_print:       total time =   13577.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m49.021s
user	2m29.845s
sys	0m9.529s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3808 (8241bc71)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200037.22 ms
main:    total time = 200037.22 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.610 I build: 3808 (8241bc71) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.799 I main: llama backend init
0.00.002.743 I main: load the model and apply lora adapter, if any
0.00.024.497 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.675 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.762 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.773 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.775 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.778 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.779 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.780 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.782 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.783 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.784 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.789 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.790 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.792 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.792 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.794 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.114 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.202 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.328 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.335 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.336 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.337 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.338 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.339 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.340 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.343 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.344 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.345 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.346 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.347 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.356 I llama_model_loader: - type  f32:   37 tensors
0.00.197.360 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.361 I llama_model_loader: - type q6_K:   19 tensors
0.00.469.193 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.470.245 I llm_load_vocab: special tokens cache size = 5
0.00.528.630 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.528.682 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.528.683 I llm_load_print_meta: arch             = gemma
0.00.528.684 I llm_load_print_meta: vocab type       = SPM
0.00.528.685 I llm_load_print_meta: n_vocab          = 256000
0.00.528.687 I llm_load_print_meta: n_merges         = 0
0.00.528.687 I llm_load_print_meta: vocab_only       = 0
0.00.528.688 I llm_load_print_meta: n_ctx_train      = 8192
0.00.528.688 I llm_load_print_meta: n_embd           = 2048
0.00.528.688 I llm_load_print_meta: n_layer          = 18
0.00.528.718 I llm_load_print_meta: n_head           = 8
0.00.528.725 I llm_load_print_meta: n_head_kv        = 1
0.00.528.726 I llm_load_print_meta: n_rot            = 256
0.00.528.726 I llm_load_print_meta: n_swa            = 0
0.00.528.727 I llm_load_print_meta: n_embd_head_k    = 256
0.00.528.727 I llm_load_print_meta: n_embd_head_v    = 256
0.00.528.732 I llm_load_print_meta: n_gqa            = 8
0.00.528.736 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.528.741 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.528.742 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.528.743 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.528.744 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.528.744 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.528.745 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.528.749 I llm_load_print_meta: n_ff             = 16384
0.00.528.750 I llm_load_print_meta: n_expert         = 0
0.00.528.750 I llm_load_print_meta: n_expert_used    = 0
0.00.528.751 I llm_load_print_meta: causal attn      = 1
0.00.528.751 I llm_load_print_meta: pooling type     = 0
0.00.528.751 I llm_load_print_meta: rope type        = 2
0.00.528.752 I llm_load_print_meta: rope scaling     = linear
0.00.528.753 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.528.754 I llm_load_print_meta: freq_scale_train = 1
0.00.528.754 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.528.754 I llm_load_print_meta: rope_finetuned   = unknown
0.00.528.754 I llm_load_print_meta: ssm_d_conv       = 0
0.00.528.755 I llm_load_print_meta: ssm_d_inner      = 0
0.00.528.755 I llm_load_print_meta: ssm_d_state      = 0
0.00.528.755 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.528.756 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.528.757 I llm_load_print_meta: model type       = 2B
0.00.528.757 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.528.758 I llm_load_print_meta: model params     = 2.51 B
0.00.528.759 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.528.759 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.528.760 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.528.760 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.528.760 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.528.761 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.528.779 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.528.780 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.528.781 I llm_load_print_meta: max token length = 93
0.00.528.950 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.589.248 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.589.257 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.589.258 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.589.258 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.589.259 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.589.260 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.594.905 I llama_new_context_with_model: n_ctx      = 8192
0.00.594.911 I llama_new_context_with_model: n_batch    = 2048
0.00.594.912 I llama_new_context_with_model: n_ubatch   = 512
0.00.594.912 I llama_new_context_with_model: flash_attn = 0
0.00.594.915 I llama_new_context_with_model: freq_base  = 10000.0
0.00.594.916 I llama_new_context_with_model: freq_scale = 1
0.00.623.773 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.623.816 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.623.929 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.625.256 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.625.262 I llama_new_context_with_model: graph nodes  = 601
0.00.625.263 I llama_new_context_with_model: graph splits = 1
0.00.625.280 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.207.546 I main: llama threadpool init, n_threads = 4
0.01.207.556 I 
0.01.207.650 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.207.654 I 
0.01.207.817 I sampler seed: 1247364333
0.01.207.827 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.207.832 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.207.833 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally, the sentence: "She is the best doctor in the world."

This sentence is unacceptable because:

a) It lacks specific evidence.


0.12.224.952 I llama_perf_sampler_print:    sampling time =      47.97 ms /    33 runs   (    1.45 ms per token,   687.99 tokens per second)
0.12.224.968 I llama_perf_context_print:        load time =    1204.72 ms
0.12.224.970 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.224.972 I llama_perf_context_print:        eval time =   10937.33 ms /    32 runs   (  341.79 ms per token,     2.93 tokens per second)
0.12.224.973 I llama_perf_context_print:       total time =   11017.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3808 (8241bc71)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199963.61 ms
main:    total time = 199963.61 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.608 I build: 3808 (8241bc71) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.797 I main: llama backend init
0.00.002.731 I main: load the model and apply lora adapter, if any
0.00.024.897 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.999 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.013 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.014 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.018 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.021 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.024 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.025 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.025 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.026 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.031 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.032 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.033 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.034 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.035 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.759 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.328 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.476 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.484 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.484 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.485 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.486 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.487 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.488 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.491 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.504 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.515 I llama_model_loader: - type  f32:   37 tensors
0.00.196.519 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.520 I llama_model_loader: - type q6_K:   19 tensors
0.00.475.844 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.476.831 I llm_load_vocab: special tokens cache size = 5
0.00.535.266 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.535.322 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.535.326 I llm_load_print_meta: arch             = gemma
0.00.535.327 I llm_load_print_meta: vocab type       = SPM
0.00.535.327 I llm_load_print_meta: n_vocab          = 256000
0.00.535.329 I llm_load_print_meta: n_merges         = 0
0.00.535.330 I llm_load_print_meta: vocab_only       = 0
0.00.535.331 I llm_load_print_meta: n_ctx_train      = 8192
0.00.535.331 I llm_load_print_meta: n_embd           = 2048
0.00.535.332 I llm_load_print_meta: n_layer          = 18
0.00.535.366 I llm_load_print_meta: n_head           = 8
0.00.535.377 I llm_load_print_meta: n_head_kv        = 1
0.00.535.377 I llm_load_print_meta: n_rot            = 256
0.00.535.377 I llm_load_print_meta: n_swa            = 0
0.00.535.378 I llm_load_print_meta: n_embd_head_k    = 256
0.00.535.378 I llm_load_print_meta: n_embd_head_v    = 256
0.00.535.383 I llm_load_print_meta: n_gqa            = 8
0.00.535.388 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.535.392 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.535.394 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.535.396 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.535.397 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.535.398 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.535.398 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.535.403 I llm_load_print_meta: n_ff             = 16384
0.00.535.403 I llm_load_print_meta: n_expert         = 0
0.00.535.404 I llm_load_print_meta: n_expert_used    = 0
0.00.535.405 I llm_load_print_meta: causal attn      = 1
0.00.535.405 I llm_load_print_meta: pooling type     = 0
0.00.535.405 I llm_load_print_meta: rope type        = 2
0.00.535.406 I llm_load_print_meta: rope scaling     = linear
0.00.535.408 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.535.411 I llm_load_print_meta: freq_scale_train = 1
0.00.535.411 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.535.412 I llm_load_print_meta: rope_finetuned   = unknown
0.00.535.412 I llm_load_print_meta: ssm_d_conv       = 0
0.00.535.412 I llm_load_print_meta: ssm_d_inner      = 0
0.00.535.413 I llm_load_print_meta: ssm_d_state      = 0
0.00.535.413 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.535.413 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.535.414 I llm_load_print_meta: model type       = 2B
0.00.535.415 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.535.415 I llm_load_print_meta: model params     = 2.51 B
0.00.535.416 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.535.418 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.535.419 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.535.419 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.535.420 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.535.421 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.535.421 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.535.422 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.535.423 I llm_load_print_meta: max token length = 93
0.00.535.590 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.595.480 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.601.002 I llama_new_context_with_model: n_ctx      = 8192
0.00.601.008 I llama_new_context_with_model: n_batch    = 2048
0.00.601.009 I llama_new_context_with_model: n_ubatch   = 512
0.00.601.009 I llama_new_context_with_model: flash_attn = 0
0.00.601.012 I llama_new_context_with_model: freq_base  = 10000.0
0.00.601.013 I llama_new_context_with_model: freq_scale = 1
0.00.630.844 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.630.886 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.630.998 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.632.334 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.632.340 I llama_new_context_with_model: graph nodes  = 601
0.00.632.341 I llama_new_context_with_model: graph splits = 1
0.00.632.356 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.211.271 I main: llama threadpool init, n_threads = 4
0.01.211.283 I 
0.01.211.375 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.211.379 I 
0.01.211.540 I sampler seed: 1348467612
0.01.211.551 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.211.558 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.211.558 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 encompassing the most significant challenges and opportunities for the future of work.

**Challenges:**

**1. Automation and Job Displacement:**
- Rapid technological advancements

0.12.192.444 I llama_perf_sampler_print:    sampling time =      47.67 ms /    33 runs   (    1.44 ms per token,   692.27 tokens per second)
0.12.192.447 I llama_perf_context_print:        load time =    1208.46 ms
0.12.192.460 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.192.462 I llama_perf_context_print:        eval time =   10900.42 ms /    32 runs   (  340.64 ms per token,     2.94 tokens per second)
0.12.192.463 I llama_perf_context_print:       total time =   10981.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m7.219s
user	50m21.858s
sys	0m6.393s
