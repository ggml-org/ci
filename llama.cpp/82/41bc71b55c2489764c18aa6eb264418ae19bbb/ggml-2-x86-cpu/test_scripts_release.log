+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.541 I build: 3808 (8241bc71) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.734 I main: llama backend init
0.00.001.824 I main: load the model and apply lora adapter, if any
0.00.022.170 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.218 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.229 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.233 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.234 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.237 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.238 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.239 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.239 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.240 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.240 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.243 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.244 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.245 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.245 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.246 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.947 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.470 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.340 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.347 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.348 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.349 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.349 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.350 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.351 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.353 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.354 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.354 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.356 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.357 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.360 I llama_model_loader: - type  f32:   37 tensors
0.00.132.362 I llama_model_loader: - type q8_0:  127 tensors
0.00.196.222 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.196.855 I llm_load_vocab: special tokens cache size = 5
0.00.214.936 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.214.947 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.214.947 I llm_load_print_meta: arch             = gemma
0.00.214.948 I llm_load_print_meta: vocab type       = SPM
0.00.214.949 I llm_load_print_meta: n_vocab          = 256000
0.00.214.949 I llm_load_print_meta: n_merges         = 0
0.00.214.949 I llm_load_print_meta: vocab_only       = 0
0.00.214.950 I llm_load_print_meta: n_ctx_train      = 8192
0.00.214.950 I llm_load_print_meta: n_embd           = 2048
0.00.214.950 I llm_load_print_meta: n_layer          = 18
0.00.214.962 I llm_load_print_meta: n_head           = 8
0.00.214.963 I llm_load_print_meta: n_head_kv        = 1
0.00.214.963 I llm_load_print_meta: n_rot            = 256
0.00.214.964 I llm_load_print_meta: n_swa            = 0
0.00.214.964 I llm_load_print_meta: n_embd_head_k    = 256
0.00.214.964 I llm_load_print_meta: n_embd_head_v    = 256
0.00.214.965 I llm_load_print_meta: n_gqa            = 8
0.00.214.967 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.214.968 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.214.968 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.214.970 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.214.970 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.214.970 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.214.971 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.214.972 I llm_load_print_meta: n_ff             = 16384
0.00.214.972 I llm_load_print_meta: n_expert         = 0
0.00.214.972 I llm_load_print_meta: n_expert_used    = 0
0.00.214.973 I llm_load_print_meta: causal attn      = 1
0.00.214.973 I llm_load_print_meta: pooling type     = 0
0.00.214.973 I llm_load_print_meta: rope type        = 2
0.00.214.974 I llm_load_print_meta: rope scaling     = linear
0.00.214.975 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.214.975 I llm_load_print_meta: freq_scale_train = 1
0.00.214.976 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.214.976 I llm_load_print_meta: rope_finetuned   = unknown
0.00.214.976 I llm_load_print_meta: ssm_d_conv       = 0
0.00.214.977 I llm_load_print_meta: ssm_d_inner      = 0
0.00.214.977 I llm_load_print_meta: ssm_d_state      = 0
0.00.214.977 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.214.978 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.214.978 I llm_load_print_meta: model type       = 2B
0.00.214.979 I llm_load_print_meta: model ftype      = Q8_0
0.00.214.980 I llm_load_print_meta: model params     = 2.51 B
0.00.214.980 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.214.981 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.214.981 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.214.982 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.214.982 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.214.982 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.214.983 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.214.983 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.214.983 I llm_load_print_meta: max token length = 93
0.00.215.000 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.314.497 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.314.506 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.314.507 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.314.508 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.314.508 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.314.509 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.319.611 I llama_new_context_with_model: n_ctx      = 8192
0.00.319.616 I llama_new_context_with_model: n_batch    = 2048
0.00.319.617 I llama_new_context_with_model: n_ubatch   = 512
0.00.319.617 I llama_new_context_with_model: flash_attn = 0
0.00.319.620 I llama_new_context_with_model: freq_base  = 10000.0
0.00.319.620 I llama_new_context_with_model: freq_scale = 1
0.00.348.647 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.348.665 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.348.756 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.628 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.349.635 I llama_new_context_with_model: graph nodes  = 601
0.00.349.636 I llama_new_context_with_model: graph splits = 1
0.00.349.638 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.441.338 I main: llama threadpool init, n_threads = 4
0.00.441.351 I 
0.00.441.426 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.441.430 I 
0.00.441.459 I sampler seed: 2211844383
0.00.441.468 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.441.471 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.441.472 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities of a person and a place.

**Answer:** Synonym of the given phrase.

The answer is: juxtaposition.

Juxtaposition is

0.02.675.800 I llama_perf_sampler_print:    sampling time =       4.91 ms /    33 runs   (    0.15 ms per token,  6715.51 tokens per second)
0.02.675.803 I llama_perf_context_print:        load time =     439.50 ms
0.02.675.804 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.675.805 I llama_perf_context_print:        eval time =    2215.70 ms /    32 runs   (   69.24 ms per token,    14.44 tokens per second)
0.02.675.806 I llama_perf_context_print:       total time =    2234.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.598 I build: 3808 (8241bc71) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.799 I main: llama backend init
0.00.001.941 I main: load the model and apply lora adapter, if any
0.00.022.124 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.135 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.142 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.143 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.148 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.149 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.150 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.151 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.152 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.152 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.158 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.159 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.160 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.161 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.162 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.852 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.484 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.382 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.389 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.390 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.390 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.391 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.392 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.393 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.397 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.398 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.398 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.399 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.400 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.405 I llama_model_loader: - type  f32:   37 tensors
0.00.132.409 I llama_model_loader: - type q8_0:  127 tensors
0.00.197.382 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.198.108 I llm_load_vocab: special tokens cache size = 5
0.00.216.351 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.216.371 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.216.371 I llm_load_print_meta: arch             = gemma
0.00.216.372 I llm_load_print_meta: vocab type       = SPM
0.00.216.373 I llm_load_print_meta: n_vocab          = 256000
0.00.216.373 I llm_load_print_meta: n_merges         = 0
0.00.216.373 I llm_load_print_meta: vocab_only       = 0
0.00.216.374 I llm_load_print_meta: n_ctx_train      = 8192
0.00.216.374 I llm_load_print_meta: n_embd           = 2048
0.00.216.374 I llm_load_print_meta: n_layer          = 18
0.00.216.386 I llm_load_print_meta: n_head           = 8
0.00.216.387 I llm_load_print_meta: n_head_kv        = 1
0.00.216.387 I llm_load_print_meta: n_rot            = 256
0.00.216.388 I llm_load_print_meta: n_swa            = 0
0.00.216.388 I llm_load_print_meta: n_embd_head_k    = 256
0.00.216.388 I llm_load_print_meta: n_embd_head_v    = 256
0.00.216.389 I llm_load_print_meta: n_gqa            = 8
0.00.216.390 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.216.391 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.216.392 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.216.394 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.216.394 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.216.394 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.216.395 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.216.396 I llm_load_print_meta: n_ff             = 16384
0.00.216.396 I llm_load_print_meta: n_expert         = 0
0.00.216.396 I llm_load_print_meta: n_expert_used    = 0
0.00.216.397 I llm_load_print_meta: causal attn      = 1
0.00.216.397 I llm_load_print_meta: pooling type     = 0
0.00.216.397 I llm_load_print_meta: rope type        = 2
0.00.216.398 I llm_load_print_meta: rope scaling     = linear
0.00.216.399 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.216.400 I llm_load_print_meta: freq_scale_train = 1
0.00.216.400 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.216.400 I llm_load_print_meta: rope_finetuned   = unknown
0.00.216.401 I llm_load_print_meta: ssm_d_conv       = 0
0.00.216.401 I llm_load_print_meta: ssm_d_inner      = 0
0.00.216.401 I llm_load_print_meta: ssm_d_state      = 0
0.00.216.401 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.216.401 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.216.402 I llm_load_print_meta: model type       = 2B
0.00.216.403 I llm_load_print_meta: model ftype      = Q8_0
0.00.216.403 I llm_load_print_meta: model params     = 2.51 B
0.00.216.404 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.216.405 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.216.406 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.216.406 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.216.406 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.216.406 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.216.407 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.216.407 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.216.407 I llm_load_print_meta: max token length = 93
0.00.216.431 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.310.441 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.315.552 I llama_new_context_with_model: n_ctx      = 8192
0.00.315.558 I llama_new_context_with_model: n_batch    = 2048
0.00.315.558 I llama_new_context_with_model: n_ubatch   = 512
0.00.315.559 I llama_new_context_with_model: flash_attn = 0
0.00.315.561 I llama_new_context_with_model: freq_base  = 10000.0
0.00.315.562 I llama_new_context_with_model: freq_scale = 1
0.00.344.228 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.344.246 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.344.337 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.174 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.345.183 I llama_new_context_with_model: graph nodes  = 601
0.00.345.183 I llama_new_context_with_model: graph splits = 1
0.00.345.185 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.431.717 I main: llama threadpool init, n_threads = 4
0.00.431.728 I 
0.00.431.811 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.431.814 I 
0.00.431.844 I sampler seed: 2837722433
0.00.431.861 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.431.868 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.431.868 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically.

I am able to provide you with a list of the elements in a given set, but I am unable to access or interact with external systems

0.02.587.904 I llama_perf_sampler_print:    sampling time =       5.16 ms /    33 runs   (    0.16 ms per token,  6394.11 tokens per second)
0.02.587.907 I llama_perf_context_print:        load time =     429.76 ms
0.02.587.908 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.587.910 I llama_perf_context_print:        eval time =    2137.64 ms /    32 runs   (   66.80 ms per token,    14.97 tokens per second)
0.02.587.911 I llama_perf_context_print:       total time =    2156.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.536 I build: 3808 (8241bc71) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.774 I main: llama backend init
0.00.001.921 I main: load the model and apply lora adapter, if any
0.00.021.819 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.879 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.889 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.894 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.895 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.899 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.900 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.902 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.903 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.904 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.905 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.909 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.911 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.912 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.913 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.914 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.489 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.474 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.301 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.308 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.309 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.310 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.311 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.312 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.313 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.317 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.317 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.319 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.320 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.321 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.326 I llama_model_loader: - type  f32:   37 tensors
0.00.132.330 I llama_model_loader: - type q8_0:  127 tensors
0.00.194.697 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.195.383 I llm_load_vocab: special tokens cache size = 5
0.00.213.670 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.213.687 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.213.688 I llm_load_print_meta: arch             = gemma
0.00.213.688 I llm_load_print_meta: vocab type       = SPM
0.00.213.689 I llm_load_print_meta: n_vocab          = 256000
0.00.213.690 I llm_load_print_meta: n_merges         = 0
0.00.213.690 I llm_load_print_meta: vocab_only       = 0
0.00.213.690 I llm_load_print_meta: n_ctx_train      = 8192
0.00.213.691 I llm_load_print_meta: n_embd           = 2048
0.00.213.691 I llm_load_print_meta: n_layer          = 18
0.00.213.706 I llm_load_print_meta: n_head           = 8
0.00.213.708 I llm_load_print_meta: n_head_kv        = 1
0.00.213.708 I llm_load_print_meta: n_rot            = 256
0.00.213.709 I llm_load_print_meta: n_swa            = 0
0.00.213.710 I llm_load_print_meta: n_embd_head_k    = 256
0.00.213.710 I llm_load_print_meta: n_embd_head_v    = 256
0.00.213.712 I llm_load_print_meta: n_gqa            = 8
0.00.213.714 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.213.715 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.213.716 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.213.718 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.213.720 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.213.720 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.213.721 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.213.723 I llm_load_print_meta: n_ff             = 16384
0.00.213.724 I llm_load_print_meta: n_expert         = 0
0.00.213.724 I llm_load_print_meta: n_expert_used    = 0
0.00.213.725 I llm_load_print_meta: causal attn      = 1
0.00.213.726 I llm_load_print_meta: pooling type     = 0
0.00.213.726 I llm_load_print_meta: rope type        = 2
0.00.213.726 I llm_load_print_meta: rope scaling     = linear
0.00.213.728 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.213.729 I llm_load_print_meta: freq_scale_train = 1
0.00.213.729 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.213.730 I llm_load_print_meta: rope_finetuned   = unknown
0.00.213.730 I llm_load_print_meta: ssm_d_conv       = 0
0.00.213.731 I llm_load_print_meta: ssm_d_inner      = 0
0.00.213.733 I llm_load_print_meta: ssm_d_state      = 0
0.00.213.733 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.213.734 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.213.736 I llm_load_print_meta: model type       = 2B
0.00.213.736 I llm_load_print_meta: model ftype      = Q8_0
0.00.213.737 I llm_load_print_meta: model params     = 2.51 B
0.00.213.739 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.213.739 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.213.740 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.213.741 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.213.744 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.213.744 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.213.745 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.213.745 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.213.746 I llm_load_print_meta: max token length = 93
0.00.213.773 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.290.955 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.290.960 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.290.960 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.290.961 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.290.962 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.290.962 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.296.021 I llama_new_context_with_model: n_ctx      = 8192
0.00.296.028 I llama_new_context_with_model: n_batch    = 2048
0.00.296.029 I llama_new_context_with_model: n_ubatch   = 512
0.00.296.029 I llama_new_context_with_model: flash_attn = 0
0.00.296.031 I llama_new_context_with_model: freq_base  = 10000.0
0.00.296.032 I llama_new_context_with_model: freq_scale = 1
0.00.325.968 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.325.984 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.326.072 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.326.991 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.326.998 I llama_new_context_with_model: graph nodes  = 601
0.00.326.998 I llama_new_context_with_model: graph splits = 1
0.00.327.001 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.888 I main: llama threadpool init, n_threads = 4
0.00.418.901 I 
0.00.418.986 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.418.990 I 
0.00.419.022 I sampler seed: 2635604796
0.00.419.034 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.038 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.419.038 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconded words:

The _________ of the forest was deafening.

The correct answer is: roar.

The word roar is the only one that fits the

0.02.707.476 I llama_perf_sampler_print:    sampling time =       5.49 ms /    33 runs   (    0.17 ms per token,  6010.93 tokens per second)
0.02.707.479 I llama_perf_context_print:        load time =     416.95 ms
0.02.707.480 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.707.498 I llama_perf_context_print:        eval time =    2268.93 ms /    32 runs   (   70.90 ms per token,    14.10 tokens per second)
0.02.707.500 I llama_perf_context_print:       total time =    2288.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.653 I build: 3808 (8241bc71) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.846 I main: llama backend init
0.00.001.950 I main: load the model and apply lora adapter, if any
0.00.022.078 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.124 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.131 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.136 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.137 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.141 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.141 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.142 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.143 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.143 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.144 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.149 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.149 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.150 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.151 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.151 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.876 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.509 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.369 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.376 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.377 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.377 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.378 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.379 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.379 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.382 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.383 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.384 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.385 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.386 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.389 I llama_model_loader: - type  f32:   37 tensors
0.00.132.392 I llama_model_loader: - type q8_0:  127 tensors
0.00.197.375 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.198.093 I llm_load_vocab: special tokens cache size = 5
0.00.216.522 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.216.536 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.216.537 I llm_load_print_meta: arch             = gemma
0.00.216.537 I llm_load_print_meta: vocab type       = SPM
0.00.216.538 I llm_load_print_meta: n_vocab          = 256000
0.00.216.539 I llm_load_print_meta: n_merges         = 0
0.00.216.539 I llm_load_print_meta: vocab_only       = 0
0.00.216.540 I llm_load_print_meta: n_ctx_train      = 8192
0.00.216.540 I llm_load_print_meta: n_embd           = 2048
0.00.216.541 I llm_load_print_meta: n_layer          = 18
0.00.216.551 I llm_load_print_meta: n_head           = 8
0.00.216.552 I llm_load_print_meta: n_head_kv        = 1
0.00.216.553 I llm_load_print_meta: n_rot            = 256
0.00.216.553 I llm_load_print_meta: n_swa            = 0
0.00.216.553 I llm_load_print_meta: n_embd_head_k    = 256
0.00.216.554 I llm_load_print_meta: n_embd_head_v    = 256
0.00.216.554 I llm_load_print_meta: n_gqa            = 8
0.00.216.555 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.216.556 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.216.557 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.216.559 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.216.559 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.216.560 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.216.560 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.216.561 I llm_load_print_meta: n_ff             = 16384
0.00.216.561 I llm_load_print_meta: n_expert         = 0
0.00.216.561 I llm_load_print_meta: n_expert_used    = 0
0.00.216.562 I llm_load_print_meta: causal attn      = 1
0.00.216.562 I llm_load_print_meta: pooling type     = 0
0.00.216.563 I llm_load_print_meta: rope type        = 2
0.00.216.563 I llm_load_print_meta: rope scaling     = linear
0.00.216.564 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.216.565 I llm_load_print_meta: freq_scale_train = 1
0.00.216.565 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.216.565 I llm_load_print_meta: rope_finetuned   = unknown
0.00.216.566 I llm_load_print_meta: ssm_d_conv       = 0
0.00.216.566 I llm_load_print_meta: ssm_d_inner      = 0
0.00.216.566 I llm_load_print_meta: ssm_d_state      = 0
0.00.216.566 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.216.567 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.216.567 I llm_load_print_meta: model type       = 2B
0.00.216.568 I llm_load_print_meta: model ftype      = Q8_0
0.00.216.568 I llm_load_print_meta: model params     = 2.51 B
0.00.216.569 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.216.570 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.216.570 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.216.571 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.216.571 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.216.571 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.216.572 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.216.572 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.216.572 I llm_load_print_meta: max token length = 93
0.00.216.595 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.286.621 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.286.628 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.291.514 I llama_new_context_with_model: n_ctx      = 8192
0.00.291.521 I llama_new_context_with_model: n_batch    = 2048
0.00.291.521 I llama_new_context_with_model: n_ubatch   = 512
0.00.291.522 I llama_new_context_with_model: flash_attn = 0
0.00.291.524 I llama_new_context_with_model: freq_base  = 10000.0
0.00.291.525 I llama_new_context_with_model: freq_scale = 1
0.00.321.124 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.321.139 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.321.235 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.322.069 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.322.077 I llama_new_context_with_model: graph nodes  = 601
0.00.322.078 I llama_new_context_with_model: graph splits = 1
0.00.322.080 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.355 I main: llama threadpool init, n_threads = 4
0.00.419.367 I 
0.00.419.444 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.419.448 I 
0.00.419.475 I sampler seed: 2144519810
0.00.419.484 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.487 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.419.487 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities are a major concern for the public health and safety in many communities.

**To address this concern, a comprehensive approach involving community engagement, education,

0.02.825.072 I llama_perf_sampler_print:    sampling time =       4.95 ms /    33 runs   (    0.15 ms per token,  6661.28 tokens per second)
0.02.825.075 I llama_perf_context_print:        load time =     417.39 ms
0.02.825.076 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.825.078 I llama_perf_context_print:        eval time =    2387.49 ms /    32 runs   (   74.61 ms per token,    13.40 tokens per second)
0.02.825.078 I llama_perf_context_print:       total time =    2405.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.183s
user	0m38.966s
sys	0m9.418s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3808 (8241bc71)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32026.23 ms
main:    total time = 32026.23 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.553 I build: 3808 (8241bc71) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.744 I main: llama backend init
0.00.001.865 I main: load the model and apply lora adapter, if any
0.00.021.961 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.009 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.016 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.021 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.021 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.026 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.026 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.027 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.028 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.028 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.029 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.032 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.033 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.034 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.034 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.035 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.055.396 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.137.295 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.144.169 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.144.175 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.144.176 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.144.177 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.144.177 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.144.178 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.144.179 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.144.182 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.144.182 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.144.183 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.144.184 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.144.185 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.144.188 I llama_model_loader: - type  f32:   37 tensors
0.00.144.191 I llama_model_loader: - type q4_K:  108 tensors
0.00.144.191 I llama_model_loader: - type q6_K:   19 tensors
0.00.209.016 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.209.676 I llm_load_vocab: special tokens cache size = 5
0.00.227.857 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.227.869 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.227.870 I llm_load_print_meta: arch             = gemma
0.00.227.870 I llm_load_print_meta: vocab type       = SPM
0.00.227.871 I llm_load_print_meta: n_vocab          = 256000
0.00.227.871 I llm_load_print_meta: n_merges         = 0
0.00.227.871 I llm_load_print_meta: vocab_only       = 0
0.00.227.872 I llm_load_print_meta: n_ctx_train      = 8192
0.00.227.872 I llm_load_print_meta: n_embd           = 2048
0.00.227.872 I llm_load_print_meta: n_layer          = 18
0.00.227.885 I llm_load_print_meta: n_head           = 8
0.00.227.885 I llm_load_print_meta: n_head_kv        = 1
0.00.227.886 I llm_load_print_meta: n_rot            = 256
0.00.227.886 I llm_load_print_meta: n_swa            = 0
0.00.227.886 I llm_load_print_meta: n_embd_head_k    = 256
0.00.227.887 I llm_load_print_meta: n_embd_head_v    = 256
0.00.227.888 I llm_load_print_meta: n_gqa            = 8
0.00.227.889 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.227.889 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.227.890 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.227.892 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.227.892 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.227.893 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.227.893 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.227.894 I llm_load_print_meta: n_ff             = 16384
0.00.227.894 I llm_load_print_meta: n_expert         = 0
0.00.227.894 I llm_load_print_meta: n_expert_used    = 0
0.00.227.895 I llm_load_print_meta: causal attn      = 1
0.00.227.895 I llm_load_print_meta: pooling type     = 0
0.00.227.895 I llm_load_print_meta: rope type        = 2
0.00.227.896 I llm_load_print_meta: rope scaling     = linear
0.00.227.897 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.227.898 I llm_load_print_meta: freq_scale_train = 1
0.00.227.898 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.227.898 I llm_load_print_meta: rope_finetuned   = unknown
0.00.227.898 I llm_load_print_meta: ssm_d_conv       = 0
0.00.227.899 I llm_load_print_meta: ssm_d_inner      = 0
0.00.227.899 I llm_load_print_meta: ssm_d_state      = 0
0.00.227.899 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.227.899 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.227.900 I llm_load_print_meta: model type       = 2B
0.00.227.900 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.227.901 I llm_load_print_meta: model params     = 2.51 B
0.00.227.902 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.227.902 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.227.903 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.227.903 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.227.903 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.227.904 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.227.904 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.227.904 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.227.905 I llm_load_print_meta: max token length = 93
0.00.227.926 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.286.642 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.286.647 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.286.648 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.286.649 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.286.649 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.286.650 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.291.670 I llama_new_context_with_model: n_ctx      = 8192
0.00.291.676 I llama_new_context_with_model: n_batch    = 2048
0.00.291.677 I llama_new_context_with_model: n_ubatch   = 512
0.00.291.677 I llama_new_context_with_model: flash_attn = 0
0.00.291.679 I llama_new_context_with_model: freq_base  = 10000.0
0.00.291.680 I llama_new_context_with_model: freq_scale = 1
0.00.320.579 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.320.593 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.320.688 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.321.535 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.321.543 I llama_new_context_with_model: graph nodes  = 601
0.00.321.544 I llama_new_context_with_model: graph splits = 1
0.00.321.545 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.403.935 I main: llama threadpool init, n_threads = 4
0.00.403.947 I 
0.00.404.019 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.404.022 I 
0.00.404.050 I sampler seed: 448120717
0.00.404.059 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.404.062 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.404.063 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneuvously. I apologize for the unprofessional tone; I simply couldn't help myself.

I'm having some trouble understanding how the concepts of causality

0.02.002.647 I llama_perf_sampler_print:    sampling time =       4.98 ms /    33 runs   (    0.15 ms per token,  6622.52 tokens per second)
0.02.002.650 I llama_perf_context_print:        load time =     402.05 ms
0.02.002.651 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.002.653 I llama_perf_context_print:        eval time =    1580.79 ms /    32 runs   (   49.40 ms per token,    20.24 tokens per second)
0.02.002.654 I llama_perf_context_print:       total time =    1598.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3808 (8241bc71)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32081.83 ms
main:    total time = 32081.83 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.531 I build: 3808 (8241bc71) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.722 I main: llama backend init
0.00.001.835 I main: load the model and apply lora adapter, if any
0.00.021.811 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.821 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.827 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.827 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.830 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.831 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.831 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.832 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.833 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.833 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.836 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.837 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.838 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.838 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.838 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.396 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.643 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.537 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.543 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.544 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.544 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.545 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.545 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.546 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.548 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.549 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.552 I llama_model_loader: - type  f32:   37 tensors
0.00.131.554 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.554 I llama_model_loader: - type q6_K:   19 tensors
0.00.194.733 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.195.376 I llm_load_vocab: special tokens cache size = 5
0.00.213.524 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.213.538 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.213.539 I llm_load_print_meta: arch             = gemma
0.00.213.539 I llm_load_print_meta: vocab type       = SPM
0.00.213.540 I llm_load_print_meta: n_vocab          = 256000
0.00.213.540 I llm_load_print_meta: n_merges         = 0
0.00.213.540 I llm_load_print_meta: vocab_only       = 0
0.00.213.541 I llm_load_print_meta: n_ctx_train      = 8192
0.00.213.541 I llm_load_print_meta: n_embd           = 2048
0.00.213.541 I llm_load_print_meta: n_layer          = 18
0.00.213.552 I llm_load_print_meta: n_head           = 8
0.00.213.553 I llm_load_print_meta: n_head_kv        = 1
0.00.213.554 I llm_load_print_meta: n_rot            = 256
0.00.213.554 I llm_load_print_meta: n_swa            = 0
0.00.213.554 I llm_load_print_meta: n_embd_head_k    = 256
0.00.213.555 I llm_load_print_meta: n_embd_head_v    = 256
0.00.213.556 I llm_load_print_meta: n_gqa            = 8
0.00.213.557 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.213.558 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.213.558 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.213.560 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.213.560 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.213.560 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.213.561 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.213.561 I llm_load_print_meta: n_ff             = 16384
0.00.213.562 I llm_load_print_meta: n_expert         = 0
0.00.213.562 I llm_load_print_meta: n_expert_used    = 0
0.00.213.563 I llm_load_print_meta: causal attn      = 1
0.00.213.563 I llm_load_print_meta: pooling type     = 0
0.00.213.563 I llm_load_print_meta: rope type        = 2
0.00.213.563 I llm_load_print_meta: rope scaling     = linear
0.00.213.565 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.213.566 I llm_load_print_meta: freq_scale_train = 1
0.00.213.566 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.213.566 I llm_load_print_meta: rope_finetuned   = unknown
0.00.213.567 I llm_load_print_meta: ssm_d_conv       = 0
0.00.213.567 I llm_load_print_meta: ssm_d_inner      = 0
0.00.213.567 I llm_load_print_meta: ssm_d_state      = 0
0.00.213.567 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.213.568 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.213.568 I llm_load_print_meta: model type       = 2B
0.00.213.569 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.213.570 I llm_load_print_meta: model params     = 2.51 B
0.00.213.570 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.213.571 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.213.571 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.213.572 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.213.572 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.213.572 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.213.573 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.213.573 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.213.574 I llm_load_print_meta: max token length = 93
0.00.213.589 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.687.756 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.692.850 I llama_new_context_with_model: n_ctx      = 8192
0.00.692.858 I llama_new_context_with_model: n_batch    = 2048
0.00.692.858 I llama_new_context_with_model: n_ubatch   = 512
0.00.692.859 I llama_new_context_with_model: flash_attn = 0
0.00.692.863 I llama_new_context_with_model: freq_base  = 10000.0
0.00.692.863 I llama_new_context_with_model: freq_scale = 1
0.00.722.811 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.722.828 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.722.917 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.723.725 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.723.733 I llama_new_context_with_model: graph nodes  = 601
0.00.723.733 I llama_new_context_with_model: graph splits = 1
0.00.723.735 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.805.251 I main: llama threadpool init, n_threads = 4
0.00.805.263 I 
0.00.805.338 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.805.341 I 
0.00.805.369 I sampler seed: 2594049933
0.00.805.379 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.805.382 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.805.382 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneutruing. [end of text]


0.01.052.761 I llama_perf_sampler_print:    sampling time =       0.73 ms /     6 runs   (    0.12 ms per token,  8185.54 tokens per second)
0.01.052.763 I llama_perf_context_print:        load time =     803.40 ms
0.01.052.764 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.052.766 I llama_perf_context_print:        eval time =     243.75 ms /     5 runs   (   48.75 ms per token,    20.51 tokens per second)
0.01.052.766 I llama_perf_context_print:       total time =     247.52 ms /     6 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m9.970s
user	8m8.504s
sys	0m6.897s
