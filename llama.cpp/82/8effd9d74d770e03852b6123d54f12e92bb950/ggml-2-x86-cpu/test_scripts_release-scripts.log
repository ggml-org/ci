+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.603 I build: 4874 (828effd9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.837 I main: llama backend init
0.00.000.845 I main: load the model and apply lora adapter, if any
0.00.031.159 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.031.171 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.031.178 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.031.185 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.031.186 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.031.189 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.031.190 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.031.191 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.031.192 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.031.192 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.031.193 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.031.203 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.031.204 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.031.204 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.031.205 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.031.205 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.058.110 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.133.927 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.140.404 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.140.413 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.140.414 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.140.415 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.140.415 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.140.417 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.140.417 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.140.420 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.140.420 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.140.421 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.140.422 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.140.423 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.140.427 I llama_model_loader: - type  f32:   37 tensors
0.00.140.428 I llama_model_loader: - type q8_0:  127 tensors
0.00.140.431 I print_info: file format = GGUF V3 (latest)
0.00.140.432 I print_info: file type   = Q8_0
0.00.140.435 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.235.931 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.292.081 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.292.876 I load: special tokens cache size = 5
0.00.315.457 I load: token to piece cache size = 1.6014 MB
0.00.315.481 I print_info: arch             = gemma
0.00.315.482 I print_info: vocab_only       = 0
0.00.315.483 I print_info: n_ctx_train      = 8192
0.00.315.483 I print_info: n_embd           = 2048
0.00.315.483 I print_info: n_layer          = 18
0.00.315.497 I print_info: n_head           = 8
0.00.315.499 I print_info: n_head_kv        = 1
0.00.315.500 I print_info: n_rot            = 256
0.00.315.500 I print_info: n_swa            = 0
0.00.315.500 I print_info: n_embd_head_k    = 256
0.00.315.501 I print_info: n_embd_head_v    = 256
0.00.315.503 I print_info: n_gqa            = 8
0.00.315.505 I print_info: n_embd_k_gqa     = 256
0.00.315.506 I print_info: n_embd_v_gqa     = 256
0.00.315.507 I print_info: f_norm_eps       = 0.0e+00
0.00.315.509 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.315.509 I print_info: f_clamp_kqv      = 0.0e+00
0.00.315.509 I print_info: f_max_alibi_bias = 0.0e+00
0.00.315.510 I print_info: f_logit_scale    = 0.0e+00
0.00.315.512 I print_info: n_ff             = 16384
0.00.315.512 I print_info: n_expert         = 0
0.00.315.512 I print_info: n_expert_used    = 0
0.00.315.513 I print_info: causal attn      = 1
0.00.315.513 I print_info: pooling type     = 0
0.00.315.513 I print_info: rope type        = 2
0.00.315.514 I print_info: rope scaling     = linear
0.00.315.516 I print_info: freq_base_train  = 10000.0
0.00.315.516 I print_info: freq_scale_train = 1
0.00.315.516 I print_info: n_ctx_orig_yarn  = 8192
0.00.315.517 I print_info: rope_finetuned   = unknown
0.00.315.517 I print_info: ssm_d_conv       = 0
0.00.315.517 I print_info: ssm_d_inner      = 0
0.00.315.518 I print_info: ssm_d_state      = 0
0.00.315.518 I print_info: ssm_dt_rank      = 0
0.00.315.518 I print_info: ssm_dt_b_c_rms   = 0
0.00.315.519 I print_info: model type       = 2B
0.00.315.520 I print_info: model params     = 2.51 B
0.00.315.520 I print_info: general.name     = gemma-1.1-2b-it
0.00.315.523 I print_info: vocab type       = SPM
0.00.315.524 I print_info: n_vocab          = 256000
0.00.315.525 I print_info: n_merges         = 0
0.00.315.526 I print_info: BOS token        = 2 '<bos>'
0.00.315.526 I print_info: EOS token        = 1 '<eos>'
0.00.315.526 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.315.527 I print_info: UNK token        = 3 '<unk>'
0.00.315.527 I print_info: PAD token        = 0 '<pad>'
0.00.315.527 I print_info: LF token         = 227 '<0x0A>'
0.00.315.528 I print_info: EOG token        = 1 '<eos>'
0.00.315.529 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.315.529 I print_info: max token length = 93
0.00.315.531 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.414.592 I load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.414.601 I load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.414.602 I load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.414.602 I load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.414.603 I load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.414.603 I load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.415.951 I llama_context_base: constructing llama_context_base, gtype = 0
0.00.415.955 I llama_context_base: n_seq_max     = 1
0.00.415.955 I llama_context_base: n_ctx         = 4096
0.00.415.956 I llama_context_base: n_ctx_per_seq = 4096
0.00.415.956 I llama_context_base: n_batch       = 2048
0.00.415.956 I llama_context_base: n_ubatch      = 512
0.00.415.957 I llama_context_base: causal_attn   = 1
0.00.415.957 I llama_context_base: flash_attn    = 0
0.00.415.959 I llama_context_base: freq_base     = 10000.0
0.00.415.960 I llama_context_base: freq_scale    = 1
0.00.415.960 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.416.070 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.00.416.074 I llama_context_kv_self: constructing llama_context_kv_self
0.00.416.080 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.431.592 I init:        CPU KV buffer size =    72.00 MiB
0.00.431.609 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.433.643 I reserve:        CPU compute buffer size =   509.01 MiB
0.00.433.648 I reserve: graph nodes  = 619
0.00.433.648 I reserve: graph splits = 1
0.00.433.652 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.433.652 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.524.297 I main: llama threadpool init, n_threads = 4
0.00.524.313 I 
0.00.524.374 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.524.377 I 
0.00.524.411 I sampler seed: 1848414495
0.00.524.421 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.524.424 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.524.424 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.524.424 I 
 increasities.

I do not understand. Can you please explain?

I am unable to provide explanations for sexually suggestive or inappropriate content. My purpose is to

0.02.885.610 I llama_perf_sampler_print:    sampling time =       4.79 ms /    33 runs   (    0.15 ms per token,  6887.91 tokens per second)
0.02.885.612 I llama_perf_context_print:        load time =     520.79 ms
0.02.885.613 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.885.615 I llama_perf_context_print:        eval time =    2341.62 ms /    32 runs   (   73.18 ms per token,    13.67 tokens per second)
0.02.885.616 I llama_perf_context_print:       total time =    2363.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.650 I build: 4874 (828effd9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.874 I main: llama backend init
0.00.000.882 I main: load the model and apply lora adapter, if any
0.00.031.315 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.031.332 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.031.341 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.031.342 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.031.345 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.031.346 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.031.347 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.031.347 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.031.348 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.031.349 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.031.360 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.031.360 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.031.361 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.031.361 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.031.362 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.058.485 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.134.201 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.140.658 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.140.668 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.140.668 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.140.669 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.140.670 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.140.671 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.140.672 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.140.675 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.140.675 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.140.677 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.140.677 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.140.678 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.140.683 I llama_model_loader: - type  f32:   37 tensors
0.00.140.684 I llama_model_loader: - type q8_0:  127 tensors
0.00.140.686 I print_info: file format = GGUF V3 (latest)
0.00.140.687 I print_info: file type   = Q8_0
0.00.140.690 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.225.507 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.280.681 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.281.493 I load: special tokens cache size = 5
0.00.303.839 I load: token to piece cache size = 1.6014 MB
0.00.303.861 I print_info: arch             = gemma
0.00.303.861 I print_info: vocab_only       = 0
0.00.303.862 I print_info: n_ctx_train      = 8192
0.00.303.862 I print_info: n_embd           = 2048
0.00.303.863 I print_info: n_layer          = 18
0.00.303.877 I print_info: n_head           = 8
0.00.303.884 I print_info: n_head_kv        = 1
0.00.303.884 I print_info: n_rot            = 256
0.00.303.885 I print_info: n_swa            = 0
0.00.303.886 I print_info: n_embd_head_k    = 256
0.00.303.886 I print_info: n_embd_head_v    = 256
0.00.303.889 I print_info: n_gqa            = 8
0.00.303.891 I print_info: n_embd_k_gqa     = 256
0.00.303.893 I print_info: n_embd_v_gqa     = 256
0.00.303.894 I print_info: f_norm_eps       = 0.0e+00
0.00.303.896 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.303.897 I print_info: f_clamp_kqv      = 0.0e+00
0.00.303.897 I print_info: f_max_alibi_bias = 0.0e+00
0.00.303.898 I print_info: f_logit_scale    = 0.0e+00
0.00.303.900 I print_info: n_ff             = 16384
0.00.303.901 I print_info: n_expert         = 0
0.00.303.903 I print_info: n_expert_used    = 0
0.00.303.903 I print_info: causal attn      = 1
0.00.303.904 I print_info: pooling type     = 0
0.00.303.904 I print_info: rope type        = 2
0.00.303.904 I print_info: rope scaling     = linear
0.00.303.906 I print_info: freq_base_train  = 10000.0
0.00.303.907 I print_info: freq_scale_train = 1
0.00.303.908 I print_info: n_ctx_orig_yarn  = 8192
0.00.303.908 I print_info: rope_finetuned   = unknown
0.00.303.909 I print_info: ssm_d_conv       = 0
0.00.303.909 I print_info: ssm_d_inner      = 0
0.00.303.910 I print_info: ssm_d_state      = 0
0.00.303.910 I print_info: ssm_dt_rank      = 0
0.00.303.911 I print_info: ssm_dt_b_c_rms   = 0
0.00.303.912 I print_info: model type       = 2B
0.00.303.913 I print_info: model params     = 2.51 B
0.00.303.913 I print_info: general.name     = gemma-1.1-2b-it
0.00.303.917 I print_info: vocab type       = SPM
0.00.303.918 I print_info: n_vocab          = 256000
0.00.303.919 I print_info: n_merges         = 0
0.00.303.920 I print_info: BOS token        = 2 '<bos>'
0.00.303.920 I print_info: EOS token        = 1 '<eos>'
0.00.303.921 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.303.922 I print_info: UNK token        = 3 '<unk>'
0.00.303.923 I print_info: PAD token        = 0 '<pad>'
0.00.303.924 I print_info: LF token         = 227 '<0x0A>'
0.00.303.924 I print_info: EOG token        = 1 '<eos>'
0.00.303.925 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.303.926 I print_info: max token length = 93
0.00.303.928 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.378.629 I load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.380.148 I llama_context_base: constructing llama_context_base, gtype = 0
0.00.380.153 I llama_context_base: n_seq_max     = 1
0.00.380.154 I llama_context_base: n_ctx         = 4096
0.00.380.154 I llama_context_base: n_ctx_per_seq = 4096
0.00.380.154 I llama_context_base: n_batch       = 2048
0.00.380.155 I llama_context_base: n_ubatch      = 512
0.00.380.155 I llama_context_base: causal_attn   = 1
0.00.380.156 I llama_context_base: flash_attn    = 0
0.00.380.158 I llama_context_base: freq_base     = 10000.0
0.00.380.159 I llama_context_base: freq_scale    = 1
0.00.380.160 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.280 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.00.380.284 I llama_context_kv_self: constructing llama_context_kv_self
0.00.380.290 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.395.930 I init:        CPU KV buffer size =    72.00 MiB
0.00.395.946 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.398.235 I reserve:        CPU compute buffer size =   509.01 MiB
0.00.398.239 I reserve: graph nodes  = 619
0.00.398.239 I reserve: graph splits = 1
0.00.398.244 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.398.244 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.488.516 I main: llama threadpool init, n_threads = 4
0.00.488.533 I 
0.00.488.595 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.488.599 I 
0.00.488.645 I sampler seed: 4037398421
0.00.488.661 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.488.665 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.488.665 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.488.666 I 
 increasities in the process of learning a foreign language.

**True or False**

This statement is true.

**Explanation**

True.

The

0.02.779.091 I llama_perf_sampler_print:    sampling time =       5.12 ms /    33 runs   (    0.16 ms per token,  6441.54 tokens per second)
0.02.779.093 I llama_perf_context_print:        load time =     484.98 ms
0.02.779.095 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.779.096 I llama_perf_context_print:        eval time =    2270.82 ms /    32 runs   (   70.96 ms per token,    14.09 tokens per second)
0.02.779.097 I llama_perf_context_print:       total time =    2293.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.655 I build: 4874 (828effd9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.865 I main: llama backend init
0.00.000.873 I main: load the model and apply lora adapter, if any
0.00.031.717 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.031.732 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.031.740 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.031.747 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.031.748 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.031.752 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.031.753 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.031.754 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.031.755 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.031.757 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.031.758 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.031.766 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.031.767 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.031.768 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.031.769 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.031.770 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.060.315 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.140.220 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.146.603 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.146.614 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.146.615 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.146.615 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.146.616 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.146.617 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.146.618 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.146.620 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.146.621 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.146.622 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.146.623 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.146.624 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.146.627 I llama_model_loader: - type  f32:   37 tensors
0.00.146.628 I llama_model_loader: - type q8_0:  127 tensors
0.00.146.632 I print_info: file format = GGUF V3 (latest)
0.00.146.632 I print_info: file type   = Q8_0
0.00.146.635 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.254.274 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.311.651 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.312.435 I load: special tokens cache size = 5
0.00.336.681 I load: token to piece cache size = 1.6014 MB
0.00.336.703 I print_info: arch             = gemma
0.00.336.704 I print_info: vocab_only       = 0
0.00.336.705 I print_info: n_ctx_train      = 8192
0.00.336.705 I print_info: n_embd           = 2048
0.00.336.706 I print_info: n_layer          = 18
0.00.336.718 I print_info: n_head           = 8
0.00.336.720 I print_info: n_head_kv        = 1
0.00.336.721 I print_info: n_rot            = 256
0.00.336.721 I print_info: n_swa            = 0
0.00.336.722 I print_info: n_embd_head_k    = 256
0.00.336.722 I print_info: n_embd_head_v    = 256
0.00.336.724 I print_info: n_gqa            = 8
0.00.336.726 I print_info: n_embd_k_gqa     = 256
0.00.336.728 I print_info: n_embd_v_gqa     = 256
0.00.336.729 I print_info: f_norm_eps       = 0.0e+00
0.00.336.730 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.336.731 I print_info: f_clamp_kqv      = 0.0e+00
0.00.336.731 I print_info: f_max_alibi_bias = 0.0e+00
0.00.336.731 I print_info: f_logit_scale    = 0.0e+00
0.00.336.733 I print_info: n_ff             = 16384
0.00.336.733 I print_info: n_expert         = 0
0.00.336.734 I print_info: n_expert_used    = 0
0.00.336.734 I print_info: causal attn      = 1
0.00.336.734 I print_info: pooling type     = 0
0.00.336.735 I print_info: rope type        = 2
0.00.336.735 I print_info: rope scaling     = linear
0.00.336.736 I print_info: freq_base_train  = 10000.0
0.00.336.737 I print_info: freq_scale_train = 1
0.00.336.738 I print_info: n_ctx_orig_yarn  = 8192
0.00.336.738 I print_info: rope_finetuned   = unknown
0.00.336.739 I print_info: ssm_d_conv       = 0
0.00.336.740 I print_info: ssm_d_inner      = 0
0.00.336.740 I print_info: ssm_d_state      = 0
0.00.336.740 I print_info: ssm_dt_rank      = 0
0.00.336.741 I print_info: ssm_dt_b_c_rms   = 0
0.00.336.742 I print_info: model type       = 2B
0.00.336.742 I print_info: model params     = 2.51 B
0.00.336.743 I print_info: general.name     = gemma-1.1-2b-it
0.00.336.746 I print_info: vocab type       = SPM
0.00.336.747 I print_info: n_vocab          = 256000
0.00.336.747 I print_info: n_merges         = 0
0.00.336.748 I print_info: BOS token        = 2 '<bos>'
0.00.336.749 I print_info: EOS token        = 1 '<eos>'
0.00.336.749 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.336.750 I print_info: UNK token        = 3 '<unk>'
0.00.336.750 I print_info: PAD token        = 0 '<pad>'
0.00.336.750 I print_info: LF token         = 227 '<0x0A>'
0.00.336.751 I print_info: EOG token        = 1 '<eos>'
0.00.336.751 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.336.752 I print_info: max token length = 93
0.00.336.753 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.411.122 I load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.411.131 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.411.132 I load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.411.133 I load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.411.133 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.411.134 I load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.412.550 I llama_context_base: constructing llama_context_base, gtype = 0
0.00.412.555 I llama_context_base: n_seq_max     = 1
0.00.412.556 I llama_context_base: n_ctx         = 4096
0.00.412.556 I llama_context_base: n_ctx_per_seq = 4096
0.00.412.556 I llama_context_base: n_batch       = 2048
0.00.412.557 I llama_context_base: n_ubatch      = 512
0.00.412.557 I llama_context_base: causal_attn   = 1
0.00.412.557 I llama_context_base: flash_attn    = 0
0.00.412.560 I llama_context_base: freq_base     = 10000.0
0.00.412.561 I llama_context_base: freq_scale    = 1
0.00.412.562 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.412.690 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.00.412.693 I llama_context_kv_self: constructing llama_context_kv_self
0.00.412.700 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.429.187 I init:        CPU KV buffer size =    72.00 MiB
0.00.429.206 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.431.481 I reserve:        CPU compute buffer size =   509.01 MiB
0.00.431.485 I reserve: graph nodes  = 619
0.00.431.486 I reserve: graph splits = 1
0.00.431.490 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.431.490 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.528.607 I main: llama threadpool init, n_threads = 4
0.00.528.620 I 
0.00.528.682 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.528.685 I 
0.00.528.719 I sampler seed: 642948194
0.00.528.729 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.528.732 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.528.733 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.528.733 I 
 increasities from the 18th, 19th, and early 20th centuries.

**Answer:**

**18th Century

0.03.116.867 I llama_perf_sampler_print:    sampling time =       5.15 ms /    33 runs   (    0.16 ms per token,  6405.28 tokens per second)
0.03.116.870 I llama_perf_context_print:        load time =     525.00 ms
0.03.116.871 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.116.874 I llama_perf_context_print:        eval time =    2567.83 ms /    32 runs   (   80.24 ms per token,    12.46 tokens per second)
0.03.116.875 I llama_perf_context_print:       total time =    2590.98 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.194 I build: 4874 (828effd9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.392 I main: llama backend init
0.00.000.400 I main: load the model and apply lora adapter, if any
0.00.033.354 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.033.371 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.033.398 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.033.407 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.033.409 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.033.413 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.033.414 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.033.416 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.033.417 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.033.418 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.033.419 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.033.427 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.033.428 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.033.429 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.033.430 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.033.432 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.062.583 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.143.242 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.149.743 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.149.754 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.149.754 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.149.756 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.149.756 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.149.758 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.149.758 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.149.761 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.149.762 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.149.762 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.149.763 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.149.764 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.149.768 I llama_model_loader: - type  f32:   37 tensors
0.00.149.768 I llama_model_loader: - type q8_0:  127 tensors
0.00.149.771 I print_info: file format = GGUF V3 (latest)
0.00.149.771 I print_info: file type   = Q8_0
0.00.149.775 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.251.736 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.308.907 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.309.710 I load: special tokens cache size = 5
0.00.335.605 I load: token to piece cache size = 1.6014 MB
0.00.335.635 I print_info: arch             = gemma
0.00.335.637 I print_info: vocab_only       = 0
0.00.335.637 I print_info: n_ctx_train      = 8192
0.00.335.638 I print_info: n_embd           = 2048
0.00.335.638 I print_info: n_layer          = 18
0.00.335.653 I print_info: n_head           = 8
0.00.335.655 I print_info: n_head_kv        = 1
0.00.335.656 I print_info: n_rot            = 256
0.00.335.657 I print_info: n_swa            = 0
0.00.335.657 I print_info: n_embd_head_k    = 256
0.00.335.659 I print_info: n_embd_head_v    = 256
0.00.335.661 I print_info: n_gqa            = 8
0.00.335.664 I print_info: n_embd_k_gqa     = 256
0.00.335.666 I print_info: n_embd_v_gqa     = 256
0.00.335.668 I print_info: f_norm_eps       = 0.0e+00
0.00.335.673 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.335.673 I print_info: f_clamp_kqv      = 0.0e+00
0.00.335.674 I print_info: f_max_alibi_bias = 0.0e+00
0.00.335.674 I print_info: f_logit_scale    = 0.0e+00
0.00.335.677 I print_info: n_ff             = 16384
0.00.335.677 I print_info: n_expert         = 0
0.00.335.678 I print_info: n_expert_used    = 0
0.00.335.681 I print_info: causal attn      = 1
0.00.335.681 I print_info: pooling type     = 0
0.00.335.682 I print_info: rope type        = 2
0.00.335.682 I print_info: rope scaling     = linear
0.00.335.684 I print_info: freq_base_train  = 10000.0
0.00.335.685 I print_info: freq_scale_train = 1
0.00.335.685 I print_info: n_ctx_orig_yarn  = 8192
0.00.335.686 I print_info: rope_finetuned   = unknown
0.00.335.687 I print_info: ssm_d_conv       = 0
0.00.335.687 I print_info: ssm_d_inner      = 0
0.00.335.688 I print_info: ssm_d_state      = 0
0.00.335.688 I print_info: ssm_dt_rank      = 0
0.00.335.689 I print_info: ssm_dt_b_c_rms   = 0
0.00.335.689 I print_info: model type       = 2B
0.00.335.691 I print_info: model params     = 2.51 B
0.00.335.691 I print_info: general.name     = gemma-1.1-2b-it
0.00.335.695 I print_info: vocab type       = SPM
0.00.335.697 I print_info: n_vocab          = 256000
0.00.335.697 I print_info: n_merges         = 0
0.00.335.698 I print_info: BOS token        = 2 '<bos>'
0.00.335.699 I print_info: EOS token        = 1 '<eos>'
0.00.335.699 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.335.700 I print_info: UNK token        = 3 '<unk>'
0.00.335.701 I print_info: PAD token        = 0 '<pad>'
0.00.335.701 I print_info: LF token         = 227 '<0x0A>'
0.00.335.702 I print_info: EOG token        = 1 '<eos>'
0.00.335.703 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.335.703 I print_info: max token length = 93
0.00.335.705 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.409.855 I load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.409.862 I load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.411.164 I llama_context_base: constructing llama_context_base, gtype = 0
0.00.411.168 I llama_context_base: n_seq_max     = 1
0.00.411.168 I llama_context_base: n_ctx         = 4096
0.00.411.169 I llama_context_base: n_ctx_per_seq = 4096
0.00.411.169 I llama_context_base: n_batch       = 2048
0.00.411.170 I llama_context_base: n_ubatch      = 512
0.00.411.170 I llama_context_base: causal_attn   = 1
0.00.411.171 I llama_context_base: flash_attn    = 0
0.00.411.173 I llama_context_base: freq_base     = 10000.0
0.00.411.174 I llama_context_base: freq_scale    = 1
0.00.411.174 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.411.285 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.00.411.289 I llama_context_kv_self: constructing llama_context_kv_self
0.00.411.296 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.427.706 I init:        CPU KV buffer size =    72.00 MiB
0.00.427.726 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.429.797 I reserve:        CPU compute buffer size =   509.01 MiB
0.00.429.801 I reserve: graph nodes  = 619
0.00.429.801 I reserve: graph splits = 1
0.00.429.805 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.429.806 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.528.676 I main: llama threadpool init, n_threads = 4
0.00.528.689 I 
0.00.528.750 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.528.754 I 
0.00.528.787 I sampler seed: 2413503632
0.00.528.797 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.528.800 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.528.801 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.528.801 I 
 increasities and pronouncements of doom upon those who dared to oppose the encroaching darkness.

This is the atmosphere I want to create.

**Questions:**

0.03.117.940 I llama_perf_sampler_print:    sampling time =       5.67 ms /    33 runs   (    0.17 ms per token,  5819.08 tokens per second)
0.03.117.942 I llama_perf_context_print:        load time =     525.57 ms
0.03.117.943 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.117.944 I llama_perf_context_print:        eval time =    2567.31 ms /    32 runs   (   80.23 ms per token,    12.46 tokens per second)
0.03.117.945 I llama_perf_context_print:       total time =    2591.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m22.203s
user	0m42.804s
sys	0m9.560s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4874 (828effd9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40387.73 ms
main:    total time = 40387.73 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.566 I build: 4874 (828effd9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.763 I main: llama backend init
0.00.000.771 I main: load the model and apply lora adapter, if any
0.00.030.624 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.030.638 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.030.647 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.654 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.655 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.658 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.659 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.660 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.661 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.661 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.663 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.673 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.676 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.677 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.678 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.057.307 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.133.073 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.139.426 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.139.435 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.139.437 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.139.437 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.139.438 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.139.440 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.139.441 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.139.443 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.139.444 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.139.446 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.139.446 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.139.447 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.139.448 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.139.452 I llama_model_loader: - type  f32:   37 tensors
0.00.139.453 I llama_model_loader: - type q4_K:  108 tensors
0.00.139.454 I llama_model_loader: - type q6_K:   19 tensors
0.00.139.456 I print_info: file format = GGUF V3 (latest)
0.00.139.457 I print_info: file type   = Q4_K - Medium
0.00.139.460 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.225.689 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.281.499 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.282.370 I load: special tokens cache size = 5
0.00.304.767 I load: token to piece cache size = 1.6014 MB
0.00.304.796 I print_info: arch             = gemma
0.00.304.797 I print_info: vocab_only       = 0
0.00.304.797 I print_info: n_ctx_train      = 8192
0.00.304.797 I print_info: n_embd           = 2048
0.00.304.798 I print_info: n_layer          = 18
0.00.304.810 I print_info: n_head           = 8
0.00.304.812 I print_info: n_head_kv        = 1
0.00.304.813 I print_info: n_rot            = 256
0.00.304.813 I print_info: n_swa            = 0
0.00.304.814 I print_info: n_embd_head_k    = 256
0.00.304.814 I print_info: n_embd_head_v    = 256
0.00.304.816 I print_info: n_gqa            = 8
0.00.304.818 I print_info: n_embd_k_gqa     = 256
0.00.304.820 I print_info: n_embd_v_gqa     = 256
0.00.304.820 I print_info: f_norm_eps       = 0.0e+00
0.00.304.821 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.304.822 I print_info: f_clamp_kqv      = 0.0e+00
0.00.304.822 I print_info: f_max_alibi_bias = 0.0e+00
0.00.304.822 I print_info: f_logit_scale    = 0.0e+00
0.00.304.824 I print_info: n_ff             = 16384
0.00.304.825 I print_info: n_expert         = 0
0.00.304.825 I print_info: n_expert_used    = 0
0.00.304.825 I print_info: causal attn      = 1
0.00.304.825 I print_info: pooling type     = 0
0.00.304.826 I print_info: rope type        = 2
0.00.304.826 I print_info: rope scaling     = linear
0.00.304.828 I print_info: freq_base_train  = 10000.0
0.00.304.828 I print_info: freq_scale_train = 1
0.00.304.828 I print_info: n_ctx_orig_yarn  = 8192
0.00.304.829 I print_info: rope_finetuned   = unknown
0.00.304.829 I print_info: ssm_d_conv       = 0
0.00.304.829 I print_info: ssm_d_inner      = 0
0.00.304.830 I print_info: ssm_d_state      = 0
0.00.304.830 I print_info: ssm_dt_rank      = 0
0.00.304.831 I print_info: ssm_dt_b_c_rms   = 0
0.00.304.831 I print_info: model type       = 2B
0.00.304.832 I print_info: model params     = 2.51 B
0.00.304.833 I print_info: general.name     = gemma-1.1-2b-it
0.00.304.836 I print_info: vocab type       = SPM
0.00.304.838 I print_info: n_vocab          = 256000
0.00.304.838 I print_info: n_merges         = 0
0.00.304.839 I print_info: BOS token        = 2 '<bos>'
0.00.304.839 I print_info: EOS token        = 1 '<eos>'
0.00.304.839 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.304.840 I print_info: UNK token        = 3 '<unk>'
0.00.304.840 I print_info: PAD token        = 0 '<pad>'
0.00.304.840 I print_info: LF token         = 227 '<0x0A>'
0.00.304.841 I print_info: EOG token        = 1 '<eos>'
0.00.304.842 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.304.842 I print_info: max token length = 93
0.00.304.843 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.353.258 I load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.353.266 I load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.353.267 I load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.353.268 I load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.353.268 I load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.353.269 I load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.354.567 I llama_context_base: constructing llama_context_base, gtype = 0
0.00.354.571 I llama_context_base: n_seq_max     = 1
0.00.354.571 I llama_context_base: n_ctx         = 4096
0.00.354.572 I llama_context_base: n_ctx_per_seq = 4096
0.00.354.572 I llama_context_base: n_batch       = 2048
0.00.354.573 I llama_context_base: n_ubatch      = 512
0.00.354.573 I llama_context_base: causal_attn   = 1
0.00.354.574 I llama_context_base: flash_attn    = 0
0.00.354.575 I llama_context_base: freq_base     = 10000.0
0.00.354.576 I llama_context_base: freq_scale    = 1
0.00.354.577 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.354.687 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.00.354.692 I llama_context_kv_self: constructing llama_context_kv_self
0.00.354.698 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.369.595 I init:        CPU KV buffer size =    72.00 MiB
0.00.369.611 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.371.630 I reserve:        CPU compute buffer size =   509.01 MiB
0.00.371.635 I reserve: graph nodes  = 619
0.00.371.635 I reserve: graph splits = 1
0.00.371.639 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.371.640 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.004 I main: llama threadpool init, n_threads = 4
0.00.451.020 I 
0.00.451.078 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.451.081 I 
0.00.451.116 I sampler seed: 1692956950
0.00.451.127 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.132 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.451.132 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.132 I 
 squaRE, a leading provider of cloud-based business applications and data management solutions, is seeking a Chief Marketing Officer.

**Responsibilities:**

* Develop and

0.02.144.240 I llama_perf_sampler_print:    sampling time =       5.37 ms /    33 runs   (    0.16 ms per token,  6147.54 tokens per second)
0.02.144.243 I llama_perf_context_print:        load time =     447.57 ms
0.02.144.244 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.144.246 I llama_perf_context_print:        eval time =    1672.87 ms /    32 runs   (   52.28 ms per token,    19.13 tokens per second)
0.02.144.246 I llama_perf_context_print:       total time =    1695.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4874 (828effd9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40333.12 ms
main:    total time = 40333.12 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.602 I build: 4874 (828effd9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.842 I main: llama backend init
0.00.000.849 I main: load the model and apply lora adapter, if any
0.00.030.823 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.030.842 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.851 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.852 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.855 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.856 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.856 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.857 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.857 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.858 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.863 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.864 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.865 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.866 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.058.086 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.133.668 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.140.084 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.140.093 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.140.094 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.140.095 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.140.095 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.140.096 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.140.097 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.140.099 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.140.100 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.140.102 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.140.106 I llama_model_loader: - type  f32:   37 tensors
0.00.140.107 I llama_model_loader: - type q4_K:  108 tensors
0.00.140.107 I llama_model_loader: - type q6_K:   19 tensors
0.00.140.110 I print_info: file format = GGUF V3 (latest)
0.00.140.111 I print_info: file type   = Q4_K - Medium
0.00.140.113 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.226.299 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.280.990 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.281.748 I load: special tokens cache size = 5
0.00.304.029 I load: token to piece cache size = 1.6014 MB
0.00.304.054 I print_info: arch             = gemma
0.00.304.055 I print_info: vocab_only       = 0
0.00.304.055 I print_info: n_ctx_train      = 8192
0.00.304.055 I print_info: n_embd           = 2048
0.00.304.056 I print_info: n_layer          = 18
0.00.304.070 I print_info: n_head           = 8
0.00.304.072 I print_info: n_head_kv        = 1
0.00.304.072 I print_info: n_rot            = 256
0.00.304.073 I print_info: n_swa            = 0
0.00.304.073 I print_info: n_embd_head_k    = 256
0.00.304.074 I print_info: n_embd_head_v    = 256
0.00.304.076 I print_info: n_gqa            = 8
0.00.304.077 I print_info: n_embd_k_gqa     = 256
0.00.304.079 I print_info: n_embd_v_gqa     = 256
0.00.304.080 I print_info: f_norm_eps       = 0.0e+00
0.00.304.081 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.304.083 I print_info: f_clamp_kqv      = 0.0e+00
0.00.304.083 I print_info: f_max_alibi_bias = 0.0e+00
0.00.304.084 I print_info: f_logit_scale    = 0.0e+00
0.00.304.086 I print_info: n_ff             = 16384
0.00.304.086 I print_info: n_expert         = 0
0.00.304.087 I print_info: n_expert_used    = 0
0.00.304.087 I print_info: causal attn      = 1
0.00.304.087 I print_info: pooling type     = 0
0.00.304.088 I print_info: rope type        = 2
0.00.304.091 I print_info: rope scaling     = linear
0.00.304.093 I print_info: freq_base_train  = 10000.0
0.00.304.094 I print_info: freq_scale_train = 1
0.00.304.095 I print_info: n_ctx_orig_yarn  = 8192
0.00.304.096 I print_info: rope_finetuned   = unknown
0.00.304.096 I print_info: ssm_d_conv       = 0
0.00.304.097 I print_info: ssm_d_inner      = 0
0.00.304.097 I print_info: ssm_d_state      = 0
0.00.304.098 I print_info: ssm_dt_rank      = 0
0.00.304.098 I print_info: ssm_dt_b_c_rms   = 0
0.00.304.099 I print_info: model type       = 2B
0.00.304.100 I print_info: model params     = 2.51 B
0.00.304.100 I print_info: general.name     = gemma-1.1-2b-it
0.00.304.104 I print_info: vocab type       = SPM
0.00.304.105 I print_info: n_vocab          = 256000
0.00.304.106 I print_info: n_merges         = 0
0.00.304.106 I print_info: BOS token        = 2 '<bos>'
0.00.304.107 I print_info: EOS token        = 1 '<eos>'
0.00.304.108 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.304.109 I print_info: UNK token        = 3 '<unk>'
0.00.304.109 I print_info: PAD token        = 0 '<pad>'
0.00.304.110 I print_info: LF token         = 227 '<0x0A>'
0.00.304.110 I print_info: EOG token        = 1 '<eos>'
0.00.304.111 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.304.111 I print_info: max token length = 93
0.00.304.113 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.349.163 I load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.350.597 I llama_context_base: constructing llama_context_base, gtype = 0
0.00.350.601 I llama_context_base: n_seq_max     = 1
0.00.350.601 I llama_context_base: n_ctx         = 4096
0.00.350.602 I llama_context_base: n_ctx_per_seq = 4096
0.00.350.602 I llama_context_base: n_batch       = 2048
0.00.350.602 I llama_context_base: n_ubatch      = 512
0.00.350.603 I llama_context_base: causal_attn   = 1
0.00.350.603 I llama_context_base: flash_attn    = 0
0.00.350.605 I llama_context_base: freq_base     = 10000.0
0.00.350.606 I llama_context_base: freq_scale    = 1
0.00.350.606 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.717 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.00.350.721 I llama_context_kv_self: constructing llama_context_kv_self
0.00.350.727 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.366.529 I init:        CPU KV buffer size =    72.00 MiB
0.00.366.549 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.368.890 I reserve:        CPU compute buffer size =   509.01 MiB
0.00.368.894 I reserve: graph nodes  = 619
0.00.368.894 I reserve: graph splits = 1
0.00.368.899 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.368.899 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.454.634 I main: llama threadpool init, n_threads = 4
0.00.454.650 I 
0.00.454.713 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.454.717 I 
0.00.454.751 I sampler seed: 1364067167
0.00.454.762 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.454.765 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.454.766 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.454.767 I 
 maneuvously.

I am unable to generate a response as requested because I am unable to access external websites or specific data sources. [end of text]


0.01.944.186 I llama_perf_sampler_print:    sampling time =       4.84 ms /    29 runs   (    0.17 ms per token,  5994.21 tokens per second)
0.01.944.189 I llama_perf_context_print:        load time =     451.08 ms
0.01.944.190 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.944.192 I llama_perf_context_print:        eval time =    1471.65 ms /    28 runs   (   52.56 ms per token,    19.03 tokens per second)
0.01.944.192 I llama_perf_context_print:       total time =    1492.24 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.717s
user	10m25.721s
sys	0m6.977s
