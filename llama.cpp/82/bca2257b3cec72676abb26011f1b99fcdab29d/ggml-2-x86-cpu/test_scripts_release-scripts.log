+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.530 I build: 4247 (82bca225) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.723 I main: llama backend init
0.00.000.730 I main: load the model and apply lora adapter, if any
0.00.021.325 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.335 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.342 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.347 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.348 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.352 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.353 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.354 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.354 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.355 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.355 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.359 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.360 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.360 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.361 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.361 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.729 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.959 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.802 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.807 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.808 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.809 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.809 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.810 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.811 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.813 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.814 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.814 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.815 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.816 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.819 I llama_model_loader: - type  f32:   37 tensors
0.00.130.821 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.694 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.478 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.238.940 I llm_load_vocab: special tokens cache size = 5
0.00.259.830 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.259.850 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.259.851 I llm_load_print_meta: arch             = gemma
0.00.259.851 I llm_load_print_meta: vocab type       = SPM
0.00.259.852 I llm_load_print_meta: n_vocab          = 256000
0.00.259.853 I llm_load_print_meta: n_merges         = 0
0.00.259.853 I llm_load_print_meta: vocab_only       = 0
0.00.259.853 I llm_load_print_meta: n_ctx_train      = 8192
0.00.259.854 I llm_load_print_meta: n_embd           = 2048
0.00.259.855 I llm_load_print_meta: n_layer          = 18
0.00.259.867 I llm_load_print_meta: n_head           = 8
0.00.259.868 I llm_load_print_meta: n_head_kv        = 1
0.00.259.868 I llm_load_print_meta: n_rot            = 256
0.00.259.868 I llm_load_print_meta: n_swa            = 0
0.00.259.868 I llm_load_print_meta: n_embd_head_k    = 256
0.00.259.869 I llm_load_print_meta: n_embd_head_v    = 256
0.00.259.870 I llm_load_print_meta: n_gqa            = 8
0.00.259.871 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.259.872 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.259.872 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.259.874 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.259.875 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.259.875 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.259.876 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.259.876 I llm_load_print_meta: n_ff             = 16384
0.00.259.877 I llm_load_print_meta: n_expert         = 0
0.00.259.877 I llm_load_print_meta: n_expert_used    = 0
0.00.259.877 I llm_load_print_meta: causal attn      = 1
0.00.259.878 I llm_load_print_meta: pooling type     = 0
0.00.259.878 I llm_load_print_meta: rope type        = 2
0.00.259.878 I llm_load_print_meta: rope scaling     = linear
0.00.259.880 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.259.880 I llm_load_print_meta: freq_scale_train = 1
0.00.259.881 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.259.881 I llm_load_print_meta: rope_finetuned   = unknown
0.00.259.881 I llm_load_print_meta: ssm_d_conv       = 0
0.00.259.882 I llm_load_print_meta: ssm_d_inner      = 0
0.00.259.882 I llm_load_print_meta: ssm_d_state      = 0
0.00.259.882 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.259.883 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.259.883 I llm_load_print_meta: model type       = 2B
0.00.259.884 I llm_load_print_meta: model ftype      = Q8_0
0.00.259.884 I llm_load_print_meta: model params     = 2.51 B
0.00.259.885 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.259.885 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.259.886 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.259.886 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.259.887 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.259.887 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.259.888 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.259.888 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.259.888 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.259.889 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.259.889 I llm_load_print_meta: max token length = 93
0.00.360.355 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.360.361 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.360.362 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.360.362 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.360.363 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.360.364 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.365.560 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.566 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.567 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.567 I llama_new_context_with_model: n_batch       = 2048
0.00.365.567 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.568 I llama_new_context_with_model: flash_attn    = 0
0.00.365.570 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.571 I llama_new_context_with_model: freq_scale    = 1
0.00.365.572 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.379.715 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.726 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.810 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.979 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.985 I llama_new_context_with_model: graph nodes  = 601
0.00.380.986 I llama_new_context_with_model: graph splits = 1
0.00.380.988 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.465.538 I main: llama threadpool init, n_threads = 4
0.00.465.553 I 
0.00.465.625 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.465.625 I 
0.00.465.667 I sampler seed: 582397670
0.00.465.675 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.465.682 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.465.683 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.465.683 I 
 increasities as a form of mental illness.

This statement is false.

While there may be some individuals who experience delusional or eccentric symptoms, there is no

0.02.701.141 I llama_perf_sampler_print:    sampling time =       4.69 ms /    33 runs   (    0.14 ms per token,  7040.75 tokens per second)
0.02.701.144 I llama_perf_context_print:        load time =     464.79 ms
0.02.701.145 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.701.146 I llama_perf_context_print:        eval time =    2217.33 ms /    32 runs   (   69.29 ms per token,    14.43 tokens per second)
0.02.701.147 I llama_perf_context_print:       total time =    2235.61 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.528 I build: 4247 (82bca225) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.720 I main: llama backend init
0.00.000.726 I main: load the model and apply lora adapter, if any
0.00.021.180 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.194 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.201 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.202 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.206 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.209 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.209 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.210 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.210 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.211 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.215 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.216 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.217 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.217 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.218 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.351 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.806 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.696 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.702 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.703 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.704 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.704 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.705 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.706 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.708 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.709 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.709 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.710 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.711 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.714 I llama_model_loader: - type  f32:   37 tensors
0.00.130.715 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.267 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.813 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.315 I llm_load_vocab: special tokens cache size = 5
0.00.265.991 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.006 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.007 I llm_load_print_meta: arch             = gemma
0.00.266.007 I llm_load_print_meta: vocab type       = SPM
0.00.266.008 I llm_load_print_meta: n_vocab          = 256000
0.00.266.009 I llm_load_print_meta: n_merges         = 0
0.00.266.009 I llm_load_print_meta: vocab_only       = 0
0.00.266.009 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.010 I llm_load_print_meta: n_embd           = 2048
0.00.266.010 I llm_load_print_meta: n_layer          = 18
0.00.266.020 I llm_load_print_meta: n_head           = 8
0.00.266.021 I llm_load_print_meta: n_head_kv        = 1
0.00.266.021 I llm_load_print_meta: n_rot            = 256
0.00.266.021 I llm_load_print_meta: n_swa            = 0
0.00.266.022 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.022 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.023 I llm_load_print_meta: n_gqa            = 8
0.00.266.024 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.025 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.026 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.027 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.028 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.028 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.028 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.029 I llm_load_print_meta: n_ff             = 16384
0.00.266.030 I llm_load_print_meta: n_expert         = 0
0.00.266.030 I llm_load_print_meta: n_expert_used    = 0
0.00.266.030 I llm_load_print_meta: causal attn      = 1
0.00.266.030 I llm_load_print_meta: pooling type     = 0
0.00.266.031 I llm_load_print_meta: rope type        = 2
0.00.266.031 I llm_load_print_meta: rope scaling     = linear
0.00.266.033 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.034 I llm_load_print_meta: freq_scale_train = 1
0.00.266.034 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.034 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.035 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.035 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.035 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.036 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.036 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.036 I llm_load_print_meta: model type       = 2B
0.00.266.037 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.038 I llm_load_print_meta: model params     = 2.51 B
0.00.266.039 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.039 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.039 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.040 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.040 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.040 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.041 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.041 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.042 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.042 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.042 I llm_load_print_meta: max token length = 93
0.00.361.013 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.366.276 I llama_new_context_with_model: n_seq_max     = 1
0.00.366.282 I llama_new_context_with_model: n_ctx         = 4096
0.00.366.282 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.366.282 I llama_new_context_with_model: n_batch       = 2048
0.00.366.283 I llama_new_context_with_model: n_ubatch      = 512
0.00.366.283 I llama_new_context_with_model: flash_attn    = 0
0.00.366.285 I llama_new_context_with_model: freq_base     = 10000.0
0.00.366.286 I llama_new_context_with_model: freq_scale    = 1
0.00.366.287 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.867 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.880 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.972 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.219 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.224 I llama_new_context_with_model: graph nodes  = 601
0.00.382.224 I llama_new_context_with_model: graph splits = 1
0.00.382.226 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.125 I main: llama threadpool init, n_threads = 4
0.00.463.139 I 
0.00.463.211 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.463.214 I 
0.00.463.262 I sampler seed: 4100511185
0.00.463.273 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.277 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.277 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.277 I 
 increasities. [end of text]


0.00.736.333 I llama_perf_sampler_print:    sampling time =       0.60 ms /     5 runs   (    0.12 ms per token,  8278.15 tokens per second)
0.00.736.335 I llama_perf_context_print:        load time =     462.38 ms
0.00.736.336 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.736.338 I llama_perf_context_print:        eval time =     270.00 ms /     4 runs   (   67.50 ms per token,    14.81 tokens per second)
0.00.736.338 I llama_perf_context_print:       total time =     273.22 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.172 I build: 4247 (82bca225) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.366 I main: llama backend init
0.00.000.373 I main: load the model and apply lora adapter, if any
0.00.020.425 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.437 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.455 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.460 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.461 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.468 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.469 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.469 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.470 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.470 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.471 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.475 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.476 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.477 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.477 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.478 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.615 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.442 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.267 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.273 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.274 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.275 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.275 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.276 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.277 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.279 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.280 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.280 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.281 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.282 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.287 I llama_model_loader: - type  f32:   37 tensors
0.00.131.288 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.566 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.331 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.880 I llm_load_vocab: special tokens cache size = 5
0.00.263.581 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.597 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.598 I llm_load_print_meta: arch             = gemma
0.00.263.598 I llm_load_print_meta: vocab type       = SPM
0.00.263.599 I llm_load_print_meta: n_vocab          = 256000
0.00.263.600 I llm_load_print_meta: n_merges         = 0
0.00.263.600 I llm_load_print_meta: vocab_only       = 0
0.00.263.600 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.601 I llm_load_print_meta: n_embd           = 2048
0.00.263.601 I llm_load_print_meta: n_layer          = 18
0.00.263.611 I llm_load_print_meta: n_head           = 8
0.00.263.612 I llm_load_print_meta: n_head_kv        = 1
0.00.263.612 I llm_load_print_meta: n_rot            = 256
0.00.263.613 I llm_load_print_meta: n_swa            = 0
0.00.263.613 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.613 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.614 I llm_load_print_meta: n_gqa            = 8
0.00.263.615 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.616 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.617 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.618 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.618 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.619 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.620 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.620 I llm_load_print_meta: n_ff             = 16384
0.00.263.621 I llm_load_print_meta: n_expert         = 0
0.00.263.621 I llm_load_print_meta: n_expert_used    = 0
0.00.263.621 I llm_load_print_meta: causal attn      = 1
0.00.263.621 I llm_load_print_meta: pooling type     = 0
0.00.263.622 I llm_load_print_meta: rope type        = 2
0.00.263.622 I llm_load_print_meta: rope scaling     = linear
0.00.263.624 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.624 I llm_load_print_meta: freq_scale_train = 1
0.00.263.624 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.625 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.625 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.625 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.626 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.626 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.626 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.627 I llm_load_print_meta: model type       = 2B
0.00.263.628 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.629 I llm_load_print_meta: model params     = 2.51 B
0.00.263.630 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.630 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.630 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.631 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.631 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.631 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.632 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.632 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.632 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.633 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.633 I llm_load_print_meta: max token length = 93
0.00.339.403 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.339.410 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.339.411 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.339.411 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.339.412 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.339.413 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.344.494 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.501 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.501 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.501 I llama_new_context_with_model: n_batch       = 2048
0.00.344.502 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.502 I llama_new_context_with_model: flash_attn    = 0
0.00.344.504 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.505 I llama_new_context_with_model: freq_scale    = 1
0.00.344.506 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.547 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.560 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.358.648 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.359.918 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.359.924 I llama_new_context_with_model: graph nodes  = 601
0.00.359.924 I llama_new_context_with_model: graph splits = 1
0.00.359.927 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.071 I main: llama threadpool init, n_threads = 4
0.00.445.088 I 
0.00.445.159 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.445.162 I 
0.00.445.204 I sampler seed: 415774379
0.00.445.215 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.217 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.445.218 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.219 I 
 increasities with a youthful exuberance. The sun warms their skin, the wind whispers through their hair, and they are lost in the moment.

This idyllic

0.02.715.930 I llama_perf_sampler_print:    sampling time =       5.00 ms /    33 runs   (    0.15 ms per token,  6598.68 tokens per second)
0.02.715.934 I llama_perf_context_print:        load time =     444.68 ms
0.02.715.934 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.715.937 I llama_perf_context_print:        eval time =    2251.51 ms /    32 runs   (   70.36 ms per token,    14.21 tokens per second)
0.02.715.938 I llama_perf_context_print:       total time =    2270.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.600 I build: 4247 (82bca225) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.869 I main: llama backend init
0.00.000.877 I main: load the model and apply lora adapter, if any
0.00.021.527 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.534 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.541 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.550 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.554 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.558 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.559 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.560 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.561 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.562 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.563 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.567 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.568 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.569 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.570 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.571 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.487 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.947 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.805 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.811 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.812 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.812 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.813 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.814 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.814 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.817 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.817 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.818 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.819 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.820 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.823 I llama_model_loader: - type  f32:   37 tensors
0.00.131.825 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.749 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.843 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.338 I llm_load_vocab: special tokens cache size = 5
0.00.260.183 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.200 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.201 I llm_load_print_meta: arch             = gemma
0.00.260.202 I llm_load_print_meta: vocab type       = SPM
0.00.260.202 I llm_load_print_meta: n_vocab          = 256000
0.00.260.203 I llm_load_print_meta: n_merges         = 0
0.00.260.203 I llm_load_print_meta: vocab_only       = 0
0.00.260.203 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.204 I llm_load_print_meta: n_embd           = 2048
0.00.260.204 I llm_load_print_meta: n_layer          = 18
0.00.260.216 I llm_load_print_meta: n_head           = 8
0.00.260.217 I llm_load_print_meta: n_head_kv        = 1
0.00.260.217 I llm_load_print_meta: n_rot            = 256
0.00.260.217 I llm_load_print_meta: n_swa            = 0
0.00.260.218 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.218 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.219 I llm_load_print_meta: n_gqa            = 8
0.00.260.220 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.221 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.222 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.223 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.223 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.224 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.224 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.225 I llm_load_print_meta: n_ff             = 16384
0.00.260.225 I llm_load_print_meta: n_expert         = 0
0.00.260.226 I llm_load_print_meta: n_expert_used    = 0
0.00.260.226 I llm_load_print_meta: causal attn      = 1
0.00.260.226 I llm_load_print_meta: pooling type     = 0
0.00.260.226 I llm_load_print_meta: rope type        = 2
0.00.260.227 I llm_load_print_meta: rope scaling     = linear
0.00.260.228 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.229 I llm_load_print_meta: freq_scale_train = 1
0.00.260.229 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.229 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.229 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.230 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.230 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.230 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.231 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.231 I llm_load_print_meta: model type       = 2B
0.00.260.231 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.232 I llm_load_print_meta: model params     = 2.51 B
0.00.260.233 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.233 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.234 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.234 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.234 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.235 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.235 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.235 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.236 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.236 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.236 I llm_load_print_meta: max token length = 93
0.00.331.537 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.331.544 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.336.728 I llama_new_context_with_model: n_seq_max     = 1
0.00.336.734 I llama_new_context_with_model: n_ctx         = 4096
0.00.336.734 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.336.735 I llama_new_context_with_model: n_batch       = 2048
0.00.336.736 I llama_new_context_with_model: n_ubatch      = 512
0.00.336.736 I llama_new_context_with_model: flash_attn    = 0
0.00.336.747 I llama_new_context_with_model: freq_base     = 10000.0
0.00.336.748 I llama_new_context_with_model: freq_scale    = 1
0.00.336.749 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.963 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.350.977 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.087 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.332 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.339 I llama_new_context_with_model: graph nodes  = 601
0.00.352.340 I llama_new_context_with_model: graph splits = 1
0.00.352.342 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.457.707 I main: llama threadpool init, n_threads = 4
0.00.457.722 I 
0.00.457.803 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.457.808 I 
0.00.457.857 I sampler seed: 1988287517
0.00.457.870 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.457.882 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.457.887 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.457.887 I 
 increasements of the 19th century.

The 19th century witnessed a plethora of innovations in various fields, including medicine, communication, and

0.02.876.872 I llama_perf_sampler_print:    sampling time =       4.93 ms /    33 runs   (    0.15 ms per token,  6689.64 tokens per second)
0.02.876.875 I llama_perf_context_print:        load time =     456.81 ms
0.02.876.876 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.876.877 I llama_perf_context_print:        eval time =    2399.95 ms /    32 runs   (   75.00 ms per token,    13.33 tokens per second)
0.02.876.878 I llama_perf_context_print:       total time =    2419.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.361s
user	0m31.692s
sys	0m9.220s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4247 (82bca225)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40210.39 ms
main:    total time = 40210.39 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.588 I build: 4247 (82bca225) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.783 I main: llama backend init
0.00.000.790 I main: load the model and apply lora adapter, if any
0.00.020.912 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.922 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.930 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.935 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.936 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.940 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.941 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.942 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.943 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.944 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.944 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.948 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.949 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.949 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.950 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.950 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.487 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.763 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.548 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.554 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.554 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.555 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.556 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.557 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.557 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.559 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.560 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.560 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.561 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.561 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.565 I llama_model_loader: - type  f32:   37 tensors
0.00.130.565 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.566 I llama_model_loader: - type q6_K:   19 tensors
0.00.199.040 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.476 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.238.002 I llm_load_vocab: special tokens cache size = 5
0.00.258.742 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.258.757 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.258.757 I llm_load_print_meta: arch             = gemma
0.00.258.758 I llm_load_print_meta: vocab type       = SPM
0.00.258.758 I llm_load_print_meta: n_vocab          = 256000
0.00.258.759 I llm_load_print_meta: n_merges         = 0
0.00.258.759 I llm_load_print_meta: vocab_only       = 0
0.00.258.759 I llm_load_print_meta: n_ctx_train      = 8192
0.00.258.760 I llm_load_print_meta: n_embd           = 2048
0.00.258.760 I llm_load_print_meta: n_layer          = 18
0.00.258.771 I llm_load_print_meta: n_head           = 8
0.00.258.772 I llm_load_print_meta: n_head_kv        = 1
0.00.258.773 I llm_load_print_meta: n_rot            = 256
0.00.258.773 I llm_load_print_meta: n_swa            = 0
0.00.258.773 I llm_load_print_meta: n_embd_head_k    = 256
0.00.258.773 I llm_load_print_meta: n_embd_head_v    = 256
0.00.258.774 I llm_load_print_meta: n_gqa            = 8
0.00.258.775 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.258.777 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.258.778 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.258.779 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.258.779 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.258.780 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.258.780 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.258.781 I llm_load_print_meta: n_ff             = 16384
0.00.258.781 I llm_load_print_meta: n_expert         = 0
0.00.258.781 I llm_load_print_meta: n_expert_used    = 0
0.00.258.782 I llm_load_print_meta: causal attn      = 1
0.00.258.782 I llm_load_print_meta: pooling type     = 0
0.00.258.782 I llm_load_print_meta: rope type        = 2
0.00.258.782 I llm_load_print_meta: rope scaling     = linear
0.00.258.784 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.258.785 I llm_load_print_meta: freq_scale_train = 1
0.00.258.785 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.258.785 I llm_load_print_meta: rope_finetuned   = unknown
0.00.258.786 I llm_load_print_meta: ssm_d_conv       = 0
0.00.258.786 I llm_load_print_meta: ssm_d_inner      = 0
0.00.258.786 I llm_load_print_meta: ssm_d_state      = 0
0.00.258.786 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.258.787 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.258.787 I llm_load_print_meta: model type       = 2B
0.00.258.788 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.258.788 I llm_load_print_meta: model params     = 2.51 B
0.00.258.789 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.258.789 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.258.790 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.258.790 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.258.791 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.258.791 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.258.791 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.258.792 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.258.792 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.258.792 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.258.793 I llm_load_print_meta: max token length = 93
0.00.319.617 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.319.623 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.319.624 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.319.624 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.319.625 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.319.625 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.324.631 I llama_new_context_with_model: n_seq_max     = 1
0.00.324.637 I llama_new_context_with_model: n_ctx         = 4096
0.00.324.638 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.324.638 I llama_new_context_with_model: n_batch       = 2048
0.00.324.639 I llama_new_context_with_model: n_ubatch      = 512
0.00.324.639 I llama_new_context_with_model: flash_attn    = 0
0.00.324.641 I llama_new_context_with_model: freq_base     = 10000.0
0.00.324.643 I llama_new_context_with_model: freq_scale    = 1
0.00.324.644 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.339.028 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.339.042 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.339.134 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.340.321 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.340.328 I llama_new_context_with_model: graph nodes  = 601
0.00.340.328 I llama_new_context_with_model: graph splits = 1
0.00.340.331 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.415.207 I main: llama threadpool init, n_threads = 4
0.00.415.224 I 
0.00.415.296 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.415.299 I 
0.00.415.345 I sampler seed: 2983984774
0.00.415.359 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.415.368 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.415.370 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.415.382 I 
 seconally.

I'm unable to generate a response because the provided context does not contain any instructions or information regarding how to generate a response. [end of text]


0.01.948.521 I llama_perf_sampler_print:    sampling time =       4.73 ms /    32 runs   (    0.15 ms per token,  6765.33 tokens per second)
0.01.948.524 I llama_perf_context_print:        load time =     414.40 ms
0.01.948.526 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.948.527 I llama_perf_context_print:        eval time =    1514.90 ms /    31 runs   (   48.87 ms per token,    20.46 tokens per second)
0.01.948.528 I llama_perf_context_print:       total time =    1533.32 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4247 (82bca225)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40174.45 ms
main:    total time = 40174.45 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.180 I build: 4247 (82bca225) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.396 I main: llama backend init
0.00.000.402 I main: load the model and apply lora adapter, if any
0.00.020.450 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.464 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.470 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.471 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.474 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.475 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.477 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.477 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.478 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.478 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.482 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.482 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.483 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.484 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.484 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.011 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.574 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.475 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.481 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.482 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.483 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.484 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.485 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.486 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.489 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.490 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.493 I llama_model_loader: - type  f32:   37 tensors
0.00.130.494 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.495 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.646 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.412 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.903 I llm_load_vocab: special tokens cache size = 5
0.00.268.920 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.937 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.938 I llm_load_print_meta: arch             = gemma
0.00.268.938 I llm_load_print_meta: vocab type       = SPM
0.00.268.939 I llm_load_print_meta: n_vocab          = 256000
0.00.268.939 I llm_load_print_meta: n_merges         = 0
0.00.268.940 I llm_load_print_meta: vocab_only       = 0
0.00.268.940 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.940 I llm_load_print_meta: n_embd           = 2048
0.00.268.941 I llm_load_print_meta: n_layer          = 18
0.00.268.953 I llm_load_print_meta: n_head           = 8
0.00.268.954 I llm_load_print_meta: n_head_kv        = 1
0.00.268.954 I llm_load_print_meta: n_rot            = 256
0.00.268.955 I llm_load_print_meta: n_swa            = 0
0.00.268.955 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.955 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.956 I llm_load_print_meta: n_gqa            = 8
0.00.268.957 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.958 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.959 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.961 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.961 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.962 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.962 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.963 I llm_load_print_meta: n_ff             = 16384
0.00.268.963 I llm_load_print_meta: n_expert         = 0
0.00.268.964 I llm_load_print_meta: n_expert_used    = 0
0.00.268.964 I llm_load_print_meta: causal attn      = 1
0.00.268.964 I llm_load_print_meta: pooling type     = 0
0.00.268.965 I llm_load_print_meta: rope type        = 2
0.00.268.965 I llm_load_print_meta: rope scaling     = linear
0.00.268.966 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.967 I llm_load_print_meta: freq_scale_train = 1
0.00.268.967 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.968 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.968 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.968 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.968 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.969 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.969 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.969 I llm_load_print_meta: model type       = 2B
0.00.268.970 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.971 I llm_load_print_meta: model params     = 2.51 B
0.00.268.971 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.972 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.972 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.972 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.973 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.973 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.973 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.974 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.974 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.975 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.975 I llm_load_print_meta: max token length = 93
0.00.327.035 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.332.056 I llama_new_context_with_model: n_seq_max     = 1
0.00.332.061 I llama_new_context_with_model: n_ctx         = 4096
0.00.332.062 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.332.062 I llama_new_context_with_model: n_batch       = 2048
0.00.332.063 I llama_new_context_with_model: n_ubatch      = 512
0.00.332.063 I llama_new_context_with_model: flash_attn    = 0
0.00.332.066 I llama_new_context_with_model: freq_base     = 10000.0
0.00.332.067 I llama_new_context_with_model: freq_scale    = 1
0.00.332.067 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.346.384 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.346.397 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.346.488 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.727 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.733 I llama_new_context_with_model: graph nodes  = 601
0.00.347.734 I llama_new_context_with_model: graph splits = 1
0.00.347.736 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.698 I main: llama threadpool init, n_threads = 4
0.00.421.713 I 
0.00.421.793 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.421.797 I 
0.00.421.843 I sampler seed: 2073618024
0.00.421.855 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.868 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.421.872 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.421.872 I 
 fufilling in the text is the same as:

A) Confusion
B) Disagreement
C) Discord
D) Dissonance

The correct answer

0.01.981.859 I llama_perf_sampler_print:    sampling time =       4.93 ms /    33 runs   (    0.15 ms per token,  6696.43 tokens per second)
0.01.981.862 I llama_perf_context_print:        load time =     421.28 ms
0.01.981.864 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.981.865 I llama_perf_context_print:        eval time =    1541.84 ms /    32 runs   (   48.18 ms per token,    20.75 tokens per second)
0.01.981.865 I llama_perf_context_print:       total time =    1560.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.092s
user	10m23.633s
sys	0m6.951s
