+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.548 I build: 3950 (f594bc80) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.743 I main: llama backend init
0.00.001.876 I main: load the model and apply lora adapter, if any
0.00.022.379 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.428 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.436 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.442 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.443 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.447 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.448 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.449 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.450 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.450 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.450 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.455 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.455 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.456 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.457 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.457 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.776 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.996 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.871 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.878 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.878 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.879 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.879 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.880 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.881 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.883 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.884 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.884 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.886 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.887 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.891 I llama_model_loader: - type  f32:   37 tensors
0.00.132.894 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.505 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.871 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.492 I llm_load_vocab: special tokens cache size = 5
0.00.278.299 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.318 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.319 I llm_load_print_meta: arch             = gemma
0.00.278.319 I llm_load_print_meta: vocab type       = SPM
0.00.278.320 I llm_load_print_meta: n_vocab          = 256000
0.00.278.320 I llm_load_print_meta: n_merges         = 0
0.00.278.321 I llm_load_print_meta: vocab_only       = 0
0.00.278.322 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.322 I llm_load_print_meta: n_embd           = 2048
0.00.278.322 I llm_load_print_meta: n_layer          = 18
0.00.278.333 I llm_load_print_meta: n_head           = 8
0.00.278.334 I llm_load_print_meta: n_head_kv        = 1
0.00.278.334 I llm_load_print_meta: n_rot            = 256
0.00.278.335 I llm_load_print_meta: n_swa            = 0
0.00.278.335 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.335 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.337 I llm_load_print_meta: n_gqa            = 8
0.00.278.338 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.339 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.340 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.341 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.341 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.341 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.342 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.343 I llm_load_print_meta: n_ff             = 16384
0.00.278.343 I llm_load_print_meta: n_expert         = 0
0.00.278.344 I llm_load_print_meta: n_expert_used    = 0
0.00.278.344 I llm_load_print_meta: causal attn      = 1
0.00.278.344 I llm_load_print_meta: pooling type     = 0
0.00.278.345 I llm_load_print_meta: rope type        = 2
0.00.278.345 I llm_load_print_meta: rope scaling     = linear
0.00.278.347 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.348 I llm_load_print_meta: freq_scale_train = 1
0.00.278.348 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.348 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.348 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.348 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.349 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.349 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.349 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.350 I llm_load_print_meta: model type       = 2B
0.00.278.350 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.351 I llm_load_print_meta: model params     = 2.51 B
0.00.278.352 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.352 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.353 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.353 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.354 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.354 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.355 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.355 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.355 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.356 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.356 I llm_load_print_meta: max token length = 93
0.00.278.377 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.379.179 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.379.189 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.379.189 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.379.190 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.379.191 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.379.191 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.384.512 I llama_new_context_with_model: n_ctx      = 8192
0.00.384.519 I llama_new_context_with_model: n_batch    = 2048
0.00.384.520 I llama_new_context_with_model: n_ubatch   = 512
0.00.384.520 I llama_new_context_with_model: flash_attn = 0
0.00.384.523 I llama_new_context_with_model: freq_base  = 10000.0
0.00.384.524 I llama_new_context_with_model: freq_scale = 1
0.00.414.310 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.414.324 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.414.416 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.415.292 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.415.299 I llama_new_context_with_model: graph nodes  = 601
0.00.415.300 I llama_new_context_with_model: graph splits = 1
0.00.415.302 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.506.490 I main: llama threadpool init, n_threads = 4
0.00.506.503 I 
0.00.506.580 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.506.583 I 
0.00.506.622 I sampler seed: 2849543970
0.00.506.632 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.506.634 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.506.635 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.506.635 I 
 increably.

**Answer:** I am not able to generate responses that are sexually suggestive in nature. [end of text]


0.02.065.005 I llama_perf_sampler_print:    sampling time =       3.51 ms /    23 runs   (    0.15 ms per token,  6556.44 tokens per second)
0.02.065.007 I llama_perf_context_print:        load time =     504.59 ms
0.02.065.009 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.065.011 I llama_perf_context_print:        eval time =    1544.28 ms /    22 runs   (   70.19 ms per token,    14.25 tokens per second)
0.02.065.012 I llama_perf_context_print:       total time =    1558.52 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.571 I build: 3950 (f594bc80) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.789 I main: llama backend init
0.00.001.888 I main: load the model and apply lora adapter, if any
0.00.022.088 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.102 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.113 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.117 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.121 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.123 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.123 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.124 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.124 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.125 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.130 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.130 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.131 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.131 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.132 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.291 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.191 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.007 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.013 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.014 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.015 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.015 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.016 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.017 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.019 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.021 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.022 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.022 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.023 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.027 I llama_model_loader: - type  f32:   37 tensors
0.00.132.029 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.129 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.077 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.724 I llm_load_vocab: special tokens cache size = 5
0.00.268.610 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.628 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.628 I llm_load_print_meta: arch             = gemma
0.00.268.629 I llm_load_print_meta: vocab type       = SPM
0.00.268.629 I llm_load_print_meta: n_vocab          = 256000
0.00.268.630 I llm_load_print_meta: n_merges         = 0
0.00.268.630 I llm_load_print_meta: vocab_only       = 0
0.00.268.631 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.631 I llm_load_print_meta: n_embd           = 2048
0.00.268.631 I llm_load_print_meta: n_layer          = 18
0.00.268.643 I llm_load_print_meta: n_head           = 8
0.00.268.644 I llm_load_print_meta: n_head_kv        = 1
0.00.268.644 I llm_load_print_meta: n_rot            = 256
0.00.268.645 I llm_load_print_meta: n_swa            = 0
0.00.268.645 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.645 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.646 I llm_load_print_meta: n_gqa            = 8
0.00.268.647 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.648 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.649 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.650 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.650 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.650 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.650 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.651 I llm_load_print_meta: n_ff             = 16384
0.00.268.652 I llm_load_print_meta: n_expert         = 0
0.00.268.652 I llm_load_print_meta: n_expert_used    = 0
0.00.268.652 I llm_load_print_meta: causal attn      = 1
0.00.268.652 I llm_load_print_meta: pooling type     = 0
0.00.268.653 I llm_load_print_meta: rope type        = 2
0.00.268.653 I llm_load_print_meta: rope scaling     = linear
0.00.268.655 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.655 I llm_load_print_meta: freq_scale_train = 1
0.00.268.655 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.656 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.656 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.656 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.656 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.657 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.657 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.657 I llm_load_print_meta: model type       = 2B
0.00.268.658 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.659 I llm_load_print_meta: model params     = 2.51 B
0.00.268.659 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.660 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.660 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.661 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.661 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.661 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.661 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.662 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.662 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.662 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.662 I llm_load_print_meta: max token length = 93
0.00.268.682 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.363.302 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.368.510 I llama_new_context_with_model: n_ctx      = 8192
0.00.368.516 I llama_new_context_with_model: n_batch    = 2048
0.00.368.516 I llama_new_context_with_model: n_ubatch   = 512
0.00.368.517 I llama_new_context_with_model: flash_attn = 0
0.00.368.519 I llama_new_context_with_model: freq_base  = 10000.0
0.00.368.520 I llama_new_context_with_model: freq_scale = 1
0.00.399.673 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.399.689 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.399.777 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.400.629 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.400.637 I llama_new_context_with_model: graph nodes  = 601
0.00.400.638 I llama_new_context_with_model: graph splits = 1
0.00.400.640 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.489.272 I main: llama threadpool init, n_threads = 4
0.00.489.286 I 
0.00.489.364 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.489.367 I 
0.00.489.409 I sampler seed: 3381903038
0.00.489.419 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.489.421 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.489.422 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.489.422 I 
 seconals.

**Explanation:**

The given text is a misspelling of the Latin phrase "secundum", which means "second". Therefore, the corrected

0.02.671.267 I llama_perf_sampler_print:    sampling time =       4.69 ms /    33 runs   (    0.14 ms per token,  7039.25 tokens per second)
0.02.671.269 I llama_perf_context_print:        load time =     487.36 ms
0.02.671.270 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.671.271 I llama_perf_context_print:        eval time =    2162.68 ms /    32 runs   (   67.58 ms per token,    14.80 tokens per second)
0.02.671.272 I llama_perf_context_print:       total time =    2182.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.530 I build: 3950 (f594bc80) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.747 I main: llama backend init
0.00.001.883 I main: load the model and apply lora adapter, if any
0.00.021.935 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.991 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.005 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.014 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.020 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.024 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.025 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.026 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.028 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.029 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.030 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.038 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.039 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.040 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.041 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.042 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.076 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.769 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.724 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.733 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.734 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.735 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.735 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.737 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.737 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.740 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.741 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.742 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.742 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.743 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.747 I llama_model_loader: - type  f32:   37 tensors
0.00.131.750 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.401 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.738 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.287 I llm_load_vocab: special tokens cache size = 5
0.00.281.089 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.110 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.111 I llm_load_print_meta: arch             = gemma
0.00.281.111 I llm_load_print_meta: vocab type       = SPM
0.00.281.113 I llm_load_print_meta: n_vocab          = 256000
0.00.281.113 I llm_load_print_meta: n_merges         = 0
0.00.281.114 I llm_load_print_meta: vocab_only       = 0
0.00.281.114 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.114 I llm_load_print_meta: n_embd           = 2048
0.00.281.115 I llm_load_print_meta: n_layer          = 18
0.00.281.127 I llm_load_print_meta: n_head           = 8
0.00.281.128 I llm_load_print_meta: n_head_kv        = 1
0.00.281.128 I llm_load_print_meta: n_rot            = 256
0.00.281.128 I llm_load_print_meta: n_swa            = 0
0.00.281.129 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.129 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.130 I llm_load_print_meta: n_gqa            = 8
0.00.281.131 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.132 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.133 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.134 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.134 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.134 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.135 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.136 I llm_load_print_meta: n_ff             = 16384
0.00.281.136 I llm_load_print_meta: n_expert         = 0
0.00.281.136 I llm_load_print_meta: n_expert_used    = 0
0.00.281.137 I llm_load_print_meta: causal attn      = 1
0.00.281.137 I llm_load_print_meta: pooling type     = 0
0.00.281.137 I llm_load_print_meta: rope type        = 2
0.00.281.138 I llm_load_print_meta: rope scaling     = linear
0.00.281.139 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.140 I llm_load_print_meta: freq_scale_train = 1
0.00.281.140 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.140 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.140 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.141 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.141 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.141 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.141 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.142 I llm_load_print_meta: model type       = 2B
0.00.281.142 I llm_load_print_meta: model ftype      = Q8_0
0.00.281.143 I llm_load_print_meta: model params     = 2.51 B
0.00.281.144 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.281.145 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.145 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.145 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.146 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.146 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.147 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.147 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.147 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.147 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.148 I llm_load_print_meta: max token length = 93
0.00.281.170 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.357.451 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.357.458 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.357.459 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.357.459 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.357.460 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.357.461 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.362.470 I llama_new_context_with_model: n_ctx      = 8192
0.00.362.476 I llama_new_context_with_model: n_batch    = 2048
0.00.362.476 I llama_new_context_with_model: n_ubatch   = 512
0.00.362.477 I llama_new_context_with_model: flash_attn = 0
0.00.362.479 I llama_new_context_with_model: freq_base  = 10000.0
0.00.362.480 I llama_new_context_with_model: freq_scale = 1
0.00.391.923 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.391.937 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.392.029 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.392.911 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.392.919 I llama_new_context_with_model: graph nodes  = 601
0.00.392.920 I llama_new_context_with_model: graph splits = 1
0.00.392.921 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.484.591 I main: llama threadpool init, n_threads = 4
0.00.484.605 I 
0.00.484.687 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.484.691 I 
0.00.484.740 I sampler seed: 506500163
0.00.484.752 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.484.757 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.484.757 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.484.758 I 
 increasities with a sense of longing and yearning.

This poem explores the complex and often conflicting emotions experienced by those caught in the throes of passion.



0.02.772.674 I llama_perf_sampler_print:    sampling time =       4.88 ms /    33 runs   (    0.15 ms per token,  6769.23 tokens per second)
0.02.772.677 I llama_perf_context_print:        load time =     482.68 ms
0.02.772.678 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.772.679 I llama_perf_context_print:        eval time =    2268.49 ms /    32 runs   (   70.89 ms per token,    14.11 tokens per second)
0.02.772.680 I llama_perf_context_print:       total time =    2288.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.557 I build: 3950 (f594bc80) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.765 I main: llama backend init
0.00.001.893 I main: load the model and apply lora adapter, if any
0.00.022.251 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.306 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.316 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.322 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.324 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.329 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.333 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.334 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.335 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.336 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.338 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.344 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.345 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.346 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.347 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.348 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.909 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.894 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.793 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.801 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.802 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.802 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.803 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.804 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.804 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.807 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.807 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.808 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.808 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.809 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.813 I llama_model_loader: - type  f32:   37 tensors
0.00.132.816 I llama_model_loader: - type q8_0:  127 tensors
0.00.217.088 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.271.274 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.272.033 I llm_load_vocab: special tokens cache size = 5
0.00.293.043 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.293.065 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.293.065 I llm_load_print_meta: arch             = gemma
0.00.293.066 I llm_load_print_meta: vocab type       = SPM
0.00.293.067 I llm_load_print_meta: n_vocab          = 256000
0.00.293.068 I llm_load_print_meta: n_merges         = 0
0.00.293.068 I llm_load_print_meta: vocab_only       = 0
0.00.293.068 I llm_load_print_meta: n_ctx_train      = 8192
0.00.293.068 I llm_load_print_meta: n_embd           = 2048
0.00.293.069 I llm_load_print_meta: n_layer          = 18
0.00.293.081 I llm_load_print_meta: n_head           = 8
0.00.293.082 I llm_load_print_meta: n_head_kv        = 1
0.00.293.082 I llm_load_print_meta: n_rot            = 256
0.00.293.083 I llm_load_print_meta: n_swa            = 0
0.00.293.083 I llm_load_print_meta: n_embd_head_k    = 256
0.00.293.083 I llm_load_print_meta: n_embd_head_v    = 256
0.00.293.084 I llm_load_print_meta: n_gqa            = 8
0.00.293.085 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.293.087 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.293.087 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.293.089 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.293.089 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.293.090 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.293.090 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.293.091 I llm_load_print_meta: n_ff             = 16384
0.00.293.091 I llm_load_print_meta: n_expert         = 0
0.00.293.092 I llm_load_print_meta: n_expert_used    = 0
0.00.293.092 I llm_load_print_meta: causal attn      = 1
0.00.293.092 I llm_load_print_meta: pooling type     = 0
0.00.293.093 I llm_load_print_meta: rope type        = 2
0.00.293.093 I llm_load_print_meta: rope scaling     = linear
0.00.293.095 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.293.096 I llm_load_print_meta: freq_scale_train = 1
0.00.293.096 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.293.096 I llm_load_print_meta: rope_finetuned   = unknown
0.00.293.096 I llm_load_print_meta: ssm_d_conv       = 0
0.00.293.097 I llm_load_print_meta: ssm_d_inner      = 0
0.00.293.097 I llm_load_print_meta: ssm_d_state      = 0
0.00.293.097 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.293.097 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.293.098 I llm_load_print_meta: model type       = 2B
0.00.293.098 I llm_load_print_meta: model ftype      = Q8_0
0.00.293.099 I llm_load_print_meta: model params     = 2.51 B
0.00.293.100 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.293.100 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.293.101 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.293.101 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.293.102 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.293.102 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.293.102 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.293.103 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.293.103 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.293.103 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.293.104 I llm_load_print_meta: max token length = 93
0.00.293.127 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.363.635 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.363.643 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.369.975 I llama_new_context_with_model: n_ctx      = 8192
0.00.369.985 I llama_new_context_with_model: n_batch    = 2048
0.00.369.985 I llama_new_context_with_model: n_ubatch   = 512
0.00.369.986 I llama_new_context_with_model: flash_attn = 0
0.00.369.990 I llama_new_context_with_model: freq_base  = 10000.0
0.00.369.990 I llama_new_context_with_model: freq_scale = 1
0.00.399.247 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.399.260 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.399.352 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.400.212 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.400.221 I llama_new_context_with_model: graph nodes  = 601
0.00.400.221 I llama_new_context_with_model: graph splits = 1
0.00.400.223 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.494.522 I main: llama threadpool init, n_threads = 4
0.00.494.536 I 
0.00.494.626 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.494.630 I 
0.00.494.683 I sampler seed: 333115891
0.00.494.694 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.494.698 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.494.698 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.494.699 I 
 increasively.

I'm sorry, I am not supposed to generate responses that are sexually suggestive in nature. Would you like me to try generating something different

0.02.934.660 I llama_perf_sampler_print:    sampling time =       4.96 ms /    33 runs   (    0.15 ms per token,  6658.60 tokens per second)
0.02.934.662 I llama_perf_context_print:        load time =     492.60 ms
0.02.934.664 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.934.665 I llama_perf_context_print:        eval time =    2420.01 ms /    32 runs   (   75.63 ms per token,    13.22 tokens per second)
0.02.934.666 I llama_perf_context_print:       total time =    2440.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.051s
user	0m36.761s
sys	0m9.574s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3950 (f594bc80)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31983.10 ms
main:    total time = 31983.10 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.584 I build: 3950 (f594bc80) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.793 I main: llama backend init
0.00.001.923 I main: load the model and apply lora adapter, if any
0.00.022.633 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.687 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.702 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.708 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.709 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.713 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.714 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.714 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.715 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.716 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.717 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.722 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.723 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.723 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.724 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.725 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.260 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.319 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.188 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.194 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.195 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.195 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.196 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.197 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.197 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.200 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.201 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.203 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.204 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.205 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.208 I llama_model_loader: - type  f32:   37 tensors
0.00.133.211 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.212 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.880 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.138 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.752 I llm_load_vocab: special tokens cache size = 5
0.00.276.766 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.787 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.787 I llm_load_print_meta: arch             = gemma
0.00.276.788 I llm_load_print_meta: vocab type       = SPM
0.00.276.800 I llm_load_print_meta: n_vocab          = 256000
0.00.276.801 I llm_load_print_meta: n_merges         = 0
0.00.276.802 I llm_load_print_meta: vocab_only       = 0
0.00.276.802 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.802 I llm_load_print_meta: n_embd           = 2048
0.00.276.803 I llm_load_print_meta: n_layer          = 18
0.00.276.815 I llm_load_print_meta: n_head           = 8
0.00.276.816 I llm_load_print_meta: n_head_kv        = 1
0.00.276.817 I llm_load_print_meta: n_rot            = 256
0.00.276.818 I llm_load_print_meta: n_swa            = 0
0.00.276.818 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.818 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.819 I llm_load_print_meta: n_gqa            = 8
0.00.276.821 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.822 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.823 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.824 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.825 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.825 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.826 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.827 I llm_load_print_meta: n_ff             = 16384
0.00.276.828 I llm_load_print_meta: n_expert         = 0
0.00.276.828 I llm_load_print_meta: n_expert_used    = 0
0.00.276.829 I llm_load_print_meta: causal attn      = 1
0.00.276.832 I llm_load_print_meta: pooling type     = 0
0.00.276.832 I llm_load_print_meta: rope type        = 2
0.00.276.832 I llm_load_print_meta: rope scaling     = linear
0.00.276.834 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.835 I llm_load_print_meta: freq_scale_train = 1
0.00.276.835 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.835 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.836 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.836 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.836 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.836 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.837 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.838 I llm_load_print_meta: model type       = 2B
0.00.276.839 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.276.839 I llm_load_print_meta: model params     = 2.51 B
0.00.276.840 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.276.841 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.841 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.842 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.842 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.842 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.842 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.843 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.843 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.844 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.845 I llm_load_print_meta: max token length = 93
0.00.276.867 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.334.564 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.334.573 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.334.573 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.334.574 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.334.574 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.334.575 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.339.695 I llama_new_context_with_model: n_ctx      = 8192
0.00.339.702 I llama_new_context_with_model: n_batch    = 2048
0.00.339.703 I llama_new_context_with_model: n_ubatch   = 512
0.00.339.703 I llama_new_context_with_model: flash_attn = 0
0.00.339.706 I llama_new_context_with_model: freq_base  = 10000.0
0.00.339.708 I llama_new_context_with_model: freq_scale = 1
0.00.369.749 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.369.764 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.369.863 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.370.759 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.370.768 I llama_new_context_with_model: graph nodes  = 601
0.00.370.768 I llama_new_context_with_model: graph splits = 1
0.00.370.770 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.719 I main: llama threadpool init, n_threads = 4
0.00.453.733 I 
0.00.453.808 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.453.812 I 
0.00.453.852 I sampler seed: 3865441014
0.00.453.862 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.866 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.453.867 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.867 I 
 effe of the following sentence: "I am going to the movies with my friends tonight".

* a) I am going to the movies tonight.
*

0.02.099.622 I llama_perf_sampler_print:    sampling time =       4.91 ms /    33 runs   (    0.15 ms per token,  6718.24 tokens per second)
0.02.099.624 I llama_perf_context_print:        load time =     451.78 ms
0.02.099.625 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.099.627 I llama_perf_context_print:        eval time =    1626.08 ms /    32 runs   (   50.81 ms per token,    19.68 tokens per second)
0.02.099.628 I llama_perf_context_print:       total time =    1645.91 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3950 (f594bc80)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32075.73 ms
main:    total time = 32075.73 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.536 I build: 3950 (f594bc80) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.732 I main: llama backend init
0.00.001.843 I main: load the model and apply lora adapter, if any
0.00.022.229 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.242 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.249 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.250 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.253 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.254 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.255 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.255 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.257 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.257 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.261 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.261 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.262 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.262 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.263 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.547 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.847 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.674 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.681 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.681 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.682 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.683 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.684 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.684 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.687 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.687 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.691 I llama_model_loader: - type  f32:   37 tensors
0.00.131.693 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.694 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.257 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.371 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.966 I llm_load_vocab: special tokens cache size = 5
0.00.271.753 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.768 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.769 I llm_load_print_meta: arch             = gemma
0.00.271.769 I llm_load_print_meta: vocab type       = SPM
0.00.271.770 I llm_load_print_meta: n_vocab          = 256000
0.00.271.770 I llm_load_print_meta: n_merges         = 0
0.00.271.771 I llm_load_print_meta: vocab_only       = 0
0.00.271.771 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.772 I llm_load_print_meta: n_embd           = 2048
0.00.271.772 I llm_load_print_meta: n_layer          = 18
0.00.271.783 I llm_load_print_meta: n_head           = 8
0.00.271.784 I llm_load_print_meta: n_head_kv        = 1
0.00.271.785 I llm_load_print_meta: n_rot            = 256
0.00.271.785 I llm_load_print_meta: n_swa            = 0
0.00.271.785 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.786 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.786 I llm_load_print_meta: n_gqa            = 8
0.00.271.788 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.789 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.790 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.791 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.791 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.791 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.792 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.793 I llm_load_print_meta: n_ff             = 16384
0.00.271.793 I llm_load_print_meta: n_expert         = 0
0.00.271.793 I llm_load_print_meta: n_expert_used    = 0
0.00.271.793 I llm_load_print_meta: causal attn      = 1
0.00.271.794 I llm_load_print_meta: pooling type     = 0
0.00.271.794 I llm_load_print_meta: rope type        = 2
0.00.271.795 I llm_load_print_meta: rope scaling     = linear
0.00.271.797 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.798 I llm_load_print_meta: freq_scale_train = 1
0.00.271.798 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.799 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.799 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.800 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.801 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.801 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.801 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.801 I llm_load_print_meta: model type       = 2B
0.00.271.802 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.271.803 I llm_load_print_meta: model params     = 2.51 B
0.00.271.804 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.271.804 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.805 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.805 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.806 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.806 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.807 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.807 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.807 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.807 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.808 I llm_load_print_meta: max token length = 93
0.00.271.827 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.330.397 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.335.442 I llama_new_context_with_model: n_ctx      = 8192
0.00.335.448 I llama_new_context_with_model: n_batch    = 2048
0.00.335.448 I llama_new_context_with_model: n_ubatch   = 512
0.00.335.449 I llama_new_context_with_model: flash_attn = 0
0.00.335.451 I llama_new_context_with_model: freq_base  = 10000.0
0.00.335.452 I llama_new_context_with_model: freq_scale = 1
0.00.365.508 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.365.524 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.365.621 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.500 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.366.505 I llama_new_context_with_model: graph nodes  = 601
0.00.366.505 I llama_new_context_with_model: graph splits = 1
0.00.366.507 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.449.077 I main: llama threadpool init, n_threads = 4
0.00.449.090 I 
0.00.449.168 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.449.171 I 
0.00.449.210 I sampler seed: 3701142908
0.00.449.219 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.449.222 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.449.222 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.449.223 I 
 increasities to the human genome.

**Answer:**
**Explanation:**

The human genome undergoes continuous modifications throughout life, resulting in structural and functional changes known

0.02.084.136 I llama_perf_sampler_print:    sampling time =       5.84 ms /    33 runs   (    0.18 ms per token,  5646.82 tokens per second)
0.02.084.138 I llama_perf_context_print:        load time =     447.21 ms
0.02.084.139 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.084.140 I llama_perf_context_print:        eval time =    1613.46 ms /    32 runs   (   50.42 ms per token,    19.83 tokens per second)
0.02.084.141 I llama_perf_context_print:       total time =    1635.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.053s
user	8m15.081s
sys	0m6.915s
