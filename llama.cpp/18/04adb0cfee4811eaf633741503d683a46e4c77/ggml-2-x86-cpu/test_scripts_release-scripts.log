+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.528 I build: 4006 (1804adb0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.001.874 I main: load the model and apply lora adapter, if any
0.00.022.722 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.732 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.739 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.744 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.744 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.750 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.750 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.751 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.752 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.752 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.753 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.757 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.758 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.758 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.759 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.759 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.345 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.172 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.975 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.981 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.982 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.983 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.983 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.984 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.985 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.987 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.989 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.990 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.990 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.991 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.995 I llama_model_loader: - type  f32:   37 tensors
0.00.132.995 I llama_model_loader: - type q8_0:  127 tensors
0.00.214.112 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.408 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.962 I llm_load_vocab: special tokens cache size = 5
0.00.280.934 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.958 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.959 I llm_load_print_meta: arch             = gemma
0.00.280.959 I llm_load_print_meta: vocab type       = SPM
0.00.280.960 I llm_load_print_meta: n_vocab          = 256000
0.00.280.961 I llm_load_print_meta: n_merges         = 0
0.00.280.961 I llm_load_print_meta: vocab_only       = 0
0.00.280.962 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.962 I llm_load_print_meta: n_embd           = 2048
0.00.280.962 I llm_load_print_meta: n_layer          = 18
0.00.280.974 I llm_load_print_meta: n_head           = 8
0.00.280.975 I llm_load_print_meta: n_head_kv        = 1
0.00.280.975 I llm_load_print_meta: n_rot            = 256
0.00.280.976 I llm_load_print_meta: n_swa            = 0
0.00.280.976 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.977 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.977 I llm_load_print_meta: n_gqa            = 8
0.00.280.978 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.979 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.980 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.981 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.982 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.982 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.982 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.983 I llm_load_print_meta: n_ff             = 16384
0.00.280.983 I llm_load_print_meta: n_expert         = 0
0.00.280.984 I llm_load_print_meta: n_expert_used    = 0
0.00.280.984 I llm_load_print_meta: causal attn      = 1
0.00.280.984 I llm_load_print_meta: pooling type     = 0
0.00.280.984 I llm_load_print_meta: rope type        = 2
0.00.280.985 I llm_load_print_meta: rope scaling     = linear
0.00.280.986 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.987 I llm_load_print_meta: freq_scale_train = 1
0.00.280.988 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.988 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.988 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.988 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.988 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.989 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.989 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.989 I llm_load_print_meta: model type       = 2B
0.00.280.990 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.991 I llm_load_print_meta: model params     = 2.51 B
0.00.280.991 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.992 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.992 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.993 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.993 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.993 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.994 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.994 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.994 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.995 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.995 I llm_load_print_meta: max token length = 93
0.00.385.171 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.385.176 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.385.177 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.385.177 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.385.178 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.385.178 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.390.372 I llama_new_context_with_model: n_ctx      = 8192
0.00.390.378 I llama_new_context_with_model: n_batch    = 2048
0.00.390.378 I llama_new_context_with_model: n_ubatch   = 512
0.00.390.379 I llama_new_context_with_model: flash_attn = 0
0.00.390.380 I llama_new_context_with_model: freq_base  = 10000.0
0.00.390.381 I llama_new_context_with_model: freq_scale = 1
0.00.418.633 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.418.648 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.418.737 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.420.004 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.420.010 I llama_new_context_with_model: graph nodes  = 601
0.00.420.010 I llama_new_context_with_model: graph splits = 1
0.00.420.012 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.512.068 I main: llama threadpool init, n_threads = 4
0.00.512.083 I 
0.00.512.161 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.512.164 I 
0.00.512.209 I sampler seed: 4212272085
0.00.512.221 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.512.232 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.512.234 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.512.234 I 
 increasities are a type of predatory behavior in which a predator uses its physical strength or intimidation to deter or incapacitate prey.

**Characteristics of predation:**



0.02.779.974 I llama_perf_sampler_print:    sampling time =       4.70 ms /    33 runs   (    0.14 ms per token,  7022.77 tokens per second)
0.02.779.977 I llama_perf_context_print:        load time =     510.17 ms
0.02.779.978 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.779.980 I llama_perf_context_print:        eval time =    2248.15 ms /    32 runs   (   70.25 ms per token,    14.23 tokens per second)
0.02.779.981 I llama_perf_context_print:       total time =    2267.91 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.554 I build: 4006 (1804adb0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.001.828 I main: load the model and apply lora adapter, if any
0.00.022.425 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.440 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.448 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.449 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.453 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.454 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.454 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.455 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.455 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.457 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.461 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.462 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.463 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.463 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.464 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.142 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.753 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.632 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.639 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.639 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.640 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.641 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.642 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.642 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.645 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.645 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.646 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.646 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.648 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.652 I llama_model_loader: - type  f32:   37 tensors
0.00.132.654 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.448 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.420 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.013 I llm_load_vocab: special tokens cache size = 5
0.00.266.096 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.115 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.116 I llm_load_print_meta: arch             = gemma
0.00.266.116 I llm_load_print_meta: vocab type       = SPM
0.00.266.117 I llm_load_print_meta: n_vocab          = 256000
0.00.266.117 I llm_load_print_meta: n_merges         = 0
0.00.266.118 I llm_load_print_meta: vocab_only       = 0
0.00.266.118 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.118 I llm_load_print_meta: n_embd           = 2048
0.00.266.119 I llm_load_print_meta: n_layer          = 18
0.00.266.130 I llm_load_print_meta: n_head           = 8
0.00.266.131 I llm_load_print_meta: n_head_kv        = 1
0.00.266.131 I llm_load_print_meta: n_rot            = 256
0.00.266.132 I llm_load_print_meta: n_swa            = 0
0.00.266.132 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.132 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.133 I llm_load_print_meta: n_gqa            = 8
0.00.266.134 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.135 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.136 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.137 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.138 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.138 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.138 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.139 I llm_load_print_meta: n_ff             = 16384
0.00.266.139 I llm_load_print_meta: n_expert         = 0
0.00.266.140 I llm_load_print_meta: n_expert_used    = 0
0.00.266.140 I llm_load_print_meta: causal attn      = 1
0.00.266.140 I llm_load_print_meta: pooling type     = 0
0.00.266.140 I llm_load_print_meta: rope type        = 2
0.00.266.141 I llm_load_print_meta: rope scaling     = linear
0.00.266.142 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.143 I llm_load_print_meta: freq_scale_train = 1
0.00.266.143 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.144 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.144 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.144 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.144 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.144 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.145 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.145 I llm_load_print_meta: model type       = 2B
0.00.266.146 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.146 I llm_load_print_meta: model params     = 2.51 B
0.00.266.147 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.148 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.148 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.148 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.149 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.149 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.149 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.150 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.150 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.151 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.151 I llm_load_print_meta: max token length = 93
0.00.364.298 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.369.548 I llama_new_context_with_model: n_ctx      = 8192
0.00.369.555 I llama_new_context_with_model: n_batch    = 2048
0.00.369.555 I llama_new_context_with_model: n_ubatch   = 512
0.00.369.555 I llama_new_context_with_model: flash_attn = 0
0.00.369.559 I llama_new_context_with_model: freq_base  = 10000.0
0.00.369.560 I llama_new_context_with_model: freq_scale = 1
0.00.398.832 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.398.848 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.398.950 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.400.193 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.400.201 I llama_new_context_with_model: graph nodes  = 601
0.00.400.201 I llama_new_context_with_model: graph splits = 1
0.00.400.203 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.488.388 I main: llama threadpool init, n_threads = 4
0.00.488.402 I 
0.00.488.478 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.488.481 I 
0.00.488.525 I sampler seed: 3808560474
0.00.488.536 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.488.539 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.488.539 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.488.540 I 
 seconded by the majestic aurora borealis.

The sun sets, casting long shadows across the barren landscape. The wind howls, carrying the scent of pine needles

0.02.712.024 I llama_perf_sampler_print:    sampling time =       4.91 ms /    33 runs   (    0.15 ms per token,  6716.87 tokens per second)
0.02.712.027 I llama_perf_context_print:        load time =     486.54 ms
0.02.712.028 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.712.030 I llama_perf_context_print:        eval time =    2204.54 ms /    32 runs   (   68.89 ms per token,    14.52 tokens per second)
0.02.712.030 I llama_perf_context_print:       total time =    2223.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.552 I build: 4006 (1804adb0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.001.825 I main: load the model and apply lora adapter, if any
0.00.022.238 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.249 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.257 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.261 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.262 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.266 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.267 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.268 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.269 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.269 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.270 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.274 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.274 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.275 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.275 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.276 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.543 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.096 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.972 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.978 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.979 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.980 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.980 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.981 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.982 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.984 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.985 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.986 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.987 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.987 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.991 I llama_model_loader: - type  f32:   37 tensors
0.00.131.992 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.673 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.375 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.898 I llm_load_vocab: special tokens cache size = 5
0.00.263.805 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.821 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.822 I llm_load_print_meta: arch             = gemma
0.00.263.822 I llm_load_print_meta: vocab type       = SPM
0.00.263.823 I llm_load_print_meta: n_vocab          = 256000
0.00.263.823 I llm_load_print_meta: n_merges         = 0
0.00.263.823 I llm_load_print_meta: vocab_only       = 0
0.00.263.824 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.824 I llm_load_print_meta: n_embd           = 2048
0.00.263.824 I llm_load_print_meta: n_layer          = 18
0.00.263.835 I llm_load_print_meta: n_head           = 8
0.00.263.836 I llm_load_print_meta: n_head_kv        = 1
0.00.263.836 I llm_load_print_meta: n_rot            = 256
0.00.263.837 I llm_load_print_meta: n_swa            = 0
0.00.263.837 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.837 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.838 I llm_load_print_meta: n_gqa            = 8
0.00.263.839 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.840 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.841 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.842 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.843 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.843 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.844 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.844 I llm_load_print_meta: n_ff             = 16384
0.00.263.845 I llm_load_print_meta: n_expert         = 0
0.00.263.845 I llm_load_print_meta: n_expert_used    = 0
0.00.263.845 I llm_load_print_meta: causal attn      = 1
0.00.263.846 I llm_load_print_meta: pooling type     = 0
0.00.263.846 I llm_load_print_meta: rope type        = 2
0.00.263.846 I llm_load_print_meta: rope scaling     = linear
0.00.263.848 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.848 I llm_load_print_meta: freq_scale_train = 1
0.00.263.848 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.849 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.849 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.849 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.849 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.850 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.850 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.850 I llm_load_print_meta: model type       = 2B
0.00.263.851 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.852 I llm_load_print_meta: model params     = 2.51 B
0.00.263.852 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.853 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.853 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.853 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.854 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.854 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.854 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.854 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.855 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.855 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.855 I llm_load_print_meta: max token length = 93
0.00.359.467 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.359.471 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.359.472 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.359.473 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.359.473 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.359.474 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.364.685 I llama_new_context_with_model: n_ctx      = 8192
0.00.364.692 I llama_new_context_with_model: n_batch    = 2048
0.00.364.692 I llama_new_context_with_model: n_ubatch   = 512
0.00.364.693 I llama_new_context_with_model: flash_attn = 0
0.00.364.695 I llama_new_context_with_model: freq_base  = 10000.0
0.00.364.696 I llama_new_context_with_model: freq_scale = 1
0.00.394.737 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.394.750 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.394.842 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.396.090 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.396.097 I llama_new_context_with_model: graph nodes  = 601
0.00.396.097 I llama_new_context_with_model: graph splits = 1
0.00.396.099 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.486.981 I main: llama threadpool init, n_threads = 4
0.00.486.993 I 
0.00.487.064 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.487.068 I 
0.00.487.109 I sampler seed: 191609014
0.00.487.121 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.487.124 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.487.125 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.487.127 I 
 increasities. [end of text]


0.00.761.675 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8183.31 tokens per second)
0.00.761.678 I llama_perf_context_print:        load time =     485.13 ms
0.00.761.680 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.761.682 I llama_perf_context_print:        eval time =     271.41 ms /     4 runs   (   67.85 ms per token,    14.74 tokens per second)
0.00.761.683 I llama_perf_context_print:       total time =     274.70 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.565 I build: 4006 (1804adb0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.787 I main: llama backend init
0.00.001.887 I main: load the model and apply lora adapter, if any
0.00.022.453 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.462 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.470 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.474 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.475 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.479 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.480 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.481 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.482 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.482 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.483 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.487 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.487 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.488 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.488 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.488 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.839 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.553 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.425 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.431 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.432 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.432 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.433 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.434 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.435 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.438 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.438 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.439 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.439 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.440 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.444 I llama_model_loader: - type  f32:   37 tensors
0.00.132.445 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.472 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.334 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.956 I llm_load_vocab: special tokens cache size = 5
0.00.268.945 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.961 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.962 I llm_load_print_meta: arch             = gemma
0.00.268.963 I llm_load_print_meta: vocab type       = SPM
0.00.268.964 I llm_load_print_meta: n_vocab          = 256000
0.00.268.964 I llm_load_print_meta: n_merges         = 0
0.00.268.964 I llm_load_print_meta: vocab_only       = 0
0.00.268.965 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.965 I llm_load_print_meta: n_embd           = 2048
0.00.268.966 I llm_load_print_meta: n_layer          = 18
0.00.268.978 I llm_load_print_meta: n_head           = 8
0.00.268.979 I llm_load_print_meta: n_head_kv        = 1
0.00.268.979 I llm_load_print_meta: n_rot            = 256
0.00.268.979 I llm_load_print_meta: n_swa            = 0
0.00.268.980 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.980 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.981 I llm_load_print_meta: n_gqa            = 8
0.00.268.982 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.983 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.983 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.985 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.985 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.985 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.986 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.987 I llm_load_print_meta: n_ff             = 16384
0.00.268.987 I llm_load_print_meta: n_expert         = 0
0.00.268.987 I llm_load_print_meta: n_expert_used    = 0
0.00.268.988 I llm_load_print_meta: causal attn      = 1
0.00.268.988 I llm_load_print_meta: pooling type     = 0
0.00.268.988 I llm_load_print_meta: rope type        = 2
0.00.268.989 I llm_load_print_meta: rope scaling     = linear
0.00.268.990 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.991 I llm_load_print_meta: freq_scale_train = 1
0.00.268.991 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.992 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.992 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.992 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.992 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.992 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.993 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.993 I llm_load_print_meta: model type       = 2B
0.00.268.994 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.995 I llm_load_print_meta: model params     = 2.51 B
0.00.268.995 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.996 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.996 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.997 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.997 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.997 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.998 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.998 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.999 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.999 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.999 I llm_load_print_meta: max token length = 93
0.00.343.463 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.343.470 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.348.759 I llama_new_context_with_model: n_ctx      = 8192
0.00.348.765 I llama_new_context_with_model: n_batch    = 2048
0.00.348.766 I llama_new_context_with_model: n_ubatch   = 512
0.00.348.766 I llama_new_context_with_model: flash_attn = 0
0.00.348.769 I llama_new_context_with_model: freq_base  = 10000.0
0.00.348.770 I llama_new_context_with_model: freq_scale = 1
0.00.377.396 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.377.410 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.377.500 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.378.785 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.378.792 I llama_new_context_with_model: graph nodes  = 601
0.00.378.792 I llama_new_context_with_model: graph splits = 1
0.00.378.794 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.788 I main: llama threadpool init, n_threads = 4
0.00.470.802 I 
0.00.470.875 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.470.878 I 
0.00.470.923 I sampler seed: 1527459787
0.00.470.935 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.937 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.938 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.938 I 
 increasities and the ethical implications of such research.

**Research on Human Reproduction: Ethical Implications**

**Introduction**

Human reproduction research encompasses a wide range

0.02.747.381 I llama_perf_sampler_print:    sampling time =       4.82 ms /    33 runs   (    0.15 ms per token,  6853.58 tokens per second)
0.02.747.384 I llama_perf_context_print:        load time =     468.88 ms
0.02.747.385 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.747.386 I llama_perf_context_print:        eval time =    2257.19 ms /    32 runs   (   70.54 ms per token,    14.18 tokens per second)
0.02.747.389 I llama_perf_context_print:       total time =    2276.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.740s
user	0m31.057s
sys	0m9.533s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4006 (1804adb0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32009.08 ms
main:    total time = 32009.08 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.644 I build: 4006 (1804adb0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.846 I main: llama backend init
0.00.001.956 I main: load the model and apply lora adapter, if any
0.00.022.617 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.628 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.637 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.642 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.643 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.648 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.649 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.650 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.651 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.651 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.652 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.656 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.657 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.658 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.659 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.660 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.064 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.809 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.677 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.683 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.684 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.684 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.685 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.686 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.686 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.689 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.689 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.690 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.690 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.691 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.695 I llama_model_loader: - type  f32:   37 tensors
0.00.132.696 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.696 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.154 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.429 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.915 I llm_load_vocab: special tokens cache size = 5
0.00.265.701 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.717 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.717 I llm_load_print_meta: arch             = gemma
0.00.265.718 I llm_load_print_meta: vocab type       = SPM
0.00.265.719 I llm_load_print_meta: n_vocab          = 256000
0.00.265.719 I llm_load_print_meta: n_merges         = 0
0.00.265.719 I llm_load_print_meta: vocab_only       = 0
0.00.265.720 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.720 I llm_load_print_meta: n_embd           = 2048
0.00.265.720 I llm_load_print_meta: n_layer          = 18
0.00.265.731 I llm_load_print_meta: n_head           = 8
0.00.265.732 I llm_load_print_meta: n_head_kv        = 1
0.00.265.732 I llm_load_print_meta: n_rot            = 256
0.00.265.733 I llm_load_print_meta: n_swa            = 0
0.00.265.733 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.733 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.734 I llm_load_print_meta: n_gqa            = 8
0.00.265.735 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.736 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.737 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.738 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.738 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.739 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.739 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.740 I llm_load_print_meta: n_ff             = 16384
0.00.265.740 I llm_load_print_meta: n_expert         = 0
0.00.265.740 I llm_load_print_meta: n_expert_used    = 0
0.00.265.741 I llm_load_print_meta: causal attn      = 1
0.00.265.741 I llm_load_print_meta: pooling type     = 0
0.00.265.741 I llm_load_print_meta: rope type        = 2
0.00.265.742 I llm_load_print_meta: rope scaling     = linear
0.00.265.743 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.743 I llm_load_print_meta: freq_scale_train = 1
0.00.265.744 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.744 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.744 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.744 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.745 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.745 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.745 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.746 I llm_load_print_meta: model type       = 2B
0.00.265.746 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.747 I llm_load_print_meta: model params     = 2.51 B
0.00.265.748 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.748 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.749 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.749 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.749 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.750 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.750 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.750 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.751 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.751 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.752 I llm_load_print_meta: max token length = 93
0.00.327.609 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.327.616 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.327.617 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.327.617 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.327.618 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.327.619 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.332.931 I llama_new_context_with_model: n_ctx      = 8192
0.00.332.936 I llama_new_context_with_model: n_batch    = 2048
0.00.332.937 I llama_new_context_with_model: n_ubatch   = 512
0.00.332.937 I llama_new_context_with_model: flash_attn = 0
0.00.332.939 I llama_new_context_with_model: freq_base  = 10000.0
0.00.332.940 I llama_new_context_with_model: freq_scale = 1
0.00.362.955 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.362.970 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.363.071 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.371 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.364.377 I llama_new_context_with_model: graph nodes  = 601
0.00.364.377 I llama_new_context_with_model: graph splits = 1
0.00.364.379 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.448.114 I main: llama threadpool init, n_threads = 4
0.00.448.126 I 
0.00.448.201 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.448.204 I 
0.00.448.245 I sampler seed: 395793241
0.00.448.256 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.448.259 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.448.259 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.448.259 I 
 seconally in front of the mirror, her eyes gleaming with an unsettling fervor.

This is not a scene from a horror movie. This is a chilling glimpse

0.02.116.265 I llama_perf_sampler_print:    sampling time =       4.84 ms /    33 runs   (    0.15 ms per token,  6821.00 tokens per second)
0.02.116.268 I llama_perf_context_print:        load time =     446.13 ms
0.02.116.269 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.116.271 I llama_perf_context_print:        eval time =    1648.00 ms /    32 runs   (   51.50 ms per token,    19.42 tokens per second)
0.02.116.272 I llama_perf_context_print:       total time =    1668.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4006 (1804adb0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32045.99 ms
main:    total time = 32045.99 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.585 I build: 4006 (1804adb0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.790 I main: llama backend init
0.00.001.864 I main: load the model and apply lora adapter, if any
0.00.022.454 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.471 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.481 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.482 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.486 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.487 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.488 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.488 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.489 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.489 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.493 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.493 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.494 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.494 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.495 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.932 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.412 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.201 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.207 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.208 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.208 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.209 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.210 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.210 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.213 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.214 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.216 I llama_model_loader: - type  f32:   37 tensors
0.00.132.217 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.217 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.466 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.886 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.361 I llm_load_vocab: special tokens cache size = 5
0.00.264.235 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.252 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.252 I llm_load_print_meta: arch             = gemma
0.00.264.253 I llm_load_print_meta: vocab type       = SPM
0.00.264.254 I llm_load_print_meta: n_vocab          = 256000
0.00.264.254 I llm_load_print_meta: n_merges         = 0
0.00.264.254 I llm_load_print_meta: vocab_only       = 0
0.00.264.255 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.255 I llm_load_print_meta: n_embd           = 2048
0.00.264.255 I llm_load_print_meta: n_layer          = 18
0.00.264.268 I llm_load_print_meta: n_head           = 8
0.00.264.269 I llm_load_print_meta: n_head_kv        = 1
0.00.264.269 I llm_load_print_meta: n_rot            = 256
0.00.264.270 I llm_load_print_meta: n_swa            = 0
0.00.264.270 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.270 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.271 I llm_load_print_meta: n_gqa            = 8
0.00.264.272 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.273 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.275 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.276 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.277 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.277 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.277 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.278 I llm_load_print_meta: n_ff             = 16384
0.00.264.279 I llm_load_print_meta: n_expert         = 0
0.00.264.279 I llm_load_print_meta: n_expert_used    = 0
0.00.264.279 I llm_load_print_meta: causal attn      = 1
0.00.264.279 I llm_load_print_meta: pooling type     = 0
0.00.264.280 I llm_load_print_meta: rope type        = 2
0.00.264.280 I llm_load_print_meta: rope scaling     = linear
0.00.264.281 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.282 I llm_load_print_meta: freq_scale_train = 1
0.00.264.283 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.283 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.284 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.284 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.284 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.284 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.284 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.285 I llm_load_print_meta: model type       = 2B
0.00.264.286 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.287 I llm_load_print_meta: model params     = 2.51 B
0.00.264.287 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.288 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.288 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.288 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.289 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.289 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.289 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.290 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.290 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.291 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.291 I llm_load_print_meta: max token length = 93
0.00.335.193 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.340.409 I llama_new_context_with_model: n_ctx      = 8192
0.00.340.416 I llama_new_context_with_model: n_batch    = 2048
0.00.340.416 I llama_new_context_with_model: n_ubatch   = 512
0.00.340.417 I llama_new_context_with_model: flash_attn = 0
0.00.340.419 I llama_new_context_with_model: freq_base  = 10000.0
0.00.340.420 I llama_new_context_with_model: freq_scale = 1
0.00.369.792 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.369.807 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.369.919 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.371.199 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.371.206 I llama_new_context_with_model: graph nodes  = 601
0.00.371.206 I llama_new_context_with_model: graph splits = 1
0.00.371.208 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.452.884 I main: llama threadpool init, n_threads = 4
0.00.452.896 I 
0.00.452.971 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.452.974 I 
0.00.453.013 I sampler seed: 557187675
0.00.453.023 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.025 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.453.026 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.026 I 
 seconded, but still in service. The engine is the most reliable in the fleet. 

What is the meaning of the sentence?

The sentence means

0.02.065.035 I llama_perf_sampler_print:    sampling time =       4.72 ms /    33 runs   (    0.14 ms per token,  6985.61 tokens per second)
0.02.065.037 I llama_perf_context_print:        load time =     450.99 ms
0.02.065.039 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.065.040 I llama_perf_context_print:        eval time =    1592.98 ms /    32 runs   (   49.78 ms per token,    20.09 tokens per second)
0.02.065.041 I llama_perf_context_print:       total time =    1612.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.064s
user	8m14.817s
sys	0m6.833s
