+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.628 I build: 4018 (1839f691) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.002.770 I main: load the model and apply lora adapter, if any
0.00.025.591 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.603 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.693 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.704 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.706 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.711 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.714 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.716 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.717 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.718 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.719 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.727 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.729 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.730 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.732 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.733 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.791 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.501 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.868 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.876 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.877 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.878 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.879 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.880 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.882 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.885 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.886 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.887 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.888 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.890 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.897 I llama_model_loader: - type  f32:   37 tensors
0.00.265.899 I llama_model_loader: - type q8_0:  127 tensors
0.00.439.394 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.951 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.919 I llm_load_vocab: special tokens cache size = 5
0.00.606.298 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.606.367 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.606.368 I llm_load_print_meta: arch             = gemma
0.00.606.369 I llm_load_print_meta: vocab type       = SPM
0.00.606.369 I llm_load_print_meta: n_vocab          = 256000
0.00.606.372 I llm_load_print_meta: n_merges         = 0
0.00.606.372 I llm_load_print_meta: vocab_only       = 0
0.00.606.373 I llm_load_print_meta: n_ctx_train      = 8192
0.00.606.373 I llm_load_print_meta: n_embd           = 2048
0.00.606.374 I llm_load_print_meta: n_layer          = 18
0.00.606.440 I llm_load_print_meta: n_head           = 8
0.00.606.448 I llm_load_print_meta: n_head_kv        = 1
0.00.606.449 I llm_load_print_meta: n_rot            = 256
0.00.606.450 I llm_load_print_meta: n_swa            = 0
0.00.606.450 I llm_load_print_meta: n_embd_head_k    = 256
0.00.606.450 I llm_load_print_meta: n_embd_head_v    = 256
0.00.606.455 I llm_load_print_meta: n_gqa            = 8
0.00.606.460 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.606.465 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.606.466 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.606.468 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.606.468 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.606.469 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.606.470 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.606.474 I llm_load_print_meta: n_ff             = 16384
0.00.606.475 I llm_load_print_meta: n_expert         = 0
0.00.606.476 I llm_load_print_meta: n_expert_used    = 0
0.00.606.476 I llm_load_print_meta: causal attn      = 1
0.00.606.476 I llm_load_print_meta: pooling type     = 0
0.00.606.477 I llm_load_print_meta: rope type        = 2
0.00.606.478 I llm_load_print_meta: rope scaling     = linear
0.00.606.483 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.606.484 I llm_load_print_meta: freq_scale_train = 1
0.00.606.496 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.606.497 I llm_load_print_meta: rope_finetuned   = unknown
0.00.606.497 I llm_load_print_meta: ssm_d_conv       = 0
0.00.606.498 I llm_load_print_meta: ssm_d_inner      = 0
0.00.606.498 I llm_load_print_meta: ssm_d_state      = 0
0.00.606.499 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.606.499 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.606.500 I llm_load_print_meta: model type       = 2B
0.00.606.502 I llm_load_print_meta: model ftype      = Q8_0
0.00.606.515 I llm_load_print_meta: model params     = 2.51 B
0.00.606.524 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.606.525 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.606.526 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.606.526 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.606.527 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.606.527 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.606.528 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.606.529 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.606.536 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.606.537 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.606.537 I llm_load_print_meta: max token length = 93
0.00.710.339 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.710.352 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.710.353 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.710.354 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.710.354 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.710.355 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.716.211 I llama_new_context_with_model: n_seq_max     = 1
0.00.716.218 I llama_new_context_with_model: n_ctx         = 4096
0.00.716.218 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.716.219 I llama_new_context_with_model: n_batch       = 2048
0.00.716.219 I llama_new_context_with_model: n_ubatch      = 512
0.00.716.220 I llama_new_context_with_model: flash_attn    = 0
0.00.716.222 I llama_new_context_with_model: freq_base     = 10000.0
0.00.716.223 I llama_new_context_with_model: freq_scale    = 1
0.00.716.224 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.730.582 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.730.620 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.730.739 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.733.298 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.733.302 I llama_new_context_with_model: graph nodes  = 601
0.00.733.302 I llama_new_context_with_model: graph splits = 1
0.00.733.327 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.338.835 I main: llama threadpool init, n_threads = 4
0.01.338.848 I 
0.01.338.965 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.338.968 I 
0.01.339.198 I sampler seed: 1485389231
0.01.339.210 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.339.217 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.339.218 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.339.218 I 
 seconary effects.

**a. Name the phenomenon of secondary effects.**
**b. Explain the nature of secondary effects.**
**c. Provide examples

0.14.812.970 I llama_perf_sampler_print:    sampling time =      48.95 ms /    33 runs   (    1.48 ms per token,   674.10 tokens per second)
0.14.812.974 I llama_perf_context_print:        load time =    1335.97 ms
0.14.812.975 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.812.977 I llama_perf_context_print:        eval time =   13381.69 ms /    32 runs   (  418.18 ms per token,     2.39 tokens per second)
0.14.812.979 I llama_perf_context_print:       total time =   13474.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 4018 (1839f691) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.002.773 I main: load the model and apply lora adapter, if any
0.00.025.532 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.629 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.644 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.645 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.651 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.655 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.656 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.657 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.658 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.660 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.667 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.668 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.669 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.670 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.672 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.881 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.647 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.068 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.078 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.079 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.080 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.082 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.083 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.084 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.088 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.090 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.091 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.092 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.266.093 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.102 I llama_model_loader: - type  f32:   37 tensors
0.00.266.105 I llama_model_loader: - type q8_0:  127 tensors
0.00.445.653 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.507.618 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.508.493 I llm_load_vocab: special tokens cache size = 5
0.00.616.291 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.356 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.357 I llm_load_print_meta: arch             = gemma
0.00.616.358 I llm_load_print_meta: vocab type       = SPM
0.00.616.359 I llm_load_print_meta: n_vocab          = 256000
0.00.616.361 I llm_load_print_meta: n_merges         = 0
0.00.616.361 I llm_load_print_meta: vocab_only       = 0
0.00.616.362 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.362 I llm_load_print_meta: n_embd           = 2048
0.00.616.363 I llm_load_print_meta: n_layer          = 18
0.00.616.429 I llm_load_print_meta: n_head           = 8
0.00.616.435 I llm_load_print_meta: n_head_kv        = 1
0.00.616.436 I llm_load_print_meta: n_rot            = 256
0.00.616.436 I llm_load_print_meta: n_swa            = 0
0.00.616.437 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.438 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.443 I llm_load_print_meta: n_gqa            = 8
0.00.616.447 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.452 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.453 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.454 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.456 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.456 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.456 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.461 I llm_load_print_meta: n_ff             = 16384
0.00.616.462 I llm_load_print_meta: n_expert         = 0
0.00.616.462 I llm_load_print_meta: n_expert_used    = 0
0.00.616.463 I llm_load_print_meta: causal attn      = 1
0.00.616.463 I llm_load_print_meta: pooling type     = 0
0.00.616.464 I llm_load_print_meta: rope type        = 2
0.00.616.465 I llm_load_print_meta: rope scaling     = linear
0.00.616.466 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.467 I llm_load_print_meta: freq_scale_train = 1
0.00.616.467 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.479 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.480 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.481 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.481 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.494 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.495 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.504 I llm_load_print_meta: model type       = 2B
0.00.616.506 I llm_load_print_meta: model ftype      = Q8_0
0.00.616.508 I llm_load_print_meta: model params     = 2.51 B
0.00.616.517 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.616.518 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.519 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.519 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.520 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.520 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.521 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.521 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.536 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.539 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.539 I llm_load_print_meta: max token length = 93
0.00.715.475 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.721.277 I llama_new_context_with_model: n_seq_max     = 1
0.00.721.284 I llama_new_context_with_model: n_ctx         = 4096
0.00.721.284 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.721.285 I llama_new_context_with_model: n_batch       = 2048
0.00.721.285 I llama_new_context_with_model: n_ubatch      = 512
0.00.721.286 I llama_new_context_with_model: flash_attn    = 0
0.00.721.288 I llama_new_context_with_model: freq_base     = 10000.0
0.00.721.289 I llama_new_context_with_model: freq_scale    = 1
0.00.721.289 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.736.290 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.736.332 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.736.454 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.738.974 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.738.978 I llama_new_context_with_model: graph nodes  = 601
0.00.738.979 I llama_new_context_with_model: graph splits = 1
0.00.739.001 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.344.386 I main: llama threadpool init, n_threads = 4
0.01.344.398 I 
0.01.344.497 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.344.501 I 
0.01.344.729 I sampler seed: 2860535389
0.01.344.741 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.344.747 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.344.749 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.344.749 I 
 increasities, while also being able to use her powers offensively.

**Abilities:**

* **Energy Blasts:** Powerful energy blasts that can devastate entire

0.15.031.341 I llama_perf_sampler_print:    sampling time =      49.43 ms /    33 runs   (    1.50 ms per token,   667.68 tokens per second)
0.15.031.344 I llama_perf_context_print:        load time =    1341.51 ms
0.15.031.346 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.031.358 I llama_perf_context_print:        eval time =   13595.82 ms /    32 runs   (  424.87 ms per token,     2.35 tokens per second)
0.15.031.360 I llama_perf_context_print:       total time =   13686.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 4018 (1839f691) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.818 I main: llama backend init
0.00.002.764 I main: load the model and apply lora adapter, if any
0.00.025.495 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.506 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.593 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.604 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.606 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.610 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.611 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.612 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.614 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.616 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.617 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.622 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.623 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.624 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.633 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.634 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.788 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.713 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.050 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.059 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.060 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.061 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.062 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.064 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.065 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.068 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.069 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.071 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.072 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.266.073 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.081 I llama_model_loader: - type  f32:   37 tensors
0.00.266.083 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.441 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.501.523 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.502.434 I llm_load_vocab: special tokens cache size = 5
0.00.603.063 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.603.128 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.603.129 I llm_load_print_meta: arch             = gemma
0.00.603.130 I llm_load_print_meta: vocab type       = SPM
0.00.603.130 I llm_load_print_meta: n_vocab          = 256000
0.00.603.133 I llm_load_print_meta: n_merges         = 0
0.00.603.133 I llm_load_print_meta: vocab_only       = 0
0.00.603.134 I llm_load_print_meta: n_ctx_train      = 8192
0.00.603.134 I llm_load_print_meta: n_embd           = 2048
0.00.603.134 I llm_load_print_meta: n_layer          = 18
0.00.603.200 I llm_load_print_meta: n_head           = 8
0.00.603.207 I llm_load_print_meta: n_head_kv        = 1
0.00.603.208 I llm_load_print_meta: n_rot            = 256
0.00.603.208 I llm_load_print_meta: n_swa            = 0
0.00.603.210 I llm_load_print_meta: n_embd_head_k    = 256
0.00.603.210 I llm_load_print_meta: n_embd_head_v    = 256
0.00.603.215 I llm_load_print_meta: n_gqa            = 8
0.00.603.220 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.603.225 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.603.226 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.603.228 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.603.239 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.603.240 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.603.241 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.603.247 I llm_load_print_meta: n_ff             = 16384
0.00.603.248 I llm_load_print_meta: n_expert         = 0
0.00.603.262 I llm_load_print_meta: n_expert_used    = 0
0.00.603.263 I llm_load_print_meta: causal attn      = 1
0.00.603.263 I llm_load_print_meta: pooling type     = 0
0.00.603.264 I llm_load_print_meta: rope type        = 2
0.00.603.273 I llm_load_print_meta: rope scaling     = linear
0.00.603.274 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.603.275 I llm_load_print_meta: freq_scale_train = 1
0.00.603.275 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.603.276 I llm_load_print_meta: rope_finetuned   = unknown
0.00.603.276 I llm_load_print_meta: ssm_d_conv       = 0
0.00.603.276 I llm_load_print_meta: ssm_d_inner      = 0
0.00.603.277 I llm_load_print_meta: ssm_d_state      = 0
0.00.603.277 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.603.285 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.603.286 I llm_load_print_meta: model type       = 2B
0.00.603.287 I llm_load_print_meta: model ftype      = Q8_0
0.00.603.288 I llm_load_print_meta: model params     = 2.51 B
0.00.603.298 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.603.298 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.603.299 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.603.299 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.603.299 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.603.300 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.603.300 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.603.304 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.603.310 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.603.313 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.603.313 I llm_load_print_meta: max token length = 93
0.00.700.062 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.700.069 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.700.070 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.700.070 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.700.071 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.700.072 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.705.894 I llama_new_context_with_model: n_seq_max     = 1
0.00.705.902 I llama_new_context_with_model: n_ctx         = 4096
0.00.705.902 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.705.902 I llama_new_context_with_model: n_batch       = 2048
0.00.705.903 I llama_new_context_with_model: n_ubatch      = 512
0.00.705.903 I llama_new_context_with_model: flash_attn    = 0
0.00.705.905 I llama_new_context_with_model: freq_base     = 10000.0
0.00.705.906 I llama_new_context_with_model: freq_scale    = 1
0.00.705.906 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.720.526 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.720.564 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.720.685 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.723.238 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.723.242 I llama_new_context_with_model: graph nodes  = 601
0.00.723.242 I llama_new_context_with_model: graph splits = 1
0.00.723.266 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.326.764 I main: llama threadpool init, n_threads = 4
0.01.326.777 I 
0.01.326.882 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.326.886 I 
0.01.327.121 I sampler seed: 4190606573
0.01.327.133 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.327.142 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.327.143 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.327.143 I 
 increasities, and the rise of the modern state.

**Discuss how these themes are interconnected and contribute to the development of modern governance.**

**Modern governance

0.14.930.629 I llama_perf_sampler_print:    sampling time =      49.10 ms /    33 runs   (    1.49 ms per token,   672.15 tokens per second)
0.14.930.633 I llama_perf_context_print:        load time =    1323.90 ms
0.14.930.659 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.930.661 I llama_perf_context_print:        eval time =   13513.86 ms /    32 runs   (  422.31 ms per token,     2.37 tokens per second)
0.14.930.662 I llama_perf_context_print:       total time =   13603.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4018 (1839f691) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.835 I main: llama backend init
0.00.002.769 I main: load the model and apply lora adapter, if any
0.00.025.366 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.375 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.466 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.477 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.478 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.483 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.484 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.485 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.486 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.487 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.488 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.495 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.498 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.499 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.500 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.501 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.051 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.676 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.954 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.964 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.965 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.966 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.967 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.969 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.970 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.974 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.975 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.976 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.977 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.265.978 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.986 I llama_model_loader: - type  f32:   37 tensors
0.00.265.988 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.627 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.408 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.319 I llm_load_vocab: special tokens cache size = 5
0.00.611.095 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.611.161 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.611.162 I llm_load_print_meta: arch             = gemma
0.00.611.163 I llm_load_print_meta: vocab type       = SPM
0.00.611.164 I llm_load_print_meta: n_vocab          = 256000
0.00.611.166 I llm_load_print_meta: n_merges         = 0
0.00.611.167 I llm_load_print_meta: vocab_only       = 0
0.00.611.168 I llm_load_print_meta: n_ctx_train      = 8192
0.00.611.168 I llm_load_print_meta: n_embd           = 2048
0.00.611.168 I llm_load_print_meta: n_layer          = 18
0.00.611.232 I llm_load_print_meta: n_head           = 8
0.00.611.239 I llm_load_print_meta: n_head_kv        = 1
0.00.611.240 I llm_load_print_meta: n_rot            = 256
0.00.611.240 I llm_load_print_meta: n_swa            = 0
0.00.611.240 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.240 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.246 I llm_load_print_meta: n_gqa            = 8
0.00.611.250 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.255 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.256 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.258 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.258 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.259 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.259 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.264 I llm_load_print_meta: n_ff             = 16384
0.00.611.264 I llm_load_print_meta: n_expert         = 0
0.00.611.265 I llm_load_print_meta: n_expert_used    = 0
0.00.611.267 I llm_load_print_meta: causal attn      = 1
0.00.611.267 I llm_load_print_meta: pooling type     = 0
0.00.611.267 I llm_load_print_meta: rope type        = 2
0.00.611.268 I llm_load_print_meta: rope scaling     = linear
0.00.611.269 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.270 I llm_load_print_meta: freq_scale_train = 1
0.00.611.271 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.271 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.271 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.272 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.272 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.273 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.274 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.274 I llm_load_print_meta: model type       = 2B
0.00.611.275 I llm_load_print_meta: model ftype      = Q8_0
0.00.611.276 I llm_load_print_meta: model params     = 2.51 B
0.00.611.286 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.611.286 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.286 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.287 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.288 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.289 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.289 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.290 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.300 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.301 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.301 I llm_load_print_meta: max token length = 93
0.00.684.450 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.684.462 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.690.283 I llama_new_context_with_model: n_seq_max     = 1
0.00.690.290 I llama_new_context_with_model: n_ctx         = 4096
0.00.690.290 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.690.291 I llama_new_context_with_model: n_batch       = 2048
0.00.690.291 I llama_new_context_with_model: n_ubatch      = 512
0.00.690.291 I llama_new_context_with_model: flash_attn    = 0
0.00.690.294 I llama_new_context_with_model: freq_base     = 10000.0
0.00.690.294 I llama_new_context_with_model: freq_scale    = 1
0.00.690.295 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.704.773 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.704.813 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.704.939 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.707.456 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.707.460 I llama_new_context_with_model: graph nodes  = 601
0.00.707.461 I llama_new_context_with_model: graph splits = 1
0.00.707.484 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.313.425 I main: llama threadpool init, n_threads = 4
0.01.313.436 I 
0.01.313.536 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.313.540 I 
0.01.313.765 I sampler seed: 3020571096
0.01.313.777 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.313.789 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.313.790 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.313.790 I 
 increasively.

I'm not sure what you're trying to say. Could you please provide some context or rephrase your question? [end of text]


0.14.031.173 I llama_perf_sampler_print:    sampling time =      45.92 ms /    31 runs   (    1.48 ms per token,   675.04 tokens per second)
0.14.031.176 I llama_perf_context_print:        load time =    1310.56 ms
0.14.031.177 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.031.192 I llama_perf_context_print:        eval time =   12632.98 ms /    30 runs   (  421.10 ms per token,     2.37 tokens per second)
0.14.031.193 I llama_perf_context_print:       total time =   12717.76 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.702s
user	3m46.551s
sys	0m9.470s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4018 (1839f691)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199229.68 ms
main:    total time = 199229.68 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.652 I build: 4018 (1839f691) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.847 I main: llama backend init
0.00.002.775 I main: load the model and apply lora adapter, if any
0.00.025.459 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.468 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.558 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.570 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.571 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.576 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.580 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.582 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.583 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.584 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.586 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.592 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.593 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.594 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.596 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.597 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.021 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.837 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.291 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.299 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.300 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.301 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.302 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.304 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.305 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.309 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.310 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.311 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.312 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.313 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.322 I llama_model_loader: - type  f32:   37 tensors
0.00.266.325 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.326 I llama_model_loader: - type q6_K:   19 tensors
0.00.444.038 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.501.856 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.502.697 I llm_load_vocab: special tokens cache size = 5
0.00.606.096 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.606.169 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.606.170 I llm_load_print_meta: arch             = gemma
0.00.606.171 I llm_load_print_meta: vocab type       = SPM
0.00.606.172 I llm_load_print_meta: n_vocab          = 256000
0.00.606.174 I llm_load_print_meta: n_merges         = 0
0.00.606.175 I llm_load_print_meta: vocab_only       = 0
0.00.606.175 I llm_load_print_meta: n_ctx_train      = 8192
0.00.606.176 I llm_load_print_meta: n_embd           = 2048
0.00.606.176 I llm_load_print_meta: n_layer          = 18
0.00.606.239 I llm_load_print_meta: n_head           = 8
0.00.606.247 I llm_load_print_meta: n_head_kv        = 1
0.00.606.248 I llm_load_print_meta: n_rot            = 256
0.00.606.248 I llm_load_print_meta: n_swa            = 0
0.00.606.249 I llm_load_print_meta: n_embd_head_k    = 256
0.00.606.249 I llm_load_print_meta: n_embd_head_v    = 256
0.00.606.254 I llm_load_print_meta: n_gqa            = 8
0.00.606.259 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.606.264 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.606.265 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.606.267 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.606.268 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.606.268 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.606.277 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.606.283 I llm_load_print_meta: n_ff             = 16384
0.00.606.283 I llm_load_print_meta: n_expert         = 0
0.00.606.284 I llm_load_print_meta: n_expert_used    = 0
0.00.606.297 I llm_load_print_meta: causal attn      = 1
0.00.606.298 I llm_load_print_meta: pooling type     = 0
0.00.606.298 I llm_load_print_meta: rope type        = 2
0.00.606.299 I llm_load_print_meta: rope scaling     = linear
0.00.606.300 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.606.301 I llm_load_print_meta: freq_scale_train = 1
0.00.606.309 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.606.309 I llm_load_print_meta: rope_finetuned   = unknown
0.00.606.310 I llm_load_print_meta: ssm_d_conv       = 0
0.00.606.310 I llm_load_print_meta: ssm_d_inner      = 0
0.00.606.311 I llm_load_print_meta: ssm_d_state      = 0
0.00.606.311 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.606.311 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.606.312 I llm_load_print_meta: model type       = 2B
0.00.606.313 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.606.314 I llm_load_print_meta: model params     = 2.51 B
0.00.606.323 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.606.323 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.606.324 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.606.325 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.606.325 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.606.326 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.606.327 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.606.327 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.606.333 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.606.335 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.606.336 I llm_load_print_meta: max token length = 93
0.00.670.825 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.670.836 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.670.836 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.670.837 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.670.838 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.670.838 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.677.140 I llama_new_context_with_model: n_seq_max     = 1
0.00.677.147 I llama_new_context_with_model: n_ctx         = 4096
0.00.677.148 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.677.148 I llama_new_context_with_model: n_batch       = 2048
0.00.677.148 I llama_new_context_with_model: n_ubatch      = 512
0.00.677.149 I llama_new_context_with_model: flash_attn    = 0
0.00.677.151 I llama_new_context_with_model: freq_base     = 10000.0
0.00.677.152 I llama_new_context_with_model: freq_scale    = 1
0.00.677.153 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.692.645 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.692.683 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.692.808 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.695.375 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.695.378 I llama_new_context_with_model: graph nodes  = 601
0.00.695.379 I llama_new_context_with_model: graph splits = 1
0.00.695.404 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.263.673 I main: llama threadpool init, n_threads = 4
0.01.263.687 I 
0.01.263.789 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.263.793 I 
0.01.264.019 I sampler seed: 1189838106
0.01.264.032 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.264.038 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.264.042 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.264.042 I 
 seconally with the following questions:

**a) Identify the key differences between a financial advisor and a wealth manager?**

**b) Explain the concept

0.12.058.764 I llama_perf_sampler_print:    sampling time =      49.06 ms /    33 runs   (    1.49 ms per token,   672.59 tokens per second)
0.12.058.777 I llama_perf_context_print:        load time =    1260.81 ms
0.12.058.779 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.058.781 I llama_perf_context_print:        eval time =   10705.34 ms /    32 runs   (  334.54 ms per token,     2.99 tokens per second)
0.12.058.782 I llama_perf_context_print:       total time =   10795.10 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4018 (1839f691)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198982.17 ms
main:    total time = 198982.17 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 4018 (1839f691) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.002.783 I main: load the model and apply lora adapter, if any
0.00.025.571 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.677 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.693 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.694 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.700 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.704 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.705 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.706 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.707 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.708 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.715 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.717 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.718 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.719 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.721 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.759 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.402 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.828 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.836 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.837 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.839 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.840 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.841 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.843 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.848 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.849 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.857 I llama_model_loader: - type  f32:   37 tensors
0.00.265.859 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.860 I llama_model_loader: - type q6_K:   19 tensors
0.00.447.062 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.511.949 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.512.877 I llm_load_vocab: special tokens cache size = 5
0.00.616.493 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.561 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.562 I llm_load_print_meta: arch             = gemma
0.00.616.563 I llm_load_print_meta: vocab type       = SPM
0.00.616.564 I llm_load_print_meta: n_vocab          = 256000
0.00.616.567 I llm_load_print_meta: n_merges         = 0
0.00.616.568 I llm_load_print_meta: vocab_only       = 0
0.00.616.568 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.568 I llm_load_print_meta: n_embd           = 2048
0.00.616.569 I llm_load_print_meta: n_layer          = 18
0.00.616.633 I llm_load_print_meta: n_head           = 8
0.00.616.641 I llm_load_print_meta: n_head_kv        = 1
0.00.616.641 I llm_load_print_meta: n_rot            = 256
0.00.616.643 I llm_load_print_meta: n_swa            = 0
0.00.616.643 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.643 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.649 I llm_load_print_meta: n_gqa            = 8
0.00.616.654 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.674 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.680 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.681 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.682 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.682 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.682 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.689 I llm_load_print_meta: n_ff             = 16384
0.00.616.692 I llm_load_print_meta: n_expert         = 0
0.00.616.692 I llm_load_print_meta: n_expert_used    = 0
0.00.616.693 I llm_load_print_meta: causal attn      = 1
0.00.616.693 I llm_load_print_meta: pooling type     = 0
0.00.616.693 I llm_load_print_meta: rope type        = 2
0.00.616.694 I llm_load_print_meta: rope scaling     = linear
0.00.616.695 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.696 I llm_load_print_meta: freq_scale_train = 1
0.00.616.696 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.697 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.697 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.697 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.697 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.698 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.698 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.699 I llm_load_print_meta: model type       = 2B
0.00.616.700 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.616.701 I llm_load_print_meta: model params     = 2.51 B
0.00.616.710 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.616.711 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.717 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.718 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.718 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.718 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.719 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.720 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.731 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.733 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.734 I llm_load_print_meta: max token length = 93
0.00.678.113 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.683.954 I llama_new_context_with_model: n_seq_max     = 1
0.00.683.961 I llama_new_context_with_model: n_ctx         = 4096
0.00.683.962 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.683.962 I llama_new_context_with_model: n_batch       = 2048
0.00.683.962 I llama_new_context_with_model: n_ubatch      = 512
0.00.683.963 I llama_new_context_with_model: flash_attn    = 0
0.00.683.966 I llama_new_context_with_model: freq_base     = 10000.0
0.00.683.966 I llama_new_context_with_model: freq_scale    = 1
0.00.683.967 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.699.659 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.699.698 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.699.817 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.702.407 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.702.411 I llama_new_context_with_model: graph nodes  = 601
0.00.702.411 I llama_new_context_with_model: graph splits = 1
0.00.702.436 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.272.951 I main: llama threadpool init, n_threads = 4
0.01.272.965 I 
0.01.273.069 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.273.073 I 
0.01.273.314 I sampler seed: 2227817921
0.01.273.325 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.273.335 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.273.336 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.273.336 I 
 increasities in our code.

I'm sorry, I cannot provide assistance or information that promotes harmful or inappropriate behavior. [end of text]


0.10.072.867 I llama_perf_sampler_print:    sampling time =      39.88 ms /    27 runs   (    1.48 ms per token,   677.03 tokens per second)
0.10.072.870 I llama_perf_context_print:        load time =    1270.07 ms
0.10.072.881 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.072.883 I llama_perf_context_print:        eval time =    8726.85 ms /    26 runs   (  335.65 ms per token,     2.98 tokens per second)
0.10.072.884 I llama_perf_context_print:       total time =    8799.92 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m3.245s
user	50m1.534s
sys	0m6.357s
