+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.547 I build: 4281 (1881ffaf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.740 I main: llama backend init
0.00.000.748 I main: load the model and apply lora adapter, if any
0.00.021.209 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.219 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.226 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.234 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.238 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.242 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.242 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.243 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.244 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.244 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.245 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.248 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.249 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.249 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.250 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.250 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.746 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.254 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.123 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.128 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.129 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.129 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.130 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.131 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.131 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.133 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.134 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.135 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.135 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.136 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.140 I llama_model_loader: - type  f32:   37 tensors
0.00.131.141 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.262 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.535 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.139 I llm_load_vocab: special tokens cache size = 5
0.00.263.564 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.581 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.582 I llm_load_print_meta: arch             = gemma
0.00.263.583 I llm_load_print_meta: vocab type       = SPM
0.00.263.583 I llm_load_print_meta: n_vocab          = 256000
0.00.263.584 I llm_load_print_meta: n_merges         = 0
0.00.263.584 I llm_load_print_meta: vocab_only       = 0
0.00.263.584 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.585 I llm_load_print_meta: n_embd           = 2048
0.00.263.585 I llm_load_print_meta: n_layer          = 18
0.00.263.597 I llm_load_print_meta: n_head           = 8
0.00.263.598 I llm_load_print_meta: n_head_kv        = 1
0.00.263.598 I llm_load_print_meta: n_rot            = 256
0.00.263.598 I llm_load_print_meta: n_swa            = 0
0.00.263.598 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.599 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.600 I llm_load_print_meta: n_gqa            = 8
0.00.263.601 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.601 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.602 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.604 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.604 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.604 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.605 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.606 I llm_load_print_meta: n_ff             = 16384
0.00.263.606 I llm_load_print_meta: n_expert         = 0
0.00.263.606 I llm_load_print_meta: n_expert_used    = 0
0.00.263.606 I llm_load_print_meta: causal attn      = 1
0.00.263.606 I llm_load_print_meta: pooling type     = 0
0.00.263.607 I llm_load_print_meta: rope type        = 2
0.00.263.607 I llm_load_print_meta: rope scaling     = linear
0.00.263.609 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.609 I llm_load_print_meta: freq_scale_train = 1
0.00.263.609 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.610 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.610 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.610 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.611 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.611 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.611 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.612 I llm_load_print_meta: model type       = 2B
0.00.263.612 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.613 I llm_load_print_meta: model params     = 2.51 B
0.00.263.614 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.615 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.615 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.615 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.616 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.616 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.617 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.618 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.618 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.618 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.619 I llm_load_print_meta: max token length = 93
0.00.364.917 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.364.924 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.364.924 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.364.925 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.364.926 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.364.926 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.371.063 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.069 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.070 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.070 I llama_new_context_with_model: n_batch       = 2048
0.00.371.070 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.071 I llama_new_context_with_model: flash_attn    = 0
0.00.371.073 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.074 I llama_new_context_with_model: freq_scale    = 1
0.00.371.075 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.117 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.130 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.217 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.507 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.511 I llama_new_context_with_model: graph nodes  = 601
0.00.386.512 I llama_new_context_with_model: graph splits = 1
0.00.386.514 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.811 I main: llama threadpool init, n_threads = 4
0.00.472.825 I 
0.00.472.899 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.472.903 I 
0.00.472.945 I sampler seed: 3202846078
0.00.472.955 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.959 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.472.959 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.959 I 
 increably!

I am unable to generate the requested response as it contains inappropriate and potentially harmful content. [end of text]


0.02.024.968 I llama_perf_sampler_print:    sampling time =       3.19 ms /    23 runs   (    0.14 ms per token,  7201.00 tokens per second)
0.02.024.971 I llama_perf_context_print:        load time =     472.05 ms
0.02.024.972 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.024.974 I llama_perf_context_print:        eval time =    1539.24 ms /    22 runs   (   69.97 ms per token,    14.29 tokens per second)
0.02.024.974 I llama_perf_context_print:       total time =    1552.17 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.169 I build: 4281 (1881ffaf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.371 I main: llama backend init
0.00.000.377 I main: load the model and apply lora adapter, if any
0.00.020.435 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.449 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.455 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.456 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.460 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.460 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.461 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.462 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.462 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.463 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.467 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.468 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.468 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.468 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.469 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.993 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.525 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.427 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.437 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.438 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.438 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.439 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.440 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.441 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.443 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.444 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.445 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.445 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.446 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.449 I llama_model_loader: - type  f32:   37 tensors
0.00.130.450 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.638 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.590 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.123 I llm_load_vocab: special tokens cache size = 5
0.00.263.162 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.180 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.180 I llm_load_print_meta: arch             = gemma
0.00.263.181 I llm_load_print_meta: vocab type       = SPM
0.00.263.182 I llm_load_print_meta: n_vocab          = 256000
0.00.263.182 I llm_load_print_meta: n_merges         = 0
0.00.263.182 I llm_load_print_meta: vocab_only       = 0
0.00.263.183 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.183 I llm_load_print_meta: n_embd           = 2048
0.00.263.183 I llm_load_print_meta: n_layer          = 18
0.00.263.194 I llm_load_print_meta: n_head           = 8
0.00.263.195 I llm_load_print_meta: n_head_kv        = 1
0.00.263.196 I llm_load_print_meta: n_rot            = 256
0.00.263.196 I llm_load_print_meta: n_swa            = 0
0.00.263.196 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.196 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.197 I llm_load_print_meta: n_gqa            = 8
0.00.263.198 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.199 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.200 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.202 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.202 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.202 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.203 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.204 I llm_load_print_meta: n_ff             = 16384
0.00.263.204 I llm_load_print_meta: n_expert         = 0
0.00.263.204 I llm_load_print_meta: n_expert_used    = 0
0.00.263.204 I llm_load_print_meta: causal attn      = 1
0.00.263.205 I llm_load_print_meta: pooling type     = 0
0.00.263.205 I llm_load_print_meta: rope type        = 2
0.00.263.205 I llm_load_print_meta: rope scaling     = linear
0.00.263.207 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.207 I llm_load_print_meta: freq_scale_train = 1
0.00.263.208 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.208 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.208 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.209 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.209 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.209 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.209 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.210 I llm_load_print_meta: model type       = 2B
0.00.263.210 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.211 I llm_load_print_meta: model params     = 2.51 B
0.00.263.211 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.212 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.212 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.212 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.213 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.213 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.213 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.214 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.214 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.215 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.215 I llm_load_print_meta: max token length = 93
0.00.358.213 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.363.337 I llama_new_context_with_model: n_seq_max     = 1
0.00.363.344 I llama_new_context_with_model: n_ctx         = 4096
0.00.363.345 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.363.345 I llama_new_context_with_model: n_batch       = 2048
0.00.363.346 I llama_new_context_with_model: n_ubatch      = 512
0.00.363.346 I llama_new_context_with_model: flash_attn    = 0
0.00.363.349 I llama_new_context_with_model: freq_base     = 10000.0
0.00.363.350 I llama_new_context_with_model: freq_scale    = 1
0.00.363.351 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.377.996 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.378.011 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.378.104 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.379.366 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.379.373 I llama_new_context_with_model: graph nodes  = 601
0.00.379.373 I llama_new_context_with_model: graph splits = 1
0.00.379.376 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.272 I main: llama threadpool init, n_threads = 4
0.00.460.287 I 
0.00.460.368 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.460.377 I 
0.00.460.427 I sampler seed: 2381044437
0.00.460.438 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.442 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.442 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.444 I 
 increabling the tension and anticipation as the two characters find themselves drawn to each other.

The scene opens with a crackling fireplace, warm smoke filling the room and

0.02.644.834 I llama_perf_sampler_print:    sampling time =       5.11 ms /    33 runs   (    0.15 ms per token,  6462.98 tokens per second)
0.02.644.836 I llama_perf_context_print:        load time =     459.88 ms
0.02.644.837 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.644.839 I llama_perf_context_print:        eval time =    2164.67 ms /    32 runs   (   67.65 ms per token,    14.78 tokens per second)
0.02.644.840 I llama_perf_context_print:       total time =    2184.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.187 I build: 4281 (1881ffaf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.401 I main: llama backend init
0.00.000.408 I main: load the model and apply lora adapter, if any
0.00.020.470 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.480 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.487 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.496 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.500 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.505 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.506 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.507 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.508 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.509 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.509 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.515 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.516 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.517 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.518 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.518 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.586 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.544 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.441 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.448 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.449 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.449 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.450 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.451 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.451 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.454 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.454 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.455 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.455 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.456 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.460 I llama_model_loader: - type  f32:   37 tensors
0.00.131.461 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.378 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.418 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.132 I llm_load_vocab: special tokens cache size = 5
0.00.268.503 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.519 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.520 I llm_load_print_meta: arch             = gemma
0.00.268.521 I llm_load_print_meta: vocab type       = SPM
0.00.268.521 I llm_load_print_meta: n_vocab          = 256000
0.00.268.522 I llm_load_print_meta: n_merges         = 0
0.00.268.522 I llm_load_print_meta: vocab_only       = 0
0.00.268.522 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.523 I llm_load_print_meta: n_embd           = 2048
0.00.268.523 I llm_load_print_meta: n_layer          = 18
0.00.268.536 I llm_load_print_meta: n_head           = 8
0.00.268.537 I llm_load_print_meta: n_head_kv        = 1
0.00.268.537 I llm_load_print_meta: n_rot            = 256
0.00.268.538 I llm_load_print_meta: n_swa            = 0
0.00.268.538 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.538 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.539 I llm_load_print_meta: n_gqa            = 8
0.00.268.540 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.541 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.542 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.543 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.544 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.544 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.544 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.545 I llm_load_print_meta: n_ff             = 16384
0.00.268.545 I llm_load_print_meta: n_expert         = 0
0.00.268.546 I llm_load_print_meta: n_expert_used    = 0
0.00.268.546 I llm_load_print_meta: causal attn      = 1
0.00.268.546 I llm_load_print_meta: pooling type     = 0
0.00.268.547 I llm_load_print_meta: rope type        = 2
0.00.268.548 I llm_load_print_meta: rope scaling     = linear
0.00.268.550 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.551 I llm_load_print_meta: freq_scale_train = 1
0.00.268.551 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.552 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.552 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.553 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.553 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.553 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.553 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.554 I llm_load_print_meta: model type       = 2B
0.00.268.555 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.556 I llm_load_print_meta: model params     = 2.51 B
0.00.268.557 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.557 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.558 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.559 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.559 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.559 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.560 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.561 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.561 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.561 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.562 I llm_load_print_meta: max token length = 93
0.00.345.779 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.345.787 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.345.788 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.345.788 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.345.789 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.345.790 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.351.033 I llama_new_context_with_model: n_seq_max     = 1
0.00.351.039 I llama_new_context_with_model: n_ctx         = 4096
0.00.351.040 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.351.040 I llama_new_context_with_model: n_batch       = 2048
0.00.351.041 I llama_new_context_with_model: n_ubatch      = 512
0.00.351.042 I llama_new_context_with_model: flash_attn    = 0
0.00.351.045 I llama_new_context_with_model: freq_base     = 10000.0
0.00.351.046 I llama_new_context_with_model: freq_scale    = 1
0.00.351.047 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.365.530 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.365.545 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.365.639 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.965 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.366.970 I llama_new_context_with_model: graph nodes  = 601
0.00.366.970 I llama_new_context_with_model: graph splits = 1
0.00.366.973 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.452.642 I main: llama threadpool init, n_threads = 4
0.00.452.663 I 
0.00.452.750 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.452.754 I 
0.00.452.804 I sampler seed: 4033664383
0.00.452.820 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.452.826 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.452.827 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.452.828 I 
 increasities

I am unable to access the requested webpage due to a temporary server error.

I apologize for any inconvenience this may cause.

**Alternative:**

0.02.719.624 I llama_perf_sampler_print:    sampling time =       4.91 ms /    33 runs   (    0.15 ms per token,  6718.24 tokens per second)
0.02.719.627 I llama_perf_context_print:        load time =     452.22 ms
0.02.719.629 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.719.631 I llama_perf_context_print:        eval time =    2248.03 ms /    32 runs   (   70.25 ms per token,    14.23 tokens per second)
0.02.719.632 I llama_perf_context_print:       total time =    2266.99 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.552 I build: 4281 (1881ffaf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.739 I main: llama backend init
0.00.000.745 I main: load the model and apply lora adapter, if any
0.00.021.025 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.035 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.042 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.051 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.052 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.055 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.056 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.056 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.057 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.057 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.058 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.061 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.062 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.063 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.063 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.064 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.302 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.906 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.769 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.775 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.775 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.776 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.776 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.777 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.778 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.780 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.781 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.782 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.783 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.784 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.787 I llama_model_loader: - type  f32:   37 tensors
0.00.130.788 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.236 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.331 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.972 I llm_load_vocab: special tokens cache size = 5
0.00.267.221 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.237 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.238 I llm_load_print_meta: arch             = gemma
0.00.267.238 I llm_load_print_meta: vocab type       = SPM
0.00.267.239 I llm_load_print_meta: n_vocab          = 256000
0.00.267.239 I llm_load_print_meta: n_merges         = 0
0.00.267.240 I llm_load_print_meta: vocab_only       = 0
0.00.267.240 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.240 I llm_load_print_meta: n_embd           = 2048
0.00.267.240 I llm_load_print_meta: n_layer          = 18
0.00.267.250 I llm_load_print_meta: n_head           = 8
0.00.267.251 I llm_load_print_meta: n_head_kv        = 1
0.00.267.251 I llm_load_print_meta: n_rot            = 256
0.00.267.252 I llm_load_print_meta: n_swa            = 0
0.00.267.252 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.252 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.253 I llm_load_print_meta: n_gqa            = 8
0.00.267.254 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.255 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.256 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.258 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.258 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.259 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.259 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.260 I llm_load_print_meta: n_ff             = 16384
0.00.267.260 I llm_load_print_meta: n_expert         = 0
0.00.267.261 I llm_load_print_meta: n_expert_used    = 0
0.00.267.261 I llm_load_print_meta: causal attn      = 1
0.00.267.261 I llm_load_print_meta: pooling type     = 0
0.00.267.262 I llm_load_print_meta: rope type        = 2
0.00.267.262 I llm_load_print_meta: rope scaling     = linear
0.00.267.263 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.264 I llm_load_print_meta: freq_scale_train = 1
0.00.267.264 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.265 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.265 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.265 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.266 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.266 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.266 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.267 I llm_load_print_meta: model type       = 2B
0.00.267.267 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.268 I llm_load_print_meta: model params     = 2.51 B
0.00.267.269 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.269 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.270 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.270 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.271 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.271 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.271 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.272 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.272 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.273 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.273 I llm_load_print_meta: max token length = 93
0.00.338.206 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.338.214 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.343.509 I llama_new_context_with_model: n_seq_max     = 1
0.00.343.517 I llama_new_context_with_model: n_ctx         = 4096
0.00.343.517 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.343.518 I llama_new_context_with_model: n_batch       = 2048
0.00.343.518 I llama_new_context_with_model: n_ubatch      = 512
0.00.343.518 I llama_new_context_with_model: flash_attn    = 0
0.00.343.522 I llama_new_context_with_model: freq_base     = 10000.0
0.00.343.523 I llama_new_context_with_model: freq_scale    = 1
0.00.343.524 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.229 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.359.243 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.359.347 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.667 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.674 I llama_new_context_with_model: graph nodes  = 601
0.00.360.674 I llama_new_context_with_model: graph splits = 1
0.00.360.677 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.449.867 I main: llama threadpool init, n_threads = 4
0.00.449.882 I 
0.00.449.954 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.449.958 I 
0.00.449.999 I sampler seed: 1622860280
0.00.450.009 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.450.012 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.450.013 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.450.013 I 
 increasively from 10 to 20.

What is the new value after 5 iterations?

**Answer:** 65

**Explanation

0.02.873.161 I llama_perf_sampler_print:    sampling time =       4.89 ms /    33 runs   (    0.15 ms per token,  6744.33 tokens per second)
0.02.873.164 I llama_perf_context_print:        load time =     449.11 ms
0.02.873.165 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.873.167 I llama_perf_context_print:        eval time =    2404.52 ms /    32 runs   (   75.14 ms per token,    13.31 tokens per second)
0.02.873.168 I llama_perf_context_print:       total time =    2423.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.777s
user	0m36.641s
sys	0m9.301s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4281 (1881ffaf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40217.25 ms
main:    total time = 40217.25 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.176 I build: 4281 (1881ffaf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.365 I main: llama backend init
0.00.000.372 I main: load the model and apply lora adapter, if any
0.00.020.660 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.668 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.676 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.681 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.682 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.686 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.687 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.687 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.688 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.688 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.689 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.693 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.693 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.694 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.694 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.695 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.255 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.060 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.883 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.889 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.889 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.890 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.891 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.892 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.893 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.895 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.896 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.896 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.897 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.898 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.901 I llama_model_loader: - type  f32:   37 tensors
0.00.130.902 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.903 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.080 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.393 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.902 I llm_load_vocab: special tokens cache size = 5
0.00.266.044 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.059 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.059 I llm_load_print_meta: arch             = gemma
0.00.266.060 I llm_load_print_meta: vocab type       = SPM
0.00.266.061 I llm_load_print_meta: n_vocab          = 256000
0.00.266.061 I llm_load_print_meta: n_merges         = 0
0.00.266.062 I llm_load_print_meta: vocab_only       = 0
0.00.266.062 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.062 I llm_load_print_meta: n_embd           = 2048
0.00.266.063 I llm_load_print_meta: n_layer          = 18
0.00.266.074 I llm_load_print_meta: n_head           = 8
0.00.266.075 I llm_load_print_meta: n_head_kv        = 1
0.00.266.075 I llm_load_print_meta: n_rot            = 256
0.00.266.075 I llm_load_print_meta: n_swa            = 0
0.00.266.076 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.076 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.077 I llm_load_print_meta: n_gqa            = 8
0.00.266.078 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.079 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.080 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.082 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.082 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.082 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.083 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.084 I llm_load_print_meta: n_ff             = 16384
0.00.266.084 I llm_load_print_meta: n_expert         = 0
0.00.266.084 I llm_load_print_meta: n_expert_used    = 0
0.00.266.085 I llm_load_print_meta: causal attn      = 1
0.00.266.085 I llm_load_print_meta: pooling type     = 0
0.00.266.085 I llm_load_print_meta: rope type        = 2
0.00.266.086 I llm_load_print_meta: rope scaling     = linear
0.00.266.087 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.088 I llm_load_print_meta: freq_scale_train = 1
0.00.266.088 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.088 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.089 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.089 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.090 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.090 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.090 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.090 I llm_load_print_meta: model type       = 2B
0.00.266.091 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.092 I llm_load_print_meta: model params     = 2.51 B
0.00.266.093 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.093 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.093 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.094 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.094 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.095 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.095 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.095 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.096 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.096 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.096 I llm_load_print_meta: max token length = 93
0.00.325.359 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.325.368 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.325.368 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.325.369 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.325.370 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.325.371 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.330.600 I llama_new_context_with_model: n_seq_max     = 1
0.00.330.608 I llama_new_context_with_model: n_ctx         = 4096
0.00.330.609 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.330.609 I llama_new_context_with_model: n_batch       = 2048
0.00.330.610 I llama_new_context_with_model: n_ubatch      = 512
0.00.330.610 I llama_new_context_with_model: flash_attn    = 0
0.00.330.613 I llama_new_context_with_model: freq_base     = 10000.0
0.00.330.614 I llama_new_context_with_model: freq_scale    = 1
0.00.330.615 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.345.769 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.784 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.345.878 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.168 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.175 I llama_new_context_with_model: graph nodes  = 601
0.00.347.176 I llama_new_context_with_model: graph splits = 1
0.00.347.178 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.945 I main: llama threadpool init, n_threads = 4
0.00.422.960 I 
0.00.423.039 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.423.042 I 
0.00.423.090 I sampler seed: 2509712204
0.00.423.102 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.423.114 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.423.117 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.423.117 I 
 seconally.

I am unable to generate the requested response as I am not able to access external websites or specific data. [end of text]


0.01.696.298 I llama_perf_sampler_print:    sampling time =       4.00 ms /    27 runs   (    0.15 ms per token,  6751.69 tokens per second)
0.01.696.301 I llama_perf_context_print:        load time =     422.56 ms
0.01.696.302 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.696.303 I llama_perf_context_print:        eval time =    1258.44 ms /    26 runs   (   48.40 ms per token,    20.66 tokens per second)
0.01.696.304 I llama_perf_context_print:       total time =    1273.36 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4281 (1881ffaf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40168.69 ms
main:    total time = 40168.69 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.525 I build: 4281 (1881ffaf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.712 I main: llama backend init
0.00.000.719 I main: load the model and apply lora adapter, if any
0.00.021.262 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.276 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.285 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.288 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.291 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.292 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.293 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.293 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.294 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.294 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.297 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.298 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.298 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.299 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.299 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.719 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.956 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.830 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.836 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.837 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.837 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.838 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.839 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.840 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.842 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.843 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.846 I llama_model_loader: - type  f32:   37 tensors
0.00.130.848 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.848 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.876 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.323 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.883 I llm_load_vocab: special tokens cache size = 5
0.00.264.799 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.816 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.816 I llm_load_print_meta: arch             = gemma
0.00.264.817 I llm_load_print_meta: vocab type       = SPM
0.00.264.817 I llm_load_print_meta: n_vocab          = 256000
0.00.264.818 I llm_load_print_meta: n_merges         = 0
0.00.264.818 I llm_load_print_meta: vocab_only       = 0
0.00.264.818 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.819 I llm_load_print_meta: n_embd           = 2048
0.00.264.819 I llm_load_print_meta: n_layer          = 18
0.00.264.831 I llm_load_print_meta: n_head           = 8
0.00.264.833 I llm_load_print_meta: n_head_kv        = 1
0.00.264.833 I llm_load_print_meta: n_rot            = 256
0.00.264.834 I llm_load_print_meta: n_swa            = 0
0.00.264.835 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.835 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.836 I llm_load_print_meta: n_gqa            = 8
0.00.264.838 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.839 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.840 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.841 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.842 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.842 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.843 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.844 I llm_load_print_meta: n_ff             = 16384
0.00.264.844 I llm_load_print_meta: n_expert         = 0
0.00.264.847 I llm_load_print_meta: n_expert_used    = 0
0.00.264.847 I llm_load_print_meta: causal attn      = 1
0.00.264.847 I llm_load_print_meta: pooling type     = 0
0.00.264.848 I llm_load_print_meta: rope type        = 2
0.00.264.848 I llm_load_print_meta: rope scaling     = linear
0.00.264.849 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.850 I llm_load_print_meta: freq_scale_train = 1
0.00.264.850 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.850 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.851 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.851 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.851 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.852 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.852 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.852 I llm_load_print_meta: model type       = 2B
0.00.264.853 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.854 I llm_load_print_meta: model params     = 2.51 B
0.00.264.855 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.856 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.856 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.856 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.858 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.858 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.859 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.859 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.859 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.862 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.862 I llm_load_print_meta: max token length = 93
0.00.322.190 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.327.382 I llama_new_context_with_model: n_seq_max     = 1
0.00.327.388 I llama_new_context_with_model: n_ctx         = 4096
0.00.327.388 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.327.389 I llama_new_context_with_model: n_batch       = 2048
0.00.327.389 I llama_new_context_with_model: n_ubatch      = 512
0.00.327.390 I llama_new_context_with_model: flash_attn    = 0
0.00.327.392 I llama_new_context_with_model: freq_base     = 10000.0
0.00.327.393 I llama_new_context_with_model: freq_scale    = 1
0.00.327.393 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.341.977 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.341.992 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.342.083 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.300 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.343.304 I llama_new_context_with_model: graph nodes  = 601
0.00.343.305 I llama_new_context_with_model: graph splits = 1
0.00.343.307 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.417.303 I main: llama threadpool init, n_threads = 4
0.00.417.319 I 
0.00.417.391 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.417.394 I 
0.00.417.439 I sampler seed: 3860214608
0.00.417.449 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.417.462 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.417.466 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.417.466 I 
 encomportly, the human digestive system consists of the mouth, esophagus, stomach, small intestine, large intestine, rectum, and anus.

**Identify the

0.01.976.768 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6737.44 tokens per second)
0.01.976.771 I llama_perf_context_print:        load time =     416.57 ms
0.01.976.773 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.976.775 I llama_perf_context_print:        eval time =    1539.90 ms /    32 runs   (   48.12 ms per token,    20.78 tokens per second)
0.01.976.777 I llama_perf_context_print:       total time =    1559.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.840s
user	10m22.435s
sys	0m6.850s
