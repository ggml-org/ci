+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.558 I build: 4185 (904109ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.756 I main: llama backend init
0.00.000.762 I main: load the model and apply lora adapter, if any
0.00.021.569 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.579 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.587 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.592 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.593 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.597 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.598 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.598 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.599 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.599 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.600 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.604 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.605 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.605 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.606 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.606 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.742 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.439 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.324 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.331 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.332 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.332 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.333 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.334 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.334 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.337 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.338 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.339 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.340 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.341 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.344 I llama_model_loader: - type  f32:   37 tensors
0.00.133.345 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.981 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.116 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.756 I llm_load_vocab: special tokens cache size = 5
0.00.282.869 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.886 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.887 I llm_load_print_meta: arch             = gemma
0.00.282.888 I llm_load_print_meta: vocab type       = SPM
0.00.282.888 I llm_load_print_meta: n_vocab          = 256000
0.00.282.889 I llm_load_print_meta: n_merges         = 0
0.00.282.889 I llm_load_print_meta: vocab_only       = 0
0.00.282.889 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.890 I llm_load_print_meta: n_embd           = 2048
0.00.282.890 I llm_load_print_meta: n_layer          = 18
0.00.282.902 I llm_load_print_meta: n_head           = 8
0.00.282.903 I llm_load_print_meta: n_head_kv        = 1
0.00.282.903 I llm_load_print_meta: n_rot            = 256
0.00.282.903 I llm_load_print_meta: n_swa            = 0
0.00.282.904 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.904 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.905 I llm_load_print_meta: n_gqa            = 8
0.00.282.906 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.907 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.908 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.910 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.910 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.910 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.911 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.911 I llm_load_print_meta: n_ff             = 16384
0.00.282.912 I llm_load_print_meta: n_expert         = 0
0.00.282.912 I llm_load_print_meta: n_expert_used    = 0
0.00.282.912 I llm_load_print_meta: causal attn      = 1
0.00.282.913 I llm_load_print_meta: pooling type     = 0
0.00.282.913 I llm_load_print_meta: rope type        = 2
0.00.282.913 I llm_load_print_meta: rope scaling     = linear
0.00.282.915 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.916 I llm_load_print_meta: freq_scale_train = 1
0.00.282.916 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.917 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.917 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.917 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.917 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.918 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.918 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.918 I llm_load_print_meta: model type       = 2B
0.00.282.919 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.920 I llm_load_print_meta: model params     = 2.51 B
0.00.282.920 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.921 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.921 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.922 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.922 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.923 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.923 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.923 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.924 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.924 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.924 I llm_load_print_meta: max token length = 93
0.00.384.115 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.384.124 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.384.125 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.384.126 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.384.126 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.384.127 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.389.384 I llama_new_context_with_model: n_seq_max     = 1
0.00.389.391 I llama_new_context_with_model: n_ctx         = 4096
0.00.389.391 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.389.392 I llama_new_context_with_model: n_batch       = 2048
0.00.389.392 I llama_new_context_with_model: n_ubatch      = 512
0.00.389.393 I llama_new_context_with_model: flash_attn    = 0
0.00.389.396 I llama_new_context_with_model: freq_base     = 10000.0
0.00.389.397 I llama_new_context_with_model: freq_scale    = 1
0.00.389.398 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.404.181 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.404.194 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.404.289 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.405.603 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.405.609 I llama_new_context_with_model: graph nodes  = 601
0.00.405.609 I llama_new_context_with_model: graph splits = 1
0.00.405.611 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.492.202 I main: llama threadpool init, n_threads = 4
0.00.492.215 I 
0.00.492.288 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.492.291 I 
0.00.492.335 I sampler seed: 1446370551
0.00.492.346 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.492.350 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.492.352 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.492.353 I 
 increamically, a mischievous little mouse named Pipkin.

**Pipkin:** Pipkin! Pipkin!

**Mother Pipkin:** Good morning, Pip

0.02.785.243 I llama_perf_sampler_print:    sampling time =       4.79 ms /    33 runs   (    0.15 ms per token,  6890.79 tokens per second)
0.02.785.246 I llama_perf_context_print:        load time =     491.42 ms
0.02.785.249 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.785.250 I llama_perf_context_print:        eval time =    2273.14 ms /    32 runs   (   71.04 ms per token,    14.08 tokens per second)
0.02.785.251 I llama_perf_context_print:       total time =    2293.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.504 I build: 4185 (904109ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.694 I main: llama backend init
0.00.000.700 I main: load the model and apply lora adapter, if any
0.00.021.564 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.579 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.586 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.587 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.591 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.595 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.596 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.596 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.597 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.597 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.602 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.602 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.603 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.603 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.604 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.347 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.670 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.561 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.567 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.567 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.568 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.568 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.569 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.570 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.573 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.574 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.575 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.576 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.577 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.579 I llama_model_loader: - type  f32:   37 tensors
0.00.132.580 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.068 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.980 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.562 I llm_load_vocab: special tokens cache size = 5
0.00.271.895 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.912 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.913 I llm_load_print_meta: arch             = gemma
0.00.271.914 I llm_load_print_meta: vocab type       = SPM
0.00.271.914 I llm_load_print_meta: n_vocab          = 256000
0.00.271.915 I llm_load_print_meta: n_merges         = 0
0.00.271.915 I llm_load_print_meta: vocab_only       = 0
0.00.271.915 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.915 I llm_load_print_meta: n_embd           = 2048
0.00.271.916 I llm_load_print_meta: n_layer          = 18
0.00.271.929 I llm_load_print_meta: n_head           = 8
0.00.271.930 I llm_load_print_meta: n_head_kv        = 1
0.00.271.931 I llm_load_print_meta: n_rot            = 256
0.00.271.931 I llm_load_print_meta: n_swa            = 0
0.00.271.931 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.932 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.943 I llm_load_print_meta: n_gqa            = 8
0.00.271.945 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.946 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.948 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.950 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.950 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.951 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.952 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.953 I llm_load_print_meta: n_ff             = 16384
0.00.271.953 I llm_load_print_meta: n_expert         = 0
0.00.271.954 I llm_load_print_meta: n_expert_used    = 0
0.00.271.954 I llm_load_print_meta: causal attn      = 1
0.00.271.955 I llm_load_print_meta: pooling type     = 0
0.00.271.955 I llm_load_print_meta: rope type        = 2
0.00.271.956 I llm_load_print_meta: rope scaling     = linear
0.00.271.957 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.958 I llm_load_print_meta: freq_scale_train = 1
0.00.271.958 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.959 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.959 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.960 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.960 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.961 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.961 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.962 I llm_load_print_meta: model type       = 2B
0.00.271.962 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.963 I llm_load_print_meta: model params     = 2.51 B
0.00.271.965 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.965 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.966 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.966 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.967 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.967 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.968 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.968 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.969 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.969 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.970 I llm_load_print_meta: max token length = 93
0.00.367.096 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.372.462 I llama_new_context_with_model: n_seq_max     = 1
0.00.372.468 I llama_new_context_with_model: n_ctx         = 4096
0.00.372.469 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.372.469 I llama_new_context_with_model: n_batch       = 2048
0.00.372.469 I llama_new_context_with_model: n_ubatch      = 512
0.00.372.470 I llama_new_context_with_model: flash_attn    = 0
0.00.372.473 I llama_new_context_with_model: freq_base     = 10000.0
0.00.372.474 I llama_new_context_with_model: freq_scale    = 1
0.00.372.475 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.387.839 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.854 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.970 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.278 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.284 I llama_new_context_with_model: graph nodes  = 601
0.00.389.284 I llama_new_context_with_model: graph splits = 1
0.00.389.286 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.019 I main: llama threadpool init, n_threads = 4
0.00.471.036 I 
0.00.471.111 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.471.114 I 
0.00.471.157 I sampler seed: 2123993486
0.00.471.168 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.181 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.184 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.185 I 
 increasements of the 20th century?

**Answer:**

**The rise of totalitarian regimes and mass atrocities during the 20th century served

0.02.677.669 I llama_perf_sampler_print:    sampling time =       5.00 ms /    33 runs   (    0.15 ms per token,  6593.41 tokens per second)
0.02.677.673 I llama_perf_context_print:        load time =     470.30 ms
0.02.677.674 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.677.676 I llama_perf_context_print:        eval time =    2186.30 ms /    32 runs   (   68.32 ms per token,    14.64 tokens per second)
0.02.677.686 I llama_perf_context_print:       total time =    2206.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.592 I build: 4185 (904109ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.817 I main: llama backend init
0.00.000.824 I main: load the model and apply lora adapter, if any
0.00.021.718 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.729 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.738 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.743 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.744 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.748 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.749 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.749 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.750 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.750 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.750 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.756 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.756 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.757 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.757 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.758 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.841 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.560 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.488 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.495 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.496 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.497 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.498 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.499 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.500 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.503 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.504 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.505 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.506 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.507 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.512 I llama_model_loader: - type  f32:   37 tensors
0.00.133.513 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.082 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.044 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.680 I llm_load_vocab: special tokens cache size = 5
0.00.282.976 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.996 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.996 I llm_load_print_meta: arch             = gemma
0.00.282.997 I llm_load_print_meta: vocab type       = SPM
0.00.282.998 I llm_load_print_meta: n_vocab          = 256000
0.00.282.998 I llm_load_print_meta: n_merges         = 0
0.00.282.998 I llm_load_print_meta: vocab_only       = 0
0.00.282.999 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.999 I llm_load_print_meta: n_embd           = 2048
0.00.282.999 I llm_load_print_meta: n_layer          = 18
0.00.283.010 I llm_load_print_meta: n_head           = 8
0.00.283.011 I llm_load_print_meta: n_head_kv        = 1
0.00.283.011 I llm_load_print_meta: n_rot            = 256
0.00.283.012 I llm_load_print_meta: n_swa            = 0
0.00.283.012 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.012 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.013 I llm_load_print_meta: n_gqa            = 8
0.00.283.015 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.016 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.016 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.018 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.018 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.019 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.019 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.020 I llm_load_print_meta: n_ff             = 16384
0.00.283.020 I llm_load_print_meta: n_expert         = 0
0.00.283.021 I llm_load_print_meta: n_expert_used    = 0
0.00.283.021 I llm_load_print_meta: causal attn      = 1
0.00.283.021 I llm_load_print_meta: pooling type     = 0
0.00.283.021 I llm_load_print_meta: rope type        = 2
0.00.283.022 I llm_load_print_meta: rope scaling     = linear
0.00.283.024 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.024 I llm_load_print_meta: freq_scale_train = 1
0.00.283.025 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.025 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.025 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.025 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.026 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.026 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.026 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.027 I llm_load_print_meta: model type       = 2B
0.00.283.027 I llm_load_print_meta: model ftype      = Q8_0
0.00.283.028 I llm_load_print_meta: model params     = 2.51 B
0.00.283.029 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.283.029 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.030 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.030 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.031 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.031 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.031 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.032 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.032 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.032 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.033 I llm_load_print_meta: max token length = 93
0.00.357.225 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.357.232 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.357.233 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.357.233 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.357.234 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.357.235 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.362.527 I llama_new_context_with_model: n_seq_max     = 1
0.00.362.533 I llama_new_context_with_model: n_ctx         = 4096
0.00.362.534 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.362.534 I llama_new_context_with_model: n_batch       = 2048
0.00.362.535 I llama_new_context_with_model: n_ubatch      = 512
0.00.362.535 I llama_new_context_with_model: flash_attn    = 0
0.00.362.537 I llama_new_context_with_model: freq_base     = 10000.0
0.00.362.538 I llama_new_context_with_model: freq_scale    = 1
0.00.362.540 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.377.047 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.377.060 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.377.152 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.378.386 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.378.392 I llama_new_context_with_model: graph nodes  = 601
0.00.378.393 I llama_new_context_with_model: graph splits = 1
0.00.378.395 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.564 I main: llama threadpool init, n_threads = 4
0.00.464.578 I 
0.00.464.653 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.464.656 I 
0.00.464.700 I sampler seed: 2191444004
0.00.464.711 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.713 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.714 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.715 I 
 increasities!

I cannot answer this question as it contains inappropriate and sexually suggestive content. I am programmed to adhere to ethical guidelines and cannot provide responses that are

0.02.759.559 I llama_perf_sampler_print:    sampling time =       4.88 ms /    33 runs   (    0.15 ms per token,  6767.84 tokens per second)
0.02.759.561 I llama_perf_context_print:        load time =     463.72 ms
0.02.759.562 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.759.564 I llama_perf_context_print:        eval time =    2275.19 ms /    32 runs   (   71.10 ms per token,    14.06 tokens per second)
0.02.759.565 I llama_perf_context_print:       total time =    2295.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.579 I build: 4185 (904109ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.802 I main: llama backend init
0.00.000.809 I main: load the model and apply lora adapter, if any
0.00.021.016 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.025 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.032 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.037 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.038 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.041 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.042 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.043 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.043 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.044 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.044 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.049 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.050 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.050 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.051 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.051 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.845 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.537 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.589 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.596 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.596 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.597 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.597 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.598 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.600 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.602 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.603 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.604 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.605 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.606 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.610 I llama_model_loader: - type  f32:   37 tensors
0.00.133.611 I llama_model_loader: - type q8_0:  127 tensors
0.00.223.345 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.272.452 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.273.138 I llm_load_vocab: special tokens cache size = 5
0.00.294.500 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.294.517 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.294.518 I llm_load_print_meta: arch             = gemma
0.00.294.519 I llm_load_print_meta: vocab type       = SPM
0.00.294.520 I llm_load_print_meta: n_vocab          = 256000
0.00.294.520 I llm_load_print_meta: n_merges         = 0
0.00.294.520 I llm_load_print_meta: vocab_only       = 0
0.00.294.521 I llm_load_print_meta: n_ctx_train      = 8192
0.00.294.521 I llm_load_print_meta: n_embd           = 2048
0.00.294.521 I llm_load_print_meta: n_layer          = 18
0.00.294.532 I llm_load_print_meta: n_head           = 8
0.00.294.533 I llm_load_print_meta: n_head_kv        = 1
0.00.294.534 I llm_load_print_meta: n_rot            = 256
0.00.294.534 I llm_load_print_meta: n_swa            = 0
0.00.294.534 I llm_load_print_meta: n_embd_head_k    = 256
0.00.294.534 I llm_load_print_meta: n_embd_head_v    = 256
0.00.294.535 I llm_load_print_meta: n_gqa            = 8
0.00.294.536 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.294.537 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.294.538 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.294.539 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.294.540 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.294.540 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.294.540 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.294.541 I llm_load_print_meta: n_ff             = 16384
0.00.294.541 I llm_load_print_meta: n_expert         = 0
0.00.294.543 I llm_load_print_meta: n_expert_used    = 0
0.00.294.543 I llm_load_print_meta: causal attn      = 1
0.00.294.544 I llm_load_print_meta: pooling type     = 0
0.00.294.544 I llm_load_print_meta: rope type        = 2
0.00.294.544 I llm_load_print_meta: rope scaling     = linear
0.00.294.546 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.294.546 I llm_load_print_meta: freq_scale_train = 1
0.00.294.547 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.294.547 I llm_load_print_meta: rope_finetuned   = unknown
0.00.294.548 I llm_load_print_meta: ssm_d_conv       = 0
0.00.294.548 I llm_load_print_meta: ssm_d_inner      = 0
0.00.294.548 I llm_load_print_meta: ssm_d_state      = 0
0.00.294.548 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.294.548 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.294.549 I llm_load_print_meta: model type       = 2B
0.00.294.550 I llm_load_print_meta: model ftype      = Q8_0
0.00.294.550 I llm_load_print_meta: model params     = 2.51 B
0.00.294.552 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.294.552 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.294.553 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.294.553 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.294.554 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.294.554 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.294.554 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.294.555 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.294.555 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.294.556 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.294.556 I llm_load_print_meta: max token length = 93
0.00.365.981 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.365.989 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.371.067 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.075 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.075 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.076 I llama_new_context_with_model: n_batch       = 2048
0.00.371.076 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.077 I llama_new_context_with_model: flash_attn    = 0
0.00.371.080 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.081 I llama_new_context_with_model: freq_scale    = 1
0.00.371.082 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.386.420 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.386.434 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.386.528 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.867 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.387.872 I llama_new_context_with_model: graph nodes  = 601
0.00.387.873 I llama_new_context_with_model: graph splits = 1
0.00.387.875 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.896 I main: llama threadpool init, n_threads = 4
0.00.475.912 I 
0.00.476.009 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.476.014 I 
0.00.476.070 I sampler seed: 3951440136
0.00.476.082 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.476.092 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.476.096 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.476.097 I 
 increasities, and sexual harassment are all forms of sexual misconduct. These behaviors violate fundamental human rights and create a hostile work or educational environment. [end of text]


0.02.693.151 I llama_perf_sampler_print:    sampling time =       4.76 ms /    30 runs   (    0.16 ms per token,  6306.50 tokens per second)
0.02.693.155 I llama_perf_context_print:        load time =     475.07 ms
0.02.693.156 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.693.159 I llama_perf_context_print:        eval time =    2199.06 ms /    29 runs   (   75.83 ms per token,    13.19 tokens per second)
0.02.693.160 I llama_perf_context_print:       total time =    2217.26 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.727s
user	0m38.979s
sys	0m9.492s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4185 (904109ed)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40241.74 ms
main:    total time = 40241.74 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.170 I build: 4185 (904109ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.368 I main: llama backend init
0.00.000.375 I main: load the model and apply lora adapter, if any
0.00.020.632 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.643 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.651 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.656 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.657 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.661 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.662 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.663 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.663 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.664 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.664 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.668 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.668 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.669 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.669 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.670 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.410 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.894 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.777 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.784 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.785 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.786 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.786 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.787 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.788 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.791 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.791 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.792 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.793 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.794 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.798 I llama_model_loader: - type  f32:   37 tensors
0.00.131.799 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.800 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.689 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.824 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.591 I llm_load_vocab: special tokens cache size = 5
0.00.280.028 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.047 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.047 I llm_load_print_meta: arch             = gemma
0.00.280.048 I llm_load_print_meta: vocab type       = SPM
0.00.280.049 I llm_load_print_meta: n_vocab          = 256000
0.00.280.049 I llm_load_print_meta: n_merges         = 0
0.00.280.050 I llm_load_print_meta: vocab_only       = 0
0.00.280.050 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.050 I llm_load_print_meta: n_embd           = 2048
0.00.280.050 I llm_load_print_meta: n_layer          = 18
0.00.280.063 I llm_load_print_meta: n_head           = 8
0.00.280.064 I llm_load_print_meta: n_head_kv        = 1
0.00.280.065 I llm_load_print_meta: n_rot            = 256
0.00.280.065 I llm_load_print_meta: n_swa            = 0
0.00.280.065 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.065 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.066 I llm_load_print_meta: n_gqa            = 8
0.00.280.068 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.068 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.069 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.071 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.072 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.072 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.072 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.073 I llm_load_print_meta: n_ff             = 16384
0.00.280.074 I llm_load_print_meta: n_expert         = 0
0.00.280.074 I llm_load_print_meta: n_expert_used    = 0
0.00.280.074 I llm_load_print_meta: causal attn      = 1
0.00.280.075 I llm_load_print_meta: pooling type     = 0
0.00.280.075 I llm_load_print_meta: rope type        = 2
0.00.280.075 I llm_load_print_meta: rope scaling     = linear
0.00.280.077 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.077 I llm_load_print_meta: freq_scale_train = 1
0.00.280.078 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.078 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.078 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.079 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.079 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.079 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.079 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.080 I llm_load_print_meta: model type       = 2B
0.00.280.080 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.280.081 I llm_load_print_meta: model params     = 2.51 B
0.00.280.082 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.280.082 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.083 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.083 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.083 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.084 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.084 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.084 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.085 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.085 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.085 I llm_load_print_meta: max token length = 93
0.00.338.565 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.338.573 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.338.573 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.338.574 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.338.575 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.338.575 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.343.720 I llama_new_context_with_model: n_seq_max     = 1
0.00.343.729 I llama_new_context_with_model: n_ctx         = 4096
0.00.343.729 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.343.729 I llama_new_context_with_model: n_batch       = 2048
0.00.343.730 I llama_new_context_with_model: n_ubatch      = 512
0.00.343.730 I llama_new_context_with_model: flash_attn    = 0
0.00.343.734 I llama_new_context_with_model: freq_base     = 10000.0
0.00.343.735 I llama_new_context_with_model: freq_scale    = 1
0.00.343.737 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.134 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.148 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.358.242 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.359.536 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.359.543 I llama_new_context_with_model: graph nodes  = 601
0.00.359.543 I llama_new_context_with_model: graph splits = 1
0.00.359.545 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.435.711 I main: llama threadpool init, n_threads = 4
0.00.435.727 I 
0.00.435.798 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.435.802 I 
0.00.435.844 I sampler seed: 495612309
0.00.435.855 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.435.865 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.435.865 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.435.866 I 
 susceptivity with a high degree of assertiveness.

I am not sure how to best articulate this.

**Here are some options I have considered:**



0.02.063.149 I llama_perf_sampler_print:    sampling time =       5.48 ms /    33 runs   (    0.17 ms per token,  6025.20 tokens per second)
0.02.063.152 I llama_perf_context_print:        load time =     435.32 ms
0.02.063.154 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.063.156 I llama_perf_context_print:        eval time =    1607.15 ms /    32 runs   (   50.22 ms per token,    19.91 tokens per second)
0.02.063.158 I llama_perf_context_print:       total time =    1627.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4185 (904109ed)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40216.02 ms
main:    total time = 40216.02 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.572 I build: 4185 (904109ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.000.777 I main: load the model and apply lora adapter, if any
0.00.022.095 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.109 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.116 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.117 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.122 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.123 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.124 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.125 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.126 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.127 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.132 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.132 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.133 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.133 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.134 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.173 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.750 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.813 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.820 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.821 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.821 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.822 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.823 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.823 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.825 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.826 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.831 I llama_model_loader: - type  f32:   37 tensors
0.00.133.832 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.832 I llama_model_loader: - type q6_K:   19 tensors
0.00.211.902 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.267.317 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.268.044 I llm_load_vocab: special tokens cache size = 5
0.00.289.333 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.289.355 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.289.356 I llm_load_print_meta: arch             = gemma
0.00.289.356 I llm_load_print_meta: vocab type       = SPM
0.00.289.357 I llm_load_print_meta: n_vocab          = 256000
0.00.289.358 I llm_load_print_meta: n_merges         = 0
0.00.289.358 I llm_load_print_meta: vocab_only       = 0
0.00.289.359 I llm_load_print_meta: n_ctx_train      = 8192
0.00.289.359 I llm_load_print_meta: n_embd           = 2048
0.00.289.359 I llm_load_print_meta: n_layer          = 18
0.00.289.371 I llm_load_print_meta: n_head           = 8
0.00.289.372 I llm_load_print_meta: n_head_kv        = 1
0.00.289.372 I llm_load_print_meta: n_rot            = 256
0.00.289.372 I llm_load_print_meta: n_swa            = 0
0.00.289.373 I llm_load_print_meta: n_embd_head_k    = 256
0.00.289.373 I llm_load_print_meta: n_embd_head_v    = 256
0.00.289.374 I llm_load_print_meta: n_gqa            = 8
0.00.289.375 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.289.376 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.289.377 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.289.378 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.289.378 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.289.378 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.289.379 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.289.379 I llm_load_print_meta: n_ff             = 16384
0.00.289.380 I llm_load_print_meta: n_expert         = 0
0.00.289.380 I llm_load_print_meta: n_expert_used    = 0
0.00.289.380 I llm_load_print_meta: causal attn      = 1
0.00.289.380 I llm_load_print_meta: pooling type     = 0
0.00.289.380 I llm_load_print_meta: rope type        = 2
0.00.289.381 I llm_load_print_meta: rope scaling     = linear
0.00.289.383 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.289.384 I llm_load_print_meta: freq_scale_train = 1
0.00.289.384 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.289.384 I llm_load_print_meta: rope_finetuned   = unknown
0.00.289.385 I llm_load_print_meta: ssm_d_conv       = 0
0.00.289.385 I llm_load_print_meta: ssm_d_inner      = 0
0.00.289.385 I llm_load_print_meta: ssm_d_state      = 0
0.00.289.386 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.289.386 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.289.386 I llm_load_print_meta: model type       = 2B
0.00.289.387 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.289.388 I llm_load_print_meta: model params     = 2.51 B
0.00.289.388 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.289.388 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.289.389 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.289.389 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.289.390 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.289.390 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.289.391 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.289.391 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.289.392 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.289.392 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.289.393 I llm_load_print_meta: max token length = 93
0.00.344.269 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.349.386 I llama_new_context_with_model: n_seq_max     = 1
0.00.349.392 I llama_new_context_with_model: n_ctx         = 4096
0.00.349.393 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.349.393 I llama_new_context_with_model: n_batch       = 2048
0.00.349.394 I llama_new_context_with_model: n_ubatch      = 512
0.00.349.395 I llama_new_context_with_model: flash_attn    = 0
0.00.349.397 I llama_new_context_with_model: freq_base     = 10000.0
0.00.349.398 I llama_new_context_with_model: freq_scale    = 1
0.00.349.399 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.363.997 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.364.011 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.364.096 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.365.318 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.365.324 I llama_new_context_with_model: graph nodes  = 601
0.00.365.324 I llama_new_context_with_model: graph splits = 1
0.00.365.326 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.440.154 I main: llama threadpool init, n_threads = 4
0.00.440.171 I 
0.00.440.247 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.440.251 I 
0.00.440.298 I sampler seed: 3801700948
0.00.440.308 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.440.311 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.440.322 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.440.325 I 
 squaRE, a technology company specializing in data governance and data management solutions, is facing a critical decision regarding its future direction.

**Current Situation:**

*

0.02.034.787 I llama_perf_sampler_print:    sampling time =       4.83 ms /    33 runs   (    0.15 ms per token,  6826.64 tokens per second)
0.02.034.789 I llama_perf_context_print:        load time =     439.36 ms
0.02.034.791 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.034.793 I llama_perf_context_print:        eval time =    1575.64 ms /    32 runs   (   49.24 ms per token,    20.31 tokens per second)
0.02.034.794 I llama_perf_context_print:       total time =    1594.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.410s
user	10m24.855s
sys	0m6.991s
