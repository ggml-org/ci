+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.551 I build: 3762 (90a2fff0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.740 I main: llama backend init
0.00.001.875 I main: load the model and apply lora adapter, if any
0.00.022.008 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.056 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.066 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.071 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.075 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.079 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.080 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.081 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.082 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.083 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.084 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.089 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.090 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.091 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.092 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.093 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.363 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.500 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.337 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.343 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.343 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.344 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.345 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.346 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.346 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.349 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.349 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.350 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.350 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.351 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.354 I llama_model_loader: - type  f32:   37 tensors
0.00.132.356 I llama_model_loader: - type q8_0:  127 tensors
0.00.196.461 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.197.139 I llm_load_vocab: special tokens cache size = 5
0.00.215.516 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.215.528 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.215.529 I llm_load_print_meta: arch             = gemma
0.00.215.530 I llm_load_print_meta: vocab type       = SPM
0.00.215.530 I llm_load_print_meta: n_vocab          = 256000
0.00.215.530 I llm_load_print_meta: n_merges         = 0
0.00.215.531 I llm_load_print_meta: vocab_only       = 0
0.00.215.531 I llm_load_print_meta: n_ctx_train      = 8192
0.00.215.531 I llm_load_print_meta: n_embd           = 2048
0.00.215.532 I llm_load_print_meta: n_layer          = 18
0.00.215.544 I llm_load_print_meta: n_head           = 8
0.00.215.545 I llm_load_print_meta: n_head_kv        = 1
0.00.215.545 I llm_load_print_meta: n_rot            = 256
0.00.215.545 I llm_load_print_meta: n_swa            = 0
0.00.215.545 I llm_load_print_meta: n_embd_head_k    = 256
0.00.215.546 I llm_load_print_meta: n_embd_head_v    = 256
0.00.215.547 I llm_load_print_meta: n_gqa            = 8
0.00.215.548 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.215.549 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.215.549 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.215.551 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.215.551 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.215.551 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.215.552 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.215.553 I llm_load_print_meta: n_ff             = 16384
0.00.215.553 I llm_load_print_meta: n_expert         = 0
0.00.215.553 I llm_load_print_meta: n_expert_used    = 0
0.00.215.553 I llm_load_print_meta: causal attn      = 1
0.00.215.554 I llm_load_print_meta: pooling type     = 0
0.00.215.554 I llm_load_print_meta: rope type        = 2
0.00.215.555 I llm_load_print_meta: rope scaling     = linear
0.00.215.556 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.215.557 I llm_load_print_meta: freq_scale_train = 1
0.00.215.557 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.215.557 I llm_load_print_meta: rope_finetuned   = unknown
0.00.215.557 I llm_load_print_meta: ssm_d_conv       = 0
0.00.215.558 I llm_load_print_meta: ssm_d_inner      = 0
0.00.215.558 I llm_load_print_meta: ssm_d_state      = 0
0.00.215.558 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.215.558 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.215.559 I llm_load_print_meta: model type       = 2B
0.00.215.559 I llm_load_print_meta: model ftype      = Q8_0
0.00.215.560 I llm_load_print_meta: model params     = 2.51 B
0.00.215.561 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.215.561 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.215.562 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.215.562 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.215.563 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.215.563 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.215.564 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.215.564 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.215.564 I llm_load_print_meta: max token length = 93
0.00.215.579 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.313.510 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.313.517 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.313.518 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.313.519 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.313.519 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.313.520 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.318.678 I llama_new_context_with_model: n_ctx      = 8192
0.00.318.684 I llama_new_context_with_model: n_batch    = 2048
0.00.318.685 I llama_new_context_with_model: n_ubatch   = 512
0.00.318.685 I llama_new_context_with_model: flash_attn = 0
0.00.318.688 I llama_new_context_with_model: freq_base  = 10000.0
0.00.318.689 I llama_new_context_with_model: freq_scale = 1
0.00.346.808 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.346.825 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.346.924 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.787 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.347.793 I llama_new_context_with_model: graph nodes  = 601
0.00.347.794 I llama_new_context_with_model: graph splits = 1
0.00.347.796 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.437.976 I main: llama threadpool init, n_threads = 4
0.00.437.988 I 
0.00.438.066 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.438.070 I 
0.00.438.111 I sampler seed: 3076546469
0.00.438.123 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.438.126 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.438.127 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities. [end of text]


0.00.715.721 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8143.32 tokens per second)
0.00.715.723 I llama_perf_context_print:        load time =     436.08 ms
0.00.715.726 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.715.728 I llama_perf_context_print:        eval time =     274.67 ms /     4 runs   (   68.67 ms per token,    14.56 tokens per second)
0.00.715.728 I llama_perf_context_print:       total time =     277.75 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.593 I build: 3762 (90a2fff0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.771 I main: llama backend init
0.00.001.860 I main: load the model and apply lora adapter, if any
0.00.021.711 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.724 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.731 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.732 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.735 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.737 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.738 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.738 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.739 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.739 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.743 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.744 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.745 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.746 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.746 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.909 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.145 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.832 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.839 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.840 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.840 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.841 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.842 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.842 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.844 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.844 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.845 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.845 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.847 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.851 I llama_model_loader: - type  f32:   37 tensors
0.00.133.854 I llama_model_loader: - type q8_0:  127 tensors
0.00.197.830 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.198.531 I llm_load_vocab: special tokens cache size = 5
0.00.216.986 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.216.998 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.216.999 I llm_load_print_meta: arch             = gemma
0.00.216.999 I llm_load_print_meta: vocab type       = SPM
0.00.217.000 I llm_load_print_meta: n_vocab          = 256000
0.00.217.000 I llm_load_print_meta: n_merges         = 0
0.00.217.001 I llm_load_print_meta: vocab_only       = 0
0.00.217.001 I llm_load_print_meta: n_ctx_train      = 8192
0.00.217.001 I llm_load_print_meta: n_embd           = 2048
0.00.217.002 I llm_load_print_meta: n_layer          = 18
0.00.217.012 I llm_load_print_meta: n_head           = 8
0.00.217.013 I llm_load_print_meta: n_head_kv        = 1
0.00.217.013 I llm_load_print_meta: n_rot            = 256
0.00.217.014 I llm_load_print_meta: n_swa            = 0
0.00.217.014 I llm_load_print_meta: n_embd_head_k    = 256
0.00.217.014 I llm_load_print_meta: n_embd_head_v    = 256
0.00.217.015 I llm_load_print_meta: n_gqa            = 8
0.00.217.016 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.217.017 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.217.018 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.217.019 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.217.019 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.217.020 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.217.020 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.217.021 I llm_load_print_meta: n_ff             = 16384
0.00.217.021 I llm_load_print_meta: n_expert         = 0
0.00.217.021 I llm_load_print_meta: n_expert_used    = 0
0.00.217.021 I llm_load_print_meta: causal attn      = 1
0.00.217.022 I llm_load_print_meta: pooling type     = 0
0.00.217.022 I llm_load_print_meta: rope type        = 2
0.00.217.022 I llm_load_print_meta: rope scaling     = linear
0.00.217.024 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.217.024 I llm_load_print_meta: freq_scale_train = 1
0.00.217.025 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.217.025 I llm_load_print_meta: rope_finetuned   = unknown
0.00.217.026 I llm_load_print_meta: ssm_d_conv       = 0
0.00.217.026 I llm_load_print_meta: ssm_d_inner      = 0
0.00.217.026 I llm_load_print_meta: ssm_d_state      = 0
0.00.217.026 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.217.027 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.217.027 I llm_load_print_meta: model type       = 2B
0.00.217.028 I llm_load_print_meta: model ftype      = Q8_0
0.00.217.029 I llm_load_print_meta: model params     = 2.51 B
0.00.217.030 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.217.030 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.217.030 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.217.031 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.217.031 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.217.031 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.217.032 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.217.032 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.217.032 I llm_load_print_meta: max token length = 93
0.00.217.047 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.311.272 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.316.118 I llama_new_context_with_model: n_ctx      = 8192
0.00.316.123 I llama_new_context_with_model: n_batch    = 2048
0.00.316.124 I llama_new_context_with_model: n_ubatch   = 512
0.00.316.125 I llama_new_context_with_model: flash_attn = 0
0.00.316.127 I llama_new_context_with_model: freq_base  = 10000.0
0.00.316.128 I llama_new_context_with_model: freq_scale = 1
0.00.344.853 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.344.867 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.344.957 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.796 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.345.803 I llama_new_context_with_model: graph nodes  = 601
0.00.345.804 I llama_new_context_with_model: graph splits = 1
0.00.345.805 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.433.018 I main: llama threadpool init, n_threads = 4
0.00.433.031 I 
0.00.433.105 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.433.109 I 
0.00.433.144 I sampler seed: 2778434601
0.00.433.157 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.433.160 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.433.161 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically with each question, following the logic presented in the instructions.

Q1. What is the meaning of life?
Q2. What is the

0.02.614.959 I llama_perf_sampler_print:    sampling time =       4.80 ms /    33 runs   (    0.15 ms per token,  6876.43 tokens per second)
0.02.614.961 I llama_perf_context_print:        load time =     431.14 ms
0.02.614.962 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.614.964 I llama_perf_context_print:        eval time =    2163.65 ms /    32 runs   (   67.61 ms per token,    14.79 tokens per second)
0.02.614.964 I llama_perf_context_print:       total time =    2181.95 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.557 I build: 3762 (90a2fff0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.001.823 I main: load the model and apply lora adapter, if any
0.00.022.030 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.079 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.090 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.096 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.097 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.101 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.103 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.103 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.104 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.104 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.105 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.109 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.110 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.110 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.111 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.112 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.430 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.626 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.508 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.515 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.516 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.517 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.517 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.518 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.519 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.522 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.523 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.524 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.524 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.525 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.529 I llama_model_loader: - type  f32:   37 tensors
0.00.132.531 I llama_model_loader: - type q8_0:  127 tensors
0.00.195.579 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.196.263 I llm_load_vocab: special tokens cache size = 5
0.00.215.030 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.215.047 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.215.048 I llm_load_print_meta: arch             = gemma
0.00.215.048 I llm_load_print_meta: vocab type       = SPM
0.00.215.049 I llm_load_print_meta: n_vocab          = 256000
0.00.215.050 I llm_load_print_meta: n_merges         = 0
0.00.215.050 I llm_load_print_meta: vocab_only       = 0
0.00.215.050 I llm_load_print_meta: n_ctx_train      = 8192
0.00.215.051 I llm_load_print_meta: n_embd           = 2048
0.00.215.051 I llm_load_print_meta: n_layer          = 18
0.00.215.063 I llm_load_print_meta: n_head           = 8
0.00.215.064 I llm_load_print_meta: n_head_kv        = 1
0.00.215.065 I llm_load_print_meta: n_rot            = 256
0.00.215.065 I llm_load_print_meta: n_swa            = 0
0.00.215.065 I llm_load_print_meta: n_embd_head_k    = 256
0.00.215.066 I llm_load_print_meta: n_embd_head_v    = 256
0.00.215.067 I llm_load_print_meta: n_gqa            = 8
0.00.215.067 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.215.068 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.215.069 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.215.071 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.215.071 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.215.071 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.215.071 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.215.072 I llm_load_print_meta: n_ff             = 16384
0.00.215.072 I llm_load_print_meta: n_expert         = 0
0.00.215.073 I llm_load_print_meta: n_expert_used    = 0
0.00.215.073 I llm_load_print_meta: causal attn      = 1
0.00.215.073 I llm_load_print_meta: pooling type     = 0
0.00.215.074 I llm_load_print_meta: rope type        = 2
0.00.215.074 I llm_load_print_meta: rope scaling     = linear
0.00.215.075 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.215.076 I llm_load_print_meta: freq_scale_train = 1
0.00.215.076 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.215.077 I llm_load_print_meta: rope_finetuned   = unknown
0.00.215.077 I llm_load_print_meta: ssm_d_conv       = 0
0.00.215.077 I llm_load_print_meta: ssm_d_inner      = 0
0.00.215.078 I llm_load_print_meta: ssm_d_state      = 0
0.00.215.078 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.215.078 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.215.079 I llm_load_print_meta: model type       = 2B
0.00.215.079 I llm_load_print_meta: model ftype      = Q8_0
0.00.215.080 I llm_load_print_meta: model params     = 2.51 B
0.00.215.081 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.215.081 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.215.082 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.215.082 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.215.082 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.215.082 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.215.083 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.215.083 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.215.084 I llm_load_print_meta: max token length = 93
0.00.215.103 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.290.983 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.290.991 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.290.992 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.290.993 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.290.994 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.290.994 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.295.994 I llama_new_context_with_model: n_ctx      = 8192
0.00.295.999 I llama_new_context_with_model: n_batch    = 2048
0.00.296.000 I llama_new_context_with_model: n_ubatch   = 512
0.00.296.000 I llama_new_context_with_model: flash_attn = 0
0.00.296.002 I llama_new_context_with_model: freq_base  = 10000.0
0.00.296.003 I llama_new_context_with_model: freq_scale = 1
0.00.324.620 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.324.635 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.324.725 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.325.571 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.325.580 I llama_new_context_with_model: graph nodes  = 601
0.00.325.580 I llama_new_context_with_model: graph splits = 1
0.00.325.582 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.417.186 I main: llama threadpool init, n_threads = 4
0.00.417.199 I 
0.00.417.272 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.417.275 I 
0.00.417.313 I sampler seed: 3465495697
0.00.417.322 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.417.324 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.417.325 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities with the same name:

- Celia
- Camilla
- Clarisse
- Daphne
- Eloise
- Isabella
- Josephine
-

0.02.665.626 I llama_perf_sampler_print:    sampling time =       5.33 ms /    33 runs   (    0.16 ms per token,  6185.57 tokens per second)
0.02.665.629 I llama_perf_context_print:        load time =     415.35 ms
0.02.665.630 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.665.631 I llama_perf_context_print:        eval time =    2229.20 ms /    32 runs   (   69.66 ms per token,    14.35 tokens per second)
0.02.665.632 I llama_perf_context_print:       total time =    2248.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.526 I build: 3762 (90a2fff0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.724 I main: llama backend init
0.00.001.811 I main: load the model and apply lora adapter, if any
0.00.021.648 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.691 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.703 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.708 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.709 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.712 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.713 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.714 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.714 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.714 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.715 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.719 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.719 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.720 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.721 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.722 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.458 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.385 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.268 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.276 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.276 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.277 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.278 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.279 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.279 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.282 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.282 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.283 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.284 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.285 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.289 I llama_model_loader: - type  f32:   37 tensors
0.00.133.291 I llama_model_loader: - type q8_0:  127 tensors
0.00.199.552 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.200.252 I llm_load_vocab: special tokens cache size = 5
0.00.218.760 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.218.773 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.218.773 I llm_load_print_meta: arch             = gemma
0.00.218.774 I llm_load_print_meta: vocab type       = SPM
0.00.218.775 I llm_load_print_meta: n_vocab          = 256000
0.00.218.775 I llm_load_print_meta: n_merges         = 0
0.00.218.775 I llm_load_print_meta: vocab_only       = 0
0.00.218.776 I llm_load_print_meta: n_ctx_train      = 8192
0.00.218.776 I llm_load_print_meta: n_embd           = 2048
0.00.218.776 I llm_load_print_meta: n_layer          = 18
0.00.218.790 I llm_load_print_meta: n_head           = 8
0.00.218.791 I llm_load_print_meta: n_head_kv        = 1
0.00.218.791 I llm_load_print_meta: n_rot            = 256
0.00.218.792 I llm_load_print_meta: n_swa            = 0
0.00.218.792 I llm_load_print_meta: n_embd_head_k    = 256
0.00.218.792 I llm_load_print_meta: n_embd_head_v    = 256
0.00.218.793 I llm_load_print_meta: n_gqa            = 8
0.00.218.794 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.218.795 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.218.796 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.218.797 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.218.798 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.218.798 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.218.798 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.218.799 I llm_load_print_meta: n_ff             = 16384
0.00.218.799 I llm_load_print_meta: n_expert         = 0
0.00.218.800 I llm_load_print_meta: n_expert_used    = 0
0.00.218.800 I llm_load_print_meta: causal attn      = 1
0.00.218.800 I llm_load_print_meta: pooling type     = 0
0.00.218.801 I llm_load_print_meta: rope type        = 2
0.00.218.801 I llm_load_print_meta: rope scaling     = linear
0.00.218.802 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.218.803 I llm_load_print_meta: freq_scale_train = 1
0.00.218.803 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.218.804 I llm_load_print_meta: rope_finetuned   = unknown
0.00.218.805 I llm_load_print_meta: ssm_d_conv       = 0
0.00.218.806 I llm_load_print_meta: ssm_d_inner      = 0
0.00.218.806 I llm_load_print_meta: ssm_d_state      = 0
0.00.218.806 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.218.807 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.218.807 I llm_load_print_meta: model type       = 2B
0.00.218.808 I llm_load_print_meta: model ftype      = Q8_0
0.00.218.809 I llm_load_print_meta: model params     = 2.51 B
0.00.218.813 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.218.814 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.218.814 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.218.814 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.218.815 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.218.815 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.218.816 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.218.816 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.218.817 I llm_load_print_meta: max token length = 93
0.00.218.839 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.288.961 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.288.972 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.293.934 I llama_new_context_with_model: n_ctx      = 8192
0.00.293.940 I llama_new_context_with_model: n_batch    = 2048
0.00.293.941 I llama_new_context_with_model: n_ubatch   = 512
0.00.293.942 I llama_new_context_with_model: flash_attn = 0
0.00.293.945 I llama_new_context_with_model: freq_base  = 10000.0
0.00.293.946 I llama_new_context_with_model: freq_scale = 1
0.00.324.042 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.324.057 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.324.191 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.325.290 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.325.299 I llama_new_context_with_model: graph nodes  = 601
0.00.325.299 I llama_new_context_with_model: graph splits = 1
0.00.325.301 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.405 I main: llama threadpool init, n_threads = 4
0.00.429.416 I 
0.00.429.490 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.429.493 I 
0.00.429.520 I sampler seed: 4085914873
0.00.429.529 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.532 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.429.533 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities.

I cannot answer this question as it contains sexually suggestive and inappropriate content. [end of text]


0.01.880.080 I llama_perf_sampler_print:    sampling time =       3.19 ms /    20 runs   (    0.16 ms per token,  6265.66 tokens per second)
0.01.880.083 I llama_perf_context_print:        load time =     427.58 ms
0.01.880.084 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.880.086 I llama_perf_context_print:        eval time =    1438.41 ms /    19 runs   (   75.71 ms per token,    13.21 tokens per second)
0.01.880.087 I llama_perf_context_print:       total time =    1450.68 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.497s
user	0m27.359s
sys	0m9.341s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3762 (90a2fff0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31948.01 ms
main:    total time = 31948.01 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.545 I build: 3762 (90a2fff0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.746 I main: llama backend init
0.00.001.867 I main: load the model and apply lora adapter, if any
0.00.022.276 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.328 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.336 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.341 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.342 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.346 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.346 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.347 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.347 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.348 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.348 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.352 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.352 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.353 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.353 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.354 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.333 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.798 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.661 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.668 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.669 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.669 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.670 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.671 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.671 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.674 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.675 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.676 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.676 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.677 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.682 I llama_model_loader: - type  f32:   37 tensors
0.00.132.685 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.686 I llama_model_loader: - type q6_K:   19 tensors
0.00.196.774 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.197.443 I llm_load_vocab: special tokens cache size = 5
0.00.215.892 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.215.904 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.215.905 I llm_load_print_meta: arch             = gemma
0.00.215.905 I llm_load_print_meta: vocab type       = SPM
0.00.215.906 I llm_load_print_meta: n_vocab          = 256000
0.00.215.907 I llm_load_print_meta: n_merges         = 0
0.00.215.907 I llm_load_print_meta: vocab_only       = 0
0.00.215.907 I llm_load_print_meta: n_ctx_train      = 8192
0.00.215.907 I llm_load_print_meta: n_embd           = 2048
0.00.215.908 I llm_load_print_meta: n_layer          = 18
0.00.215.919 I llm_load_print_meta: n_head           = 8
0.00.215.920 I llm_load_print_meta: n_head_kv        = 1
0.00.215.921 I llm_load_print_meta: n_rot            = 256
0.00.215.921 I llm_load_print_meta: n_swa            = 0
0.00.215.921 I llm_load_print_meta: n_embd_head_k    = 256
0.00.215.921 I llm_load_print_meta: n_embd_head_v    = 256
0.00.215.922 I llm_load_print_meta: n_gqa            = 8
0.00.215.923 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.215.924 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.215.925 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.215.926 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.215.927 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.215.927 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.215.928 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.215.929 I llm_load_print_meta: n_ff             = 16384
0.00.215.929 I llm_load_print_meta: n_expert         = 0
0.00.215.929 I llm_load_print_meta: n_expert_used    = 0
0.00.215.930 I llm_load_print_meta: causal attn      = 1
0.00.215.930 I llm_load_print_meta: pooling type     = 0
0.00.215.930 I llm_load_print_meta: rope type        = 2
0.00.215.931 I llm_load_print_meta: rope scaling     = linear
0.00.215.932 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.215.933 I llm_load_print_meta: freq_scale_train = 1
0.00.215.933 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.215.933 I llm_load_print_meta: rope_finetuned   = unknown
0.00.215.934 I llm_load_print_meta: ssm_d_conv       = 0
0.00.215.934 I llm_load_print_meta: ssm_d_inner      = 0
0.00.215.934 I llm_load_print_meta: ssm_d_state      = 0
0.00.215.934 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.215.934 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.215.935 I llm_load_print_meta: model type       = 2B
0.00.215.936 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.215.936 I llm_load_print_meta: model params     = 2.51 B
0.00.215.937 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.215.937 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.215.938 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.215.938 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.215.939 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.215.939 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.215.939 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.215.939 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.215.940 I llm_load_print_meta: max token length = 93
0.00.215.955 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.274.142 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.274.149 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.274.150 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.274.151 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.274.152 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.274.152 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.279.210 I llama_new_context_with_model: n_ctx      = 8192
0.00.279.216 I llama_new_context_with_model: n_batch    = 2048
0.00.279.217 I llama_new_context_with_model: n_ubatch   = 512
0.00.279.217 I llama_new_context_with_model: flash_attn = 0
0.00.279.219 I llama_new_context_with_model: freq_base  = 10000.0
0.00.279.220 I llama_new_context_with_model: freq_scale = 1
0.00.308.736 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.308.749 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.308.838 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.309.708 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.309.715 I llama_new_context_with_model: graph nodes  = 601
0.00.309.715 I llama_new_context_with_model: graph splits = 1
0.00.309.717 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.391.077 I main: llama threadpool init, n_threads = 4
0.00.391.090 I 
0.00.391.165 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.391.168 I 
0.00.391.204 I sampler seed: 2748694584
0.00.391.213 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.391.215 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.391.216 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 squaRED frog.

## Description

The squaRED frog (Xenopus laevis) is a small to medium-sized frog found in eastern Australia and New

0.02.016.223 I llama_perf_sampler_print:    sampling time =       4.68 ms /    33 runs   (    0.14 ms per token,  7048.27 tokens per second)
0.02.016.226 I llama_perf_context_print:        load time =     389.19 ms
0.02.016.227 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.016.228 I llama_perf_context_print:        eval time =    1606.49 ms /    32 runs   (   50.20 ms per token,    19.92 tokens per second)
0.02.016.229 I llama_perf_context_print:       total time =    1625.15 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3762 (90a2fff0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32022.16 ms
main:    total time = 32022.17 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.573 I build: 3762 (90a2fff0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.774 I main: llama backend init
0.00.001.899 I main: load the model and apply lora adapter, if any
0.00.022.060 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.075 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.083 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.084 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.088 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.091 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.092 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.092 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.093 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.093 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.097 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.097 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.098 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.098 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.098 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.093 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.045 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.885 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.891 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.892 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.893 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.894 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.895 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.896 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.898 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.900 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.903 I llama_model_loader: - type  f32:   37 tensors
0.00.131.905 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.906 I llama_model_loader: - type q6_K:   19 tensors
0.00.196.002 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.196.613 I llm_load_vocab: special tokens cache size = 5
0.00.215.060 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.215.073 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.215.073 I llm_load_print_meta: arch             = gemma
0.00.215.074 I llm_load_print_meta: vocab type       = SPM
0.00.215.074 I llm_load_print_meta: n_vocab          = 256000
0.00.215.075 I llm_load_print_meta: n_merges         = 0
0.00.215.075 I llm_load_print_meta: vocab_only       = 0
0.00.215.075 I llm_load_print_meta: n_ctx_train      = 8192
0.00.215.076 I llm_load_print_meta: n_embd           = 2048
0.00.215.076 I llm_load_print_meta: n_layer          = 18
0.00.215.089 I llm_load_print_meta: n_head           = 8
0.00.215.090 I llm_load_print_meta: n_head_kv        = 1
0.00.215.090 I llm_load_print_meta: n_rot            = 256
0.00.215.091 I llm_load_print_meta: n_swa            = 0
0.00.215.091 I llm_load_print_meta: n_embd_head_k    = 256
0.00.215.091 I llm_load_print_meta: n_embd_head_v    = 256
0.00.215.092 I llm_load_print_meta: n_gqa            = 8
0.00.215.093 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.215.094 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.215.095 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.215.096 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.215.097 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.215.097 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.215.098 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.215.099 I llm_load_print_meta: n_ff             = 16384
0.00.215.099 I llm_load_print_meta: n_expert         = 0
0.00.215.099 I llm_load_print_meta: n_expert_used    = 0
0.00.215.099 I llm_load_print_meta: causal attn      = 1
0.00.215.100 I llm_load_print_meta: pooling type     = 0
0.00.215.100 I llm_load_print_meta: rope type        = 2
0.00.215.100 I llm_load_print_meta: rope scaling     = linear
0.00.215.102 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.215.102 I llm_load_print_meta: freq_scale_train = 1
0.00.215.103 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.215.103 I llm_load_print_meta: rope_finetuned   = unknown
0.00.215.104 I llm_load_print_meta: ssm_d_conv       = 0
0.00.215.104 I llm_load_print_meta: ssm_d_inner      = 0
0.00.215.104 I llm_load_print_meta: ssm_d_state      = 0
0.00.215.104 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.215.105 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.215.105 I llm_load_print_meta: model type       = 2B
0.00.215.106 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.215.106 I llm_load_print_meta: model params     = 2.51 B
0.00.215.107 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.215.107 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.215.108 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.215.108 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.215.108 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.215.109 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.215.110 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.215.110 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.215.110 I llm_load_print_meta: max token length = 93
0.00.215.127 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.273.380 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.279.104 I llama_new_context_with_model: n_ctx      = 8192
0.00.279.110 I llama_new_context_with_model: n_batch    = 2048
0.00.279.110 I llama_new_context_with_model: n_ubatch   = 512
0.00.279.111 I llama_new_context_with_model: flash_attn = 0
0.00.279.113 I llama_new_context_with_model: freq_base  = 10000.0
0.00.279.115 I llama_new_context_with_model: freq_scale = 1
0.00.308.466 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.308.480 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.308.573 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.309.510 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.309.517 I llama_new_context_with_model: graph nodes  = 601
0.00.309.517 I llama_new_context_with_model: graph splits = 1
0.00.309.519 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.389.759 I main: llama threadpool init, n_threads = 4
0.00.389.770 I 
0.00.389.844 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.389.847 I 
0.00.389.885 I sampler seed: 3892805448
0.00.389.895 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.389.897 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.389.897 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 squared in the text, but it is not defined within the text. I need to find the definition of squared.

I apologize for any inconvenience.

0.01.999.601 I llama_perf_sampler_print:    sampling time =       4.80 ms /    33 runs   (    0.15 ms per token,  6870.71 tokens per second)
0.01.999.604 I llama_perf_context_print:        load time =     387.84 ms
0.01.999.605 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.999.606 I llama_perf_context_print:        eval time =    1592.25 ms /    32 runs   (   49.76 ms per token,    20.10 tokens per second)
0.01.999.607 I llama_perf_context_print:       total time =    1609.85 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.927s
user	8m14.945s
sys	0m6.642s
