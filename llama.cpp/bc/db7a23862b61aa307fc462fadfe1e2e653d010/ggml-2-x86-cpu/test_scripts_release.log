+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.533 I build: 4100 (bcdb7a23) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.759 I main: llama backend init
0.00.000.766 I main: load the model and apply lora adapter, if any
0.00.021.762 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.772 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.779 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.784 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.786 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.789 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.792 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.793 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.794 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.794 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.795 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.798 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.799 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.799 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.800 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.800 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.785 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.099 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.861 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.867 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.868 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.868 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.869 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.870 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.870 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.873 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.873 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.874 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.874 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.876 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.879 I llama_model_loader: - type  f32:   37 tensors
0.00.130.879 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.336 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.219 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.753 I llm_load_vocab: special tokens cache size = 5
0.00.265.691 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.709 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.709 I llm_load_print_meta: arch             = gemma
0.00.265.710 I llm_load_print_meta: vocab type       = SPM
0.00.265.710 I llm_load_print_meta: n_vocab          = 256000
0.00.265.711 I llm_load_print_meta: n_merges         = 0
0.00.265.711 I llm_load_print_meta: vocab_only       = 0
0.00.265.711 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.712 I llm_load_print_meta: n_embd           = 2048
0.00.265.712 I llm_load_print_meta: n_layer          = 18
0.00.265.724 I llm_load_print_meta: n_head           = 8
0.00.265.725 I llm_load_print_meta: n_head_kv        = 1
0.00.265.726 I llm_load_print_meta: n_rot            = 256
0.00.265.726 I llm_load_print_meta: n_swa            = 0
0.00.265.726 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.727 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.728 I llm_load_print_meta: n_gqa            = 8
0.00.265.729 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.730 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.730 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.732 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.733 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.733 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.733 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.734 I llm_load_print_meta: n_ff             = 16384
0.00.265.734 I llm_load_print_meta: n_expert         = 0
0.00.265.735 I llm_load_print_meta: n_expert_used    = 0
0.00.265.735 I llm_load_print_meta: causal attn      = 1
0.00.265.735 I llm_load_print_meta: pooling type     = 0
0.00.265.736 I llm_load_print_meta: rope type        = 2
0.00.265.736 I llm_load_print_meta: rope scaling     = linear
0.00.265.737 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.738 I llm_load_print_meta: freq_scale_train = 1
0.00.265.738 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.739 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.739 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.740 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.740 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.740 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.740 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.741 I llm_load_print_meta: model type       = 2B
0.00.265.741 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.742 I llm_load_print_meta: model params     = 2.51 B
0.00.265.743 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.744 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.744 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.745 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.745 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.745 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.746 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.746 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.746 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.747 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.747 I llm_load_print_meta: max token length = 93
0.00.364.283 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.364.290 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.364.291 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.364.292 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.364.293 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.364.293 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.369.670 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.676 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.676 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.677 I llama_new_context_with_model: n_batch       = 2048
0.00.369.677 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.678 I llama_new_context_with_model: flash_attn    = 0
0.00.369.680 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.681 I llama_new_context_with_model: freq_scale    = 1
0.00.369.682 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.527 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.541 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.632 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.983 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.991 I llama_new_context_with_model: graph nodes  = 601
0.00.385.991 I llama_new_context_with_model: graph splits = 1
0.00.385.993 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.208 I main: llama threadpool init, n_threads = 4
0.00.471.224 I 
0.00.471.299 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.471.302 I 
0.00.471.344 I sampler seed: 377805792
0.00.471.354 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.360 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.361 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.361 I 
 increasities, and other sexual practices are private matters, and should not be made public without the consent of all involved parties. [end of text]


0.02.291.024 I llama_perf_sampler_print:    sampling time =       3.83 ms /    27 runs   (    0.14 ms per token,  7042.25 tokens per second)
0.02.291.026 I llama_perf_context_print:        load time =     470.42 ms
0.02.291.027 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.291.029 I llama_perf_context_print:        eval time =    1804.54 ms /    26 runs   (   69.41 ms per token,    14.41 tokens per second)
0.02.291.030 I llama_perf_context_print:       total time =    1819.82 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.567 I build: 4100 (bcdb7a23) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.749 I main: llama backend init
0.00.000.758 I main: load the model and apply lora adapter, if any
0.00.021.114 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.128 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.138 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.139 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.143 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.144 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.145 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.146 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.147 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.148 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.152 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.153 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.153 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.154 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.155 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.445 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.778 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.884 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.889 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.890 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.890 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.891 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.892 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.892 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.895 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.895 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.897 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.898 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.899 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.903 I llama_model_loader: - type  f32:   37 tensors
0.00.131.904 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.500 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.074 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.632 I llm_load_vocab: special tokens cache size = 5
0.00.267.563 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.579 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.580 I llm_load_print_meta: arch             = gemma
0.00.267.580 I llm_load_print_meta: vocab type       = SPM
0.00.267.581 I llm_load_print_meta: n_vocab          = 256000
0.00.267.581 I llm_load_print_meta: n_merges         = 0
0.00.267.582 I llm_load_print_meta: vocab_only       = 0
0.00.267.582 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.582 I llm_load_print_meta: n_embd           = 2048
0.00.267.583 I llm_load_print_meta: n_layer          = 18
0.00.267.593 I llm_load_print_meta: n_head           = 8
0.00.267.594 I llm_load_print_meta: n_head_kv        = 1
0.00.267.595 I llm_load_print_meta: n_rot            = 256
0.00.267.595 I llm_load_print_meta: n_swa            = 0
0.00.267.595 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.596 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.597 I llm_load_print_meta: n_gqa            = 8
0.00.267.598 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.599 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.600 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.601 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.602 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.602 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.602 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.603 I llm_load_print_meta: n_ff             = 16384
0.00.267.603 I llm_load_print_meta: n_expert         = 0
0.00.267.603 I llm_load_print_meta: n_expert_used    = 0
0.00.267.604 I llm_load_print_meta: causal attn      = 1
0.00.267.604 I llm_load_print_meta: pooling type     = 0
0.00.267.604 I llm_load_print_meta: rope type        = 2
0.00.267.605 I llm_load_print_meta: rope scaling     = linear
0.00.267.607 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.607 I llm_load_print_meta: freq_scale_train = 1
0.00.267.608 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.608 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.608 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.608 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.609 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.609 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.609 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.609 I llm_load_print_meta: model type       = 2B
0.00.267.610 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.611 I llm_load_print_meta: model params     = 2.51 B
0.00.267.612 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.612 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.613 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.613 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.613 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.614 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.614 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.614 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.615 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.615 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.615 I llm_load_print_meta: max token length = 93
0.00.361.613 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.366.755 I llama_new_context_with_model: n_seq_max     = 1
0.00.366.762 I llama_new_context_with_model: n_ctx         = 4096
0.00.366.762 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.366.763 I llama_new_context_with_model: n_batch       = 2048
0.00.366.763 I llama_new_context_with_model: n_ubatch      = 512
0.00.366.764 I llama_new_context_with_model: flash_attn    = 0
0.00.366.766 I llama_new_context_with_model: freq_base     = 10000.0
0.00.366.767 I llama_new_context_with_model: freq_scale    = 1
0.00.366.768 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.026 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.382.041 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.382.132 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.383.454 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.383.460 I llama_new_context_with_model: graph nodes  = 601
0.00.383.460 I llama_new_context_with_model: graph splits = 1
0.00.383.462 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.465.183 I main: llama threadpool init, n_threads = 4
0.00.465.198 I 
0.00.465.272 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.465.275 I 
0.00.465.316 I sampler seed: 2559487877
0.00.465.326 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.465.329 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.465.329 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.465.331 I 
 increadibly to explain your answer.

The human mind is a complex tapestry woven from neurons, each carrying unique genetic information and processing power. Neurons form connections

0.02.639.275 I llama_perf_sampler_print:    sampling time =       4.92 ms /    33 runs   (    0.15 ms per token,  6714.14 tokens per second)
0.02.639.277 I llama_perf_context_print:        load time =     464.41 ms
0.02.639.278 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.639.279 I llama_perf_context_print:        eval time =    2154.69 ms /    32 runs   (   67.33 ms per token,    14.85 tokens per second)
0.02.639.280 I llama_perf_context_print:       total time =    2174.10 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.535 I build: 4100 (bcdb7a23) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.731 I main: llama backend init
0.00.000.738 I main: load the model and apply lora adapter, if any
0.00.021.491 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.500 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.508 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.512 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.514 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.520 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.523 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.524 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.524 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.525 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.525 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.529 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.530 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.530 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.531 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.531 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.849 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.253 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.105 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.110 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.111 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.112 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.112 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.113 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.114 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.116 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.116 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.117 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.117 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.119 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.123 I llama_model_loader: - type  f32:   37 tensors
0.00.131.124 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.784 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.610 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.130 I llm_load_vocab: special tokens cache size = 5
0.00.265.247 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.264 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.264 I llm_load_print_meta: arch             = gemma
0.00.265.265 I llm_load_print_meta: vocab type       = SPM
0.00.265.265 I llm_load_print_meta: n_vocab          = 256000
0.00.265.265 I llm_load_print_meta: n_merges         = 0
0.00.265.266 I llm_load_print_meta: vocab_only       = 0
0.00.265.266 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.266 I llm_load_print_meta: n_embd           = 2048
0.00.265.267 I llm_load_print_meta: n_layer          = 18
0.00.265.279 I llm_load_print_meta: n_head           = 8
0.00.265.280 I llm_load_print_meta: n_head_kv        = 1
0.00.265.281 I llm_load_print_meta: n_rot            = 256
0.00.265.281 I llm_load_print_meta: n_swa            = 0
0.00.265.281 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.282 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.283 I llm_load_print_meta: n_gqa            = 8
0.00.265.284 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.285 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.286 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.288 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.288 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.288 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.289 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.290 I llm_load_print_meta: n_ff             = 16384
0.00.265.290 I llm_load_print_meta: n_expert         = 0
0.00.265.291 I llm_load_print_meta: n_expert_used    = 0
0.00.265.291 I llm_load_print_meta: causal attn      = 1
0.00.265.292 I llm_load_print_meta: pooling type     = 0
0.00.265.293 I llm_load_print_meta: rope type        = 2
0.00.265.293 I llm_load_print_meta: rope scaling     = linear
0.00.265.294 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.295 I llm_load_print_meta: freq_scale_train = 1
0.00.265.296 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.296 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.296 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.297 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.298 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.299 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.299 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.303 I llm_load_print_meta: model type       = 2B
0.00.265.303 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.304 I llm_load_print_meta: model params     = 2.51 B
0.00.265.305 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.305 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.306 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.306 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.307 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.307 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.307 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.307 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.308 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.308 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.308 I llm_load_print_meta: max token length = 93
0.00.343.069 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.343.076 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.343.077 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.343.078 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.343.078 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.343.079 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.348.267 I llama_new_context_with_model: n_seq_max     = 1
0.00.348.274 I llama_new_context_with_model: n_ctx         = 4096
0.00.348.274 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.348.274 I llama_new_context_with_model: n_batch       = 2048
0.00.348.275 I llama_new_context_with_model: n_ubatch      = 512
0.00.348.275 I llama_new_context_with_model: flash_attn    = 0
0.00.348.277 I llama_new_context_with_model: freq_base     = 10000.0
0.00.348.278 I llama_new_context_with_model: freq_scale    = 1
0.00.348.279 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.647 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.660 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.749 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.962 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.968 I llama_new_context_with_model: graph nodes  = 601
0.00.363.969 I llama_new_context_with_model: graph splits = 1
0.00.363.985 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.449.121 I main: llama threadpool init, n_threads = 4
0.00.449.134 I 
0.00.449.208 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.449.211 I 
0.00.449.254 I sampler seed: 258937291
0.00.449.265 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.449.276 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.449.279 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.449.280 I 
 seconally. [end of text]


0.00.728.527 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8210.18 tokens per second)
0.00.728.531 I llama_perf_context_print:        load time =     448.37 ms
0.00.728.532 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.728.534 I llama_perf_context_print:        eval time =     275.96 ms /     4 runs   (   68.99 ms per token,    14.50 tokens per second)
0.00.728.535 I llama_perf_context_print:       total time =     279.41 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.519 I build: 4100 (bcdb7a23) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.728 I main: llama backend init
0.00.000.734 I main: load the model and apply lora adapter, if any
0.00.021.022 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.030 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.037 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.047 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.051 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.054 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.055 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.056 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.057 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.057 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.058 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.062 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.063 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.063 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.064 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.065 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.529 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.867 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.749 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.756 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.757 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.758 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.758 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.759 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.760 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.762 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.763 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.764 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.764 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.766 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.770 I llama_model_loader: - type  f32:   37 tensors
0.00.130.771 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.976 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.815 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.398 I llm_load_vocab: special tokens cache size = 5
0.00.281.349 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.368 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.369 I llm_load_print_meta: arch             = gemma
0.00.281.369 I llm_load_print_meta: vocab type       = SPM
0.00.281.370 I llm_load_print_meta: n_vocab          = 256000
0.00.281.371 I llm_load_print_meta: n_merges         = 0
0.00.281.371 I llm_load_print_meta: vocab_only       = 0
0.00.281.371 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.371 I llm_load_print_meta: n_embd           = 2048
0.00.281.372 I llm_load_print_meta: n_layer          = 18
0.00.281.384 I llm_load_print_meta: n_head           = 8
0.00.281.385 I llm_load_print_meta: n_head_kv        = 1
0.00.281.385 I llm_load_print_meta: n_rot            = 256
0.00.281.386 I llm_load_print_meta: n_swa            = 0
0.00.281.386 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.386 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.387 I llm_load_print_meta: n_gqa            = 8
0.00.281.388 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.389 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.390 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.392 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.392 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.392 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.392 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.393 I llm_load_print_meta: n_ff             = 16384
0.00.281.394 I llm_load_print_meta: n_expert         = 0
0.00.281.394 I llm_load_print_meta: n_expert_used    = 0
0.00.281.394 I llm_load_print_meta: causal attn      = 1
0.00.281.395 I llm_load_print_meta: pooling type     = 0
0.00.281.396 I llm_load_print_meta: rope type        = 2
0.00.281.396 I llm_load_print_meta: rope scaling     = linear
0.00.281.397 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.398 I llm_load_print_meta: freq_scale_train = 1
0.00.281.398 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.399 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.399 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.399 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.399 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.400 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.400 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.401 I llm_load_print_meta: model type       = 2B
0.00.281.401 I llm_load_print_meta: model ftype      = Q8_0
0.00.281.402 I llm_load_print_meta: model params     = 2.51 B
0.00.281.403 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.281.404 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.404 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.404 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.405 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.405 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.405 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.406 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.406 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.407 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.407 I llm_load_print_meta: max token length = 93
0.00.352.272 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.352.277 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.357.473 I llama_new_context_with_model: n_seq_max     = 1
0.00.357.480 I llama_new_context_with_model: n_ctx         = 4096
0.00.357.480 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.357.481 I llama_new_context_with_model: n_batch       = 2048
0.00.357.481 I llama_new_context_with_model: n_ubatch      = 512
0.00.357.482 I llama_new_context_with_model: flash_attn    = 0
0.00.357.484 I llama_new_context_with_model: freq_base     = 10000.0
0.00.357.485 I llama_new_context_with_model: freq_scale    = 1
0.00.357.486 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.371.771 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.371.785 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.371.877 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.373.145 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.373.151 I llama_new_context_with_model: graph nodes  = 601
0.00.373.151 I llama_new_context_with_model: graph splits = 1
0.00.373.153 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.489 I main: llama threadpool init, n_threads = 4
0.00.460.503 I 
0.00.460.574 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.460.578 I 
0.00.460.621 I sampler seed: 3867162990
0.00.460.632 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.635 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.636 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.638 I 
 increasities, and other forms of sexual harassment can have profound and long-lasting effects on the victim.

**Discuss the following:**

* **Types of

0.02.887.002 I llama_perf_sampler_print:    sampling time =       4.84 ms /    33 runs   (    0.15 ms per token,  6811.15 tokens per second)
0.02.887.004 I llama_perf_context_print:        load time =     459.74 ms
0.02.887.006 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.887.007 I llama_perf_context_print:        eval time =    2407.22 ms /    32 runs   (   75.23 ms per token,    13.29 tokens per second)
0.02.887.009 I llama_perf_context_print:       total time =    2426.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.938s
user	0m29.654s
sys	0m9.306s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4100 (bcdb7a23)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40318.75 ms
main:    total time = 40318.75 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.530 I build: 4100 (bcdb7a23) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.718 I main: llama backend init
0.00.000.725 I main: load the model and apply lora adapter, if any
0.00.021.017 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.026 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.034 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.038 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.040 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.044 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.047 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.048 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.049 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.049 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.050 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.053 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.053 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.054 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.054 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.055 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.694 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.304 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.201 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.207 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.208 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.209 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.209 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.210 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.211 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.213 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.214 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.215 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.216 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.217 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.222 I llama_model_loader: - type  f32:   37 tensors
0.00.131.223 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.224 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.435 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.444 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.944 I llm_load_vocab: special tokens cache size = 5
0.00.262.619 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.634 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.635 I llm_load_print_meta: arch             = gemma
0.00.262.635 I llm_load_print_meta: vocab type       = SPM
0.00.262.636 I llm_load_print_meta: n_vocab          = 256000
0.00.262.636 I llm_load_print_meta: n_merges         = 0
0.00.262.636 I llm_load_print_meta: vocab_only       = 0
0.00.262.637 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.637 I llm_load_print_meta: n_embd           = 2048
0.00.262.637 I llm_load_print_meta: n_layer          = 18
0.00.262.650 I llm_load_print_meta: n_head           = 8
0.00.262.651 I llm_load_print_meta: n_head_kv        = 1
0.00.262.651 I llm_load_print_meta: n_rot            = 256
0.00.262.651 I llm_load_print_meta: n_swa            = 0
0.00.262.652 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.652 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.653 I llm_load_print_meta: n_gqa            = 8
0.00.262.654 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.655 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.656 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.657 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.657 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.657 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.658 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.659 I llm_load_print_meta: n_ff             = 16384
0.00.262.659 I llm_load_print_meta: n_expert         = 0
0.00.262.659 I llm_load_print_meta: n_expert_used    = 0
0.00.262.660 I llm_load_print_meta: causal attn      = 1
0.00.262.660 I llm_load_print_meta: pooling type     = 0
0.00.262.660 I llm_load_print_meta: rope type        = 2
0.00.262.660 I llm_load_print_meta: rope scaling     = linear
0.00.262.662 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.662 I llm_load_print_meta: freq_scale_train = 1
0.00.262.663 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.663 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.663 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.663 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.663 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.664 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.664 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.664 I llm_load_print_meta: model type       = 2B
0.00.262.665 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.262.666 I llm_load_print_meta: model params     = 2.51 B
0.00.262.666 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.262.667 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.667 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.667 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.668 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.668 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.668 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.669 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.669 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.669 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.669 I llm_load_print_meta: max token length = 93
0.00.323.254 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.323.260 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.323.261 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.323.261 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.323.262 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.323.262 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.328.309 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.314 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.314 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.315 I llama_new_context_with_model: n_batch       = 2048
0.00.328.315 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.316 I llama_new_context_with_model: flash_attn    = 0
0.00.328.318 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.319 I llama_new_context_with_model: freq_scale    = 1
0.00.328.320 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.342.206 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.342.218 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.342.303 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.608 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.343.614 I llama_new_context_with_model: graph nodes  = 601
0.00.343.615 I llama_new_context_with_model: graph splits = 1
0.00.343.617 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.902 I main: llama threadpool init, n_threads = 4
0.00.418.916 I 
0.00.418.990 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.418.993 I 
0.00.419.035 I sampler seed: 4063900995
0.00.419.047 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.049 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.050 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.050 I 
 increamically.

Answer: I apologize, but I am unable to generate responses that are sexually suggestive in nature. [end of text]


0.01.606.760 I llama_perf_sampler_print:    sampling time =       3.81 ms /    25 runs   (    0.15 ms per token,  6559.96 tokens per second)
0.01.606.763 I llama_perf_context_print:        load time =     418.16 ms
0.01.606.765 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.606.766 I llama_perf_context_print:        eval time =    1173.70 ms /    24 runs   (   48.90 ms per token,    20.45 tokens per second)
0.01.606.767 I llama_perf_context_print:       total time =    1187.87 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4100 (bcdb7a23)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40148.12 ms
main:    total time = 40148.12 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.525 I build: 4100 (bcdb7a23) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.721 I main: llama backend init
0.00.000.727 I main: load the model and apply lora adapter, if any
0.00.021.119 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.135 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.141 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.142 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.146 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.146 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.150 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.151 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.151 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.152 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.155 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.156 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.156 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.156 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.157 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.839 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.665 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.517 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.523 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.524 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.524 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.525 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.526 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.526 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.529 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.529 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.532 I llama_model_loader: - type  f32:   37 tensors
0.00.129.534 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.534 I llama_model_loader: - type q6_K:   19 tensors
0.00.199.622 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.785 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.290 I llm_load_vocab: special tokens cache size = 5
0.00.260.099 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.113 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.114 I llm_load_print_meta: arch             = gemma
0.00.260.114 I llm_load_print_meta: vocab type       = SPM
0.00.260.115 I llm_load_print_meta: n_vocab          = 256000
0.00.260.115 I llm_load_print_meta: n_merges         = 0
0.00.260.115 I llm_load_print_meta: vocab_only       = 0
0.00.260.116 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.116 I llm_load_print_meta: n_embd           = 2048
0.00.260.116 I llm_load_print_meta: n_layer          = 18
0.00.260.127 I llm_load_print_meta: n_head           = 8
0.00.260.128 I llm_load_print_meta: n_head_kv        = 1
0.00.260.128 I llm_load_print_meta: n_rot            = 256
0.00.260.128 I llm_load_print_meta: n_swa            = 0
0.00.260.129 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.129 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.130 I llm_load_print_meta: n_gqa            = 8
0.00.260.131 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.132 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.132 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.133 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.134 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.134 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.134 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.135 I llm_load_print_meta: n_ff             = 16384
0.00.260.136 I llm_load_print_meta: n_expert         = 0
0.00.260.136 I llm_load_print_meta: n_expert_used    = 0
0.00.260.136 I llm_load_print_meta: causal attn      = 1
0.00.260.136 I llm_load_print_meta: pooling type     = 0
0.00.260.137 I llm_load_print_meta: rope type        = 2
0.00.260.137 I llm_load_print_meta: rope scaling     = linear
0.00.260.139 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.139 I llm_load_print_meta: freq_scale_train = 1
0.00.260.140 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.140 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.140 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.140 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.141 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.141 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.141 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.141 I llm_load_print_meta: model type       = 2B
0.00.260.142 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.260.143 I llm_load_print_meta: model params     = 2.51 B
0.00.260.144 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.260.144 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.145 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.145 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.145 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.146 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.146 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.146 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.147 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.148 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.148 I llm_load_print_meta: max token length = 93
0.00.317.935 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.323.010 I llama_new_context_with_model: n_seq_max     = 1
0.00.323.016 I llama_new_context_with_model: n_ctx         = 4096
0.00.323.016 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.323.017 I llama_new_context_with_model: n_batch       = 2048
0.00.323.017 I llama_new_context_with_model: n_ubatch      = 512
0.00.323.018 I llama_new_context_with_model: flash_attn    = 0
0.00.323.020 I llama_new_context_with_model: freq_base     = 10000.0
0.00.323.021 I llama_new_context_with_model: freq_scale    = 1
0.00.323.022 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.337.477 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.337.492 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.337.581 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.338.771 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.338.777 I llama_new_context_with_model: graph nodes  = 601
0.00.338.778 I llama_new_context_with_model: graph splits = 1
0.00.338.780 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.412.943 I main: llama threadpool init, n_threads = 4
0.00.412.957 I 
0.00.413.029 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.413.032 I 
0.00.413.078 I sampler seed: 1335466069
0.00.413.089 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.413.092 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.413.093 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.413.093 I 
 seconal!

I am unable to access the specified file. Please verify the file location and try again. [end of text]


0.01.531.122 I llama_perf_sampler_print:    sampling time =       3.63 ms /    24 runs   (    0.15 ms per token,  6607.93 tokens per second)
0.01.531.126 I llama_perf_context_print:        load time =     412.20 ms
0.01.531.127 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.531.128 I llama_perf_context_print:        eval time =    1104.48 ms /    23 runs   (   48.02 ms per token,    20.82 tokens per second)
0.01.531.129 I llama_perf_context_print:       total time =    1118.19 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.379s
user	10m20.053s
sys	0m6.913s
