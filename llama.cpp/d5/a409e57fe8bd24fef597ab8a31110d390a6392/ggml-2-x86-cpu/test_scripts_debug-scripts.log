+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.643 I build: 4031 (d5a409e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.841 I main: llama backend init
0.00.001.101 I main: load the model and apply lora adapter, if any
0.00.023.628 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.640 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.730 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.741 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.743 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.747 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.750 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.751 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.760 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.762 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.763 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.771 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.774 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.775 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.776 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.777 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.331 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.845 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.162 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.170 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.171 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.172 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.173 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.174 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.176 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.179 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.180 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.182 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.182 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.184 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.191 I llama_model_loader: - type  f32:   37 tensors
0.00.265.193 I llama_model_loader: - type q8_0:  127 tensors
0.00.470.510 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.542.176 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.543.143 I llm_load_vocab: special tokens cache size = 5
0.00.636.983 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.637.052 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.637.053 I llm_load_print_meta: arch             = gemma
0.00.637.054 I llm_load_print_meta: vocab type       = SPM
0.00.637.055 I llm_load_print_meta: n_vocab          = 256000
0.00.637.057 I llm_load_print_meta: n_merges         = 0
0.00.637.057 I llm_load_print_meta: vocab_only       = 0
0.00.637.058 I llm_load_print_meta: n_ctx_train      = 8192
0.00.637.058 I llm_load_print_meta: n_embd           = 2048
0.00.637.059 I llm_load_print_meta: n_layer          = 18
0.00.637.122 I llm_load_print_meta: n_head           = 8
0.00.637.129 I llm_load_print_meta: n_head_kv        = 1
0.00.637.130 I llm_load_print_meta: n_rot            = 256
0.00.637.130 I llm_load_print_meta: n_swa            = 0
0.00.637.131 I llm_load_print_meta: n_embd_head_k    = 256
0.00.637.131 I llm_load_print_meta: n_embd_head_v    = 256
0.00.637.136 I llm_load_print_meta: n_gqa            = 8
0.00.637.140 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.637.147 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.637.148 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.637.150 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.637.150 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.637.151 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.637.151 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.637.156 I llm_load_print_meta: n_ff             = 16384
0.00.637.156 I llm_load_print_meta: n_expert         = 0
0.00.637.156 I llm_load_print_meta: n_expert_used    = 0
0.00.637.157 I llm_load_print_meta: causal attn      = 1
0.00.637.157 I llm_load_print_meta: pooling type     = 0
0.00.637.157 I llm_load_print_meta: rope type        = 2
0.00.637.158 I llm_load_print_meta: rope scaling     = linear
0.00.637.160 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.637.160 I llm_load_print_meta: freq_scale_train = 1
0.00.637.161 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.637.161 I llm_load_print_meta: rope_finetuned   = unknown
0.00.637.161 I llm_load_print_meta: ssm_d_conv       = 0
0.00.637.162 I llm_load_print_meta: ssm_d_inner      = 0
0.00.637.162 I llm_load_print_meta: ssm_d_state      = 0
0.00.637.162 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.637.162 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.637.163 I llm_load_print_meta: model type       = 2B
0.00.637.164 I llm_load_print_meta: model ftype      = Q8_0
0.00.637.165 I llm_load_print_meta: model params     = 2.51 B
0.00.637.175 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.637.176 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.637.176 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.637.177 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.637.178 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.637.178 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.637.179 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.637.180 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.637.187 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.637.189 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.637.190 I llm_load_print_meta: max token length = 93
0.00.739.173 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.739.184 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.739.185 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.739.186 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.739.187 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.739.187 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.745.328 I llama_new_context_with_model: n_seq_max     = 1
0.00.745.336 I llama_new_context_with_model: n_ctx         = 4096
0.00.745.337 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.745.337 I llama_new_context_with_model: n_batch       = 2048
0.00.745.337 I llama_new_context_with_model: n_ubatch      = 512
0.00.745.338 I llama_new_context_with_model: flash_attn    = 0
0.00.745.342 I llama_new_context_with_model: freq_base     = 10000.0
0.00.745.342 I llama_new_context_with_model: freq_scale    = 1
0.00.745.343 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.763.838 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.763.879 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.764.009 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.766.565 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.766.569 I llama_new_context_with_model: graph nodes  = 601
0.00.766.569 I llama_new_context_with_model: graph splits = 1
0.00.766.594 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.373.311 I main: llama threadpool init, n_threads = 4
0.01.373.324 I 
0.01.373.446 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.373.449 I 
0.01.373.675 I sampler seed: 1201572628
0.01.373.688 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.373.695 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.373.698 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.373.698 I 
 seconary tasks to the main task. This allows the main task to progress while the secondary tasks are running in the background.

**Examples of secondary tasks:**

0.14.833.498 I llama_perf_sampler_print:    sampling time =      48.93 ms /    33 runs   (    1.48 ms per token,   674.43 tokens per second)
0.14.833.502 I llama_perf_context_print:        load time =    1372.11 ms
0.14.833.504 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.833.505 I llama_perf_context_print:        eval time =   13369.87 ms /    32 runs   (  417.81 ms per token,     2.39 tokens per second)
0.14.833.506 I llama_perf_context_print:       total time =   13460.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.682 I build: 4031 (d5a409e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.884 I main: llama backend init
0.00.001.147 I main: load the model and apply lora adapter, if any
0.00.024.052 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.158 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.175 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.177 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.182 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.184 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.186 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.188 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.197 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.199 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.207 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.210 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.211 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.212 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.213 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.835 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.322 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.628 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.647 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.648 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.650 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.651 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.652 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.653 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.657 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.658 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.659 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.660 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.265.661 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.669 I llama_model_loader: - type  f32:   37 tensors
0.00.265.673 I llama_model_loader: - type q8_0:  127 tensors
0.00.467.169 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.537.745 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.538.741 I llm_load_vocab: special tokens cache size = 5
0.00.632.073 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.632.148 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.632.149 I llm_load_print_meta: arch             = gemma
0.00.632.150 I llm_load_print_meta: vocab type       = SPM
0.00.632.151 I llm_load_print_meta: n_vocab          = 256000
0.00.632.153 I llm_load_print_meta: n_merges         = 0
0.00.632.154 I llm_load_print_meta: vocab_only       = 0
0.00.632.154 I llm_load_print_meta: n_ctx_train      = 8192
0.00.632.154 I llm_load_print_meta: n_embd           = 2048
0.00.632.155 I llm_load_print_meta: n_layer          = 18
0.00.632.219 I llm_load_print_meta: n_head           = 8
0.00.632.226 I llm_load_print_meta: n_head_kv        = 1
0.00.632.227 I llm_load_print_meta: n_rot            = 256
0.00.632.227 I llm_load_print_meta: n_swa            = 0
0.00.632.229 I llm_load_print_meta: n_embd_head_k    = 256
0.00.632.229 I llm_load_print_meta: n_embd_head_v    = 256
0.00.632.234 I llm_load_print_meta: n_gqa            = 8
0.00.632.238 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.632.243 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.632.244 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.632.246 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.632.247 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.632.247 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.632.248 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.632.254 I llm_load_print_meta: n_ff             = 16384
0.00.632.254 I llm_load_print_meta: n_expert         = 0
0.00.632.254 I llm_load_print_meta: n_expert_used    = 0
0.00.632.255 I llm_load_print_meta: causal attn      = 1
0.00.632.256 I llm_load_print_meta: pooling type     = 0
0.00.632.256 I llm_load_print_meta: rope type        = 2
0.00.632.257 I llm_load_print_meta: rope scaling     = linear
0.00.632.258 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.632.259 I llm_load_print_meta: freq_scale_train = 1
0.00.632.260 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.632.260 I llm_load_print_meta: rope_finetuned   = unknown
0.00.632.260 I llm_load_print_meta: ssm_d_conv       = 0
0.00.632.261 I llm_load_print_meta: ssm_d_inner      = 0
0.00.632.261 I llm_load_print_meta: ssm_d_state      = 0
0.00.632.261 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.632.266 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.632.267 I llm_load_print_meta: model type       = 2B
0.00.632.268 I llm_load_print_meta: model ftype      = Q8_0
0.00.632.292 I llm_load_print_meta: model params     = 2.51 B
0.00.632.302 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.632.305 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.632.306 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.632.306 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.632.307 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.632.307 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.632.308 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.632.309 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.632.314 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.632.324 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.632.325 I llm_load_print_meta: max token length = 93
0.00.731.768 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.738.047 I llama_new_context_with_model: n_seq_max     = 1
0.00.738.054 I llama_new_context_with_model: n_ctx         = 4096
0.00.738.055 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.738.055 I llama_new_context_with_model: n_batch       = 2048
0.00.738.055 I llama_new_context_with_model: n_ubatch      = 512
0.00.738.056 I llama_new_context_with_model: flash_attn    = 0
0.00.738.060 I llama_new_context_with_model: freq_base     = 10000.0
0.00.738.060 I llama_new_context_with_model: freq_scale    = 1
0.00.738.061 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.756.680 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.756.723 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.756.853 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.759.388 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.759.392 I llama_new_context_with_model: graph nodes  = 601
0.00.759.393 I llama_new_context_with_model: graph splits = 1
0.00.759.417 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.366.997 I main: llama threadpool init, n_threads = 4
0.01.367.011 I 
0.01.367.118 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.367.122 I 
0.01.367.353 I sampler seed: 3488736847
0.01.367.365 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.367.375 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.367.376 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.367.376 I 
 increasities. [end of text]


0.03.066.559 I llama_perf_sampler_print:    sampling time =       6.23 ms /     5 runs   (    1.25 ms per token,   802.18 tokens per second)
0.03.066.563 I llama_perf_context_print:        load time =    1365.74 ms
0.03.066.564 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.066.566 I llama_perf_context_print:        eval time =    1686.84 ms /     4 runs   (  421.71 ms per token,     2.37 tokens per second)
0.03.066.567 I llama_perf_context_print:       total time =    1699.57 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.670 I build: 4031 (d5a409e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.902 I main: llama backend init
0.00.001.167 I main: load the model and apply lora adapter, if any
0.00.023.878 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.891 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.086 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.100 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.102 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.108 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.113 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.115 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.116 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.118 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.120 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.131 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.136 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.138 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.141 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.143 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.492 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.230 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.589 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.601 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.602 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.603 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.604 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.605 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.607 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.610 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.611 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.613 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.614 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.265.615 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.625 I llama_model_loader: - type  f32:   37 tensors
0.00.265.628 I llama_model_loader: - type q8_0:  127 tensors
0.00.458.286 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.528.697 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.529.884 I llm_load_vocab: special tokens cache size = 5
0.00.624.038 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.624.113 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.624.114 I llm_load_print_meta: arch             = gemma
0.00.624.115 I llm_load_print_meta: vocab type       = SPM
0.00.624.116 I llm_load_print_meta: n_vocab          = 256000
0.00.624.118 I llm_load_print_meta: n_merges         = 0
0.00.624.119 I llm_load_print_meta: vocab_only       = 0
0.00.624.119 I llm_load_print_meta: n_ctx_train      = 8192
0.00.624.119 I llm_load_print_meta: n_embd           = 2048
0.00.624.120 I llm_load_print_meta: n_layer          = 18
0.00.624.182 I llm_load_print_meta: n_head           = 8
0.00.624.191 I llm_load_print_meta: n_head_kv        = 1
0.00.624.191 I llm_load_print_meta: n_rot            = 256
0.00.624.192 I llm_load_print_meta: n_swa            = 0
0.00.624.192 I llm_load_print_meta: n_embd_head_k    = 256
0.00.624.192 I llm_load_print_meta: n_embd_head_v    = 256
0.00.624.197 I llm_load_print_meta: n_gqa            = 8
0.00.624.201 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.624.206 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.624.208 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.624.209 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.624.209 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.624.209 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.624.210 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.624.214 I llm_load_print_meta: n_ff             = 16384
0.00.624.215 I llm_load_print_meta: n_expert         = 0
0.00.624.215 I llm_load_print_meta: n_expert_used    = 0
0.00.624.216 I llm_load_print_meta: causal attn      = 1
0.00.624.216 I llm_load_print_meta: pooling type     = 0
0.00.624.216 I llm_load_print_meta: rope type        = 2
0.00.624.217 I llm_load_print_meta: rope scaling     = linear
0.00.624.218 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.624.218 I llm_load_print_meta: freq_scale_train = 1
0.00.624.219 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.624.219 I llm_load_print_meta: rope_finetuned   = unknown
0.00.624.219 I llm_load_print_meta: ssm_d_conv       = 0
0.00.624.220 I llm_load_print_meta: ssm_d_inner      = 0
0.00.624.220 I llm_load_print_meta: ssm_d_state      = 0
0.00.624.220 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.624.220 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.624.221 I llm_load_print_meta: model type       = 2B
0.00.624.222 I llm_load_print_meta: model ftype      = Q8_0
0.00.624.222 I llm_load_print_meta: model params     = 2.51 B
0.00.624.232 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.624.232 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.624.232 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.624.233 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.624.234 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.624.234 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.624.234 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.624.235 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.624.243 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.624.245 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.624.245 I llm_load_print_meta: max token length = 93
0.00.718.762 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.718.774 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.718.775 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.718.776 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.718.777 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.718.777 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.724.915 I llama_new_context_with_model: n_seq_max     = 1
0.00.724.923 I llama_new_context_with_model: n_ctx         = 4096
0.00.724.923 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.724.924 I llama_new_context_with_model: n_batch       = 2048
0.00.724.924 I llama_new_context_with_model: n_ubatch      = 512
0.00.724.925 I llama_new_context_with_model: flash_attn    = 0
0.00.724.929 I llama_new_context_with_model: freq_base     = 10000.0
0.00.724.929 I llama_new_context_with_model: freq_scale    = 1
0.00.724.930 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.742.720 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.742.764 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.742.898 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.745.526 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.745.531 I llama_new_context_with_model: graph nodes  = 601
0.00.745.531 I llama_new_context_with_model: graph splits = 1
0.00.745.556 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.354.983 I main: llama threadpool init, n_threads = 4
0.01.354.997 I 
0.01.355.121 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.355.126 I 
0.01.355.368 I sampler seed: 427508213
0.01.355.381 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.355.390 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.355.391 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.355.392 I 
 increamically, unable to contain its joyous exuberance. [end of text]


0.06.471.749 I llama_perf_sampler_print:    sampling time =      18.48 ms /    13 runs   (    1.42 ms per token,   703.35 tokens per second)
0.06.471.752 I llama_perf_context_print:        load time =    1353.71 ms
0.06.471.754 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.471.768 I llama_perf_context_print:        eval time =    5081.62 ms /    12 runs   (  423.47 ms per token,     2.36 tokens per second)
0.06.471.769 I llama_perf_context_print:       total time =    5116.78 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.701 I build: 4031 (d5a409e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.912 I main: llama backend init
0.00.001.184 I main: load the model and apply lora adapter, if any
0.00.023.874 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.889 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.002 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.016 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.022 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.029 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.032 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.037 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.040 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.042 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.044 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.054 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.068 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.072 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.073 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.074 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.184.065 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.283.832 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.302.205 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.302.218 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.302.220 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.302.221 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.302.222 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.302.223 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.302.224 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.302.229 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.302.230 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.302.231 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.302.232 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.302.233 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.302.242 I llama_model_loader: - type  f32:   37 tensors
0.00.302.244 I llama_model_loader: - type q8_0:  127 tensors
0.00.481.139 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.553.215 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.554.271 I llm_load_vocab: special tokens cache size = 5
0.00.647.652 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.647.729 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.647.734 I llm_load_print_meta: arch             = gemma
0.00.647.735 I llm_load_print_meta: vocab type       = SPM
0.00.647.736 I llm_load_print_meta: n_vocab          = 256000
0.00.647.739 I llm_load_print_meta: n_merges         = 0
0.00.647.740 I llm_load_print_meta: vocab_only       = 0
0.00.647.741 I llm_load_print_meta: n_ctx_train      = 8192
0.00.647.741 I llm_load_print_meta: n_embd           = 2048
0.00.647.742 I llm_load_print_meta: n_layer          = 18
0.00.647.812 I llm_load_print_meta: n_head           = 8
0.00.647.822 I llm_load_print_meta: n_head_kv        = 1
0.00.647.822 I llm_load_print_meta: n_rot            = 256
0.00.647.823 I llm_load_print_meta: n_swa            = 0
0.00.647.823 I llm_load_print_meta: n_embd_head_k    = 256
0.00.647.824 I llm_load_print_meta: n_embd_head_v    = 256
0.00.647.829 I llm_load_print_meta: n_gqa            = 8
0.00.647.835 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.647.842 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.647.844 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.647.846 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.647.847 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.647.848 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.647.849 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.647.856 I llm_load_print_meta: n_ff             = 16384
0.00.647.858 I llm_load_print_meta: n_expert         = 0
0.00.647.858 I llm_load_print_meta: n_expert_used    = 0
0.00.647.859 I llm_load_print_meta: causal attn      = 1
0.00.647.860 I llm_load_print_meta: pooling type     = 0
0.00.647.860 I llm_load_print_meta: rope type        = 2
0.00.647.861 I llm_load_print_meta: rope scaling     = linear
0.00.647.863 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.647.864 I llm_load_print_meta: freq_scale_train = 1
0.00.647.865 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.647.865 I llm_load_print_meta: rope_finetuned   = unknown
0.00.647.866 I llm_load_print_meta: ssm_d_conv       = 0
0.00.647.867 I llm_load_print_meta: ssm_d_inner      = 0
0.00.647.868 I llm_load_print_meta: ssm_d_state      = 0
0.00.647.869 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.647.869 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.647.871 I llm_load_print_meta: model type       = 2B
0.00.647.872 I llm_load_print_meta: model ftype      = Q8_0
0.00.647.874 I llm_load_print_meta: model params     = 2.51 B
0.00.647.885 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.647.886 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.647.896 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.647.900 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.647.901 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.647.902 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.647.902 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.647.903 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.647.911 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.647.913 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.647.913 I llm_load_print_meta: max token length = 93
0.00.720.415 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.720.428 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.726.731 I llama_new_context_with_model: n_seq_max     = 1
0.00.726.740 I llama_new_context_with_model: n_ctx         = 4096
0.00.726.741 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.726.741 I llama_new_context_with_model: n_batch       = 2048
0.00.726.742 I llama_new_context_with_model: n_ubatch      = 512
0.00.726.742 I llama_new_context_with_model: flash_attn    = 0
0.00.726.746 I llama_new_context_with_model: freq_base     = 10000.0
0.00.726.747 I llama_new_context_with_model: freq_scale    = 1
0.00.726.748 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.743.774 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.743.817 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.743.943 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.746.562 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.746.567 I llama_new_context_with_model: graph nodes  = 601
0.00.746.567 I llama_new_context_with_model: graph splits = 1
0.00.746.593 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.352.091 I main: llama threadpool init, n_threads = 4
0.01.352.104 I 
0.01.352.220 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.352.224 I 
0.01.352.464 I sampler seed: 1163943253
0.01.352.476 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.352.484 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.352.485 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.352.485 I 
 seconally with the following sentence:

"The impact of social media on individuals and society is a complex and multifaceted issue that has been widely debated for several decades

0.14.807.267 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.06 tokens per second)
0.14.807.270 I llama_perf_context_print:        load time =    1350.79 ms
0.14.807.292 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.807.294 I llama_perf_context_print:        eval time =   13365.14 ms /    32 runs   (  417.66 ms per token,     2.39 tokens per second)
0.14.807.296 I llama_perf_context_print:       total time =   13455.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m49.103s
user	2m27.782s
sys	0m9.570s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4031 (d5a409e5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199907.64 ms
main:    total time = 199907.64 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.679 I build: 4031 (d5a409e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.878 I main: llama backend init
0.00.001.135 I main: load the model and apply lora adapter, if any
0.00.023.871 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.884 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.979 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.991 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.993 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.998 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.999 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.001 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.003 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.004 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.005 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.012 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.015 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.016 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.018 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.019 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.432 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.950 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.201 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.212 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.213 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.214 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.215 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.217 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.218 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.222 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.223 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.224 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.225 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.226 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.234 I llama_model_loader: - type  f32:   37 tensors
0.00.265.237 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.238 I llama_model_loader: - type q6_K:   19 tensors
0.00.456.968 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.527.875 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.528.908 I llm_load_vocab: special tokens cache size = 5
0.00.622.736 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.622.806 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.622.810 I llm_load_print_meta: arch             = gemma
0.00.622.811 I llm_load_print_meta: vocab type       = SPM
0.00.622.812 I llm_load_print_meta: n_vocab          = 256000
0.00.622.814 I llm_load_print_meta: n_merges         = 0
0.00.622.815 I llm_load_print_meta: vocab_only       = 0
0.00.622.815 I llm_load_print_meta: n_ctx_train      = 8192
0.00.622.816 I llm_load_print_meta: n_embd           = 2048
0.00.622.816 I llm_load_print_meta: n_layer          = 18
0.00.622.884 I llm_load_print_meta: n_head           = 8
0.00.622.894 I llm_load_print_meta: n_head_kv        = 1
0.00.622.895 I llm_load_print_meta: n_rot            = 256
0.00.622.896 I llm_load_print_meta: n_swa            = 0
0.00.622.896 I llm_load_print_meta: n_embd_head_k    = 256
0.00.622.896 I llm_load_print_meta: n_embd_head_v    = 256
0.00.622.901 I llm_load_print_meta: n_gqa            = 8
0.00.622.906 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.622.911 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.622.912 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.622.913 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.622.913 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.622.914 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.622.914 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.622.919 I llm_load_print_meta: n_ff             = 16384
0.00.622.920 I llm_load_print_meta: n_expert         = 0
0.00.622.921 I llm_load_print_meta: n_expert_used    = 0
0.00.622.921 I llm_load_print_meta: causal attn      = 1
0.00.622.922 I llm_load_print_meta: pooling type     = 0
0.00.622.923 I llm_load_print_meta: rope type        = 2
0.00.622.923 I llm_load_print_meta: rope scaling     = linear
0.00.622.925 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.622.926 I llm_load_print_meta: freq_scale_train = 1
0.00.622.926 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.622.927 I llm_load_print_meta: rope_finetuned   = unknown
0.00.622.927 I llm_load_print_meta: ssm_d_conv       = 0
0.00.622.936 I llm_load_print_meta: ssm_d_inner      = 0
0.00.622.938 I llm_load_print_meta: ssm_d_state      = 0
0.00.622.938 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.622.939 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.622.939 I llm_load_print_meta: model type       = 2B
0.00.622.941 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.622.942 I llm_load_print_meta: model params     = 2.51 B
0.00.622.952 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.622.952 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.622.953 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.622.954 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.622.955 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.622.956 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.622.956 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.622.957 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.622.964 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.622.966 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.622.966 I llm_load_print_meta: max token length = 93
0.00.687.295 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.687.307 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.687.307 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.687.309 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.687.309 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.687.310 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.693.139 I llama_new_context_with_model: n_seq_max     = 1
0.00.693.146 I llama_new_context_with_model: n_ctx         = 4096
0.00.693.146 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.693.147 I llama_new_context_with_model: n_batch       = 2048
0.00.693.147 I llama_new_context_with_model: n_ubatch      = 512
0.00.693.148 I llama_new_context_with_model: flash_attn    = 0
0.00.693.150 I llama_new_context_with_model: freq_base     = 10000.0
0.00.693.151 I llama_new_context_with_model: freq_scale    = 1
0.00.693.152 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.709.776 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.709.818 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.709.944 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.712.551 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.712.555 I llama_new_context_with_model: graph nodes  = 601
0.00.712.555 I llama_new_context_with_model: graph splits = 1
0.00.712.582 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.292.592 I main: llama threadpool init, n_threads = 4
0.01.292.603 I 
0.01.292.715 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.292.718 I 
0.01.292.955 I sampler seed: 1189139834
0.01.292.969 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.292.976 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.292.980 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.292.980 I 
 seconally, in order to avoid monotony.

Answer: The correct answer is "alternatively".

Alternately means doing or saying one thing different each time

0.12.223.246 I llama_perf_sampler_print:    sampling time =      49.11 ms /    33 runs   (    1.49 ms per token,   671.95 tokens per second)
0.12.223.249 I llama_perf_context_print:        load time =    1291.36 ms
0.12.223.250 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.223.252 I llama_perf_context_print:        eval time =   10840.49 ms /    32 runs   (  338.77 ms per token,     2.95 tokens per second)
0.12.223.276 I llama_perf_context_print:       total time =   10930.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4031 (d5a409e5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199403.78 ms
main:    total time = 199403.78 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.647 I build: 4031 (d5a409e5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.860 I main: llama backend init
0.00.001.124 I main: load the model and apply lora adapter, if any
0.00.024.180 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.292 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.308 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.309 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.314 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.318 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.319 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.320 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.321 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.322 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.330 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.332 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.333 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.334 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.335 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.556 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.990 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.271 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.283 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.285 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.286 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.287 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.289 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.290 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.294 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.295 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.305 I llama_model_loader: - type  f32:   37 tensors
0.00.265.308 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.309 I llama_model_loader: - type q6_K:   19 tensors
0.00.478.302 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.552.865 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.554.097 I llm_load_vocab: special tokens cache size = 5
0.00.647.696 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.647.767 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.647.768 I llm_load_print_meta: arch             = gemma
0.00.647.769 I llm_load_print_meta: vocab type       = SPM
0.00.647.770 I llm_load_print_meta: n_vocab          = 256000
0.00.647.772 I llm_load_print_meta: n_merges         = 0
0.00.647.772 I llm_load_print_meta: vocab_only       = 0
0.00.647.773 I llm_load_print_meta: n_ctx_train      = 8192
0.00.647.773 I llm_load_print_meta: n_embd           = 2048
0.00.647.773 I llm_load_print_meta: n_layer          = 18
0.00.647.839 I llm_load_print_meta: n_head           = 8
0.00.647.846 I llm_load_print_meta: n_head_kv        = 1
0.00.647.847 I llm_load_print_meta: n_rot            = 256
0.00.647.847 I llm_load_print_meta: n_swa            = 0
0.00.647.847 I llm_load_print_meta: n_embd_head_k    = 256
0.00.647.848 I llm_load_print_meta: n_embd_head_v    = 256
0.00.647.852 I llm_load_print_meta: n_gqa            = 8
0.00.647.857 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.647.862 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.647.863 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.647.864 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.647.865 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.647.865 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.647.865 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.647.870 I llm_load_print_meta: n_ff             = 16384
0.00.647.871 I llm_load_print_meta: n_expert         = 0
0.00.647.871 I llm_load_print_meta: n_expert_used    = 0
0.00.647.871 I llm_load_print_meta: causal attn      = 1
0.00.647.872 I llm_load_print_meta: pooling type     = 0
0.00.647.872 I llm_load_print_meta: rope type        = 2
0.00.647.872 I llm_load_print_meta: rope scaling     = linear
0.00.647.874 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.647.874 I llm_load_print_meta: freq_scale_train = 1
0.00.647.875 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.647.875 I llm_load_print_meta: rope_finetuned   = unknown
0.00.647.875 I llm_load_print_meta: ssm_d_conv       = 0
0.00.647.876 I llm_load_print_meta: ssm_d_inner      = 0
0.00.647.876 I llm_load_print_meta: ssm_d_state      = 0
0.00.647.876 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.647.877 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.647.877 I llm_load_print_meta: model type       = 2B
0.00.647.879 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.647.879 I llm_load_print_meta: model params     = 2.51 B
0.00.647.889 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.647.890 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.647.890 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.647.891 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.647.891 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.647.892 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.647.892 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.647.892 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.647.898 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.647.900 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.647.901 I llm_load_print_meta: max token length = 93
0.00.708.154 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.714.025 I llama_new_context_with_model: n_seq_max     = 1
0.00.714.034 I llama_new_context_with_model: n_ctx         = 4096
0.00.714.034 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.714.035 I llama_new_context_with_model: n_batch       = 2048
0.00.714.035 I llama_new_context_with_model: n_ubatch      = 512
0.00.714.036 I llama_new_context_with_model: flash_attn    = 0
0.00.714.039 I llama_new_context_with_model: freq_base     = 10000.0
0.00.714.040 I llama_new_context_with_model: freq_scale    = 1
0.00.714.041 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.731.281 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.731.327 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.731.448 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.734.047 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.734.051 I llama_new_context_with_model: graph nodes  = 601
0.00.734.051 I llama_new_context_with_model: graph splits = 1
0.00.734.076 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.307.190 I main: llama threadpool init, n_threads = 4
0.01.307.204 I 
0.01.307.318 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.307.322 I 
0.01.307.555 I sampler seed: 977776801
0.01.307.568 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.307.577 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.307.580 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.307.580 I 
 seconde!

I'm ready to embark on a journey of exploration and discovery. What adventure awaits me?

I yearn for experiences that challenge me,

0.12.222.866 I llama_perf_sampler_print:    sampling time =      49.26 ms /    33 runs   (    1.49 ms per token,   669.90 tokens per second)
0.12.222.870 I llama_perf_context_print:        load time =    1305.97 ms
0.12.222.871 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.222.872 I llama_perf_context_print:        eval time =   10825.81 ms /    32 runs   (  338.31 ms per token,     2.96 tokens per second)
0.12.222.873 I llama_perf_context_print:       total time =   10915.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.662s
user	50m19.021s
sys	0m6.316s
