+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.718 I build: 3893 (d5ac8cf2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.926 I main: llama backend init
0.00.002.874 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.524 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.743 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.839 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.852 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.853 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.858 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.862 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.863 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.864 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.865 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.866 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.874 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.875 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.877 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.887 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.888 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.415 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.030 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.408 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.416 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.417 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.418 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.419 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.421 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.433 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.439 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.441 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.455 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.457 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.459 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.468 I llama_model_loader: - type  f32:   37 tensors
0.00.270.475 I llama_model_loader: - type q8_0:  127 tensors
0.00.441.675 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.468.956 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.470.029 I llm_load_vocab: special tokens cache size = 5
0.00.564.504 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.564.568 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.564.569 I llm_load_print_meta: arch             = gemma
0.00.564.570 I llm_load_print_meta: vocab type       = SPM
0.00.564.571 I llm_load_print_meta: n_vocab          = 256000
0.00.564.573 I llm_load_print_meta: n_merges         = 0
0.00.564.574 I llm_load_print_meta: vocab_only       = 0
0.00.564.574 I llm_load_print_meta: n_ctx_train      = 8192
0.00.564.575 I llm_load_print_meta: n_embd           = 2048
0.00.564.575 I llm_load_print_meta: n_layer          = 18
0.00.564.640 I llm_load_print_meta: n_head           = 8
0.00.564.647 I llm_load_print_meta: n_head_kv        = 1
0.00.564.648 I llm_load_print_meta: n_rot            = 256
0.00.564.648 I llm_load_print_meta: n_swa            = 0
0.00.564.649 I llm_load_print_meta: n_embd_head_k    = 256
0.00.564.649 I llm_load_print_meta: n_embd_head_v    = 256
0.00.564.654 I llm_load_print_meta: n_gqa            = 8
0.00.564.658 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.564.663 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.564.665 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.564.666 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.564.667 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.564.667 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.564.667 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.564.672 I llm_load_print_meta: n_ff             = 16384
0.00.564.673 I llm_load_print_meta: n_expert         = 0
0.00.564.673 I llm_load_print_meta: n_expert_used    = 0
0.00.564.673 I llm_load_print_meta: causal attn      = 1
0.00.564.674 I llm_load_print_meta: pooling type     = 0
0.00.564.674 I llm_load_print_meta: rope type        = 2
0.00.564.675 I llm_load_print_meta: rope scaling     = linear
0.00.564.701 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.564.702 I llm_load_print_meta: freq_scale_train = 1
0.00.564.703 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.564.703 I llm_load_print_meta: rope_finetuned   = unknown
0.00.564.703 I llm_load_print_meta: ssm_d_conv       = 0
0.00.564.704 I llm_load_print_meta: ssm_d_inner      = 0
0.00.564.704 I llm_load_print_meta: ssm_d_state      = 0
0.00.564.704 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.564.705 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.564.705 I llm_load_print_meta: model type       = 2B
0.00.564.715 I llm_load_print_meta: model ftype      = Q8_0
0.00.564.716 I llm_load_print_meta: model params     = 2.51 B
0.00.564.717 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.564.718 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.564.719 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.564.719 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.564.719 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.564.720 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.564.721 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.564.721 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.564.740 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.564.742 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.564.743 I llm_load_print_meta: max token length = 93
0.00.564.912 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.665.252 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.665.262 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.665.263 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.665.264 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.665.264 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.665.265 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.671.031 I llama_new_context_with_model: n_ctx      = 8192
0.00.671.040 I llama_new_context_with_model: n_batch    = 2048
0.00.671.041 I llama_new_context_with_model: n_ubatch   = 512
0.00.671.042 I llama_new_context_with_model: flash_attn = 0
0.00.671.045 I llama_new_context_with_model: freq_base  = 10000.0
0.00.671.046 I llama_new_context_with_model: freq_scale = 1
0.00.701.137 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.701.178 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.701.296 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.702.711 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.702.718 I llama_new_context_with_model: graph nodes  = 601
0.00.702.718 I llama_new_context_with_model: graph splits = 1
0.00.702.734 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.315.489 I main: llama threadpool init, n_threads = 4
0.01.315.501 I 
0.01.315.611 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.315.611 I 
0.01.315.786 I sampler seed: 3113768906
0.01.315.793 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.315.801 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.315.802 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.315.802 I 
 increabling the volume and pitch of a sound.

**Explanation:**

- **Increasing the volume** increases the amplitude of the sound waves.
- **

0.14.840.214 I llama_perf_sampler_print:    sampling time =      49.13 ms /    33 runs   (    1.49 ms per token,   671.73 tokens per second)
0.14.840.218 I llama_perf_context_print:        load time =    1312.42 ms
0.14.840.219 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.840.221 I llama_perf_context_print:        eval time =   13442.20 ms /    32 runs   (  420.07 ms per token,     2.38 tokens per second)
0.14.840.221 I llama_perf_context_print:       total time =   13524.74 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.708 I build: 3893 (d5ac8cf2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.912 I main: llama backend init
0.00.002.857 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.267 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.368 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.384 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.386 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.391 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.394 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.395 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.396 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.397 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.398 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.406 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.407 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.409 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.410 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.411 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.074 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.254.280 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.641 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.650 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.651 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.652 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.653 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.665 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.668 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.672 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.674 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.676 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.677 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.272.678 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.686 I llama_model_loader: - type  f32:   37 tensors
0.00.272.691 I llama_model_loader: - type q8_0:  127 tensors
0.00.433.772 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.460.167 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.461.194 I llm_load_vocab: special tokens cache size = 5
0.00.555.603 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.555.665 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.555.667 I llm_load_print_meta: arch             = gemma
0.00.555.667 I llm_load_print_meta: vocab type       = SPM
0.00.555.668 I llm_load_print_meta: n_vocab          = 256000
0.00.555.671 I llm_load_print_meta: n_merges         = 0
0.00.555.672 I llm_load_print_meta: vocab_only       = 0
0.00.555.672 I llm_load_print_meta: n_ctx_train      = 8192
0.00.555.672 I llm_load_print_meta: n_embd           = 2048
0.00.555.673 I llm_load_print_meta: n_layer          = 18
0.00.555.737 I llm_load_print_meta: n_head           = 8
0.00.555.743 I llm_load_print_meta: n_head_kv        = 1
0.00.555.744 I llm_load_print_meta: n_rot            = 256
0.00.555.744 I llm_load_print_meta: n_swa            = 0
0.00.555.745 I llm_load_print_meta: n_embd_head_k    = 256
0.00.555.745 I llm_load_print_meta: n_embd_head_v    = 256
0.00.555.750 I llm_load_print_meta: n_gqa            = 8
0.00.555.754 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.555.759 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.555.760 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.555.761 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.555.762 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.555.763 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.555.763 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.555.768 I llm_load_print_meta: n_ff             = 16384
0.00.555.770 I llm_load_print_meta: n_expert         = 0
0.00.555.770 I llm_load_print_meta: n_expert_used    = 0
0.00.555.771 I llm_load_print_meta: causal attn      = 1
0.00.555.771 I llm_load_print_meta: pooling type     = 0
0.00.555.777 I llm_load_print_meta: rope type        = 2
0.00.555.778 I llm_load_print_meta: rope scaling     = linear
0.00.555.779 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.555.780 I llm_load_print_meta: freq_scale_train = 1
0.00.555.780 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.555.780 I llm_load_print_meta: rope_finetuned   = unknown
0.00.555.781 I llm_load_print_meta: ssm_d_conv       = 0
0.00.555.781 I llm_load_print_meta: ssm_d_inner      = 0
0.00.555.785 I llm_load_print_meta: ssm_d_state      = 0
0.00.555.785 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.555.785 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.555.786 I llm_load_print_meta: model type       = 2B
0.00.555.795 I llm_load_print_meta: model ftype      = Q8_0
0.00.555.796 I llm_load_print_meta: model params     = 2.51 B
0.00.555.797 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.555.797 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.555.798 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.555.799 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.555.799 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.555.800 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.555.801 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.555.802 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.555.808 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.555.809 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.555.810 I llm_load_print_meta: max token length = 93
0.00.555.978 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.663.064 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.668.937 I llama_new_context_with_model: n_ctx      = 8192
0.00.668.946 I llama_new_context_with_model: n_batch    = 2048
0.00.668.947 I llama_new_context_with_model: n_ubatch   = 512
0.00.668.948 I llama_new_context_with_model: flash_attn = 0
0.00.668.951 I llama_new_context_with_model: freq_base  = 10000.0
0.00.668.952 I llama_new_context_with_model: freq_scale = 1
0.00.699.831 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.699.877 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.700.000 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.701.410 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.701.416 I llama_new_context_with_model: graph nodes  = 601
0.00.701.417 I llama_new_context_with_model: graph splits = 1
0.00.701.433 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.325.554 I main: llama threadpool init, n_threads = 4
0.01.325.567 I 
0.01.325.674 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.325.677 I 
0.01.325.837 I sampler seed: 117188764
0.01.325.848 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.325.854 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.325.855 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.325.855 I 
 increasities and anxieties, especially in the context of social media.

**Answer the question by addressing the following aspects:**

a) **Discuss the psychological and

0.14.877.902 I llama_perf_sampler_print:    sampling time =      49.32 ms /    33 runs   (    1.49 ms per token,   669.05 tokens per second)
0.14.877.905 I llama_perf_context_print:        load time =    1322.49 ms
0.14.877.907 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.877.931 I llama_perf_context_print:        eval time =   13470.15 ms /    32 runs   (  420.94 ms per token,     2.38 tokens per second)
0.14.877.933 I llama_perf_context_print:       total time =   13552.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.660 I build: 3893 (d5ac8cf2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.002.808 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.966 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.183 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.276 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.287 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.289 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.293 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.294 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.296 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.305 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.309 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.310 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.318 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.320 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.321 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.322 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.323 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.121 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.127 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.472 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.481 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.483 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.484 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.485 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.486 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.487 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.491 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.492 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.493 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.494 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.270.495 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.503 I llama_model_loader: - type  f32:   37 tensors
0.00.270.508 I llama_model_loader: - type q8_0:  127 tensors
0.00.433.069 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.459.019 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.460.093 I llm_load_vocab: special tokens cache size = 5
0.00.554.681 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.554.739 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.554.740 I llm_load_print_meta: arch             = gemma
0.00.554.741 I llm_load_print_meta: vocab type       = SPM
0.00.554.742 I llm_load_print_meta: n_vocab          = 256000
0.00.554.744 I llm_load_print_meta: n_merges         = 0
0.00.554.745 I llm_load_print_meta: vocab_only       = 0
0.00.554.745 I llm_load_print_meta: n_ctx_train      = 8192
0.00.554.746 I llm_load_print_meta: n_embd           = 2048
0.00.554.746 I llm_load_print_meta: n_layer          = 18
0.00.554.810 I llm_load_print_meta: n_head           = 8
0.00.554.834 I llm_load_print_meta: n_head_kv        = 1
0.00.554.835 I llm_load_print_meta: n_rot            = 256
0.00.554.836 I llm_load_print_meta: n_swa            = 0
0.00.554.836 I llm_load_print_meta: n_embd_head_k    = 256
0.00.554.837 I llm_load_print_meta: n_embd_head_v    = 256
0.00.554.843 I llm_load_print_meta: n_gqa            = 8
0.00.554.847 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.554.853 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.554.854 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.554.860 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.554.861 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.554.861 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.554.877 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.554.883 I llm_load_print_meta: n_ff             = 16384
0.00.554.884 I llm_load_print_meta: n_expert         = 0
0.00.554.889 I llm_load_print_meta: n_expert_used    = 0
0.00.554.890 I llm_load_print_meta: causal attn      = 1
0.00.554.891 I llm_load_print_meta: pooling type     = 0
0.00.554.892 I llm_load_print_meta: rope type        = 2
0.00.554.892 I llm_load_print_meta: rope scaling     = linear
0.00.554.894 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.554.895 I llm_load_print_meta: freq_scale_train = 1
0.00.554.896 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.554.896 I llm_load_print_meta: rope_finetuned   = unknown
0.00.554.897 I llm_load_print_meta: ssm_d_conv       = 0
0.00.554.898 I llm_load_print_meta: ssm_d_inner      = 0
0.00.554.898 I llm_load_print_meta: ssm_d_state      = 0
0.00.554.899 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.554.900 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.554.900 I llm_load_print_meta: model type       = 2B
0.00.554.910 I llm_load_print_meta: model ftype      = Q8_0
0.00.554.910 I llm_load_print_meta: model params     = 2.51 B
0.00.554.911 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.554.912 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.554.913 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.554.913 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.554.913 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.554.914 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.554.914 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.554.915 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.554.921 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.554.922 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.554.923 I llm_load_print_meta: max token length = 93
0.00.555.090 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.632.716 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.632.728 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.632.730 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.632.730 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.632.731 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.632.732 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.638.478 I llama_new_context_with_model: n_ctx      = 8192
0.00.638.487 I llama_new_context_with_model: n_batch    = 2048
0.00.638.487 I llama_new_context_with_model: n_ubatch   = 512
0.00.638.488 I llama_new_context_with_model: flash_attn = 0
0.00.638.490 I llama_new_context_with_model: freq_base  = 10000.0
0.00.638.491 I llama_new_context_with_model: freq_scale = 1
0.00.668.748 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.668.794 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.668.912 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.670.261 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.670.267 I llama_new_context_with_model: graph nodes  = 601
0.00.670.268 I llama_new_context_with_model: graph splits = 1
0.00.670.283 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.282.144 I main: llama threadpool init, n_threads = 4
0.01.282.156 I 
0.01.282.263 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.282.267 I 
0.01.282.430 I sampler seed: 3262815915
0.01.282.442 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.282.448 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.282.449 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.282.452 I 
 increasities. [end of text]


0.02.982.932 I llama_perf_sampler_print:    sampling time =       6.26 ms /     5 runs   (    1.25 ms per token,   798.85 tokens per second)
0.02.982.949 I llama_perf_context_print:        load time =    1279.15 ms
0.02.982.951 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.982.952 I llama_perf_context_print:        eval time =    1688.72 ms /     4 runs   (  422.18 ms per token,     2.37 tokens per second)
0.02.982.953 I llama_perf_context_print:       total time =    1700.80 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.646 I build: 3893 (d5ac8cf2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.891 I main: llama backend init
0.00.002.867 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.032 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.232 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.323 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.334 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.335 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.339 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.343 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.344 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.345 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.346 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.347 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.354 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.355 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.356 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.357 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.359 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.789 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.270.552 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.289.135 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.289.143 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.289.144 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.289.145 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.289.147 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.289.148 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.289.149 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.289.153 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.289.154 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.289.155 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.289.156 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.289.157 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.289.166 I llama_model_loader: - type  f32:   37 tensors
0.00.289.170 I llama_model_loader: - type q8_0:  127 tensors
0.00.451.519 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.476.443 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.477.519 I llm_load_vocab: special tokens cache size = 5
0.00.590.376 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.590.440 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.590.442 I llm_load_print_meta: arch             = gemma
0.00.590.442 I llm_load_print_meta: vocab type       = SPM
0.00.590.443 I llm_load_print_meta: n_vocab          = 256000
0.00.590.446 I llm_load_print_meta: n_merges         = 0
0.00.590.446 I llm_load_print_meta: vocab_only       = 0
0.00.590.446 I llm_load_print_meta: n_ctx_train      = 8192
0.00.590.447 I llm_load_print_meta: n_embd           = 2048
0.00.590.447 I llm_load_print_meta: n_layer          = 18
0.00.590.509 I llm_load_print_meta: n_head           = 8
0.00.590.516 I llm_load_print_meta: n_head_kv        = 1
0.00.590.517 I llm_load_print_meta: n_rot            = 256
0.00.590.517 I llm_load_print_meta: n_swa            = 0
0.00.590.518 I llm_load_print_meta: n_embd_head_k    = 256
0.00.590.518 I llm_load_print_meta: n_embd_head_v    = 256
0.00.590.523 I llm_load_print_meta: n_gqa            = 8
0.00.590.527 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.590.532 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.590.533 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.590.561 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.590.562 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.590.563 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.590.563 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.590.570 I llm_load_print_meta: n_ff             = 16384
0.00.590.570 I llm_load_print_meta: n_expert         = 0
0.00.590.571 I llm_load_print_meta: n_expert_used    = 0
0.00.590.571 I llm_load_print_meta: causal attn      = 1
0.00.590.572 I llm_load_print_meta: pooling type     = 0
0.00.590.577 I llm_load_print_meta: rope type        = 2
0.00.590.577 I llm_load_print_meta: rope scaling     = linear
0.00.590.579 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.590.586 I llm_load_print_meta: freq_scale_train = 1
0.00.590.587 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.590.590 I llm_load_print_meta: rope_finetuned   = unknown
0.00.590.591 I llm_load_print_meta: ssm_d_conv       = 0
0.00.590.591 I llm_load_print_meta: ssm_d_inner      = 0
0.00.590.592 I llm_load_print_meta: ssm_d_state      = 0
0.00.590.592 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.590.592 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.590.593 I llm_load_print_meta: model type       = 2B
0.00.590.602 I llm_load_print_meta: model ftype      = Q8_0
0.00.590.603 I llm_load_print_meta: model params     = 2.51 B
0.00.590.604 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.590.604 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.590.605 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.590.606 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.590.606 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.590.607 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.590.608 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.590.608 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.590.614 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.590.616 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.590.616 I llm_load_print_meta: max token length = 93
0.00.590.782 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.661.644 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.661.656 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.667.319 I llama_new_context_with_model: n_ctx      = 8192
0.00.667.327 I llama_new_context_with_model: n_batch    = 2048
0.00.667.327 I llama_new_context_with_model: n_ubatch   = 512
0.00.667.328 I llama_new_context_with_model: flash_attn = 0
0.00.667.330 I llama_new_context_with_model: freq_base  = 10000.0
0.00.667.331 I llama_new_context_with_model: freq_scale = 1
0.00.696.662 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.696.707 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.696.834 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.698.203 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.698.209 I llama_new_context_with_model: graph nodes  = 601
0.00.698.210 I llama_new_context_with_model: graph splits = 1
0.00.698.225 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.312.553 I main: llama threadpool init, n_threads = 4
0.01.312.566 I 
0.01.312.677 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.312.681 I 
0.01.312.867 I sampler seed: 3189737705
0.01.312.877 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.312.884 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.312.885 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.312.885 I 
 increasities in the realm of science fiction, and how they inform our understanding of the nature of reality.

**Science Fiction's Influence on Understanding Reality**

0.14.942.731 I llama_perf_sampler_print:    sampling time =      49.26 ms /    33 runs   (    1.49 ms per token,   669.98 tokens per second)
0.14.942.734 I llama_perf_context_print:        load time =    1309.50 ms
0.14.942.736 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.942.738 I llama_perf_context_print:        eval time =   13547.58 ms /    32 runs   (  423.36 ms per token,     2.36 tokens per second)
0.14.942.740 I llama_perf_context_print:       total time =   13630.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m57.496s
user	3m2.217s
sys	0m9.593s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3893 (d5ac8cf2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199686.23 ms
main:    total time = 199686.23 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.649 I build: 3893 (d5ac8cf2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.002.788 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.662 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.870 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.966 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.978 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.979 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.984 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.988 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.989 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.990 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.991 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.993 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.000 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.001 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.002 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.003 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.004 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.811 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.063 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.412 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.421 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.422 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.423 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.424 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.425 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.426 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.430 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.431 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.433 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.433 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.435 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.444 I llama_model_loader: - type  f32:   37 tensors
0.00.268.448 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.448 I llama_model_loader: - type q6_K:   19 tensors
0.00.436.582 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.462.213 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.463.196 I llm_load_vocab: special tokens cache size = 5
0.00.559.195 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.559.256 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.559.257 I llm_load_print_meta: arch             = gemma
0.00.559.258 I llm_load_print_meta: vocab type       = SPM
0.00.559.259 I llm_load_print_meta: n_vocab          = 256000
0.00.559.262 I llm_load_print_meta: n_merges         = 0
0.00.559.263 I llm_load_print_meta: vocab_only       = 0
0.00.559.263 I llm_load_print_meta: n_ctx_train      = 8192
0.00.559.263 I llm_load_print_meta: n_embd           = 2048
0.00.559.264 I llm_load_print_meta: n_layer          = 18
0.00.559.328 I llm_load_print_meta: n_head           = 8
0.00.559.334 I llm_load_print_meta: n_head_kv        = 1
0.00.559.335 I llm_load_print_meta: n_rot            = 256
0.00.559.335 I llm_load_print_meta: n_swa            = 0
0.00.559.336 I llm_load_print_meta: n_embd_head_k    = 256
0.00.559.336 I llm_load_print_meta: n_embd_head_v    = 256
0.00.559.341 I llm_load_print_meta: n_gqa            = 8
0.00.559.345 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.559.350 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.559.351 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.559.352 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.559.353 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.559.353 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.559.354 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.559.358 I llm_load_print_meta: n_ff             = 16384
0.00.559.359 I llm_load_print_meta: n_expert         = 0
0.00.559.359 I llm_load_print_meta: n_expert_used    = 0
0.00.559.360 I llm_load_print_meta: causal attn      = 1
0.00.559.360 I llm_load_print_meta: pooling type     = 0
0.00.559.360 I llm_load_print_meta: rope type        = 2
0.00.559.362 I llm_load_print_meta: rope scaling     = linear
0.00.559.377 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.559.378 I llm_load_print_meta: freq_scale_train = 1
0.00.559.378 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.559.378 I llm_load_print_meta: rope_finetuned   = unknown
0.00.559.379 I llm_load_print_meta: ssm_d_conv       = 0
0.00.559.379 I llm_load_print_meta: ssm_d_inner      = 0
0.00.559.380 I llm_load_print_meta: ssm_d_state      = 0
0.00.559.380 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.559.380 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.559.381 I llm_load_print_meta: model type       = 2B
0.00.559.391 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.559.392 I llm_load_print_meta: model params     = 2.51 B
0.00.559.393 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.559.394 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.559.394 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.559.395 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.559.409 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.559.410 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.559.410 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.559.411 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.559.417 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.559.418 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.559.419 I llm_load_print_meta: max token length = 93
0.00.559.588 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.618.324 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.618.335 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.618.336 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.618.337 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.618.338 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.618.338 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.623.890 I llama_new_context_with_model: n_ctx      = 8192
0.00.623.898 I llama_new_context_with_model: n_batch    = 2048
0.00.623.899 I llama_new_context_with_model: n_ubatch   = 512
0.00.623.900 I llama_new_context_with_model: flash_attn = 0
0.00.623.902 I llama_new_context_with_model: freq_base  = 10000.0
0.00.623.903 I llama_new_context_with_model: freq_scale = 1
0.00.653.865 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.653.907 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.654.020 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.655.425 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.655.430 I llama_new_context_with_model: graph nodes  = 601
0.00.655.431 I llama_new_context_with_model: graph splits = 1
0.00.655.447 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.233.728 I main: llama threadpool init, n_threads = 4
0.01.233.740 I 
0.01.233.848 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.233.852 I 
0.01.234.014 I sampler seed: 3081173532
0.01.234.025 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.234.032 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.234.033 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.234.034 I 
 encompassing all facets of the question:

**Question:** Describe the key differences between traditional music and contemporary music.

**Characteristics of Traditional Music:**

*

0.12.217.302 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.81 tokens per second)
0.12.217.306 I llama_perf_context_print:        load time =    1230.76 ms
0.12.217.307 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.217.310 I llama_perf_context_print:        eval time =   10901.61 ms /    32 runs   (  340.68 ms per token,     2.94 tokens per second)
0.12.217.311 I llama_perf_context_print:       total time =   10983.58 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3893 (d5ac8cf2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199462.67 ms
main:    total time = 199462.67 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.675 I build: 3893 (d5ac8cf2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.867 I main: llama backend init
0.00.002.810 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.943 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.050 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.067 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.071 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.076 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.077 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.080 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.089 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.091 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.099 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.107 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.111 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.112 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.113 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.114 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.964 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.267.955 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.286.429 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.286.440 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.286.441 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.286.442 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.286.443 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.286.445 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.286.446 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.286.463 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.286.467 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.286.477 I llama_model_loader: - type  f32:   37 tensors
0.00.286.481 I llama_model_loader: - type q4_K:  108 tensors
0.00.286.482 I llama_model_loader: - type q6_K:   19 tensors
0.00.477.402 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.507.653 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.508.701 I llm_load_vocab: special tokens cache size = 5
0.00.618.221 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.618.289 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.618.293 I llm_load_print_meta: arch             = gemma
0.00.618.294 I llm_load_print_meta: vocab type       = SPM
0.00.618.295 I llm_load_print_meta: n_vocab          = 256000
0.00.618.297 I llm_load_print_meta: n_merges         = 0
0.00.618.298 I llm_load_print_meta: vocab_only       = 0
0.00.618.298 I llm_load_print_meta: n_ctx_train      = 8192
0.00.618.299 I llm_load_print_meta: n_embd           = 2048
0.00.618.300 I llm_load_print_meta: n_layer          = 18
0.00.618.365 I llm_load_print_meta: n_head           = 8
0.00.618.375 I llm_load_print_meta: n_head_kv        = 1
0.00.618.376 I llm_load_print_meta: n_rot            = 256
0.00.618.376 I llm_load_print_meta: n_swa            = 0
0.00.618.377 I llm_load_print_meta: n_embd_head_k    = 256
0.00.618.377 I llm_load_print_meta: n_embd_head_v    = 256
0.00.618.403 I llm_load_print_meta: n_gqa            = 8
0.00.618.411 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.618.416 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.618.417 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.618.419 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.618.419 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.618.428 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.618.429 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.618.434 I llm_load_print_meta: n_ff             = 16384
0.00.618.435 I llm_load_print_meta: n_expert         = 0
0.00.618.435 I llm_load_print_meta: n_expert_used    = 0
0.00.618.443 I llm_load_print_meta: causal attn      = 1
0.00.618.443 I llm_load_print_meta: pooling type     = 0
0.00.618.444 I llm_load_print_meta: rope type        = 2
0.00.618.450 I llm_load_print_meta: rope scaling     = linear
0.00.618.453 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.618.453 I llm_load_print_meta: freq_scale_train = 1
0.00.618.454 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.618.454 I llm_load_print_meta: rope_finetuned   = unknown
0.00.618.454 I llm_load_print_meta: ssm_d_conv       = 0
0.00.618.455 I llm_load_print_meta: ssm_d_inner      = 0
0.00.618.456 I llm_load_print_meta: ssm_d_state      = 0
0.00.618.456 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.618.457 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.618.458 I llm_load_print_meta: model type       = 2B
0.00.618.468 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.618.469 I llm_load_print_meta: model params     = 2.51 B
0.00.618.469 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.618.470 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.618.471 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.618.471 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.618.471 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.618.472 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.618.473 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.618.473 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.618.479 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.618.480 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.618.481 I llm_load_print_meta: max token length = 93
0.00.618.647 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.676.329 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.681.968 I llama_new_context_with_model: n_ctx      = 8192
0.00.681.976 I llama_new_context_with_model: n_batch    = 2048
0.00.681.976 I llama_new_context_with_model: n_ubatch   = 512
0.00.681.977 I llama_new_context_with_model: flash_attn = 0
0.00.681.980 I llama_new_context_with_model: freq_base  = 10000.0
0.00.681.980 I llama_new_context_with_model: freq_scale = 1
0.00.712.798 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.712.842 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.712.957 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.714.363 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.714.370 I llama_new_context_with_model: graph nodes  = 601
0.00.714.370 I llama_new_context_with_model: graph splits = 1
0.00.714.385 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.292.689 I main: llama threadpool init, n_threads = 4
0.01.292.702 I 
0.01.292.808 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.292.811 I 
0.01.292.979 I sampler seed: 372220893
0.01.292.989 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.292.997 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.292.998 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.293.000 I 
 encompessing the entire range of an activity while ignoring its specific steps or outcomes? [end of text]


0.07.116.502 I llama_perf_sampler_print:    sampling time =      26.22 ms /    18 runs   (    1.46 ms per token,   686.60 tokens per second)
0.07.116.505 I llama_perf_context_print:        load time =    1289.69 ms
0.07.116.507 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.116.508 I llama_perf_context_print:        eval time =    5778.37 ms /    17 runs   (  339.90 ms per token,     2.94 tokens per second)
0.07.116.509 I llama_perf_context_print:       total time =    5823.82 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m1.402s
user	49m55.932s
sys	0m6.532s
