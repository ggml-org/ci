+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.619 I build: 3769 (d54c21df) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.816 I main: llama backend init
0.00.002.770 I main: load the model and apply lora adapter, if any
0.00.024.580 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.763 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.848 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.860 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.862 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.865 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.866 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.867 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.868 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.869 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.870 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.880 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.884 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.885 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.886 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.886 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.878 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.377 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.403 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.410 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.411 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.412 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.412 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.413 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.414 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.418 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.419 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.420 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.420 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.195.421 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.430 I llama_model_loader: - type  f32:   37 tensors
0.00.195.433 I llama_model_loader: - type q8_0:  127 tensors
0.00.458.700 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.459.784 I llm_load_vocab: special tokens cache size = 5
0.00.516.858 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.516.917 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.516.918 I llm_load_print_meta: arch             = gemma
0.00.516.919 I llm_load_print_meta: vocab type       = SPM
0.00.516.919 I llm_load_print_meta: n_vocab          = 256000
0.00.516.922 I llm_load_print_meta: n_merges         = 0
0.00.516.922 I llm_load_print_meta: vocab_only       = 0
0.00.516.923 I llm_load_print_meta: n_ctx_train      = 8192
0.00.516.923 I llm_load_print_meta: n_embd           = 2048
0.00.516.924 I llm_load_print_meta: n_layer          = 18
0.00.516.956 I llm_load_print_meta: n_head           = 8
0.00.516.963 I llm_load_print_meta: n_head_kv        = 1
0.00.516.963 I llm_load_print_meta: n_rot            = 256
0.00.516.964 I llm_load_print_meta: n_swa            = 0
0.00.516.964 I llm_load_print_meta: n_embd_head_k    = 256
0.00.516.965 I llm_load_print_meta: n_embd_head_v    = 256
0.00.517.011 I llm_load_print_meta: n_gqa            = 8
0.00.517.019 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.517.024 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.517.026 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.517.027 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.517.027 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.517.028 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.517.028 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.517.042 I llm_load_print_meta: n_ff             = 16384
0.00.517.044 I llm_load_print_meta: n_expert         = 0
0.00.517.044 I llm_load_print_meta: n_expert_used    = 0
0.00.517.044 I llm_load_print_meta: causal attn      = 1
0.00.517.045 I llm_load_print_meta: pooling type     = 0
0.00.517.049 I llm_load_print_meta: rope type        = 2
0.00.517.049 I llm_load_print_meta: rope scaling     = linear
0.00.517.051 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.517.052 I llm_load_print_meta: freq_scale_train = 1
0.00.517.052 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.517.052 I llm_load_print_meta: rope_finetuned   = unknown
0.00.517.053 I llm_load_print_meta: ssm_d_conv       = 0
0.00.517.053 I llm_load_print_meta: ssm_d_inner      = 0
0.00.517.053 I llm_load_print_meta: ssm_d_state      = 0
0.00.517.053 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.517.054 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.517.054 I llm_load_print_meta: model type       = 2B
0.00.517.063 I llm_load_print_meta: model ftype      = Q8_0
0.00.517.071 I llm_load_print_meta: model params     = 2.51 B
0.00.517.072 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.517.075 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.517.076 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.517.076 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.517.077 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.517.077 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.517.078 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.517.078 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.517.078 I llm_load_print_meta: max token length = 93
0.00.517.256 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.616.486 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.616.497 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.616.498 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.616.498 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.616.499 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.616.500 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.622.253 I llama_new_context_with_model: n_ctx      = 8192
0.00.622.261 I llama_new_context_with_model: n_batch    = 2048
0.00.622.262 I llama_new_context_with_model: n_ubatch   = 512
0.00.622.262 I llama_new_context_with_model: flash_attn = 0
0.00.622.266 I llama_new_context_with_model: freq_base  = 10000.0
0.00.622.266 I llama_new_context_with_model: freq_scale = 1
0.00.651.698 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.651.742 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.651.852 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.653.254 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.653.260 I llama_new_context_with_model: graph nodes  = 601
0.00.653.260 I llama_new_context_with_model: graph splits = 1
0.00.653.277 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.264.817 I main: llama threadpool init, n_threads = 4
0.01.264.829 I 
0.01.264.922 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.264.926 I 
0.01.265.101 I sampler seed: 2457171450
0.01.265.111 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.265.116 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.265.116 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably. 

I was just thinking about you.

I hope this message finds you well.

I was just thinking about you.

Is there

0.14.680.482 I llama_perf_sampler_print:    sampling time =      48.84 ms /    33 runs   (    1.48 ms per token,   675.73 tokens per second)
0.14.680.485 I llama_perf_context_print:        load time =    1261.97 ms
0.14.680.487 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.680.488 I llama_perf_context_print:        eval time =   13334.83 ms /    32 runs   (  416.71 ms per token,     2.40 tokens per second)
0.14.680.503 I llama_perf_context_print:       total time =   13415.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.656 I build: 3769 (d54c21df) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.932 I main: llama backend init
0.00.003.023 I main: load the model and apply lora adapter, if any
0.00.025.304 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.402 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.417 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.421 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.425 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.427 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.428 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.429 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.431 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.431 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.438 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.440 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.441 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.442 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.442 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.018 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.434 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.764 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.771 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.772 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.773 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.774 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.775 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.775 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.779 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.779 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.780 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.781 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.196.782 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.790 I llama_model_loader: - type  f32:   37 tensors
0.00.196.794 I llama_model_loader: - type q8_0:  127 tensors
0.00.473.927 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.474.926 I llm_load_vocab: special tokens cache size = 5
0.00.531.885 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.531.945 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.531.946 I llm_load_print_meta: arch             = gemma
0.00.531.947 I llm_load_print_meta: vocab type       = SPM
0.00.531.948 I llm_load_print_meta: n_vocab          = 256000
0.00.531.950 I llm_load_print_meta: n_merges         = 0
0.00.531.951 I llm_load_print_meta: vocab_only       = 0
0.00.531.951 I llm_load_print_meta: n_ctx_train      = 8192
0.00.531.952 I llm_load_print_meta: n_embd           = 2048
0.00.531.952 I llm_load_print_meta: n_layer          = 18
0.00.531.985 I llm_load_print_meta: n_head           = 8
0.00.532.016 I llm_load_print_meta: n_head_kv        = 1
0.00.532.018 I llm_load_print_meta: n_rot            = 256
0.00.532.018 I llm_load_print_meta: n_swa            = 0
0.00.532.019 I llm_load_print_meta: n_embd_head_k    = 256
0.00.532.019 I llm_load_print_meta: n_embd_head_v    = 256
0.00.532.025 I llm_load_print_meta: n_gqa            = 8
0.00.532.030 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.532.034 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.532.036 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.532.037 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.532.037 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.532.038 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.532.038 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.532.043 I llm_load_print_meta: n_ff             = 16384
0.00.532.043 I llm_load_print_meta: n_expert         = 0
0.00.532.043 I llm_load_print_meta: n_expert_used    = 0
0.00.532.044 I llm_load_print_meta: causal attn      = 1
0.00.532.045 I llm_load_print_meta: pooling type     = 0
0.00.532.045 I llm_load_print_meta: rope type        = 2
0.00.532.046 I llm_load_print_meta: rope scaling     = linear
0.00.532.047 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.532.048 I llm_load_print_meta: freq_scale_train = 1
0.00.532.049 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.532.049 I llm_load_print_meta: rope_finetuned   = unknown
0.00.532.050 I llm_load_print_meta: ssm_d_conv       = 0
0.00.532.050 I llm_load_print_meta: ssm_d_inner      = 0
0.00.532.051 I llm_load_print_meta: ssm_d_state      = 0
0.00.532.051 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.532.051 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.532.052 I llm_load_print_meta: model type       = 2B
0.00.532.053 I llm_load_print_meta: model ftype      = Q8_0
0.00.532.053 I llm_load_print_meta: model params     = 2.51 B
0.00.532.055 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.532.055 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.532.056 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.532.057 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.532.057 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.532.058 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.532.062 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.532.063 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.532.063 I llm_load_print_meta: max token length = 93
0.00.532.232 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.625.082 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.630.767 I llama_new_context_with_model: n_ctx      = 8192
0.00.630.775 I llama_new_context_with_model: n_batch    = 2048
0.00.630.776 I llama_new_context_with_model: n_ubatch   = 512
0.00.630.776 I llama_new_context_with_model: flash_attn = 0
0.00.630.779 I llama_new_context_with_model: freq_base  = 10000.0
0.00.630.779 I llama_new_context_with_model: freq_scale = 1
0.00.660.177 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.660.222 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.660.334 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.661.748 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.661.755 I llama_new_context_with_model: graph nodes  = 601
0.00.661.755 I llama_new_context_with_model: graph splits = 1
0.00.661.771 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.275.179 I main: llama threadpool init, n_threads = 4
0.01.275.190 I 
0.01.275.291 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.275.295 I 
0.01.275.461 I sampler seed: 1339159535
0.01.275.472 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.275.477 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.275.478 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneupher.

I cannot find any information about this term in my dictionary. Please provide a definition for this term.

[Hint: It is related to

0.14.916.578 I llama_perf_sampler_print:    sampling time =      49.14 ms /    33 runs   (    1.49 ms per token,   671.52 tokens per second)
0.14.916.598 I llama_perf_context_print:        load time =    1272.07 ms
0.14.916.600 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.916.603 I llama_perf_context_print:        eval time =   13559.76 ms /    32 runs   (  423.74 ms per token,     2.36 tokens per second)
0.14.916.604 I llama_perf_context_print:       total time =   13641.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.529 I build: 3769 (d54c21df) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.721 I main: llama backend init
0.00.002.666 I main: load the model and apply lora adapter, if any
0.00.025.713 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.913 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.026.004 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.015 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.016 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.020 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.021 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.022 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.024 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.025 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.026 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.034 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.037 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.038 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.039 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.040 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.898 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.340 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.328 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.336 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.337 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.338 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.339 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.340 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.340 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.344 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.345 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.346 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.346 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.196.347 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.356 I llama_model_loader: - type  f32:   37 tensors
0.00.196.360 I llama_model_loader: - type q8_0:  127 tensors
0.00.484.663 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.485.658 I llm_load_vocab: special tokens cache size = 5
0.00.542.941 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.543.004 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.543.006 I llm_load_print_meta: arch             = gemma
0.00.543.006 I llm_load_print_meta: vocab type       = SPM
0.00.543.007 I llm_load_print_meta: n_vocab          = 256000
0.00.543.010 I llm_load_print_meta: n_merges         = 0
0.00.543.010 I llm_load_print_meta: vocab_only       = 0
0.00.543.011 I llm_load_print_meta: n_ctx_train      = 8192
0.00.543.011 I llm_load_print_meta: n_embd           = 2048
0.00.543.011 I llm_load_print_meta: n_layer          = 18
0.00.543.047 I llm_load_print_meta: n_head           = 8
0.00.543.054 I llm_load_print_meta: n_head_kv        = 1
0.00.543.054 I llm_load_print_meta: n_rot            = 256
0.00.543.055 I llm_load_print_meta: n_swa            = 0
0.00.543.055 I llm_load_print_meta: n_embd_head_k    = 256
0.00.543.055 I llm_load_print_meta: n_embd_head_v    = 256
0.00.543.060 I llm_load_print_meta: n_gqa            = 8
0.00.543.064 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.543.069 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.543.070 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.543.071 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.543.071 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.543.072 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.543.072 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.543.076 I llm_load_print_meta: n_ff             = 16384
0.00.543.077 I llm_load_print_meta: n_expert         = 0
0.00.543.077 I llm_load_print_meta: n_expert_used    = 0
0.00.543.078 I llm_load_print_meta: causal attn      = 1
0.00.543.078 I llm_load_print_meta: pooling type     = 0
0.00.543.078 I llm_load_print_meta: rope type        = 2
0.00.543.079 I llm_load_print_meta: rope scaling     = linear
0.00.543.080 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.543.081 I llm_load_print_meta: freq_scale_train = 1
0.00.543.081 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.543.082 I llm_load_print_meta: rope_finetuned   = unknown
0.00.543.083 I llm_load_print_meta: ssm_d_conv       = 0
0.00.543.083 I llm_load_print_meta: ssm_d_inner      = 0
0.00.543.101 I llm_load_print_meta: ssm_d_state      = 0
0.00.543.102 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.543.102 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.543.103 I llm_load_print_meta: model type       = 2B
0.00.543.104 I llm_load_print_meta: model ftype      = Q8_0
0.00.543.105 I llm_load_print_meta: model params     = 2.51 B
0.00.543.106 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.543.106 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.543.107 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.543.107 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.543.108 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.543.108 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.543.109 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.543.109 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.543.110 I llm_load_print_meta: max token length = 93
0.00.543.290 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.619.121 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.619.132 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.619.133 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.619.134 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.619.135 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.619.135 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.624.565 I llama_new_context_with_model: n_ctx      = 8192
0.00.624.571 I llama_new_context_with_model: n_batch    = 2048
0.00.624.572 I llama_new_context_with_model: n_ubatch   = 512
0.00.624.572 I llama_new_context_with_model: flash_attn = 0
0.00.624.574 I llama_new_context_with_model: freq_base  = 10000.0
0.00.624.575 I llama_new_context_with_model: freq_scale = 1
0.00.654.130 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.654.171 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.654.290 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.655.775 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.655.781 I llama_new_context_with_model: graph nodes  = 601
0.00.655.782 I llama_new_context_with_model: graph splits = 1
0.00.655.797 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.266.382 I main: llama threadpool init, n_threads = 4
0.01.266.394 I 
0.01.266.486 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.266.490 I 
0.01.266.662 I sampler seed: 4293597691
0.01.266.675 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.266.682 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.266.683 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneuvously,
For the future holds untold wonders,
Yet the present whispers secrets true.

What is the poem trying to convey?

**A

0.14.744.546 I llama_perf_sampler_print:    sampling time =      48.94 ms /    33 runs   (    1.48 ms per token,   674.35 tokens per second)
0.14.744.549 I llama_perf_context_print:        load time =    1263.64 ms
0.14.744.563 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.744.565 I llama_perf_context_print:        eval time =   13396.28 ms /    32 runs   (  418.63 ms per token,     2.39 tokens per second)
0.14.744.566 I llama_perf_context_print:       total time =   13478.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.662 I build: 3769 (d54c21df) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.002.803 I main: load the model and apply lora adapter, if any
0.00.024.698 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.894 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.982 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.993 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.995 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.999 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.002 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.003 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.004 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.005 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.006 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.012 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.012 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.013 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.014 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.015 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.437 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.984 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.077 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.086 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.087 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.088 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.088 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.090 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.091 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.094 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.095 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.096 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.097 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.196.098 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.106 I llama_model_loader: - type  f32:   37 tensors
0.00.196.111 I llama_model_loader: - type q8_0:  127 tensors
0.00.458.334 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.459.407 I llm_load_vocab: special tokens cache size = 5
0.00.516.198 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.516.257 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.516.258 I llm_load_print_meta: arch             = gemma
0.00.516.259 I llm_load_print_meta: vocab type       = SPM
0.00.516.259 I llm_load_print_meta: n_vocab          = 256000
0.00.516.262 I llm_load_print_meta: n_merges         = 0
0.00.516.262 I llm_load_print_meta: vocab_only       = 0
0.00.516.262 I llm_load_print_meta: n_ctx_train      = 8192
0.00.516.263 I llm_load_print_meta: n_embd           = 2048
0.00.516.263 I llm_load_print_meta: n_layer          = 18
0.00.516.296 I llm_load_print_meta: n_head           = 8
0.00.516.302 I llm_load_print_meta: n_head_kv        = 1
0.00.516.303 I llm_load_print_meta: n_rot            = 256
0.00.516.303 I llm_load_print_meta: n_swa            = 0
0.00.516.304 I llm_load_print_meta: n_embd_head_k    = 256
0.00.516.304 I llm_load_print_meta: n_embd_head_v    = 256
0.00.516.309 I llm_load_print_meta: n_gqa            = 8
0.00.516.314 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.516.318 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.516.319 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.516.321 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.516.321 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.516.321 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.516.322 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.516.326 I llm_load_print_meta: n_ff             = 16384
0.00.516.326 I llm_load_print_meta: n_expert         = 0
0.00.516.327 I llm_load_print_meta: n_expert_used    = 0
0.00.516.327 I llm_load_print_meta: causal attn      = 1
0.00.516.328 I llm_load_print_meta: pooling type     = 0
0.00.516.329 I llm_load_print_meta: rope type        = 2
0.00.516.329 I llm_load_print_meta: rope scaling     = linear
0.00.516.338 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.516.339 I llm_load_print_meta: freq_scale_train = 1
0.00.516.340 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.516.340 I llm_load_print_meta: rope_finetuned   = unknown
0.00.516.352 I llm_load_print_meta: ssm_d_conv       = 0
0.00.516.353 I llm_load_print_meta: ssm_d_inner      = 0
0.00.516.353 I llm_load_print_meta: ssm_d_state      = 0
0.00.516.361 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.516.362 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.516.363 I llm_load_print_meta: model type       = 2B
0.00.516.364 I llm_load_print_meta: model ftype      = Q8_0
0.00.516.365 I llm_load_print_meta: model params     = 2.51 B
0.00.516.366 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.516.366 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.516.374 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.516.374 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.516.375 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.516.376 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.516.376 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.516.377 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.516.377 I llm_load_print_meta: max token length = 93
0.00.516.543 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.587.368 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.587.380 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.593.046 I llama_new_context_with_model: n_ctx      = 8192
0.00.593.053 I llama_new_context_with_model: n_batch    = 2048
0.00.593.054 I llama_new_context_with_model: n_ubatch   = 512
0.00.593.054 I llama_new_context_with_model: flash_attn = 0
0.00.593.056 I llama_new_context_with_model: freq_base  = 10000.0
0.00.593.057 I llama_new_context_with_model: freq_scale = 1
0.00.624.065 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.624.107 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.624.234 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.625.621 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.625.627 I llama_new_context_with_model: graph nodes  = 601
0.00.625.628 I llama_new_context_with_model: graph splits = 1
0.00.625.644 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.235.642 I main: llama threadpool init, n_threads = 4
0.01.235.653 I 
0.01.235.745 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.235.745 I 
0.01.235.907 I sampler seed: 4052830303
0.01.235.920 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.235.926 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.235.927 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconded parentheses are a syntax error.

```
SELECT * FROM table_name (column_name, column_name, ...)
```

The parentheses

0.14.756.960 I llama_perf_sampler_print:    sampling time =      48.91 ms /    33 runs   (    1.48 ms per token,   674.76 tokens per second)
0.14.756.963 I llama_perf_context_print:        load time =    1232.76 ms
0.14.756.964 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.756.980 I llama_perf_context_print:        eval time =   13439.77 ms /    32 runs   (  419.99 ms per token,     2.38 tokens per second)
0.14.756.982 I llama_perf_context_print:       total time =   13521.33 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m8.584s
user	3m48.458s
sys	0m9.401s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3769 (d54c21df)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198896.48 ms
main:    total time = 198896.48 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.629 I build: 3769 (d54c21df) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.002.792 I main: load the model and apply lora adapter, if any
0.00.024.554 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.761 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.856 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.869 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.871 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.876 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.877 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.878 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.880 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.880 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.881 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.888 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.889 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.890 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.891 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.891 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.456 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.081 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.172 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.181 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.182 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.183 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.183 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.185 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.186 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.189 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.190 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.191 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.192 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.195.193 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.200 I llama_model_loader: - type  f32:   37 tensors
0.00.195.204 I llama_model_loader: - type q4_K:  108 tensors
0.00.195.205 I llama_model_loader: - type q6_K:   19 tensors
0.00.455.611 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.456.621 I llm_load_vocab: special tokens cache size = 5
0.00.513.423 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.513.480 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.513.484 I llm_load_print_meta: arch             = gemma
0.00.513.485 I llm_load_print_meta: vocab type       = SPM
0.00.513.486 I llm_load_print_meta: n_vocab          = 256000
0.00.513.488 I llm_load_print_meta: n_merges         = 0
0.00.513.489 I llm_load_print_meta: vocab_only       = 0
0.00.513.489 I llm_load_print_meta: n_ctx_train      = 8192
0.00.513.490 I llm_load_print_meta: n_embd           = 2048
0.00.513.490 I llm_load_print_meta: n_layer          = 18
0.00.513.523 I llm_load_print_meta: n_head           = 8
0.00.513.532 I llm_load_print_meta: n_head_kv        = 1
0.00.513.533 I llm_load_print_meta: n_rot            = 256
0.00.513.533 I llm_load_print_meta: n_swa            = 0
0.00.513.534 I llm_load_print_meta: n_embd_head_k    = 256
0.00.513.534 I llm_load_print_meta: n_embd_head_v    = 256
0.00.513.539 I llm_load_print_meta: n_gqa            = 8
0.00.513.543 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.513.548 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.513.550 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.513.551 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.513.551 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.513.552 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.513.552 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.513.557 I llm_load_print_meta: n_ff             = 16384
0.00.513.557 I llm_load_print_meta: n_expert         = 0
0.00.513.558 I llm_load_print_meta: n_expert_used    = 0
0.00.513.559 I llm_load_print_meta: causal attn      = 1
0.00.513.559 I llm_load_print_meta: pooling type     = 0
0.00.513.560 I llm_load_print_meta: rope type        = 2
0.00.513.560 I llm_load_print_meta: rope scaling     = linear
0.00.513.562 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.513.563 I llm_load_print_meta: freq_scale_train = 1
0.00.513.563 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.513.564 I llm_load_print_meta: rope_finetuned   = unknown
0.00.513.564 I llm_load_print_meta: ssm_d_conv       = 0
0.00.513.564 I llm_load_print_meta: ssm_d_inner      = 0
0.00.513.565 I llm_load_print_meta: ssm_d_state      = 0
0.00.513.565 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.513.566 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.513.567 I llm_load_print_meta: model type       = 2B
0.00.513.568 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.513.569 I llm_load_print_meta: model params     = 2.51 B
0.00.513.570 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.513.581 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.513.583 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.513.583 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.513.584 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.513.585 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.513.585 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.513.586 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.513.602 I llm_load_print_meta: max token length = 93
0.00.513.776 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.572.058 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.572.068 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.572.069 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.572.070 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.572.071 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.572.071 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.577.657 I llama_new_context_with_model: n_ctx      = 8192
0.00.577.665 I llama_new_context_with_model: n_batch    = 2048
0.00.577.665 I llama_new_context_with_model: n_ubatch   = 512
0.00.577.666 I llama_new_context_with_model: flash_attn = 0
0.00.577.670 I llama_new_context_with_model: freq_base  = 10000.0
0.00.577.671 I llama_new_context_with_model: freq_scale = 1
0.00.608.835 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.608.879 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.609.004 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.610.435 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.610.441 I llama_new_context_with_model: graph nodes  = 601
0.00.610.442 I llama_new_context_with_model: graph splits = 1
0.00.610.528 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.189.792 I main: llama threadpool init, n_threads = 4
0.01.189.804 I 
0.01.189.894 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.189.898 I 
0.01.190.059 I sampler seed: 3481896718
0.01.190.069 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.190.074 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.190.075 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneuvously, as if the situation demanded a hasty, decisive response.

The news had arrived – the devastating fire at the local hospital, claiming precious lives

0.12.139.806 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   671.03 tokens per second)
0.12.139.810 I llama_perf_context_print:        load time =    1186.92 ms
0.12.139.812 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.139.824 I llama_perf_context_print:        eval time =   10868.56 ms /    32 runs   (  339.64 ms per token,     2.94 tokens per second)
0.12.139.825 I llama_perf_context_print:       total time =   10950.02 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3769 (d54c21df)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198845.59 ms
main:    total time = 198845.59 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.643 I build: 3769 (d54c21df) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.850 I main: llama backend init
0.00.002.791 I main: load the model and apply lora adapter, if any
0.00.024.705 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.795 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.808 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.810 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.814 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.817 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.818 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.819 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.820 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.820 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.826 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.827 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.827 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.828 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.830 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.379 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.683 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.835 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.845 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.846 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.847 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.848 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.849 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.850 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.855 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.872 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.884 I llama_model_loader: - type  f32:   37 tensors
0.00.194.888 I llama_model_loader: - type q4_K:  108 tensors
0.00.194.889 I llama_model_loader: - type q6_K:   19 tensors
0.00.479.340 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.480.404 I llm_load_vocab: special tokens cache size = 5
0.00.537.317 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.537.381 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.537.385 I llm_load_print_meta: arch             = gemma
0.00.537.386 I llm_load_print_meta: vocab type       = SPM
0.00.537.386 I llm_load_print_meta: n_vocab          = 256000
0.00.537.389 I llm_load_print_meta: n_merges         = 0
0.00.537.389 I llm_load_print_meta: vocab_only       = 0
0.00.537.390 I llm_load_print_meta: n_ctx_train      = 8192
0.00.537.391 I llm_load_print_meta: n_embd           = 2048
0.00.537.392 I llm_load_print_meta: n_layer          = 18
0.00.537.425 I llm_load_print_meta: n_head           = 8
0.00.537.434 I llm_load_print_meta: n_head_kv        = 1
0.00.537.435 I llm_load_print_meta: n_rot            = 256
0.00.537.436 I llm_load_print_meta: n_swa            = 0
0.00.537.436 I llm_load_print_meta: n_embd_head_k    = 256
0.00.537.437 I llm_load_print_meta: n_embd_head_v    = 256
0.00.537.442 I llm_load_print_meta: n_gqa            = 8
0.00.537.446 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.537.452 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.537.454 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.537.455 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.537.456 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.537.456 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.537.457 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.537.462 I llm_load_print_meta: n_ff             = 16384
0.00.537.462 I llm_load_print_meta: n_expert         = 0
0.00.537.463 I llm_load_print_meta: n_expert_used    = 0
0.00.537.466 I llm_load_print_meta: causal attn      = 1
0.00.537.466 I llm_load_print_meta: pooling type     = 0
0.00.537.466 I llm_load_print_meta: rope type        = 2
0.00.537.467 I llm_load_print_meta: rope scaling     = linear
0.00.537.468 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.537.469 I llm_load_print_meta: freq_scale_train = 1
0.00.537.469 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.537.470 I llm_load_print_meta: rope_finetuned   = unknown
0.00.537.470 I llm_load_print_meta: ssm_d_conv       = 0
0.00.537.470 I llm_load_print_meta: ssm_d_inner      = 0
0.00.537.470 I llm_load_print_meta: ssm_d_state      = 0
0.00.537.471 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.537.471 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.537.472 I llm_load_print_meta: model type       = 2B
0.00.537.473 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.537.473 I llm_load_print_meta: model params     = 2.51 B
0.00.537.474 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.537.475 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.537.475 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.537.475 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.537.476 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.537.477 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.537.477 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.537.478 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.537.479 I llm_load_print_meta: max token length = 93
0.00.537.652 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.594.677 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.600.231 I llama_new_context_with_model: n_ctx      = 8192
0.00.600.238 I llama_new_context_with_model: n_batch    = 2048
0.00.600.238 I llama_new_context_with_model: n_ubatch   = 512
0.00.600.239 I llama_new_context_with_model: flash_attn = 0
0.00.600.241 I llama_new_context_with_model: freq_base  = 10000.0
0.00.600.242 I llama_new_context_with_model: freq_scale = 1
0.00.629.173 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.629.214 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.629.324 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.630.710 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.630.716 I llama_new_context_with_model: graph nodes  = 601
0.00.630.716 I llama_new_context_with_model: graph splits = 1
0.00.630.733 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.209.439 I main: llama threadpool init, n_threads = 4
0.01.209.450 I 
0.01.209.540 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.209.543 I 
0.01.209.706 I sampler seed: 400974830
0.01.209.716 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.209.722 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.209.723 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconded the question and provided the following answer:

"The question contains a logical fallacy known as the fallacy of equivocation. The premise implies that the two

0.12.049.611 I llama_perf_sampler_print:    sampling time =      49.10 ms /    33 runs   (    1.49 ms per token,   672.06 tokens per second)
0.12.049.614 I llama_perf_context_print:        load time =    1206.57 ms
0.12.049.615 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.049.617 I llama_perf_context_print:        eval time =   10758.62 ms /    32 runs   (  336.21 ms per token,     2.97 tokens per second)
0.12.049.618 I llama_perf_context_print:       total time =   10840.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.798s
user	50m6.858s
sys	0m6.272s
