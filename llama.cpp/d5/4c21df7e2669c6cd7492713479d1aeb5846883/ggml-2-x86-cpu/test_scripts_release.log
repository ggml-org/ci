+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.595 I build: 3769 (d54c21df) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.797 I main: llama backend init
0.00.001.889 I main: load the model and apply lora adapter, if any
0.00.022.178 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.225 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.235 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.240 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.241 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.244 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.245 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.246 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.247 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.247 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.248 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.251 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.252 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.253 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.255 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.256 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.297 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.200 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.104 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.111 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.111 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.112 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.112 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.113 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.114 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.116 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.117 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.117 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.118 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.119 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.123 I llama_model_loader: - type  f32:   37 tensors
0.00.132.125 I llama_model_loader: - type q8_0:  127 tensors
0.00.197.636 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.198.361 I llm_load_vocab: special tokens cache size = 5
0.00.219.828 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.219.842 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.219.843 I llm_load_print_meta: arch             = gemma
0.00.219.843 I llm_load_print_meta: vocab type       = SPM
0.00.219.844 I llm_load_print_meta: n_vocab          = 256000
0.00.219.845 I llm_load_print_meta: n_merges         = 0
0.00.219.845 I llm_load_print_meta: vocab_only       = 0
0.00.219.846 I llm_load_print_meta: n_ctx_train      = 8192
0.00.219.846 I llm_load_print_meta: n_embd           = 2048
0.00.219.846 I llm_load_print_meta: n_layer          = 18
0.00.219.860 I llm_load_print_meta: n_head           = 8
0.00.219.861 I llm_load_print_meta: n_head_kv        = 1
0.00.219.861 I llm_load_print_meta: n_rot            = 256
0.00.219.862 I llm_load_print_meta: n_swa            = 0
0.00.219.862 I llm_load_print_meta: n_embd_head_k    = 256
0.00.219.862 I llm_load_print_meta: n_embd_head_v    = 256
0.00.219.863 I llm_load_print_meta: n_gqa            = 8
0.00.219.864 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.219.865 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.219.866 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.219.868 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.219.869 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.219.869 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.219.870 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.219.871 I llm_load_print_meta: n_ff             = 16384
0.00.219.871 I llm_load_print_meta: n_expert         = 0
0.00.219.871 I llm_load_print_meta: n_expert_used    = 0
0.00.219.872 I llm_load_print_meta: causal attn      = 1
0.00.219.872 I llm_load_print_meta: pooling type     = 0
0.00.219.873 I llm_load_print_meta: rope type        = 2
0.00.219.873 I llm_load_print_meta: rope scaling     = linear
0.00.219.874 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.219.875 I llm_load_print_meta: freq_scale_train = 1
0.00.219.875 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.219.876 I llm_load_print_meta: rope_finetuned   = unknown
0.00.219.876 I llm_load_print_meta: ssm_d_conv       = 0
0.00.219.877 I llm_load_print_meta: ssm_d_inner      = 0
0.00.219.877 I llm_load_print_meta: ssm_d_state      = 0
0.00.219.878 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.219.878 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.219.879 I llm_load_print_meta: model type       = 2B
0.00.219.879 I llm_load_print_meta: model ftype      = Q8_0
0.00.219.880 I llm_load_print_meta: model params     = 2.51 B
0.00.219.881 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.219.881 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.219.882 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.219.882 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.219.883 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.219.883 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.219.884 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.219.885 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.219.885 I llm_load_print_meta: max token length = 93
0.00.219.903 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.316.654 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.316.664 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.316.665 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.316.665 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.316.666 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.316.667 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.321.758 I llama_new_context_with_model: n_ctx      = 8192
0.00.321.765 I llama_new_context_with_model: n_batch    = 2048
0.00.321.765 I llama_new_context_with_model: n_ubatch   = 512
0.00.321.766 I llama_new_context_with_model: flash_attn = 0
0.00.321.769 I llama_new_context_with_model: freq_base  = 10000.0
0.00.321.770 I llama_new_context_with_model: freq_scale = 1
0.00.351.425 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.351.439 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.351.528 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.381 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.352.389 I llama_new_context_with_model: graph nodes  = 601
0.00.352.389 I llama_new_context_with_model: graph splits = 1
0.00.352.391 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.000 I main: llama threadpool init, n_threads = 4
0.00.445.012 I 
0.00.445.083 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.445.086 I 
0.00.445.124 I sampler seed: 20464054
0.00.445.132 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.135 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.445.135 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasels. 

**Assistant**

I'm sorry, but I am unable to provide responses that contain sexually suggestive or inappropriate content. [end of text]


0.02.533.385 I llama_perf_sampler_print:    sampling time =       4.78 ms /    31 runs   (    0.15 ms per token,  6481.29 tokens per second)
0.02.533.388 I llama_perf_context_print:        load time =     443.09 ms
0.02.533.389 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.533.391 I llama_perf_context_print:        eval time =    2071.34 ms /    30 runs   (   69.04 ms per token,    14.48 tokens per second)
0.02.533.392 I llama_perf_context_print:       total time =    2088.39 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.532 I build: 3769 (d54c21df) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.725 I main: llama backend init
0.00.001.809 I main: load the model and apply lora adapter, if any
0.00.021.392 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.403 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.410 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.411 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.415 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.415 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.416 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.417 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.417 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.418 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.423 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.423 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.424 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.424 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.425 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.622 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.345 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.148 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.154 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.155 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.155 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.156 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.157 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.157 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.160 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.160 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.161 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.162 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.163 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.166 I llama_model_loader: - type  f32:   37 tensors
0.00.131.169 I llama_model_loader: - type q8_0:  127 tensors
0.00.194.942 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.195.508 I llm_load_vocab: special tokens cache size = 5
0.00.214.122 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.214.133 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.214.134 I llm_load_print_meta: arch             = gemma
0.00.214.135 I llm_load_print_meta: vocab type       = SPM
0.00.214.135 I llm_load_print_meta: n_vocab          = 256000
0.00.214.135 I llm_load_print_meta: n_merges         = 0
0.00.214.136 I llm_load_print_meta: vocab_only       = 0
0.00.214.136 I llm_load_print_meta: n_ctx_train      = 8192
0.00.214.136 I llm_load_print_meta: n_embd           = 2048
0.00.214.137 I llm_load_print_meta: n_layer          = 18
0.00.214.150 I llm_load_print_meta: n_head           = 8
0.00.214.150 I llm_load_print_meta: n_head_kv        = 1
0.00.214.151 I llm_load_print_meta: n_rot            = 256
0.00.214.151 I llm_load_print_meta: n_swa            = 0
0.00.214.151 I llm_load_print_meta: n_embd_head_k    = 256
0.00.214.152 I llm_load_print_meta: n_embd_head_v    = 256
0.00.214.153 I llm_load_print_meta: n_gqa            = 8
0.00.214.154 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.214.154 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.214.155 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.214.156 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.214.157 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.214.157 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.214.157 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.214.158 I llm_load_print_meta: n_ff             = 16384
0.00.214.158 I llm_load_print_meta: n_expert         = 0
0.00.214.159 I llm_load_print_meta: n_expert_used    = 0
0.00.214.159 I llm_load_print_meta: causal attn      = 1
0.00.214.159 I llm_load_print_meta: pooling type     = 0
0.00.214.159 I llm_load_print_meta: rope type        = 2
0.00.214.160 I llm_load_print_meta: rope scaling     = linear
0.00.214.161 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.214.162 I llm_load_print_meta: freq_scale_train = 1
0.00.214.162 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.214.162 I llm_load_print_meta: rope_finetuned   = unknown
0.00.214.163 I llm_load_print_meta: ssm_d_conv       = 0
0.00.214.163 I llm_load_print_meta: ssm_d_inner      = 0
0.00.214.163 I llm_load_print_meta: ssm_d_state      = 0
0.00.214.163 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.214.163 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.214.164 I llm_load_print_meta: model type       = 2B
0.00.214.165 I llm_load_print_meta: model ftype      = Q8_0
0.00.214.165 I llm_load_print_meta: model params     = 2.51 B
0.00.214.167 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.214.167 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.214.167 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.214.168 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.214.168 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.214.168 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.214.169 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.214.169 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.214.169 I llm_load_print_meta: max token length = 93
0.00.214.184 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.309.725 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.314.583 I llama_new_context_with_model: n_ctx      = 8192
0.00.314.589 I llama_new_context_with_model: n_batch    = 2048
0.00.314.590 I llama_new_context_with_model: n_ubatch   = 512
0.00.314.590 I llama_new_context_with_model: flash_attn = 0
0.00.314.592 I llama_new_context_with_model: freq_base  = 10000.0
0.00.314.593 I llama_new_context_with_model: freq_scale = 1
0.00.343.841 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.343.856 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.343.959 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.805 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.344.812 I llama_new_context_with_model: graph nodes  = 601
0.00.344.813 I llama_new_context_with_model: graph splits = 1
0.00.344.814 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.431.645 I main: llama threadpool init, n_threads = 4
0.00.431.657 I 
0.00.431.727 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.431.731 I 
0.00.431.759 I sampler seed: 2749269276
0.00.431.767 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.431.770 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.431.770 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities, the main antagonist of the story.

The main antagonist of the story is a powerful, enigmatic being who embodies chaos, destruction, and nihilism

0.02.589.077 I llama_perf_sampler_print:    sampling time =       5.24 ms /    33 runs   (    0.16 ms per token,  6292.91 tokens per second)
0.02.589.080 I llama_perf_context_print:        load time =     429.82 ms
0.02.589.081 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.589.084 I llama_perf_context_print:        eval time =    2139.08 ms /    32 runs   (   66.85 ms per token,    14.96 tokens per second)
0.02.589.084 I llama_perf_context_print:       total time =    2157.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.612 I build: 3769 (d54c21df) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.808 I main: llama backend init
0.00.001.899 I main: load the model and apply lora adapter, if any
0.00.022.025 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.075 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.082 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.087 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.088 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.091 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.092 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.093 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.093 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.094 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.094 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.098 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.099 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.099 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.100 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.100 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.381 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.013 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.135.456 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.135.462 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.135.463 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.135.463 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.135.464 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.135.465 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.135.465 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.135.469 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.135.470 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.135.471 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.135.471 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.135.472 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.135.477 I llama_model_loader: - type  f32:   37 tensors
0.00.135.480 I llama_model_loader: - type q8_0:  127 tensors
0.00.199.782 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.200.443 I llm_load_vocab: special tokens cache size = 5
0.00.218.956 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.218.967 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.218.968 I llm_load_print_meta: arch             = gemma
0.00.218.968 I llm_load_print_meta: vocab type       = SPM
0.00.218.969 I llm_load_print_meta: n_vocab          = 256000
0.00.218.969 I llm_load_print_meta: n_merges         = 0
0.00.218.970 I llm_load_print_meta: vocab_only       = 0
0.00.218.971 I llm_load_print_meta: n_ctx_train      = 8192
0.00.218.971 I llm_load_print_meta: n_embd           = 2048
0.00.218.972 I llm_load_print_meta: n_layer          = 18
0.00.218.984 I llm_load_print_meta: n_head           = 8
0.00.218.985 I llm_load_print_meta: n_head_kv        = 1
0.00.218.985 I llm_load_print_meta: n_rot            = 256
0.00.218.986 I llm_load_print_meta: n_swa            = 0
0.00.218.986 I llm_load_print_meta: n_embd_head_k    = 256
0.00.218.986 I llm_load_print_meta: n_embd_head_v    = 256
0.00.218.987 I llm_load_print_meta: n_gqa            = 8
0.00.218.989 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.218.990 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.218.993 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.218.994 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.218.995 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.218.995 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.218.996 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.218.997 I llm_load_print_meta: n_ff             = 16384
0.00.218.997 I llm_load_print_meta: n_expert         = 0
0.00.218.997 I llm_load_print_meta: n_expert_used    = 0
0.00.218.997 I llm_load_print_meta: causal attn      = 1
0.00.218.998 I llm_load_print_meta: pooling type     = 0
0.00.218.998 I llm_load_print_meta: rope type        = 2
0.00.218.999 I llm_load_print_meta: rope scaling     = linear
0.00.219.000 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.219.001 I llm_load_print_meta: freq_scale_train = 1
0.00.219.002 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.219.003 I llm_load_print_meta: rope_finetuned   = unknown
0.00.219.003 I llm_load_print_meta: ssm_d_conv       = 0
0.00.219.004 I llm_load_print_meta: ssm_d_inner      = 0
0.00.219.004 I llm_load_print_meta: ssm_d_state      = 0
0.00.219.004 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.219.005 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.219.005 I llm_load_print_meta: model type       = 2B
0.00.219.006 I llm_load_print_meta: model ftype      = Q8_0
0.00.219.007 I llm_load_print_meta: model params     = 2.51 B
0.00.219.008 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.219.009 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.219.009 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.219.010 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.219.011 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.219.011 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.219.011 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.219.012 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.219.012 I llm_load_print_meta: max token length = 93
0.00.219.030 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.293.018 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.293.025 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.293.027 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.293.027 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.293.028 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.293.028 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.298.094 I llama_new_context_with_model: n_ctx      = 8192
0.00.298.101 I llama_new_context_with_model: n_batch    = 2048
0.00.298.101 I llama_new_context_with_model: n_ubatch   = 512
0.00.298.101 I llama_new_context_with_model: flash_attn = 0
0.00.298.103 I llama_new_context_with_model: freq_base  = 10000.0
0.00.298.104 I llama_new_context_with_model: freq_scale = 1
0.00.327.699 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.327.713 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.327.804 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.328.686 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.328.693 I llama_new_context_with_model: graph nodes  = 601
0.00.328.693 I llama_new_context_with_model: graph splits = 1
0.00.328.695 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.240 I main: llama threadpool init, n_threads = 4
0.00.421.252 I 
0.00.421.324 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.421.328 I 
0.00.421.360 I sampler seed: 1439469224
0.00.421.369 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.372 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.421.373 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasively.

I am sorry, I am not able to generate responses that contain inappropriate or sexually suggestive content. [end of text]


0.02.154.744 I llama_perf_sampler_print:    sampling time =       3.67 ms /    25 runs   (    0.15 ms per token,  6811.99 tokens per second)
0.02.154.748 I llama_perf_context_print:        load time =     419.32 ms
0.02.154.749 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.154.751 I llama_perf_context_print:        eval time =    1718.97 ms /    24 runs   (   71.62 ms per token,    13.96 tokens per second)
0.02.154.752 I llama_perf_context_print:       total time =    1733.51 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.498 I build: 3769 (d54c21df) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.704 I main: llama backend init
0.00.001.768 I main: load the model and apply lora adapter, if any
0.00.021.597 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.643 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.650 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.655 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.656 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.660 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.660 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.661 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.661 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.662 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.662 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.666 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.667 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.667 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.667 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.668 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.761 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.070 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.936 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.943 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.943 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.944 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.945 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.946 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.948 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.951 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.952 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.953 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.954 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.955 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.959 I llama_model_loader: - type  f32:   37 tensors
0.00.131.962 I llama_model_loader: - type q8_0:  127 tensors
0.00.199.879 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.200.709 I llm_load_vocab: special tokens cache size = 5
0.00.219.520 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.219.533 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.219.533 I llm_load_print_meta: arch             = gemma
0.00.219.534 I llm_load_print_meta: vocab type       = SPM
0.00.219.535 I llm_load_print_meta: n_vocab          = 256000
0.00.219.536 I llm_load_print_meta: n_merges         = 0
0.00.219.536 I llm_load_print_meta: vocab_only       = 0
0.00.219.537 I llm_load_print_meta: n_ctx_train      = 8192
0.00.219.537 I llm_load_print_meta: n_embd           = 2048
0.00.219.537 I llm_load_print_meta: n_layer          = 18
0.00.219.551 I llm_load_print_meta: n_head           = 8
0.00.219.552 I llm_load_print_meta: n_head_kv        = 1
0.00.219.552 I llm_load_print_meta: n_rot            = 256
0.00.219.552 I llm_load_print_meta: n_swa            = 0
0.00.219.552 I llm_load_print_meta: n_embd_head_k    = 256
0.00.219.553 I llm_load_print_meta: n_embd_head_v    = 256
0.00.219.554 I llm_load_print_meta: n_gqa            = 8
0.00.219.556 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.219.557 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.219.558 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.219.559 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.219.560 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.219.560 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.219.561 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.219.562 I llm_load_print_meta: n_ff             = 16384
0.00.219.562 I llm_load_print_meta: n_expert         = 0
0.00.219.562 I llm_load_print_meta: n_expert_used    = 0
0.00.219.563 I llm_load_print_meta: causal attn      = 1
0.00.219.563 I llm_load_print_meta: pooling type     = 0
0.00.219.564 I llm_load_print_meta: rope type        = 2
0.00.219.564 I llm_load_print_meta: rope scaling     = linear
0.00.219.566 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.219.566 I llm_load_print_meta: freq_scale_train = 1
0.00.219.567 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.219.567 I llm_load_print_meta: rope_finetuned   = unknown
0.00.219.567 I llm_load_print_meta: ssm_d_conv       = 0
0.00.219.568 I llm_load_print_meta: ssm_d_inner      = 0
0.00.219.568 I llm_load_print_meta: ssm_d_state      = 0
0.00.219.569 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.219.569 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.219.569 I llm_load_print_meta: model type       = 2B
0.00.219.570 I llm_load_print_meta: model ftype      = Q8_0
0.00.219.571 I llm_load_print_meta: model params     = 2.51 B
0.00.219.572 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.219.573 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.219.576 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.219.576 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.219.577 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.219.577 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.219.577 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.219.578 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.219.578 I llm_load_print_meta: max token length = 93
0.00.219.609 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.289.916 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.289.923 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.294.863 I llama_new_context_with_model: n_ctx      = 8192
0.00.294.870 I llama_new_context_with_model: n_batch    = 2048
0.00.294.871 I llama_new_context_with_model: n_ubatch   = 512
0.00.294.871 I llama_new_context_with_model: flash_attn = 0
0.00.294.874 I llama_new_context_with_model: freq_base  = 10000.0
0.00.294.875 I llama_new_context_with_model: freq_scale = 1
0.00.325.357 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.325.373 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.325.468 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.326.342 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.326.350 I llama_new_context_with_model: graph nodes  = 601
0.00.326.350 I llama_new_context_with_model: graph splits = 1
0.00.326.352 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.105 I main: llama threadpool init, n_threads = 4
0.00.421.117 I 
0.00.421.191 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.421.195 I 
0.00.421.221 I sampler seed: 1969530577
0.00.421.232 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.244 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.421.247 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities. [end of text]


0.00.723.900 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8130.08 tokens per second)
0.00.723.904 I llama_perf_context_print:        load time =     419.32 ms
0.00.723.905 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.723.908 I llama_perf_context_print:        eval time =     299.78 ms /     4 runs   (   74.95 ms per token,    13.34 tokens per second)
0.00.723.910 I llama_perf_context_print:       total time =     302.80 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.871s
user	0m27.846s
sys	0m9.370s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3769 (d54c21df)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32078.87 ms
main:    total time = 32078.87 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.583 I build: 3769 (d54c21df) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.788 I main: llama backend init
0.00.001.912 I main: load the model and apply lora adapter, if any
0.00.022.156 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.204 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.217 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.223 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.224 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.228 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.228 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.229 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.229 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.230 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.230 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.234 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.234 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.235 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.236 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.236 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.705 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.184 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.143 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.150 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.150 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.152 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.152 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.153 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.154 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.157 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.158 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.158 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.159 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.167 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.171 I llama_model_loader: - type  f32:   37 tensors
0.00.133.174 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.174 I llama_model_loader: - type q6_K:   19 tensors
0.00.197.573 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.198.230 I llm_load_vocab: special tokens cache size = 5
0.00.216.711 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.216.725 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.216.726 I llm_load_print_meta: arch             = gemma
0.00.216.726 I llm_load_print_meta: vocab type       = SPM
0.00.216.727 I llm_load_print_meta: n_vocab          = 256000
0.00.216.728 I llm_load_print_meta: n_merges         = 0
0.00.216.728 I llm_load_print_meta: vocab_only       = 0
0.00.216.728 I llm_load_print_meta: n_ctx_train      = 8192
0.00.216.728 I llm_load_print_meta: n_embd           = 2048
0.00.216.729 I llm_load_print_meta: n_layer          = 18
0.00.216.743 I llm_load_print_meta: n_head           = 8
0.00.216.744 I llm_load_print_meta: n_head_kv        = 1
0.00.216.744 I llm_load_print_meta: n_rot            = 256
0.00.216.744 I llm_load_print_meta: n_swa            = 0
0.00.216.745 I llm_load_print_meta: n_embd_head_k    = 256
0.00.216.745 I llm_load_print_meta: n_embd_head_v    = 256
0.00.216.746 I llm_load_print_meta: n_gqa            = 8
0.00.216.747 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.216.747 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.216.748 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.216.750 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.216.750 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.216.750 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.216.751 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.216.751 I llm_load_print_meta: n_ff             = 16384
0.00.216.752 I llm_load_print_meta: n_expert         = 0
0.00.216.752 I llm_load_print_meta: n_expert_used    = 0
0.00.216.752 I llm_load_print_meta: causal attn      = 1
0.00.216.753 I llm_load_print_meta: pooling type     = 0
0.00.216.753 I llm_load_print_meta: rope type        = 2
0.00.216.754 I llm_load_print_meta: rope scaling     = linear
0.00.216.755 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.216.756 I llm_load_print_meta: freq_scale_train = 1
0.00.216.756 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.216.756 I llm_load_print_meta: rope_finetuned   = unknown
0.00.216.757 I llm_load_print_meta: ssm_d_conv       = 0
0.00.216.757 I llm_load_print_meta: ssm_d_inner      = 0
0.00.216.757 I llm_load_print_meta: ssm_d_state      = 0
0.00.216.757 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.216.757 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.216.758 I llm_load_print_meta: model type       = 2B
0.00.216.758 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.216.759 I llm_load_print_meta: model params     = 2.51 B
0.00.216.760 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.216.761 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.216.761 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.216.761 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.216.762 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.216.762 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.216.762 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.216.763 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.216.763 I llm_load_print_meta: max token length = 93
0.00.216.782 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.274.663 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.274.672 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.274.673 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.274.673 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.274.674 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.274.674 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.279.712 I llama_new_context_with_model: n_ctx      = 8192
0.00.279.719 I llama_new_context_with_model: n_batch    = 2048
0.00.279.719 I llama_new_context_with_model: n_ubatch   = 512
0.00.279.720 I llama_new_context_with_model: flash_attn = 0
0.00.279.723 I llama_new_context_with_model: freq_base  = 10000.0
0.00.279.724 I llama_new_context_with_model: freq_scale = 1
0.00.309.794 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.309.810 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.309.902 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.310.763 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.310.770 I llama_new_context_with_model: graph nodes  = 601
0.00.310.771 I llama_new_context_with_model: graph splits = 1
0.00.310.772 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.393.116 I main: llama threadpool init, n_threads = 4
0.00.393.128 I 
0.00.393.208 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.393.211 I 
0.00.393.249 I sampler seed: 537432867
0.00.393.257 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.393.260 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.393.260 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 encompassing the features and benefits of the solution:

**Solution Name:** **Adaptive Learning Platform**

**Features:**

**1. Personalized Learning Paths:**

0.01.999.802 I llama_perf_sampler_print:    sampling time =       4.76 ms /    33 runs   (    0.14 ms per token,  6928.41 tokens per second)
0.01.999.805 I llama_perf_context_print:        load time =     391.19 ms
0.01.999.806 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.999.807 I llama_perf_context_print:        eval time =    1588.32 ms /    32 runs   (   49.63 ms per token,    20.15 tokens per second)
0.01.999.808 I llama_perf_context_print:       total time =    1606.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3769 (d54c21df)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32019.93 ms
main:    total time = 32019.93 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.548 I build: 3769 (d54c21df) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.740 I main: llama backend init
0.00.001.866 I main: load the model and apply lora adapter, if any
0.00.022.022 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.037 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.044 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.045 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.048 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.049 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.050 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.051 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.051 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.052 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.056 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.056 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.057 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.057 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.058 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.041 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.796 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.715 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.724 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.725 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.726 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.726 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.728 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.729 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.733 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.733 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.737 I llama_model_loader: - type  f32:   37 tensors
0.00.131.740 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.741 I llama_model_loader: - type q6_K:   19 tensors
0.00.195.086 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.195.758 I llm_load_vocab: special tokens cache size = 5
0.00.214.238 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.214.253 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.214.253 I llm_load_print_meta: arch             = gemma
0.00.214.253 I llm_load_print_meta: vocab type       = SPM
0.00.214.254 I llm_load_print_meta: n_vocab          = 256000
0.00.214.255 I llm_load_print_meta: n_merges         = 0
0.00.214.255 I llm_load_print_meta: vocab_only       = 0
0.00.214.255 I llm_load_print_meta: n_ctx_train      = 8192
0.00.214.256 I llm_load_print_meta: n_embd           = 2048
0.00.214.256 I llm_load_print_meta: n_layer          = 18
0.00.214.269 I llm_load_print_meta: n_head           = 8
0.00.214.270 I llm_load_print_meta: n_head_kv        = 1
0.00.214.270 I llm_load_print_meta: n_rot            = 256
0.00.214.270 I llm_load_print_meta: n_swa            = 0
0.00.214.271 I llm_load_print_meta: n_embd_head_k    = 256
0.00.214.271 I llm_load_print_meta: n_embd_head_v    = 256
0.00.214.272 I llm_load_print_meta: n_gqa            = 8
0.00.214.273 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.214.274 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.214.275 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.214.276 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.214.276 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.214.277 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.214.277 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.214.278 I llm_load_print_meta: n_ff             = 16384
0.00.214.278 I llm_load_print_meta: n_expert         = 0
0.00.214.278 I llm_load_print_meta: n_expert_used    = 0
0.00.214.279 I llm_load_print_meta: causal attn      = 1
0.00.214.279 I llm_load_print_meta: pooling type     = 0
0.00.214.279 I llm_load_print_meta: rope type        = 2
0.00.214.279 I llm_load_print_meta: rope scaling     = linear
0.00.214.281 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.214.281 I llm_load_print_meta: freq_scale_train = 1
0.00.214.282 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.214.282 I llm_load_print_meta: rope_finetuned   = unknown
0.00.214.282 I llm_load_print_meta: ssm_d_conv       = 0
0.00.214.283 I llm_load_print_meta: ssm_d_inner      = 0
0.00.214.283 I llm_load_print_meta: ssm_d_state      = 0
0.00.214.283 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.214.283 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.214.284 I llm_load_print_meta: model type       = 2B
0.00.214.284 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.214.285 I llm_load_print_meta: model params     = 2.51 B
0.00.214.286 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.214.286 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.214.287 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.214.287 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.214.287 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.214.287 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.214.288 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.214.289 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.214.289 I llm_load_print_meta: max token length = 93
0.00.214.305 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.270.257 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.275.238 I llama_new_context_with_model: n_ctx      = 8192
0.00.275.245 I llama_new_context_with_model: n_batch    = 2048
0.00.275.245 I llama_new_context_with_model: n_ubatch   = 512
0.00.275.245 I llama_new_context_with_model: flash_attn = 0
0.00.275.248 I llama_new_context_with_model: freq_base  = 10000.0
0.00.275.249 I llama_new_context_with_model: freq_scale = 1
0.00.303.390 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.303.406 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.303.497 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.304.352 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.304.361 I llama_new_context_with_model: graph nodes  = 601
0.00.304.361 I llama_new_context_with_model: graph splits = 1
0.00.304.363 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.384.631 I main: llama threadpool init, n_threads = 4
0.00.384.645 I 
0.00.384.721 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.384.724 I 
0.00.384.764 I sampler seed: 3615133043
0.00.384.774 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.384.776 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.384.777 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increase of the following text:

The text contains a number of grammatical errors and typos. It is important to correct these errors in order to ensure clarity and

0.01.984.227 I llama_perf_sampler_print:    sampling time =       4.66 ms /    33 runs   (    0.14 ms per token,  7089.15 tokens per second)
0.01.984.229 I llama_perf_context_print:        load time =     382.75 ms
0.01.984.231 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.984.232 I llama_perf_context_print:        eval time =    1581.54 ms /    32 runs   (   49.42 ms per token,    20.23 tokens per second)
0.01.984.233 I llama_perf_context_print:       total time =    1599.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.160s
user	8m14.459s
sys	0m6.944s
