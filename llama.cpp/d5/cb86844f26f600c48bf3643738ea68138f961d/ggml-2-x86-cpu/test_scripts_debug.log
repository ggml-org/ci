+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.665 I build: 3891 (d5cb8684) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.872 I main: llama backend init
0.00.002.819 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.817 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.031 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.124 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.136 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.138 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.143 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.147 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.148 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.149 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.150 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.153 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.160 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.162 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.163 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.164 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.165 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.571 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.132 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.228 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.235 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.236 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.237 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.238 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.240 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.241 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.244 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.245 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.247 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.248 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.249 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.257 I llama_model_loader: - type  f32:   37 tensors
0.00.268.261 I llama_model_loader: - type q8_0:  127 tensors
0.00.428.535 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.450.020 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.451.020 I llm_load_vocab: special tokens cache size = 5
0.00.563.660 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.563.715 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.563.716 I llm_load_print_meta: arch             = gemma
0.00.563.717 I llm_load_print_meta: vocab type       = SPM
0.00.563.718 I llm_load_print_meta: n_vocab          = 256000
0.00.563.720 I llm_load_print_meta: n_merges         = 0
0.00.563.721 I llm_load_print_meta: vocab_only       = 0
0.00.563.721 I llm_load_print_meta: n_ctx_train      = 8192
0.00.563.722 I llm_load_print_meta: n_embd           = 2048
0.00.563.722 I llm_load_print_meta: n_layer          = 18
0.00.563.783 I llm_load_print_meta: n_head           = 8
0.00.563.790 I llm_load_print_meta: n_head_kv        = 1
0.00.563.791 I llm_load_print_meta: n_rot            = 256
0.00.563.791 I llm_load_print_meta: n_swa            = 0
0.00.563.792 I llm_load_print_meta: n_embd_head_k    = 256
0.00.563.797 I llm_load_print_meta: n_embd_head_v    = 256
0.00.563.801 I llm_load_print_meta: n_gqa            = 8
0.00.563.806 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.563.811 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.563.813 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.563.815 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.563.815 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.563.816 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.563.816 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.563.821 I llm_load_print_meta: n_ff             = 16384
0.00.563.822 I llm_load_print_meta: n_expert         = 0
0.00.563.823 I llm_load_print_meta: n_expert_used    = 0
0.00.563.823 I llm_load_print_meta: causal attn      = 1
0.00.563.824 I llm_load_print_meta: pooling type     = 0
0.00.563.836 I llm_load_print_meta: rope type        = 2
0.00.563.838 I llm_load_print_meta: rope scaling     = linear
0.00.563.839 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.563.840 I llm_load_print_meta: freq_scale_train = 1
0.00.563.840 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.563.852 I llm_load_print_meta: rope_finetuned   = unknown
0.00.563.853 I llm_load_print_meta: ssm_d_conv       = 0
0.00.563.853 I llm_load_print_meta: ssm_d_inner      = 0
0.00.563.854 I llm_load_print_meta: ssm_d_state      = 0
0.00.563.854 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.563.855 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.563.856 I llm_load_print_meta: model type       = 2B
0.00.563.865 I llm_load_print_meta: model ftype      = Q8_0
0.00.563.866 I llm_load_print_meta: model params     = 2.51 B
0.00.563.867 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.563.867 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.563.871 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.563.872 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.563.872 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.563.873 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.563.873 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.563.874 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.563.880 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.563.882 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.563.882 I llm_load_print_meta: max token length = 93
0.00.564.053 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.664.381 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.664.390 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.664.391 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.664.392 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.664.393 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.664.394 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.670.051 I llama_new_context_with_model: n_ctx      = 8192
0.00.670.057 I llama_new_context_with_model: n_batch    = 2048
0.00.670.057 I llama_new_context_with_model: n_ubatch   = 512
0.00.670.058 I llama_new_context_with_model: flash_attn = 0
0.00.670.060 I llama_new_context_with_model: freq_base  = 10000.0
0.00.670.061 I llama_new_context_with_model: freq_scale = 1
0.00.698.597 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.698.639 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.698.757 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.700.153 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.700.159 I llama_new_context_with_model: graph nodes  = 601
0.00.700.160 I llama_new_context_with_model: graph splits = 1
0.00.700.175 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.311.290 I main: llama threadpool init, n_threads = 4
0.01.311.302 I 
0.01.311.408 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.311.412 I 
0.01.311.580 I sampler seed: 2062154896
0.01.311.591 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.311.597 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.311.598 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.311.607 I 
 increasities,
But a simple woman cannot comprehend
The vastness of his dreams and desires.

Who is the speaker of this passage?

A)

0.14.806.082 I llama_perf_sampler_print:    sampling time =      49.21 ms /    33 runs   (    1.49 ms per token,   670.55 tokens per second)
0.14.806.087 I llama_perf_context_print:        load time =    1308.26 ms
0.14.806.089 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.806.091 I llama_perf_context_print:        eval time =   13413.11 ms /    32 runs   (  419.16 ms per token,     2.39 tokens per second)
0.14.806.092 I llama_perf_context_print:       total time =   13494.80 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.638 I build: 3891 (d5cb8684) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.002.779 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.958 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.054 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.067 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.069 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.073 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.074 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.075 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.076 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.078 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.079 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.085 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.086 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.087 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.088 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.089 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.867 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.967 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.066 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.075 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.076 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.077 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.078 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.079 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.081 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.085 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.086 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.087 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.088 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.269.089 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.097 I llama_model_loader: - type  f32:   37 tensors
0.00.269.102 I llama_model_loader: - type q8_0:  127 tensors
0.00.430.462 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.453.959 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.454.980 I llm_load_vocab: special tokens cache size = 5
0.00.557.446 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.557.508 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.557.509 I llm_load_print_meta: arch             = gemma
0.00.557.510 I llm_load_print_meta: vocab type       = SPM
0.00.557.511 I llm_load_print_meta: n_vocab          = 256000
0.00.557.514 I llm_load_print_meta: n_merges         = 0
0.00.557.514 I llm_load_print_meta: vocab_only       = 0
0.00.557.515 I llm_load_print_meta: n_ctx_train      = 8192
0.00.557.515 I llm_load_print_meta: n_embd           = 2048
0.00.557.516 I llm_load_print_meta: n_layer          = 18
0.00.557.585 I llm_load_print_meta: n_head           = 8
0.00.557.592 I llm_load_print_meta: n_head_kv        = 1
0.00.557.593 I llm_load_print_meta: n_rot            = 256
0.00.557.593 I llm_load_print_meta: n_swa            = 0
0.00.557.593 I llm_load_print_meta: n_embd_head_k    = 256
0.00.557.594 I llm_load_print_meta: n_embd_head_v    = 256
0.00.557.598 I llm_load_print_meta: n_gqa            = 8
0.00.557.603 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.557.607 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.557.608 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.557.610 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.557.610 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.557.611 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.557.611 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.557.616 I llm_load_print_meta: n_ff             = 16384
0.00.557.616 I llm_load_print_meta: n_expert         = 0
0.00.557.617 I llm_load_print_meta: n_expert_used    = 0
0.00.557.617 I llm_load_print_meta: causal attn      = 1
0.00.557.617 I llm_load_print_meta: pooling type     = 0
0.00.557.618 I llm_load_print_meta: rope type        = 2
0.00.557.618 I llm_load_print_meta: rope scaling     = linear
0.00.557.619 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.557.620 I llm_load_print_meta: freq_scale_train = 1
0.00.557.620 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.557.620 I llm_load_print_meta: rope_finetuned   = unknown
0.00.557.621 I llm_load_print_meta: ssm_d_conv       = 0
0.00.557.621 I llm_load_print_meta: ssm_d_inner      = 0
0.00.557.621 I llm_load_print_meta: ssm_d_state      = 0
0.00.557.622 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.557.622 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.557.623 I llm_load_print_meta: model type       = 2B
0.00.557.634 I llm_load_print_meta: model ftype      = Q8_0
0.00.557.634 I llm_load_print_meta: model params     = 2.51 B
0.00.557.635 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.557.636 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.557.636 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.557.637 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.557.637 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.557.637 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.557.638 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.557.639 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.557.645 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.557.646 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.557.646 I llm_load_print_meta: max token length = 93
0.00.557.813 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.653.393 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.659.002 I llama_new_context_with_model: n_ctx      = 8192
0.00.659.008 I llama_new_context_with_model: n_batch    = 2048
0.00.659.008 I llama_new_context_with_model: n_ubatch   = 512
0.00.659.009 I llama_new_context_with_model: flash_attn = 0
0.00.659.012 I llama_new_context_with_model: freq_base  = 10000.0
0.00.659.012 I llama_new_context_with_model: freq_scale = 1
0.00.687.885 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.687.928 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.688.048 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.689.447 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.689.454 I llama_new_context_with_model: graph nodes  = 601
0.00.689.454 I llama_new_context_with_model: graph splits = 1
0.00.689.472 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.301.252 I main: llama threadpool init, n_threads = 4
0.01.301.264 I 
0.01.301.380 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.301.388 I 
0.01.301.580 I sampler seed: 4053610672
0.01.301.595 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.301.607 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.301.608 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.301.610 I 
 increasities, and an exasperated utterance from a bewildered observer.

**Scene:** A dimly lit tavern, filled with the rasping coughs and guttural laughter of

0.14.879.554 I llama_perf_sampler_print:    sampling time =      49.43 ms /    33 runs   (    1.50 ms per token,   667.60 tokens per second)
0.14.879.575 I llama_perf_context_print:        load time =    1298.30 ms
0.14.879.576 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.879.578 I llama_perf_context_print:        eval time =   13495.88 ms /    32 runs   (  421.75 ms per token,     2.37 tokens per second)
0.14.879.580 I llama_perf_context_print:       total time =   13578.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.659 I build: 3891 (d5cb8684) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.879 I main: llama backend init
0.00.002.836 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.784 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.997 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.099 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.112 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.113 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.118 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.119 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.121 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.123 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.129 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.132 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.142 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.147 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.149 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.151 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.171 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.760 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.060 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.158 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.170 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.171 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.172 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.173 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.174 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.175 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.179 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.180 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.181 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.182 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.269.183 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.192 I llama_model_loader: - type  f32:   37 tensors
0.00.269.196 I llama_model_loader: - type q8_0:  127 tensors
0.00.438.477 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.461.725 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.462.773 I llm_load_vocab: special tokens cache size = 5
0.00.559.900 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.559.965 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.559.967 I llm_load_print_meta: arch             = gemma
0.00.559.967 I llm_load_print_meta: vocab type       = SPM
0.00.559.968 I llm_load_print_meta: n_vocab          = 256000
0.00.559.970 I llm_load_print_meta: n_merges         = 0
0.00.559.971 I llm_load_print_meta: vocab_only       = 0
0.00.559.971 I llm_load_print_meta: n_ctx_train      = 8192
0.00.559.972 I llm_load_print_meta: n_embd           = 2048
0.00.559.972 I llm_load_print_meta: n_layer          = 18
0.00.560.037 I llm_load_print_meta: n_head           = 8
0.00.560.044 I llm_load_print_meta: n_head_kv        = 1
0.00.560.045 I llm_load_print_meta: n_rot            = 256
0.00.560.045 I llm_load_print_meta: n_swa            = 0
0.00.560.046 I llm_load_print_meta: n_embd_head_k    = 256
0.00.560.046 I llm_load_print_meta: n_embd_head_v    = 256
0.00.560.050 I llm_load_print_meta: n_gqa            = 8
0.00.560.055 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.560.061 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.560.062 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.560.068 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.560.068 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.560.080 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.560.081 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.560.088 I llm_load_print_meta: n_ff             = 16384
0.00.560.089 I llm_load_print_meta: n_expert         = 0
0.00.560.089 I llm_load_print_meta: n_expert_used    = 0
0.00.560.090 I llm_load_print_meta: causal attn      = 1
0.00.560.090 I llm_load_print_meta: pooling type     = 0
0.00.560.091 I llm_load_print_meta: rope type        = 2
0.00.560.092 I llm_load_print_meta: rope scaling     = linear
0.00.560.093 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.560.095 I llm_load_print_meta: freq_scale_train = 1
0.00.560.095 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.560.095 I llm_load_print_meta: rope_finetuned   = unknown
0.00.560.096 I llm_load_print_meta: ssm_d_conv       = 0
0.00.560.098 I llm_load_print_meta: ssm_d_inner      = 0
0.00.560.099 I llm_load_print_meta: ssm_d_state      = 0
0.00.560.099 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.560.099 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.560.100 I llm_load_print_meta: model type       = 2B
0.00.560.110 I llm_load_print_meta: model ftype      = Q8_0
0.00.560.111 I llm_load_print_meta: model params     = 2.51 B
0.00.560.112 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.560.112 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.560.113 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.560.114 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.560.114 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.560.115 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.560.115 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.560.116 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.560.130 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.560.131 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.560.132 I llm_load_print_meta: max token length = 93
0.00.560.320 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.636.868 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.636.880 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.636.881 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.636.882 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.636.882 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.636.883 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.642.831 I llama_new_context_with_model: n_ctx      = 8192
0.00.642.838 I llama_new_context_with_model: n_batch    = 2048
0.00.642.839 I llama_new_context_with_model: n_ubatch   = 512
0.00.642.839 I llama_new_context_with_model: flash_attn = 0
0.00.642.842 I llama_new_context_with_model: freq_base  = 10000.0
0.00.642.842 I llama_new_context_with_model: freq_scale = 1
0.00.671.706 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.671.748 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.671.866 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.673.237 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.673.246 I llama_new_context_with_model: graph nodes  = 601
0.00.673.246 I llama_new_context_with_model: graph splits = 1
0.00.673.264 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.286.852 I main: llama threadpool init, n_threads = 4
0.01.286.863 I 
0.01.286.986 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.286.991 I 
0.01.287.168 I sampler seed: 949514177
0.01.287.179 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.287.186 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.287.187 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.287.194 I 
 increamically with the following observations:

**Observation 1:** The population growth of bacteria is exponential.
**Observation 2:** The population size reaches a

0.14.854.493 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.22 tokens per second)
0.14.854.497 I llama_perf_context_print:        load time =    1283.81 ms
0.14.854.498 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.854.513 I llama_perf_context_print:        eval time =   13485.93 ms /    32 runs   (  421.44 ms per token,     2.37 tokens per second)
0.14.854.514 I llama_perf_context_print:       total time =   13567.65 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.545 I build: 3891 (d5cb8684) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.780 I main: llama backend init
0.00.002.764 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.269 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.496 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.592 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.603 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.605 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.609 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.611 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.612 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.619 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.621 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.623 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.632 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.637 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.639 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.641 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.643 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.798 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.125 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.192 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.200 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.201 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.202 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.203 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.204 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.207 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.211 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.212 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.213 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.214 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.269.215 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.223 I llama_model_loader: - type  f32:   37 tensors
0.00.269.228 I llama_model_loader: - type q8_0:  127 tensors
0.00.428.163 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.451.551 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.452.571 I llm_load_vocab: special tokens cache size = 5
0.00.549.650 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.549.713 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.549.715 I llm_load_print_meta: arch             = gemma
0.00.549.715 I llm_load_print_meta: vocab type       = SPM
0.00.549.716 I llm_load_print_meta: n_vocab          = 256000
0.00.549.719 I llm_load_print_meta: n_merges         = 0
0.00.549.719 I llm_load_print_meta: vocab_only       = 0
0.00.549.720 I llm_load_print_meta: n_ctx_train      = 8192
0.00.549.720 I llm_load_print_meta: n_embd           = 2048
0.00.549.721 I llm_load_print_meta: n_layer          = 18
0.00.549.786 I llm_load_print_meta: n_head           = 8
0.00.549.793 I llm_load_print_meta: n_head_kv        = 1
0.00.549.794 I llm_load_print_meta: n_rot            = 256
0.00.549.794 I llm_load_print_meta: n_swa            = 0
0.00.549.795 I llm_load_print_meta: n_embd_head_k    = 256
0.00.549.795 I llm_load_print_meta: n_embd_head_v    = 256
0.00.549.799 I llm_load_print_meta: n_gqa            = 8
0.00.549.803 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.549.808 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.549.809 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.549.811 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.549.812 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.549.812 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.549.812 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.549.817 I llm_load_print_meta: n_ff             = 16384
0.00.549.818 I llm_load_print_meta: n_expert         = 0
0.00.549.818 I llm_load_print_meta: n_expert_used    = 0
0.00.549.819 I llm_load_print_meta: causal attn      = 1
0.00.549.819 I llm_load_print_meta: pooling type     = 0
0.00.549.819 I llm_load_print_meta: rope type        = 2
0.00.549.820 I llm_load_print_meta: rope scaling     = linear
0.00.549.821 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.549.822 I llm_load_print_meta: freq_scale_train = 1
0.00.549.822 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.549.822 I llm_load_print_meta: rope_finetuned   = unknown
0.00.549.823 I llm_load_print_meta: ssm_d_conv       = 0
0.00.549.823 I llm_load_print_meta: ssm_d_inner      = 0
0.00.549.823 I llm_load_print_meta: ssm_d_state      = 0
0.00.549.824 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.549.824 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.549.825 I llm_load_print_meta: model type       = 2B
0.00.549.836 I llm_load_print_meta: model ftype      = Q8_0
0.00.549.836 I llm_load_print_meta: model params     = 2.51 B
0.00.549.837 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.549.838 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.549.838 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.549.839 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.549.865 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.549.866 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.549.867 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.549.868 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.549.874 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.549.876 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.549.877 I llm_load_print_meta: max token length = 93
0.00.550.050 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.624.064 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.624.073 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.629.816 I llama_new_context_with_model: n_ctx      = 8192
0.00.629.824 I llama_new_context_with_model: n_batch    = 2048
0.00.629.825 I llama_new_context_with_model: n_ubatch   = 512
0.00.629.825 I llama_new_context_with_model: flash_attn = 0
0.00.629.828 I llama_new_context_with_model: freq_base  = 10000.0
0.00.629.829 I llama_new_context_with_model: freq_scale = 1
0.00.658.962 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.659.004 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.659.123 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.660.507 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.660.515 I llama_new_context_with_model: graph nodes  = 601
0.00.660.516 I llama_new_context_with_model: graph splits = 1
0.00.660.535 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.271.707 I main: llama threadpool init, n_threads = 4
0.01.271.720 I 
0.01.271.844 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.271.849 I 
0.01.272.017 I sampler seed: 1097717928
0.01.272.028 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.272.036 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.272.036 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.272.037 I 
 increasities can be addressed by:

a) Using probiotics
b) Giving antibiotics
c) Reducing intake of the offending substance
d) All of the

0.14.830.049 I llama_perf_sampler_print:    sampling time =      49.12 ms /    33 runs   (    1.49 ms per token,   671.77 tokens per second)
0.14.830.071 I llama_perf_context_print:        load time =    1268.74 ms
0.14.830.080 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.830.082 I llama_perf_context_print:        eval time =   13476.06 ms /    32 runs   (  421.13 ms per token,     2.37 tokens per second)
0.14.830.083 I llama_perf_context_print:       total time =   13558.35 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m10.157s
user	3m49.184s
sys	0m9.495s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3891 (d5cb8684)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198943.69 ms
main:    total time = 198943.69 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.630 I build: 3891 (d5cb8684) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.002.783 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.728 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.935 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.019 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.030 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.031 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.036 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.040 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.041 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.042 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.044 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.045 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.053 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.056 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.057 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.058 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.060 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.371 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.045 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.126 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.134 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.135 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.136 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.137 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.139 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.140 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.144 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.145 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.147 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.147 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.149 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.157 I llama_model_loader: - type  f32:   37 tensors
0.00.268.161 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.162 I llama_model_loader: - type q6_K:   19 tensors
0.00.417.786 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.440.038 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.441.025 I llm_load_vocab: special tokens cache size = 5
0.00.552.929 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.552.987 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.552.988 I llm_load_print_meta: arch             = gemma
0.00.552.989 I llm_load_print_meta: vocab type       = SPM
0.00.552.990 I llm_load_print_meta: n_vocab          = 256000
0.00.552.992 I llm_load_print_meta: n_merges         = 0
0.00.552.993 I llm_load_print_meta: vocab_only       = 0
0.00.552.993 I llm_load_print_meta: n_ctx_train      = 8192
0.00.552.993 I llm_load_print_meta: n_embd           = 2048
0.00.552.994 I llm_load_print_meta: n_layer          = 18
0.00.553.058 I llm_load_print_meta: n_head           = 8
0.00.553.085 I llm_load_print_meta: n_head_kv        = 1
0.00.553.086 I llm_load_print_meta: n_rot            = 256
0.00.553.087 I llm_load_print_meta: n_swa            = 0
0.00.553.087 I llm_load_print_meta: n_embd_head_k    = 256
0.00.553.087 I llm_load_print_meta: n_embd_head_v    = 256
0.00.553.094 I llm_load_print_meta: n_gqa            = 8
0.00.553.099 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.553.103 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.553.105 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.553.107 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.553.107 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.553.108 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.553.108 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.553.113 I llm_load_print_meta: n_ff             = 16384
0.00.553.114 I llm_load_print_meta: n_expert         = 0
0.00.553.114 I llm_load_print_meta: n_expert_used    = 0
0.00.553.120 I llm_load_print_meta: causal attn      = 1
0.00.553.121 I llm_load_print_meta: pooling type     = 0
0.00.553.121 I llm_load_print_meta: rope type        = 2
0.00.553.128 I llm_load_print_meta: rope scaling     = linear
0.00.553.129 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.553.130 I llm_load_print_meta: freq_scale_train = 1
0.00.553.131 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.553.131 I llm_load_print_meta: rope_finetuned   = unknown
0.00.553.132 I llm_load_print_meta: ssm_d_conv       = 0
0.00.553.132 I llm_load_print_meta: ssm_d_inner      = 0
0.00.553.136 I llm_load_print_meta: ssm_d_state      = 0
0.00.553.137 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.553.137 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.553.138 I llm_load_print_meta: model type       = 2B
0.00.553.147 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.553.148 I llm_load_print_meta: model params     = 2.51 B
0.00.553.149 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.553.149 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.553.150 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.553.150 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.553.151 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.553.151 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.553.152 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.553.152 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.553.157 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.553.159 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.553.159 I llm_load_print_meta: max token length = 93
0.00.553.326 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.612.633 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.612.646 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.612.647 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.612.648 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.612.648 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.612.649 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.618.311 I llama_new_context_with_model: n_ctx      = 8192
0.00.618.318 I llama_new_context_with_model: n_batch    = 2048
0.00.618.319 I llama_new_context_with_model: n_ubatch   = 512
0.00.618.319 I llama_new_context_with_model: flash_attn = 0
0.00.618.324 I llama_new_context_with_model: freq_base  = 10000.0
0.00.618.325 I llama_new_context_with_model: freq_scale = 1
0.00.648.320 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.648.366 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.648.480 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.649.890 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.649.895 I llama_new_context_with_model: graph nodes  = 601
0.00.649.896 I llama_new_context_with_model: graph splits = 1
0.00.649.912 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.234.665 I main: llama threadpool init, n_threads = 4
0.01.234.676 I 
0.01.234.785 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.234.789 I 
0.01.234.955 I sampler seed: 1249070469
0.01.234.965 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.234.972 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.234.973 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.234.976 I 
 encompates a diverse range of topics, from the latest technological advancements to important social issues.

**Instructions:**

1. Briefly summarize the main points of the

0.12.192.428 I llama_perf_sampler_print:    sampling time =      49.24 ms /    33 runs   (    1.49 ms per token,   670.23 tokens per second)
0.12.192.431 I llama_perf_context_print:        load time =    1231.70 ms
0.12.192.446 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.192.448 I llama_perf_context_print:        eval time =   10875.60 ms /    32 runs   (  339.86 ms per token,     2.94 tokens per second)
0.12.192.448 I llama_perf_context_print:       total time =   10957.77 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3891 (d5cb8684)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199747.32 ms
main:    total time = 199747.32 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.663 I build: 3891 (d5cb8684) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.002.827 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.026.888 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.026.994 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.011 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.015 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.020 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.021 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.023 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.025 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.026 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.027 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.035 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.039 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.040 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.041 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.027.042 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.492 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.118 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.226 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.237 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.238 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.239 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.240 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.241 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.243 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.246 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.247 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.256 I llama_model_loader: - type  f32:   37 tensors
0.00.270.260 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.261 I llama_model_loader: - type q6_K:   19 tensors
0.00.431.487 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.454.781 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.455.794 I llm_load_vocab: special tokens cache size = 5
0.00.568.437 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.568.497 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.568.502 I llm_load_print_meta: arch             = gemma
0.00.568.502 I llm_load_print_meta: vocab type       = SPM
0.00.568.503 I llm_load_print_meta: n_vocab          = 256000
0.00.568.505 I llm_load_print_meta: n_merges         = 0
0.00.568.506 I llm_load_print_meta: vocab_only       = 0
0.00.568.506 I llm_load_print_meta: n_ctx_train      = 8192
0.00.568.507 I llm_load_print_meta: n_embd           = 2048
0.00.568.507 I llm_load_print_meta: n_layer          = 18
0.00.568.573 I llm_load_print_meta: n_head           = 8
0.00.568.583 I llm_load_print_meta: n_head_kv        = 1
0.00.568.584 I llm_load_print_meta: n_rot            = 256
0.00.568.584 I llm_load_print_meta: n_swa            = 0
0.00.568.584 I llm_load_print_meta: n_embd_head_k    = 256
0.00.568.585 I llm_load_print_meta: n_embd_head_v    = 256
0.00.568.589 I llm_load_print_meta: n_gqa            = 8
0.00.568.594 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.568.599 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.568.601 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.568.603 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.568.603 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.568.604 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.568.604 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.568.609 I llm_load_print_meta: n_ff             = 16384
0.00.568.610 I llm_load_print_meta: n_expert         = 0
0.00.568.611 I llm_load_print_meta: n_expert_used    = 0
0.00.568.611 I llm_load_print_meta: causal attn      = 1
0.00.568.612 I llm_load_print_meta: pooling type     = 0
0.00.568.612 I llm_load_print_meta: rope type        = 2
0.00.568.613 I llm_load_print_meta: rope scaling     = linear
0.00.568.615 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.568.615 I llm_load_print_meta: freq_scale_train = 1
0.00.568.616 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.568.616 I llm_load_print_meta: rope_finetuned   = unknown
0.00.568.616 I llm_load_print_meta: ssm_d_conv       = 0
0.00.568.617 I llm_load_print_meta: ssm_d_inner      = 0
0.00.568.617 I llm_load_print_meta: ssm_d_state      = 0
0.00.568.618 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.568.618 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.568.619 I llm_load_print_meta: model type       = 2B
0.00.568.630 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.568.631 I llm_load_print_meta: model params     = 2.51 B
0.00.568.632 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.568.633 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.568.636 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.568.636 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.568.636 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.568.637 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.568.637 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.568.638 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.568.645 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.568.646 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.568.647 I llm_load_print_meta: max token length = 93
0.00.568.810 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.628.204 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.633.674 I llama_new_context_with_model: n_ctx      = 8192
0.00.633.680 I llama_new_context_with_model: n_batch    = 2048
0.00.633.680 I llama_new_context_with_model: n_ubatch   = 512
0.00.633.681 I llama_new_context_with_model: flash_attn = 0
0.00.633.683 I llama_new_context_with_model: freq_base  = 10000.0
0.00.633.684 I llama_new_context_with_model: freq_scale = 1
0.00.663.531 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.663.575 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.663.695 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.665.045 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.665.051 I llama_new_context_with_model: graph nodes  = 601
0.00.665.052 I llama_new_context_with_model: graph splits = 1
0.00.665.067 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.244.539 I main: llama threadpool init, n_threads = 4
0.01.244.552 I 
0.01.244.658 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.244.662 I 
0.01.244.826 I sampler seed: 1684101790
0.01.244.836 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.244.843 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.244.844 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.244.844 I 
 squaRED text in the following text:

**Assistant**

I am unable to provide assistance with tasks that involve sensitive information, including personal data.

**

0.12.168.154 I llama_perf_sampler_print:    sampling time =      49.08 ms /    33 runs   (    1.49 ms per token,   672.36 tokens per second)
0.12.168.157 I llama_perf_context_print:        load time =    1241.53 ms
0.12.168.158 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.168.160 I llama_perf_context_print:        eval time =   10842.02 ms /    32 runs   (  338.81 ms per token,     2.95 tokens per second)
0.12.168.175 I llama_perf_context_print:       total time =   10923.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.949s
user	50m24.674s
sys	0m6.405s
