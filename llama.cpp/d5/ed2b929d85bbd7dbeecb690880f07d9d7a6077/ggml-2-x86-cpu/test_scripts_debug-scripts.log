+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.655 I build: 3878 (d5ed2b92) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.002.809 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.303 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.522 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.617 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.630 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.631 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.636 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.640 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.641 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.642 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.643 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.644 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.652 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.653 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.654 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.655 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.656 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.196 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.269.505 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.288.289 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.288.299 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.288.300 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.288.301 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.288.302 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.288.303 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.288.305 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.288.309 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.288.310 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.288.311 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.288.312 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.288.313 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.288.322 I llama_model_loader: - type  f32:   37 tensors
0.00.288.326 I llama_model_loader: - type q8_0:  127 tensors
0.00.468.838 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.495.691 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.496.774 I llm_load_vocab: special tokens cache size = 5
0.00.605.367 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.430 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.432 I llm_load_print_meta: arch             = gemma
0.00.605.432 I llm_load_print_meta: vocab type       = SPM
0.00.605.433 I llm_load_print_meta: n_vocab          = 256000
0.00.605.436 I llm_load_print_meta: n_merges         = 0
0.00.605.436 I llm_load_print_meta: vocab_only       = 0
0.00.605.436 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.437 I llm_load_print_meta: n_embd           = 2048
0.00.605.437 I llm_load_print_meta: n_layer          = 18
0.00.605.500 I llm_load_print_meta: n_head           = 8
0.00.605.506 I llm_load_print_meta: n_head_kv        = 1
0.00.605.507 I llm_load_print_meta: n_rot            = 256
0.00.605.508 I llm_load_print_meta: n_swa            = 0
0.00.605.508 I llm_load_print_meta: n_embd_head_k    = 256
0.00.605.508 I llm_load_print_meta: n_embd_head_v    = 256
0.00.605.515 I llm_load_print_meta: n_gqa            = 8
0.00.605.520 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.605.525 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.605.526 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.605.527 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.605.528 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.605.529 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.605.529 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.605.534 I llm_load_print_meta: n_ff             = 16384
0.00.605.535 I llm_load_print_meta: n_expert         = 0
0.00.605.535 I llm_load_print_meta: n_expert_used    = 0
0.00.605.536 I llm_load_print_meta: causal attn      = 1
0.00.605.536 I llm_load_print_meta: pooling type     = 0
0.00.605.536 I llm_load_print_meta: rope type        = 2
0.00.605.536 I llm_load_print_meta: rope scaling     = linear
0.00.605.538 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.605.538 I llm_load_print_meta: freq_scale_train = 1
0.00.605.539 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.605.539 I llm_load_print_meta: rope_finetuned   = unknown
0.00.605.539 I llm_load_print_meta: ssm_d_conv       = 0
0.00.605.540 I llm_load_print_meta: ssm_d_inner      = 0
0.00.605.541 I llm_load_print_meta: ssm_d_state      = 0
0.00.605.542 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.605.542 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.542 I llm_load_print_meta: model type       = 2B
0.00.605.553 I llm_load_print_meta: model ftype      = Q8_0
0.00.605.553 I llm_load_print_meta: model params     = 2.51 B
0.00.605.554 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.605.555 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.556 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.556 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.579 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.580 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.581 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.590 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.597 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.599 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.599 I llm_load_print_meta: max token length = 93
0.00.605.770 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.705.680 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.705.693 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.705.694 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.705.695 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.705.696 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.705.696 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.711.529 I llama_new_context_with_model: n_ctx      = 8192
0.00.711.537 I llama_new_context_with_model: n_batch    = 2048
0.00.711.538 I llama_new_context_with_model: n_ubatch   = 512
0.00.711.539 I llama_new_context_with_model: flash_attn = 0
0.00.711.542 I llama_new_context_with_model: freq_base  = 10000.0
0.00.711.543 I llama_new_context_with_model: freq_scale = 1
0.00.741.322 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.741.362 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.741.476 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.742.917 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.742.924 I llama_new_context_with_model: graph nodes  = 601
0.00.742.924 I llama_new_context_with_model: graph splits = 1
0.00.742.939 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.357.324 I main: llama threadpool init, n_threads = 4
0.01.357.337 I 
0.01.357.446 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.357.450 I 
0.01.357.612 I sampler seed: 2867025723
0.01.357.622 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.357.628 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.357.639 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.357.640 I 
 increasities, a beautiful and enigmatic creature, is a myth or a real creature? [end of text]


0.08.954.335 I llama_perf_sampler_print:    sampling time =      27.85 ms /    19 runs   (    1.47 ms per token,   682.32 tokens per second)
0.08.954.338 I llama_perf_context_print:        load time =    1354.33 ms
0.08.954.339 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.954.341 I llama_perf_context_print:        eval time =    7549.62 ms /    18 runs   (  419.42 ms per token,     2.38 tokens per second)
0.08.954.342 I llama_perf_context_print:       total time =    7597.02 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.677 I build: 3878 (d5ed2b92) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.873 I main: llama backend init
0.00.002.865 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.688 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.792 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.809 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.814 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.819 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.820 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.821 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.822 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.824 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.825 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.833 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.835 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.836 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.845 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.847 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.157.354 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.275.048 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.293.816 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.293.826 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.293.827 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.293.829 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.293.830 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.293.831 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.293.832 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.293.836 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.293.837 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.293.839 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.293.840 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.293.841 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.293.850 I llama_model_loader: - type  f32:   37 tensors
0.00.293.855 I llama_model_loader: - type q8_0:  127 tensors
0.00.473.560 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.381 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.523 I llm_load_vocab: special tokens cache size = 5
0.00.614.294 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.614.353 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.614.354 I llm_load_print_meta: arch             = gemma
0.00.614.355 I llm_load_print_meta: vocab type       = SPM
0.00.614.356 I llm_load_print_meta: n_vocab          = 256000
0.00.614.358 I llm_load_print_meta: n_merges         = 0
0.00.614.359 I llm_load_print_meta: vocab_only       = 0
0.00.614.359 I llm_load_print_meta: n_ctx_train      = 8192
0.00.614.359 I llm_load_print_meta: n_embd           = 2048
0.00.614.360 I llm_load_print_meta: n_layer          = 18
0.00.614.423 I llm_load_print_meta: n_head           = 8
0.00.614.430 I llm_load_print_meta: n_head_kv        = 1
0.00.614.431 I llm_load_print_meta: n_rot            = 256
0.00.614.431 I llm_load_print_meta: n_swa            = 0
0.00.614.431 I llm_load_print_meta: n_embd_head_k    = 256
0.00.614.432 I llm_load_print_meta: n_embd_head_v    = 256
0.00.614.436 I llm_load_print_meta: n_gqa            = 8
0.00.614.441 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.614.445 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.614.446 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.614.448 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.614.449 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.614.449 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.614.450 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.614.455 I llm_load_print_meta: n_ff             = 16384
0.00.614.456 I llm_load_print_meta: n_expert         = 0
0.00.614.457 I llm_load_print_meta: n_expert_used    = 0
0.00.614.457 I llm_load_print_meta: causal attn      = 1
0.00.614.457 I llm_load_print_meta: pooling type     = 0
0.00.614.458 I llm_load_print_meta: rope type        = 2
0.00.614.459 I llm_load_print_meta: rope scaling     = linear
0.00.614.460 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.614.461 I llm_load_print_meta: freq_scale_train = 1
0.00.614.462 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.614.462 I llm_load_print_meta: rope_finetuned   = unknown
0.00.614.462 I llm_load_print_meta: ssm_d_conv       = 0
0.00.614.463 I llm_load_print_meta: ssm_d_inner      = 0
0.00.614.468 I llm_load_print_meta: ssm_d_state      = 0
0.00.614.469 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.614.469 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.614.470 I llm_load_print_meta: model type       = 2B
0.00.614.481 I llm_load_print_meta: model ftype      = Q8_0
0.00.614.482 I llm_load_print_meta: model params     = 2.51 B
0.00.614.483 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.614.483 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.614.484 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.614.484 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.614.485 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.614.486 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.614.486 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.614.487 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.614.493 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.614.495 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.614.495 I llm_load_print_meta: max token length = 93
0.00.614.663 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.706.750 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.712.630 I llama_new_context_with_model: n_ctx      = 8192
0.00.712.638 I llama_new_context_with_model: n_batch    = 2048
0.00.712.638 I llama_new_context_with_model: n_ubatch   = 512
0.00.712.639 I llama_new_context_with_model: flash_attn = 0
0.00.712.642 I llama_new_context_with_model: freq_base  = 10000.0
0.00.712.643 I llama_new_context_with_model: freq_scale = 1
0.00.743.090 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.743.133 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.743.244 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.744.604 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.744.610 I llama_new_context_with_model: graph nodes  = 601
0.00.744.610 I llama_new_context_with_model: graph splits = 1
0.00.744.626 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.355.799 I main: llama threadpool init, n_threads = 4
0.01.355.813 I 
0.01.355.921 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.355.925 I 
0.01.356.093 I sampler seed: 1784808503
0.01.356.104 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.356.112 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.356.113 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.356.113 I 
 increadibly, and then she stumbled, catching her skirt on a loose thread.

**Questions:**

1. What is the meaning of the phrase "incre

0.14.831.271 I llama_perf_sampler_print:    sampling time =      49.55 ms /    33 runs   (    1.50 ms per token,   665.99 tokens per second)
0.14.831.274 I llama_perf_context_print:        load time =    1352.73 ms
0.14.831.292 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.831.294 I llama_perf_context_print:        eval time =   13392.44 ms /    32 runs   (  418.51 ms per token,     2.39 tokens per second)
0.14.831.295 I llama_perf_context_print:       total time =   13475.48 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.667 I build: 3878 (d5ed2b92) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.868 I main: llama backend init
0.00.002.805 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.885 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.101 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.193 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.205 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.206 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.211 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.215 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.216 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.217 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.219 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.220 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.227 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.228 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.229 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.230 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.231 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.683 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.719 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.500 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.509 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.511 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.512 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.513 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.515 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.516 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.519 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.521 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.522 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.522 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.271.524 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.532 I llama_model_loader: - type  f32:   37 tensors
0.00.271.537 I llama_model_loader: - type q8_0:  127 tensors
0.00.444.127 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.474.334 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.475.511 I llm_load_vocab: special tokens cache size = 5
0.00.578.379 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.578.445 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.578.449 I llm_load_print_meta: arch             = gemma
0.00.578.450 I llm_load_print_meta: vocab type       = SPM
0.00.578.451 I llm_load_print_meta: n_vocab          = 256000
0.00.578.453 I llm_load_print_meta: n_merges         = 0
0.00.578.453 I llm_load_print_meta: vocab_only       = 0
0.00.578.454 I llm_load_print_meta: n_ctx_train      = 8192
0.00.578.454 I llm_load_print_meta: n_embd           = 2048
0.00.578.455 I llm_load_print_meta: n_layer          = 18
0.00.578.519 I llm_load_print_meta: n_head           = 8
0.00.578.529 I llm_load_print_meta: n_head_kv        = 1
0.00.578.530 I llm_load_print_meta: n_rot            = 256
0.00.578.530 I llm_load_print_meta: n_swa            = 0
0.00.578.530 I llm_load_print_meta: n_embd_head_k    = 256
0.00.578.531 I llm_load_print_meta: n_embd_head_v    = 256
0.00.578.535 I llm_load_print_meta: n_gqa            = 8
0.00.578.540 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.578.544 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.578.546 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.578.547 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.578.548 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.578.549 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.578.549 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.578.555 I llm_load_print_meta: n_ff             = 16384
0.00.578.555 I llm_load_print_meta: n_expert         = 0
0.00.578.556 I llm_load_print_meta: n_expert_used    = 0
0.00.578.557 I llm_load_print_meta: causal attn      = 1
0.00.578.557 I llm_load_print_meta: pooling type     = 0
0.00.578.557 I llm_load_print_meta: rope type        = 2
0.00.578.558 I llm_load_print_meta: rope scaling     = linear
0.00.578.559 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.578.560 I llm_load_print_meta: freq_scale_train = 1
0.00.578.561 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.578.561 I llm_load_print_meta: rope_finetuned   = unknown
0.00.578.561 I llm_load_print_meta: ssm_d_conv       = 0
0.00.578.562 I llm_load_print_meta: ssm_d_inner      = 0
0.00.578.562 I llm_load_print_meta: ssm_d_state      = 0
0.00.578.563 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.578.564 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.578.564 I llm_load_print_meta: model type       = 2B
0.00.578.573 I llm_load_print_meta: model ftype      = Q8_0
0.00.578.574 I llm_load_print_meta: model params     = 2.51 B
0.00.578.574 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.578.575 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.578.576 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.578.576 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.578.576 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.578.577 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.578.578 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.578.578 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.578.585 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.578.586 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.578.587 I llm_load_print_meta: max token length = 93
0.00.578.752 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.656.562 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.656.573 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.656.574 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.656.575 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.656.575 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.656.576 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.662.368 I llama_new_context_with_model: n_ctx      = 8192
0.00.662.376 I llama_new_context_with_model: n_batch    = 2048
0.00.662.377 I llama_new_context_with_model: n_ubatch   = 512
0.00.662.378 I llama_new_context_with_model: flash_attn = 0
0.00.662.382 I llama_new_context_with_model: freq_base  = 10000.0
0.00.662.383 I llama_new_context_with_model: freq_scale = 1
0.00.693.399 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.693.445 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.693.558 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.694.898 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.694.904 I llama_new_context_with_model: graph nodes  = 601
0.00.694.904 I llama_new_context_with_model: graph splits = 1
0.00.694.920 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.325.906 I main: llama threadpool init, n_threads = 4
0.01.325.918 I 
0.01.326.023 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.326.027 I 
0.01.326.194 I sampler seed: 3385370245
0.01.326.205 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.326.211 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.326.212 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.326.212 I 
 increasities by merging the original text with the rewritten text.

**Original Text:**

> The government is a powerful institution that plays a vital role in maintaining

0.14.904.152 I llama_perf_sampler_print:    sampling time =      49.49 ms /    33 runs   (    1.50 ms per token,   666.81 tokens per second)
0.14.904.167 I llama_perf_context_print:        load time =    1322.90 ms
0.14.904.169 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.904.171 I llama_perf_context_print:        eval time =   13495.92 ms /    32 runs   (  421.75 ms per token,     2.37 tokens per second)
0.14.904.173 I llama_perf_context_print:       total time =   13578.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.690 I build: 3878 (d5ed2b92) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.894 I main: llama backend init
0.00.002.844 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.026.797 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.027.008 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.027.099 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.110 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.112 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.116 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.120 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.121 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.122 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.124 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.125 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.133 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.134 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.135 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.136 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.027.147 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.468 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.271.800 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.290.666 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.290.676 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.290.678 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.290.679 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.290.680 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.290.681 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.290.682 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.290.686 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.290.687 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.290.688 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.290.704 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.290.706 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.290.715 I llama_model_loader: - type  f32:   37 tensors
0.00.290.720 I llama_model_loader: - type q8_0:  127 tensors
0.00.471.943 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.796 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.853 I llm_load_vocab: special tokens cache size = 5
0.00.611.096 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.611.157 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.611.159 I llm_load_print_meta: arch             = gemma
0.00.611.160 I llm_load_print_meta: vocab type       = SPM
0.00.611.160 I llm_load_print_meta: n_vocab          = 256000
0.00.611.162 I llm_load_print_meta: n_merges         = 0
0.00.611.163 I llm_load_print_meta: vocab_only       = 0
0.00.611.163 I llm_load_print_meta: n_ctx_train      = 8192
0.00.611.164 I llm_load_print_meta: n_embd           = 2048
0.00.611.164 I llm_load_print_meta: n_layer          = 18
0.00.611.229 I llm_load_print_meta: n_head           = 8
0.00.611.236 I llm_load_print_meta: n_head_kv        = 1
0.00.611.236 I llm_load_print_meta: n_rot            = 256
0.00.611.237 I llm_load_print_meta: n_swa            = 0
0.00.611.237 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.237 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.242 I llm_load_print_meta: n_gqa            = 8
0.00.611.246 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.251 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.252 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.253 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.254 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.254 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.255 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.260 I llm_load_print_meta: n_ff             = 16384
0.00.611.261 I llm_load_print_meta: n_expert         = 0
0.00.611.261 I llm_load_print_meta: n_expert_used    = 0
0.00.611.261 I llm_load_print_meta: causal attn      = 1
0.00.611.261 I llm_load_print_meta: pooling type     = 0
0.00.611.262 I llm_load_print_meta: rope type        = 2
0.00.611.262 I llm_load_print_meta: rope scaling     = linear
0.00.611.263 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.264 I llm_load_print_meta: freq_scale_train = 1
0.00.611.264 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.265 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.265 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.265 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.266 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.266 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.266 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.267 I llm_load_print_meta: model type       = 2B
0.00.611.276 I llm_load_print_meta: model ftype      = Q8_0
0.00.611.277 I llm_load_print_meta: model params     = 2.51 B
0.00.611.277 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.611.278 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.279 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.279 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.279 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.280 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.281 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.281 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.288 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.289 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.290 I llm_load_print_meta: max token length = 93
0.00.611.453 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.683.082 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.683.094 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.688.810 I llama_new_context_with_model: n_ctx      = 8192
0.00.688.817 I llama_new_context_with_model: n_batch    = 2048
0.00.688.818 I llama_new_context_with_model: n_ubatch   = 512
0.00.688.818 I llama_new_context_with_model: flash_attn = 0
0.00.688.821 I llama_new_context_with_model: freq_base  = 10000.0
0.00.688.822 I llama_new_context_with_model: freq_scale = 1
0.00.718.620 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.718.663 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.718.775 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.720.182 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.720.188 I llama_new_context_with_model: graph nodes  = 601
0.00.720.188 I llama_new_context_with_model: graph splits = 1
0.00.720.205 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.331.694 I main: llama threadpool init, n_threads = 4
0.01.331.707 I 
0.01.331.821 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.331.826 I 
0.01.332.005 I sampler seed: 229729859
0.01.332.020 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.332.031 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.332.032 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.332.033 I 
 increably. [end of text]


0.03.036.848 I llama_perf_sampler_print:    sampling time =       6.28 ms /     5 runs   (    1.26 ms per token,   796.31 tokens per second)
0.03.036.872 I llama_perf_context_print:        load time =    1328.66 ms
0.03.036.873 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.036.875 I llama_perf_context_print:        eval time =    1693.01 ms /     4 runs   (  423.25 ms per token,     2.36 tokens per second)
0.03.036.876 I llama_perf_context_print:       total time =    1705.16 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m51.560s
user	2m38.200s
sys	0m9.631s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3878 (d5ed2b92)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200062.64 ms
main:    total time = 200062.64 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.689 I build: 3878 (d5ed2b92) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.895 I main: llama backend init
0.00.002.874 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.040 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.257 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.351 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.363 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.364 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.369 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.370 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.371 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.373 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.374 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.375 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.382 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.383 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.384 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.385 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.386 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.623 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.273.430 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.292.218 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.292.228 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.292.229 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.292.230 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.292.231 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.292.233 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.292.234 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.292.238 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.292.239 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.292.240 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.292.241 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.292.242 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.292.251 I llama_model_loader: - type  f32:   37 tensors
0.00.292.255 I llama_model_loader: - type q4_K:  108 tensors
0.00.292.255 I llama_model_loader: - type q6_K:   19 tensors
0.00.468.818 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.058 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.499.109 I llm_load_vocab: special tokens cache size = 5
0.00.616.287 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.355 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.361 I llm_load_print_meta: arch             = gemma
0.00.616.361 I llm_load_print_meta: vocab type       = SPM
0.00.616.363 I llm_load_print_meta: n_vocab          = 256000
0.00.616.366 I llm_load_print_meta: n_merges         = 0
0.00.616.387 I llm_load_print_meta: vocab_only       = 0
0.00.616.388 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.389 I llm_load_print_meta: n_embd           = 2048
0.00.616.389 I llm_load_print_meta: n_layer          = 18
0.00.616.456 I llm_load_print_meta: n_head           = 8
0.00.616.465 I llm_load_print_meta: n_head_kv        = 1
0.00.616.466 I llm_load_print_meta: n_rot            = 256
0.00.616.466 I llm_load_print_meta: n_swa            = 0
0.00.616.466 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.475 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.480 I llm_load_print_meta: n_gqa            = 8
0.00.616.485 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.490 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.492 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.494 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.494 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.495 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.495 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.500 I llm_load_print_meta: n_ff             = 16384
0.00.616.509 I llm_load_print_meta: n_expert         = 0
0.00.616.510 I llm_load_print_meta: n_expert_used    = 0
0.00.616.510 I llm_load_print_meta: causal attn      = 1
0.00.616.511 I llm_load_print_meta: pooling type     = 0
0.00.616.511 I llm_load_print_meta: rope type        = 2
0.00.616.511 I llm_load_print_meta: rope scaling     = linear
0.00.616.513 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.514 I llm_load_print_meta: freq_scale_train = 1
0.00.616.514 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.514 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.515 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.522 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.527 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.528 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.528 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.529 I llm_load_print_meta: model type       = 2B
0.00.616.539 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.616.540 I llm_load_print_meta: model params     = 2.51 B
0.00.616.541 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.616.541 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.542 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.543 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.543 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.552 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.553 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.554 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.560 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.561 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.562 I llm_load_print_meta: max token length = 93
0.00.616.727 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.676.796 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.676.808 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.676.809 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.676.809 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.676.810 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.676.811 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.683.376 I llama_new_context_with_model: n_ctx      = 8192
0.00.683.383 I llama_new_context_with_model: n_batch    = 2048
0.00.683.384 I llama_new_context_with_model: n_ubatch   = 512
0.00.683.384 I llama_new_context_with_model: flash_attn = 0
0.00.683.388 I llama_new_context_with_model: freq_base  = 10000.0
0.00.683.389 I llama_new_context_with_model: freq_scale = 1
0.00.714.538 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.714.581 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.714.716 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.716.097 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.716.102 I llama_new_context_with_model: graph nodes  = 601
0.00.716.103 I llama_new_context_with_model: graph splits = 1
0.00.716.119 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.295.304 I main: llama threadpool init, n_threads = 4
0.01.295.316 I 
0.01.295.423 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.295.427 I 
0.01.295.585 I sampler seed: 3658262253
0.01.295.596 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.295.602 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.295.603 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.295.603 I 
 fufilling sounds as the sun dips below the horizon.

**Answer:** Birds singing.

The provided text suggests that the sound of birds singing is heard as

0.12.286.988 I llama_perf_sampler_print:    sampling time =      49.23 ms /    33 runs   (    1.49 ms per token,   670.27 tokens per second)
0.12.286.991 I llama_perf_context_print:        load time =    1292.25 ms
0.12.286.993 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.286.994 I llama_perf_context_print:        eval time =   10909.88 ms /    32 runs   (  340.93 ms per token,     2.93 tokens per second)
0.12.286.995 I llama_perf_context_print:       total time =   10991.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3878 (d5ed2b92)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200030.47 ms
main:    total time = 200030.47 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.641 I build: 3878 (d5ed2b92) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.861 I main: llama backend init
0.00.002.802 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.925 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.034 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.050 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.054 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.059 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.060 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.061 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.062 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.063 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.065 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.073 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.075 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.076 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.077 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.078 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.390 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.271 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.057 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.066 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.068 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.069 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.070 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.071 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.072 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.076 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.077 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.085 I llama_model_loader: - type  f32:   37 tensors
0.00.271.089 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.090 I llama_model_loader: - type q6_K:   19 tensors
0.00.452.419 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.479.997 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.481.092 I llm_load_vocab: special tokens cache size = 5
0.00.576.433 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.576.498 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.576.502 I llm_load_print_meta: arch             = gemma
0.00.576.502 I llm_load_print_meta: vocab type       = SPM
0.00.576.503 I llm_load_print_meta: n_vocab          = 256000
0.00.576.505 I llm_load_print_meta: n_merges         = 0
0.00.576.506 I llm_load_print_meta: vocab_only       = 0
0.00.576.506 I llm_load_print_meta: n_ctx_train      = 8192
0.00.576.507 I llm_load_print_meta: n_embd           = 2048
0.00.576.507 I llm_load_print_meta: n_layer          = 18
0.00.576.574 I llm_load_print_meta: n_head           = 8
0.00.576.584 I llm_load_print_meta: n_head_kv        = 1
0.00.576.584 I llm_load_print_meta: n_rot            = 256
0.00.576.585 I llm_load_print_meta: n_swa            = 0
0.00.576.586 I llm_load_print_meta: n_embd_head_k    = 256
0.00.576.586 I llm_load_print_meta: n_embd_head_v    = 256
0.00.576.591 I llm_load_print_meta: n_gqa            = 8
0.00.576.595 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.576.601 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.576.602 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.576.603 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.576.603 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.576.604 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.576.605 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.576.611 I llm_load_print_meta: n_ff             = 16384
0.00.576.611 I llm_load_print_meta: n_expert         = 0
0.00.576.611 I llm_load_print_meta: n_expert_used    = 0
0.00.576.612 I llm_load_print_meta: causal attn      = 1
0.00.576.613 I llm_load_print_meta: pooling type     = 0
0.00.576.613 I llm_load_print_meta: rope type        = 2
0.00.576.613 I llm_load_print_meta: rope scaling     = linear
0.00.576.616 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.576.617 I llm_load_print_meta: freq_scale_train = 1
0.00.576.617 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.576.617 I llm_load_print_meta: rope_finetuned   = unknown
0.00.576.617 I llm_load_print_meta: ssm_d_conv       = 0
0.00.576.618 I llm_load_print_meta: ssm_d_inner      = 0
0.00.576.630 I llm_load_print_meta: ssm_d_state      = 0
0.00.576.631 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.576.631 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.576.632 I llm_load_print_meta: model type       = 2B
0.00.576.641 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.576.642 I llm_load_print_meta: model params     = 2.51 B
0.00.576.643 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.576.643 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.576.655 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.576.657 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.576.657 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.576.658 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.576.658 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.576.659 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.576.666 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.576.668 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.576.669 I llm_load_print_meta: max token length = 93
0.00.576.857 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.635.240 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.641.045 I llama_new_context_with_model: n_ctx      = 8192
0.00.641.052 I llama_new_context_with_model: n_batch    = 2048
0.00.641.052 I llama_new_context_with_model: n_ubatch   = 512
0.00.641.053 I llama_new_context_with_model: flash_attn = 0
0.00.641.056 I llama_new_context_with_model: freq_base  = 10000.0
0.00.641.057 I llama_new_context_with_model: freq_scale = 1
0.00.673.419 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.673.466 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.673.590 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.675.007 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.675.014 I llama_new_context_with_model: graph nodes  = 601
0.00.675.014 I llama_new_context_with_model: graph splits = 1
0.00.675.030 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.252.847 I main: llama threadpool init, n_threads = 4
0.01.252.860 I 
0.01.252.973 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.252.977 I 
0.01.253.142 I sampler seed: 3600094886
0.01.253.153 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.253.159 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.253.160 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.253.163 I 
 seconded

**Assistant**

I am unable to access or process external websites or links. Therefore, I am unable to provide assistance in this matter. [end of text]


0.12.242.132 I llama_perf_sampler_print:    sampling time =      49.38 ms /    33 runs   (    1.50 ms per token,   668.34 tokens per second)
0.12.242.155 I llama_perf_context_print:        load time =    1249.86 ms
0.12.242.157 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.242.159 I llama_perf_context_print:        eval time =   10905.94 ms /    32 runs   (  340.81 ms per token,     2.93 tokens per second)
0.12.242.160 I llama_perf_context_print:       total time =   10989.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m7.591s
user	50m22.303s
sys	0m6.608s
