+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.677 I build: 4039 (5c333e01) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.871 I main: llama backend init
0.00.001.123 I main: load the model and apply lora adapter, if any
0.00.023.471 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.483 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.575 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.587 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.591 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.597 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.599 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.608 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.611 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.613 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.614 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.621 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.622 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.623 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.632 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.636 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.157.813 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.683 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.932 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.941 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.942 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.943 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.944 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.946 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.947 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.951 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.952 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.953 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.954 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.274.955 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.963 I llama_model_loader: - type  f32:   37 tensors
0.00.274.965 I llama_model_loader: - type q8_0:  127 tensors
0.00.453.712 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.552 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.482 I llm_load_vocab: special tokens cache size = 5
0.00.613.122 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.613.197 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.613.198 I llm_load_print_meta: arch             = gemma
0.00.613.199 I llm_load_print_meta: vocab type       = SPM
0.00.613.199 I llm_load_print_meta: n_vocab          = 256000
0.00.613.202 I llm_load_print_meta: n_merges         = 0
0.00.613.202 I llm_load_print_meta: vocab_only       = 0
0.00.613.203 I llm_load_print_meta: n_ctx_train      = 8192
0.00.613.203 I llm_load_print_meta: n_embd           = 2048
0.00.613.203 I llm_load_print_meta: n_layer          = 18
0.00.613.273 I llm_load_print_meta: n_head           = 8
0.00.613.280 I llm_load_print_meta: n_head_kv        = 1
0.00.613.280 I llm_load_print_meta: n_rot            = 256
0.00.613.282 I llm_load_print_meta: n_swa            = 0
0.00.613.283 I llm_load_print_meta: n_embd_head_k    = 256
0.00.613.298 I llm_load_print_meta: n_embd_head_v    = 256
0.00.613.305 I llm_load_print_meta: n_gqa            = 8
0.00.613.309 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.613.314 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.613.316 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.613.317 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.613.318 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.613.318 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.613.334 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.613.342 I llm_load_print_meta: n_ff             = 16384
0.00.613.343 I llm_load_print_meta: n_expert         = 0
0.00.613.343 I llm_load_print_meta: n_expert_used    = 0
0.00.613.343 I llm_load_print_meta: causal attn      = 1
0.00.613.344 I llm_load_print_meta: pooling type     = 0
0.00.613.344 I llm_load_print_meta: rope type        = 2
0.00.613.345 I llm_load_print_meta: rope scaling     = linear
0.00.613.355 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.613.356 I llm_load_print_meta: freq_scale_train = 1
0.00.613.356 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.613.357 I llm_load_print_meta: rope_finetuned   = unknown
0.00.613.358 I llm_load_print_meta: ssm_d_conv       = 0
0.00.613.358 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.358 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.359 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.359 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.360 I llm_load_print_meta: model type       = 2B
0.00.613.361 I llm_load_print_meta: model ftype      = Q8_0
0.00.613.362 I llm_load_print_meta: model params     = 2.51 B
0.00.613.372 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.613.372 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.373 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.374 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.374 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.375 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.376 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.376 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.383 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.613.385 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.613.385 I llm_load_print_meta: max token length = 93
0.00.715.866 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.715.876 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.715.877 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.715.878 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.715.878 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.715.879 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.721.741 I llama_new_context_with_model: n_seq_max     = 1
0.00.721.748 I llama_new_context_with_model: n_ctx         = 4096
0.00.721.749 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.721.749 I llama_new_context_with_model: n_batch       = 2048
0.00.721.749 I llama_new_context_with_model: n_ubatch      = 512
0.00.721.750 I llama_new_context_with_model: flash_attn    = 0
0.00.721.752 I llama_new_context_with_model: freq_base     = 10000.0
0.00.721.753 I llama_new_context_with_model: freq_scale    = 1
0.00.721.754 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.738.684 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.738.725 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.738.851 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.741.418 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.741.422 I llama_new_context_with_model: graph nodes  = 601
0.00.741.422 I llama_new_context_with_model: graph splits = 1
0.00.741.448 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.347.143 I main: llama threadpool init, n_threads = 4
0.01.347.156 I 
0.01.347.266 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.347.267 I 
0.01.347.499 I sampler seed: 2819015178
0.01.347.513 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.347.520 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.347.521 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.347.521 I 
 increasities in the text.

I am unable to provide a response that includes sexually suggestive or inappropriate content. [end of text]


0.11.000.233 I llama_perf_sampler_print:    sampling time =      35.46 ms /    24 runs   (    1.48 ms per token,   676.80 tokens per second)
0.11.000.238 I llama_perf_context_print:        load time =    1345.92 ms
0.11.000.240 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.000.242 I llama_perf_context_print:        eval time =    9587.41 ms /    23 runs   (  416.84 ms per token,     2.40 tokens per second)
0.11.000.243 I llama_perf_context_print:       total time =    9653.10 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.651 I build: 4039 (5c333e01) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.870 I main: llama backend init
0.00.001.139 I main: load the model and apply lora adapter, if any
0.00.023.640 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.750 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.765 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.768 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.773 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.779 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.780 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.782 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.784 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.786 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.795 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.798 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.800 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.802 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.803 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.158.707 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.700 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.276.045 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.276.058 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.276.060 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.276.061 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.276.062 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.276.063 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.276.064 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.276.069 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.276.070 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.276.071 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.276.072 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.276.073 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.276.081 I llama_model_loader: - type  f32:   37 tensors
0.00.276.084 I llama_model_loader: - type q8_0:  127 tensors
0.00.467.521 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.528.901 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.529.905 I llm_load_vocab: special tokens cache size = 5
0.00.629.609 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.629.681 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.629.681 I llm_load_print_meta: arch             = gemma
0.00.629.682 I llm_load_print_meta: vocab type       = SPM
0.00.629.684 I llm_load_print_meta: n_vocab          = 256000
0.00.629.686 I llm_load_print_meta: n_merges         = 0
0.00.629.687 I llm_load_print_meta: vocab_only       = 0
0.00.629.687 I llm_load_print_meta: n_ctx_train      = 8192
0.00.629.688 I llm_load_print_meta: n_embd           = 2048
0.00.629.688 I llm_load_print_meta: n_layer          = 18
0.00.629.753 I llm_load_print_meta: n_head           = 8
0.00.629.761 I llm_load_print_meta: n_head_kv        = 1
0.00.629.762 I llm_load_print_meta: n_rot            = 256
0.00.629.762 I llm_load_print_meta: n_swa            = 0
0.00.629.763 I llm_load_print_meta: n_embd_head_k    = 256
0.00.629.763 I llm_load_print_meta: n_embd_head_v    = 256
0.00.629.768 I llm_load_print_meta: n_gqa            = 8
0.00.629.774 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.629.781 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.629.783 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.629.785 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.629.786 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.629.793 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.629.794 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.629.801 I llm_load_print_meta: n_ff             = 16384
0.00.629.802 I llm_load_print_meta: n_expert         = 0
0.00.629.805 I llm_load_print_meta: n_expert_used    = 0
0.00.629.805 I llm_load_print_meta: causal attn      = 1
0.00.629.806 I llm_load_print_meta: pooling type     = 0
0.00.629.807 I llm_load_print_meta: rope type        = 2
0.00.629.807 I llm_load_print_meta: rope scaling     = linear
0.00.629.809 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.629.810 I llm_load_print_meta: freq_scale_train = 1
0.00.629.813 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.629.813 I llm_load_print_meta: rope_finetuned   = unknown
0.00.629.814 I llm_load_print_meta: ssm_d_conv       = 0
0.00.629.815 I llm_load_print_meta: ssm_d_inner      = 0
0.00.629.815 I llm_load_print_meta: ssm_d_state      = 0
0.00.629.815 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.629.816 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.629.817 I llm_load_print_meta: model type       = 2B
0.00.629.819 I llm_load_print_meta: model ftype      = Q8_0
0.00.629.820 I llm_load_print_meta: model params     = 2.51 B
0.00.629.832 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.629.833 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.629.837 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.629.837 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.629.838 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.629.839 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.629.839 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.629.840 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.629.847 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.629.849 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.629.850 I llm_load_print_meta: max token length = 93
0.00.728.642 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.734.826 I llama_new_context_with_model: n_seq_max     = 1
0.00.734.832 I llama_new_context_with_model: n_ctx         = 4096
0.00.734.833 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.734.833 I llama_new_context_with_model: n_batch       = 2048
0.00.734.833 I llama_new_context_with_model: n_ubatch      = 512
0.00.734.834 I llama_new_context_with_model: flash_attn    = 0
0.00.734.836 I llama_new_context_with_model: freq_base     = 10000.0
0.00.734.837 I llama_new_context_with_model: freq_scale    = 1
0.00.734.837 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.751.607 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.751.649 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.751.769 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.754.268 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.754.272 I llama_new_context_with_model: graph nodes  = 601
0.00.754.272 I llama_new_context_with_model: graph splits = 1
0.00.754.299 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.370.525 I main: llama threadpool init, n_threads = 4
0.01.370.538 I 
0.01.370.667 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.370.671 I 
0.01.370.908 I sampler seed: 3085508158
0.01.370.921 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.370.930 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.370.930 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.370.931 I 
 increasities, a fiery showdown between the gods of chaos and creation. [end of text]


0.07.754.108 I llama_perf_sampler_print:    sampling time =      23.19 ms /    16 runs   (    1.45 ms per token,   690.04 tokens per second)
0.07.754.111 I llama_perf_context_print:        load time =    1369.28 ms
0.07.754.113 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.754.114 I llama_perf_context_print:        eval time =    6340.39 ms /    15 runs   (  422.69 ms per token,     2.37 tokens per second)
0.07.754.115 I llama_perf_context_print:       total time =    6383.59 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.653 I build: 4039 (5c333e01) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.854 I main: llama backend init
0.00.001.114 I main: load the model and apply lora adapter, if any
0.00.024.007 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.018 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.114 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.127 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.129 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.134 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.138 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.139 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.140 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.141 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.142 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.150 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.151 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.153 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.154 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.156 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.158.909 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.922 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.276.168 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.276.177 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.276.178 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.276.179 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.276.181 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.276.182 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.276.184 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.276.188 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.276.189 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.276.190 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.276.191 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.276.193 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.276.200 I llama_model_loader: - type  f32:   37 tensors
0.00.276.203 I llama_model_loader: - type q8_0:  127 tensors
0.00.458.540 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.526.467 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.527.395 I llm_load_vocab: special tokens cache size = 5
0.00.625.886 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.625.956 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.625.957 I llm_load_print_meta: arch             = gemma
0.00.625.958 I llm_load_print_meta: vocab type       = SPM
0.00.625.959 I llm_load_print_meta: n_vocab          = 256000
0.00.625.962 I llm_load_print_meta: n_merges         = 0
0.00.625.962 I llm_load_print_meta: vocab_only       = 0
0.00.625.963 I llm_load_print_meta: n_ctx_train      = 8192
0.00.625.963 I llm_load_print_meta: n_embd           = 2048
0.00.625.964 I llm_load_print_meta: n_layer          = 18
0.00.626.028 I llm_load_print_meta: n_head           = 8
0.00.626.036 I llm_load_print_meta: n_head_kv        = 1
0.00.626.040 I llm_load_print_meta: n_rot            = 256
0.00.626.040 I llm_load_print_meta: n_swa            = 0
0.00.626.041 I llm_load_print_meta: n_embd_head_k    = 256
0.00.626.041 I llm_load_print_meta: n_embd_head_v    = 256
0.00.626.046 I llm_load_print_meta: n_gqa            = 8
0.00.626.053 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.626.058 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.626.060 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.626.061 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.626.062 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.626.062 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.626.064 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.626.069 I llm_load_print_meta: n_ff             = 16384
0.00.626.069 I llm_load_print_meta: n_expert         = 0
0.00.626.070 I llm_load_print_meta: n_expert_used    = 0
0.00.626.080 I llm_load_print_meta: causal attn      = 1
0.00.626.080 I llm_load_print_meta: pooling type     = 0
0.00.626.081 I llm_load_print_meta: rope type        = 2
0.00.626.081 I llm_load_print_meta: rope scaling     = linear
0.00.626.083 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.626.083 I llm_load_print_meta: freq_scale_train = 1
0.00.626.084 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.626.084 I llm_load_print_meta: rope_finetuned   = unknown
0.00.626.084 I llm_load_print_meta: ssm_d_conv       = 0
0.00.626.086 I llm_load_print_meta: ssm_d_inner      = 0
0.00.626.086 I llm_load_print_meta: ssm_d_state      = 0
0.00.626.087 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.626.087 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.626.088 I llm_load_print_meta: model type       = 2B
0.00.626.089 I llm_load_print_meta: model ftype      = Q8_0
0.00.626.090 I llm_load_print_meta: model params     = 2.51 B
0.00.626.100 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.626.100 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.626.101 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.626.114 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.626.117 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.626.118 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.626.119 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.626.119 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.626.126 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.626.127 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.626.128 I llm_load_print_meta: max token length = 93
0.00.719.068 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.719.078 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.719.079 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.719.080 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.719.081 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.719.082 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.724.906 I llama_new_context_with_model: n_seq_max     = 1
0.00.724.913 I llama_new_context_with_model: n_ctx         = 4096
0.00.724.914 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.724.914 I llama_new_context_with_model: n_batch       = 2048
0.00.724.915 I llama_new_context_with_model: n_ubatch      = 512
0.00.724.915 I llama_new_context_with_model: flash_attn    = 0
0.00.724.917 I llama_new_context_with_model: freq_base     = 10000.0
0.00.724.918 I llama_new_context_with_model: freq_scale    = 1
0.00.724.919 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.741.545 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.741.587 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.741.712 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.744.339 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.744.342 I llama_new_context_with_model: graph nodes  = 601
0.00.744.343 I llama_new_context_with_model: graph splits = 1
0.00.744.370 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.388.718 I main: llama threadpool init, n_threads = 4
0.01.388.731 I 
0.01.388.837 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.388.840 I 
0.01.389.075 I sampler seed: 2955788266
0.01.389.087 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.389.094 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.389.097 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.389.097 I 
 increably. [end of text]


0.03.069.364 I llama_perf_sampler_print:    sampling time =       6.24 ms /     5 runs   (    1.25 ms per token,   801.92 tokens per second)
0.03.069.367 I llama_perf_context_print:        load time =    1387.51 ms
0.03.069.368 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.069.370 I llama_perf_context_print:        eval time =    1667.52 ms /     4 runs   (  416.88 ms per token,     2.40 tokens per second)
0.03.069.371 I llama_perf_context_print:       total time =    1680.65 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.656 I build: 4039 (5c333e01) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.868 I main: llama backend init
0.00.001.139 I main: load the model and apply lora adapter, if any
0.00.023.658 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.667 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.765 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.778 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.780 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.787 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.792 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.794 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.796 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.798 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.800 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.809 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.814 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.816 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.818 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.820 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.157.833 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.578 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.794 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.803 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.804 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.805 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.806 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.808 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.809 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.812 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.813 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.814 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.815 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.274.817 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.824 I llama_model_loader: - type  f32:   37 tensors
0.00.274.826 I llama_model_loader: - type q8_0:  127 tensors
0.00.480.428 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.547.396 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.548.389 I llm_load_vocab: special tokens cache size = 5
0.00.646.539 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.646.610 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.646.611 I llm_load_print_meta: arch             = gemma
0.00.646.612 I llm_load_print_meta: vocab type       = SPM
0.00.646.613 I llm_load_print_meta: n_vocab          = 256000
0.00.646.615 I llm_load_print_meta: n_merges         = 0
0.00.646.616 I llm_load_print_meta: vocab_only       = 0
0.00.646.616 I llm_load_print_meta: n_ctx_train      = 8192
0.00.646.617 I llm_load_print_meta: n_embd           = 2048
0.00.646.617 I llm_load_print_meta: n_layer          = 18
0.00.646.680 I llm_load_print_meta: n_head           = 8
0.00.646.688 I llm_load_print_meta: n_head_kv        = 1
0.00.646.689 I llm_load_print_meta: n_rot            = 256
0.00.646.689 I llm_load_print_meta: n_swa            = 0
0.00.646.689 I llm_load_print_meta: n_embd_head_k    = 256
0.00.646.690 I llm_load_print_meta: n_embd_head_v    = 256
0.00.646.696 I llm_load_print_meta: n_gqa            = 8
0.00.646.701 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.646.706 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.646.708 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.646.709 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.646.710 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.646.710 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.646.710 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.646.716 I llm_load_print_meta: n_ff             = 16384
0.00.646.717 I llm_load_print_meta: n_expert         = 0
0.00.646.717 I llm_load_print_meta: n_expert_used    = 0
0.00.646.718 I llm_load_print_meta: causal attn      = 1
0.00.646.719 I llm_load_print_meta: pooling type     = 0
0.00.646.720 I llm_load_print_meta: rope type        = 2
0.00.646.721 I llm_load_print_meta: rope scaling     = linear
0.00.646.724 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.646.725 I llm_load_print_meta: freq_scale_train = 1
0.00.646.726 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.646.726 I llm_load_print_meta: rope_finetuned   = unknown
0.00.646.727 I llm_load_print_meta: ssm_d_conv       = 0
0.00.646.732 I llm_load_print_meta: ssm_d_inner      = 0
0.00.646.733 I llm_load_print_meta: ssm_d_state      = 0
0.00.646.733 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.646.734 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.646.746 I llm_load_print_meta: model type       = 2B
0.00.646.750 I llm_load_print_meta: model ftype      = Q8_0
0.00.646.751 I llm_load_print_meta: model params     = 2.51 B
0.00.646.763 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.646.763 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.646.764 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.646.765 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.646.767 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.646.767 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.646.768 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.646.769 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.646.776 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.646.778 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.646.779 I llm_load_print_meta: max token length = 93
0.00.718.987 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.719.002 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.725.167 I llama_new_context_with_model: n_seq_max     = 1
0.00.725.174 I llama_new_context_with_model: n_ctx         = 4096
0.00.725.175 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.725.175 I llama_new_context_with_model: n_batch       = 2048
0.00.725.175 I llama_new_context_with_model: n_ubatch      = 512
0.00.725.176 I llama_new_context_with_model: flash_attn    = 0
0.00.725.178 I llama_new_context_with_model: freq_base     = 10000.0
0.00.725.179 I llama_new_context_with_model: freq_scale    = 1
0.00.725.179 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.741.746 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.741.786 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.741.913 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.744.527 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.744.532 I llama_new_context_with_model: graph nodes  = 601
0.00.744.532 I llama_new_context_with_model: graph splits = 1
0.00.744.559 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.351.356 I main: llama threadpool init, n_threads = 4
0.01.351.367 I 
0.01.351.492 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.351.496 I 
0.01.351.737 I sampler seed: 251092572
0.01.351.750 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.351.759 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.351.759 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.351.760 I 
 increasively and then pauses to allow the user to respond.
```python
print("Hello, world!")

# Get user input
name = input("

0.14.798.583 I llama_perf_sampler_print:    sampling time =      49.20 ms /    33 runs   (    1.49 ms per token,   670.79 tokens per second)
0.14.798.587 I llama_perf_context_print:        load time =    1350.11 ms
0.14.798.588 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.798.612 I llama_perf_context_print:        eval time =   13357.38 ms /    32 runs   (  417.42 ms per token,     2.40 tokens per second)
0.14.798.613 I llama_perf_context_print:       total time =   13447.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m46.340s
user	2m17.478s
sys	0m9.508s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4039 (5c333e01)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199613.39 ms
main:    total time = 199613.39 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.653 I build: 4039 (5c333e01) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.001.126 I main: load the model and apply lora adapter, if any
0.00.023.471 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.483 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.578 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.590 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.591 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.596 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.599 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.601 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.602 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.603 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.604 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.611 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.620 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.622 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.624 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.625 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.158.715 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.258.133 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.276.414 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.276.423 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.276.425 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.276.426 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.276.427 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.276.428 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.276.429 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.276.433 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.276.434 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.276.435 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.276.436 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.276.437 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.276.445 I llama_model_loader: - type  f32:   37 tensors
0.00.276.448 I llama_model_loader: - type q4_K:  108 tensors
0.00.276.449 I llama_model_loader: - type q6_K:   19 tensors
0.00.471.473 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.542.327 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.543.318 I llm_load_vocab: special tokens cache size = 5
0.00.641.676 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.641.749 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.641.750 I llm_load_print_meta: arch             = gemma
0.00.641.751 I llm_load_print_meta: vocab type       = SPM
0.00.641.751 I llm_load_print_meta: n_vocab          = 256000
0.00.641.754 I llm_load_print_meta: n_merges         = 0
0.00.641.754 I llm_load_print_meta: vocab_only       = 0
0.00.641.755 I llm_load_print_meta: n_ctx_train      = 8192
0.00.641.755 I llm_load_print_meta: n_embd           = 2048
0.00.641.756 I llm_load_print_meta: n_layer          = 18
0.00.641.820 I llm_load_print_meta: n_head           = 8
0.00.641.827 I llm_load_print_meta: n_head_kv        = 1
0.00.641.828 I llm_load_print_meta: n_rot            = 256
0.00.641.829 I llm_load_print_meta: n_swa            = 0
0.00.641.829 I llm_load_print_meta: n_embd_head_k    = 256
0.00.641.830 I llm_load_print_meta: n_embd_head_v    = 256
0.00.641.854 I llm_load_print_meta: n_gqa            = 8
0.00.641.860 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.641.865 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.641.866 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.641.868 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.641.868 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.641.869 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.641.869 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.641.874 I llm_load_print_meta: n_ff             = 16384
0.00.641.875 I llm_load_print_meta: n_expert         = 0
0.00.641.876 I llm_load_print_meta: n_expert_used    = 0
0.00.641.877 I llm_load_print_meta: causal attn      = 1
0.00.641.877 I llm_load_print_meta: pooling type     = 0
0.00.641.877 I llm_load_print_meta: rope type        = 2
0.00.641.878 I llm_load_print_meta: rope scaling     = linear
0.00.641.879 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.641.880 I llm_load_print_meta: freq_scale_train = 1
0.00.641.881 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.641.881 I llm_load_print_meta: rope_finetuned   = unknown
0.00.641.882 I llm_load_print_meta: ssm_d_conv       = 0
0.00.641.882 I llm_load_print_meta: ssm_d_inner      = 0
0.00.641.883 I llm_load_print_meta: ssm_d_state      = 0
0.00.641.883 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.641.884 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.641.885 I llm_load_print_meta: model type       = 2B
0.00.641.886 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.641.887 I llm_load_print_meta: model params     = 2.51 B
0.00.641.897 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.641.897 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.641.898 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.641.906 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.641.907 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.641.908 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.641.909 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.641.909 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.641.915 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.641.917 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.641.917 I llm_load_print_meta: max token length = 93
0.00.704.405 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.704.417 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.704.418 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.704.419 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.704.420 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.704.421 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.710.251 I llama_new_context_with_model: n_seq_max     = 1
0.00.710.259 I llama_new_context_with_model: n_ctx         = 4096
0.00.710.259 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.710.259 I llama_new_context_with_model: n_batch       = 2048
0.00.710.260 I llama_new_context_with_model: n_ubatch      = 512
0.00.710.261 I llama_new_context_with_model: flash_attn    = 0
0.00.710.263 I llama_new_context_with_model: freq_base     = 10000.0
0.00.710.264 I llama_new_context_with_model: freq_scale    = 1
0.00.710.265 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.726.620 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.726.658 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.726.784 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.729.343 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.729.347 I llama_new_context_with_model: graph nodes  = 601
0.00.729.348 I llama_new_context_with_model: graph splits = 1
0.00.729.373 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.298.778 I main: llama threadpool init, n_threads = 4
0.01.298.790 I 
0.01.298.897 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.298.901 I 
0.01.299.125 I sampler seed: 3771032378
0.01.299.138 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.299.144 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.299.148 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.299.148 I 
 squaRE

## SQUAREE: A Dataset for Question Answering

**Overview:**

SQUAREE is a dataset designed to assess the quality of responses to

0.12.124.756 I llama_perf_sampler_print:    sampling time =      49.17 ms /    33 runs   (    1.49 ms per token,   671.17 tokens per second)
0.12.124.759 I llama_perf_context_print:        load time =    1297.55 ms
0.12.124.760 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.124.762 I llama_perf_context_print:        eval time =   10735.99 ms /    32 runs   (  335.50 ms per token,     2.98 tokens per second)
0.12.124.762 I llama_perf_context_print:       total time =   10825.99 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4039 (5c333e01)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199706.48 ms
main:    total time = 199706.48 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.625 I build: 4039 (5c333e01) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.849 I main: llama backend init
0.00.001.107 I main: load the model and apply lora adapter, if any
0.00.023.275 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.377 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.390 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.392 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.396 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.399 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.401 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.402 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.403 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.404 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.411 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.412 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.413 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.414 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.416 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.157.798 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.872 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.152 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.162 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.163 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.164 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.166 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.167 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.168 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.172 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.173 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.183 I llama_model_loader: - type  f32:   37 tensors
0.00.275.186 I llama_model_loader: - type q4_K:  108 tensors
0.00.275.187 I llama_model_loader: - type q6_K:   19 tensors
0.00.470.340 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.538.692 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.539.710 I llm_load_vocab: special tokens cache size = 5
0.00.637.359 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.637.434 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.637.435 I llm_load_print_meta: arch             = gemma
0.00.637.436 I llm_load_print_meta: vocab type       = SPM
0.00.637.437 I llm_load_print_meta: n_vocab          = 256000
0.00.637.439 I llm_load_print_meta: n_merges         = 0
0.00.637.440 I llm_load_print_meta: vocab_only       = 0
0.00.637.440 I llm_load_print_meta: n_ctx_train      = 8192
0.00.637.441 I llm_load_print_meta: n_embd           = 2048
0.00.637.441 I llm_load_print_meta: n_layer          = 18
0.00.637.509 I llm_load_print_meta: n_head           = 8
0.00.637.530 I llm_load_print_meta: n_head_kv        = 1
0.00.637.531 I llm_load_print_meta: n_rot            = 256
0.00.637.532 I llm_load_print_meta: n_swa            = 0
0.00.637.532 I llm_load_print_meta: n_embd_head_k    = 256
0.00.637.533 I llm_load_print_meta: n_embd_head_v    = 256
0.00.637.538 I llm_load_print_meta: n_gqa            = 8
0.00.637.542 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.637.548 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.637.549 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.637.551 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.637.551 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.637.552 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.637.552 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.637.558 I llm_load_print_meta: n_ff             = 16384
0.00.637.558 I llm_load_print_meta: n_expert         = 0
0.00.637.559 I llm_load_print_meta: n_expert_used    = 0
0.00.637.559 I llm_load_print_meta: causal attn      = 1
0.00.637.560 I llm_load_print_meta: pooling type     = 0
0.00.637.561 I llm_load_print_meta: rope type        = 2
0.00.637.561 I llm_load_print_meta: rope scaling     = linear
0.00.637.562 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.637.563 I llm_load_print_meta: freq_scale_train = 1
0.00.637.563 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.637.568 I llm_load_print_meta: rope_finetuned   = unknown
0.00.637.569 I llm_load_print_meta: ssm_d_conv       = 0
0.00.637.569 I llm_load_print_meta: ssm_d_inner      = 0
0.00.637.582 I llm_load_print_meta: ssm_d_state      = 0
0.00.637.583 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.637.584 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.637.584 I llm_load_print_meta: model type       = 2B
0.00.637.585 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.637.595 I llm_load_print_meta: model params     = 2.51 B
0.00.637.606 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.637.606 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.637.607 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.637.608 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.637.608 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.637.609 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.637.609 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.637.618 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.637.625 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.637.626 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.637.627 I llm_load_print_meta: max token length = 93
0.00.697.513 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.703.375 I llama_new_context_with_model: n_seq_max     = 1
0.00.703.384 I llama_new_context_with_model: n_ctx         = 4096
0.00.703.384 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.703.384 I llama_new_context_with_model: n_batch       = 2048
0.00.703.385 I llama_new_context_with_model: n_ubatch      = 512
0.00.703.386 I llama_new_context_with_model: flash_attn    = 0
0.00.703.388 I llama_new_context_with_model: freq_base     = 10000.0
0.00.703.389 I llama_new_context_with_model: freq_scale    = 1
0.00.703.390 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.720.576 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.720.620 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.720.753 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.723.327 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.723.331 I llama_new_context_with_model: graph nodes  = 601
0.00.723.331 I llama_new_context_with_model: graph splits = 1
0.00.723.356 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.294.634 I main: llama threadpool init, n_threads = 4
0.01.294.648 I 
0.01.294.762 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.294.766 I 
0.01.294.996 I sampler seed: 2178440771
0.01.295.008 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.295.017 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.295.018 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.295.018 I 
 increasities for the following reaction:

$$2NO_{2(g)} + O_{2(g)} \longrightarrow 2NO_{2(g

0.12.186.443 I llama_perf_sampler_print:    sampling time =      49.05 ms /    33 runs   (    1.49 ms per token,   672.84 tokens per second)
0.12.186.448 I llama_perf_context_print:        load time =    1293.43 ms
0.12.186.450 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.186.452 I llama_perf_context_print:        eval time =   10802.03 ms /    32 runs   (  337.56 ms per token,     2.96 tokens per second)
0.12.186.453 I llama_perf_context_print:       total time =   10891.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.507s
user	50m19.048s
sys	0m6.322s
