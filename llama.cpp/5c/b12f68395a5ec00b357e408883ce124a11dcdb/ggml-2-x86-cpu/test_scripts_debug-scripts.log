+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.655 I build: 3790 (5cb12f68) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.002.776 I main: load the model and apply lora adapter, if any
0.00.024.764 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.951 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.039 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.051 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.052 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.057 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.060 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.061 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.062 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.063 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.063 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.070 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.071 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.072 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.073 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.074 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.536 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.754 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.920 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.929 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.930 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.930 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.931 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.932 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.933 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.937 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.938 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.938 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.939 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.940 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.948 I llama_model_loader: - type  f32:   37 tensors
0.00.196.953 I llama_model_loader: - type q8_0:  127 tensors
0.00.463.385 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.464.500 I llm_load_vocab: special tokens cache size = 5
0.00.533.058 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.533.115 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.533.119 I llm_load_print_meta: arch             = gemma
0.00.533.119 I llm_load_print_meta: vocab type       = SPM
0.00.533.120 I llm_load_print_meta: n_vocab          = 256000
0.00.533.123 I llm_load_print_meta: n_merges         = 0
0.00.533.123 I llm_load_print_meta: vocab_only       = 0
0.00.533.126 I llm_load_print_meta: n_ctx_train      = 8192
0.00.533.126 I llm_load_print_meta: n_embd           = 2048
0.00.533.126 I llm_load_print_meta: n_layer          = 18
0.00.533.163 I llm_load_print_meta: n_head           = 8
0.00.533.173 I llm_load_print_meta: n_head_kv        = 1
0.00.533.173 I llm_load_print_meta: n_rot            = 256
0.00.533.174 I llm_load_print_meta: n_swa            = 0
0.00.533.175 I llm_load_print_meta: n_embd_head_k    = 256
0.00.533.175 I llm_load_print_meta: n_embd_head_v    = 256
0.00.533.180 I llm_load_print_meta: n_gqa            = 8
0.00.533.185 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.533.190 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.533.191 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.533.193 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.533.193 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.533.194 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.533.194 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.533.199 I llm_load_print_meta: n_ff             = 16384
0.00.533.199 I llm_load_print_meta: n_expert         = 0
0.00.533.200 I llm_load_print_meta: n_expert_used    = 0
0.00.533.200 I llm_load_print_meta: causal attn      = 1
0.00.533.200 I llm_load_print_meta: pooling type     = 0
0.00.533.201 I llm_load_print_meta: rope type        = 2
0.00.533.202 I llm_load_print_meta: rope scaling     = linear
0.00.533.204 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.533.205 I llm_load_print_meta: freq_scale_train = 1
0.00.533.205 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.533.205 I llm_load_print_meta: rope_finetuned   = unknown
0.00.533.206 I llm_load_print_meta: ssm_d_conv       = 0
0.00.533.207 I llm_load_print_meta: ssm_d_inner      = 0
0.00.533.207 I llm_load_print_meta: ssm_d_state      = 0
0.00.533.207 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.533.208 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.533.209 I llm_load_print_meta: model type       = 2B
0.00.533.209 I llm_load_print_meta: model ftype      = Q8_0
0.00.533.210 I llm_load_print_meta: model params     = 2.51 B
0.00.533.211 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.533.222 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.533.223 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.533.224 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.533.224 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.533.239 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.533.240 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.533.241 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.533.242 I llm_load_print_meta: max token length = 93
0.00.533.415 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.633.208 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.633.219 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.633.220 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.633.221 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.633.222 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.633.222 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.638.824 I llama_new_context_with_model: n_ctx      = 8192
0.00.638.832 I llama_new_context_with_model: n_batch    = 2048
0.00.638.833 I llama_new_context_with_model: n_ubatch   = 512
0.00.638.834 I llama_new_context_with_model: flash_attn = 0
0.00.638.836 I llama_new_context_with_model: freq_base  = 10000.0
0.00.638.837 I llama_new_context_with_model: freq_scale = 1
0.00.668.144 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.668.189 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.668.299 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.669.705 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.669.712 I llama_new_context_with_model: graph nodes  = 601
0.00.669.713 I llama_new_context_with_model: graph splits = 1
0.00.669.728 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.280.779 I main: llama threadpool init, n_threads = 4
0.01.280.791 I 
0.01.280.879 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.280.883 I 
0.01.281.047 I sampler seed: 308587338
0.01.281.056 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.281.061 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.281.061 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities.

I cannot answer this question as it contains sexually suggestive and inappropriate content. [end of text]


0.09.312.802 I llama_perf_sampler_print:    sampling time =      29.45 ms /    20 runs   (    1.47 ms per token,   679.12 tokens per second)
0.09.312.806 I llama_perf_context_print:        load time =    1277.92 ms
0.09.312.807 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.312.809 I llama_perf_context_print:        eval time =    7981.72 ms /    19 runs   (  420.09 ms per token,     2.38 tokens per second)
0.09.312.809 I llama_perf_context_print:       total time =    8032.03 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.634 I build: 3790 (5cb12f68) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.831 I main: llama backend init
0.00.002.765 I main: load the model and apply lora adapter, if any
0.00.024.964 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.061 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.076 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.078 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.083 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.084 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.085 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.087 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.088 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.096 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.103 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.107 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.108 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.109 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.110 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.002 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.719 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.868 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.875 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.876 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.876 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.877 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.878 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.879 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.882 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.883 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.884 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.885 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.196.886 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.894 I llama_model_loader: - type  f32:   37 tensors
0.00.196.898 I llama_model_loader: - type q8_0:  127 tensors
0.00.479.841 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.480.879 I llm_load_vocab: special tokens cache size = 5
0.00.538.950 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.539.019 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.539.020 I llm_load_print_meta: arch             = gemma
0.00.539.021 I llm_load_print_meta: vocab type       = SPM
0.00.539.022 I llm_load_print_meta: n_vocab          = 256000
0.00.539.024 I llm_load_print_meta: n_merges         = 0
0.00.539.025 I llm_load_print_meta: vocab_only       = 0
0.00.539.025 I llm_load_print_meta: n_ctx_train      = 8192
0.00.539.025 I llm_load_print_meta: n_embd           = 2048
0.00.539.026 I llm_load_print_meta: n_layer          = 18
0.00.539.063 I llm_load_print_meta: n_head           = 8
0.00.539.069 I llm_load_print_meta: n_head_kv        = 1
0.00.539.070 I llm_load_print_meta: n_rot            = 256
0.00.539.070 I llm_load_print_meta: n_swa            = 0
0.00.539.070 I llm_load_print_meta: n_embd_head_k    = 256
0.00.539.071 I llm_load_print_meta: n_embd_head_v    = 256
0.00.539.075 I llm_load_print_meta: n_gqa            = 8
0.00.539.080 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.539.085 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.539.086 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.539.087 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.539.087 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.539.088 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.539.088 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.539.093 I llm_load_print_meta: n_ff             = 16384
0.00.539.093 I llm_load_print_meta: n_expert         = 0
0.00.539.094 I llm_load_print_meta: n_expert_used    = 0
0.00.539.094 I llm_load_print_meta: causal attn      = 1
0.00.539.095 I llm_load_print_meta: pooling type     = 0
0.00.539.096 I llm_load_print_meta: rope type        = 2
0.00.539.120 I llm_load_print_meta: rope scaling     = linear
0.00.539.121 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.539.122 I llm_load_print_meta: freq_scale_train = 1
0.00.539.123 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.539.123 I llm_load_print_meta: rope_finetuned   = unknown
0.00.539.123 I llm_load_print_meta: ssm_d_conv       = 0
0.00.539.124 I llm_load_print_meta: ssm_d_inner      = 0
0.00.539.124 I llm_load_print_meta: ssm_d_state      = 0
0.00.539.124 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.539.133 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.539.134 I llm_load_print_meta: model type       = 2B
0.00.539.143 I llm_load_print_meta: model ftype      = Q8_0
0.00.539.144 I llm_load_print_meta: model params     = 2.51 B
0.00.539.145 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.539.150 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.539.151 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.539.152 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.539.152 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.539.152 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.539.153 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.539.153 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.539.154 I llm_load_print_meta: max token length = 93
0.00.539.330 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.634.885 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.640.629 I llama_new_context_with_model: n_ctx      = 8192
0.00.640.638 I llama_new_context_with_model: n_batch    = 2048
0.00.640.639 I llama_new_context_with_model: n_ubatch   = 512
0.00.640.639 I llama_new_context_with_model: flash_attn = 0
0.00.640.643 I llama_new_context_with_model: freq_base  = 10000.0
0.00.640.644 I llama_new_context_with_model: freq_scale = 1
0.00.671.640 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.671.690 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.671.803 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.673.155 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.673.161 I llama_new_context_with_model: graph nodes  = 601
0.00.673.162 I llama_new_context_with_model: graph splits = 1
0.00.673.177 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.282.097 I main: llama threadpool init, n_threads = 4
0.01.282.110 I 
0.01.282.206 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.282.210 I 
0.01.282.385 I sampler seed: 1652280214
0.01.282.397 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.282.402 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.282.403 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasively.

I'm having trouble with my writing and I'm not sure where to turn. I need some advice on how to improve my writing

0.14.875.527 I llama_perf_sampler_print:    sampling time =      49.44 ms /    33 runs   (    1.50 ms per token,   667.45 tokens per second)
0.14.875.530 I llama_perf_context_print:        load time =    1279.25 ms
0.14.875.531 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.875.533 I llama_perf_context_print:        eval time =   13510.67 ms /    32 runs   (  422.21 ms per token,     2.37 tokens per second)
0.14.875.534 I llama_perf_context_print:       total time =   13593.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.635 I build: 3790 (5cb12f68) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.002.810 I main: load the model and apply lora adapter, if any
0.00.024.858 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.052 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.146 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.158 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.159 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.164 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.166 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.168 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.169 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.170 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.171 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.180 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.185 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.186 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.188 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.189 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.819 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.034 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.223 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.232 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.233 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.233 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.234 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.235 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.236 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.240 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.254 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.258 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.259 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.197.260 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.271 I llama_model_loader: - type  f32:   37 tensors
0.00.197.276 I llama_model_loader: - type q8_0:  127 tensors
0.00.483.212 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.484.271 I llm_load_vocab: special tokens cache size = 5
0.00.544.308 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.544.369 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.544.374 I llm_load_print_meta: arch             = gemma
0.00.544.377 I llm_load_print_meta: vocab type       = SPM
0.00.544.378 I llm_load_print_meta: n_vocab          = 256000
0.00.544.390 I llm_load_print_meta: n_merges         = 0
0.00.544.392 I llm_load_print_meta: vocab_only       = 0
0.00.544.392 I llm_load_print_meta: n_ctx_train      = 8192
0.00.544.393 I llm_load_print_meta: n_embd           = 2048
0.00.544.394 I llm_load_print_meta: n_layer          = 18
0.00.544.434 I llm_load_print_meta: n_head           = 8
0.00.544.445 I llm_load_print_meta: n_head_kv        = 1
0.00.544.446 I llm_load_print_meta: n_rot            = 256
0.00.544.446 I llm_load_print_meta: n_swa            = 0
0.00.544.446 I llm_load_print_meta: n_embd_head_k    = 256
0.00.544.449 I llm_load_print_meta: n_embd_head_v    = 256
0.00.544.454 I llm_load_print_meta: n_gqa            = 8
0.00.544.459 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.544.464 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.544.465 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.544.467 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.544.468 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.544.483 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.544.484 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.544.492 I llm_load_print_meta: n_ff             = 16384
0.00.544.493 I llm_load_print_meta: n_expert         = 0
0.00.544.493 I llm_load_print_meta: n_expert_used    = 0
0.00.544.495 I llm_load_print_meta: causal attn      = 1
0.00.544.495 I llm_load_print_meta: pooling type     = 0
0.00.544.496 I llm_load_print_meta: rope type        = 2
0.00.544.497 I llm_load_print_meta: rope scaling     = linear
0.00.544.499 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.544.501 I llm_load_print_meta: freq_scale_train = 1
0.00.544.502 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.544.502 I llm_load_print_meta: rope_finetuned   = unknown
0.00.544.502 I llm_load_print_meta: ssm_d_conv       = 0
0.00.544.503 I llm_load_print_meta: ssm_d_inner      = 0
0.00.544.514 I llm_load_print_meta: ssm_d_state      = 0
0.00.544.515 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.544.516 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.544.519 I llm_load_print_meta: model type       = 2B
0.00.544.521 I llm_load_print_meta: model ftype      = Q8_0
0.00.544.522 I llm_load_print_meta: model params     = 2.51 B
0.00.544.523 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.544.524 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.544.525 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.544.525 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.544.526 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.544.526 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.544.527 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.544.528 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.544.528 I llm_load_print_meta: max token length = 93
0.00.544.720 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.620.502 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.620.514 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.620.515 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.620.516 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.620.516 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.620.517 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.626.496 I llama_new_context_with_model: n_ctx      = 8192
0.00.626.506 I llama_new_context_with_model: n_batch    = 2048
0.00.626.507 I llama_new_context_with_model: n_ubatch   = 512
0.00.626.507 I llama_new_context_with_model: flash_attn = 0
0.00.626.511 I llama_new_context_with_model: freq_base  = 10000.0
0.00.626.511 I llama_new_context_with_model: freq_scale = 1
0.00.657.315 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.657.355 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.657.466 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.658.953 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.658.960 I llama_new_context_with_model: graph nodes  = 601
0.00.658.961 I llama_new_context_with_model: graph splits = 1
0.00.658.979 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.270.050 I main: llama threadpool init, n_threads = 4
0.01.270.063 I 
0.01.270.166 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.270.170 I 
0.01.270.358 I sampler seed: 1569373736
0.01.270.368 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.270.373 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.270.374 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities!

I apologize, but I am unable to generate sexually suggestive or inappropriate content. My purpose is to assist with tasks and questions that comply with ethical

0.14.787.061 I llama_perf_sampler_print:    sampling time =      49.08 ms /    33 runs   (    1.49 ms per token,   672.43 tokens per second)
0.14.787.065 I llama_perf_context_print:        load time =    1267.15 ms
0.14.787.066 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.787.068 I llama_perf_context_print:        eval time =   13433.53 ms /    32 runs   (  419.80 ms per token,     2.38 tokens per second)
0.14.787.081 I llama_perf_context_print:       total time =   13517.02 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.619 I build: 3790 (5cb12f68) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.002.791 I main: load the model and apply lora adapter, if any
0.00.024.841 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.036 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.130 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.143 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.145 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.150 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.154 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.155 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.156 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.157 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.159 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.168 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.170 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.171 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.173 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.175 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.457 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.379 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.577 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.585 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.586 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.587 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.587 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.588 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.589 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.592 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.593 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.594 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.595 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.196.596 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.605 I llama_model_loader: - type  f32:   37 tensors
0.00.196.609 I llama_model_loader: - type q8_0:  127 tensors
0.00.478.176 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.479.243 I llm_load_vocab: special tokens cache size = 5
0.00.537.236 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.537.301 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.537.302 I llm_load_print_meta: arch             = gemma
0.00.537.303 I llm_load_print_meta: vocab type       = SPM
0.00.537.304 I llm_load_print_meta: n_vocab          = 256000
0.00.537.306 I llm_load_print_meta: n_merges         = 0
0.00.537.306 I llm_load_print_meta: vocab_only       = 0
0.00.537.307 I llm_load_print_meta: n_ctx_train      = 8192
0.00.537.307 I llm_load_print_meta: n_embd           = 2048
0.00.537.308 I llm_load_print_meta: n_layer          = 18
0.00.537.342 I llm_load_print_meta: n_head           = 8
0.00.537.349 I llm_load_print_meta: n_head_kv        = 1
0.00.537.349 I llm_load_print_meta: n_rot            = 256
0.00.537.350 I llm_load_print_meta: n_swa            = 0
0.00.537.350 I llm_load_print_meta: n_embd_head_k    = 256
0.00.537.350 I llm_load_print_meta: n_embd_head_v    = 256
0.00.537.355 I llm_load_print_meta: n_gqa            = 8
0.00.537.360 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.537.364 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.537.365 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.537.366 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.537.367 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.537.367 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.537.368 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.537.372 I llm_load_print_meta: n_ff             = 16384
0.00.537.373 I llm_load_print_meta: n_expert         = 0
0.00.537.373 I llm_load_print_meta: n_expert_used    = 0
0.00.537.373 I llm_load_print_meta: causal attn      = 1
0.00.537.374 I llm_load_print_meta: pooling type     = 0
0.00.537.374 I llm_load_print_meta: rope type        = 2
0.00.537.375 I llm_load_print_meta: rope scaling     = linear
0.00.537.376 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.537.376 I llm_load_print_meta: freq_scale_train = 1
0.00.537.377 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.537.377 I llm_load_print_meta: rope_finetuned   = unknown
0.00.537.377 I llm_load_print_meta: ssm_d_conv       = 0
0.00.537.378 I llm_load_print_meta: ssm_d_inner      = 0
0.00.537.378 I llm_load_print_meta: ssm_d_state      = 0
0.00.537.378 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.537.379 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.537.380 I llm_load_print_meta: model type       = 2B
0.00.537.380 I llm_load_print_meta: model ftype      = Q8_0
0.00.537.381 I llm_load_print_meta: model params     = 2.51 B
0.00.537.382 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.537.383 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.537.384 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.537.384 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.537.385 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.537.385 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.537.386 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.537.386 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.537.387 I llm_load_print_meta: max token length = 93
0.00.537.567 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.609.355 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.609.367 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.615.186 I llama_new_context_with_model: n_ctx      = 8192
0.00.615.193 I llama_new_context_with_model: n_batch    = 2048
0.00.615.194 I llama_new_context_with_model: n_ubatch   = 512
0.00.615.194 I llama_new_context_with_model: flash_attn = 0
0.00.615.198 I llama_new_context_with_model: freq_base  = 10000.0
0.00.615.199 I llama_new_context_with_model: freq_scale = 1
0.00.646.328 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.646.371 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.646.503 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.647.883 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.647.891 I llama_new_context_with_model: graph nodes  = 601
0.00.647.892 I llama_new_context_with_model: graph splits = 1
0.00.647.910 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.260.228 I main: llama threadpool init, n_threads = 4
0.01.260.239 I 
0.01.260.333 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.260.337 I 
0.01.260.506 I sampler seed: 1929392784
0.01.260.517 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.260.521 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.260.522 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities, while simultaneously engaging in playful banter and witty repartee.

The interplay is a delightful tapestry of intellectual sparring, shared experiences, and moments of quiet

0.14.797.618 I llama_perf_sampler_print:    sampling time =      49.44 ms /    33 runs   (    1.50 ms per token,   667.49 tokens per second)
0.14.797.621 I llama_perf_context_print:        load time =    1257.35 ms
0.14.797.623 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.797.625 I llama_perf_context_print:        eval time =   13455.03 ms /    32 runs   (  420.47 ms per token,     2.38 tokens per second)
0.14.797.635 I llama_perf_context_print:       total time =   13537.40 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m3.512s
user	3m27.113s
sys	0m9.510s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3790 (5cb12f68)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198047.90 ms
main:    total time = 198047.90 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.661 I build: 3790 (5cb12f68) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.002.805 I main: load the model and apply lora adapter, if any
0.00.027.690 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.027.888 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.027.985 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.997 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.999 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.028.004 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.028.007 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.028.008 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.028.009 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.028.010 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.028.010 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.028.017 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.028.019 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.028.028 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.028.030 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.028.031 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.097.182 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.187.397 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.199.543 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.199.552 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.199.553 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.199.554 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.199.555 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.199.556 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.199.557 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.199.560 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.199.561 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.199.562 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.199.562 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.199.563 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.199.572 I llama_model_loader: - type  f32:   37 tensors
0.00.199.576 I llama_model_loader: - type q4_K:  108 tensors
0.00.199.576 I llama_model_loader: - type q6_K:   19 tensors
0.00.484.754 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.485.762 I llm_load_vocab: special tokens cache size = 5
0.00.543.666 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.543.724 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.543.725 I llm_load_print_meta: arch             = gemma
0.00.543.725 I llm_load_print_meta: vocab type       = SPM
0.00.543.726 I llm_load_print_meta: n_vocab          = 256000
0.00.543.728 I llm_load_print_meta: n_merges         = 0
0.00.543.729 I llm_load_print_meta: vocab_only       = 0
0.00.543.729 I llm_load_print_meta: n_ctx_train      = 8192
0.00.543.730 I llm_load_print_meta: n_embd           = 2048
0.00.543.730 I llm_load_print_meta: n_layer          = 18
0.00.543.765 I llm_load_print_meta: n_head           = 8
0.00.543.771 I llm_load_print_meta: n_head_kv        = 1
0.00.543.772 I llm_load_print_meta: n_rot            = 256
0.00.543.772 I llm_load_print_meta: n_swa            = 0
0.00.543.773 I llm_load_print_meta: n_embd_head_k    = 256
0.00.543.773 I llm_load_print_meta: n_embd_head_v    = 256
0.00.543.778 I llm_load_print_meta: n_gqa            = 8
0.00.543.782 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.543.787 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.543.788 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.543.809 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.543.810 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.543.811 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.543.811 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.543.819 I llm_load_print_meta: n_ff             = 16384
0.00.543.819 I llm_load_print_meta: n_expert         = 0
0.00.543.820 I llm_load_print_meta: n_expert_used    = 0
0.00.543.827 I llm_load_print_meta: causal attn      = 1
0.00.543.828 I llm_load_print_meta: pooling type     = 0
0.00.543.828 I llm_load_print_meta: rope type        = 2
0.00.543.836 I llm_load_print_meta: rope scaling     = linear
0.00.543.837 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.543.838 I llm_load_print_meta: freq_scale_train = 1
0.00.543.838 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.543.839 I llm_load_print_meta: rope_finetuned   = unknown
0.00.543.839 I llm_load_print_meta: ssm_d_conv       = 0
0.00.543.840 I llm_load_print_meta: ssm_d_inner      = 0
0.00.543.840 I llm_load_print_meta: ssm_d_state      = 0
0.00.543.840 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.543.841 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.543.848 I llm_load_print_meta: model type       = 2B
0.00.543.856 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.543.857 I llm_load_print_meta: model params     = 2.51 B
0.00.543.859 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.543.859 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.543.866 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.543.867 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.543.868 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.543.868 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.543.869 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.543.870 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.543.870 I llm_load_print_meta: max token length = 93
0.00.544.042 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.603.890 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.603.898 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.603.899 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.603.899 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.603.900 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.603.900 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.609.425 I llama_new_context_with_model: n_ctx      = 8192
0.00.609.433 I llama_new_context_with_model: n_batch    = 2048
0.00.609.433 I llama_new_context_with_model: n_ubatch   = 512
0.00.609.434 I llama_new_context_with_model: flash_attn = 0
0.00.609.436 I llama_new_context_with_model: freq_base  = 10000.0
0.00.609.437 I llama_new_context_with_model: freq_scale = 1
0.00.639.191 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.639.245 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.639.355 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.640.697 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.640.703 I llama_new_context_with_model: graph nodes  = 601
0.00.640.704 I llama_new_context_with_model: graph splits = 1
0.00.640.720 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.222.147 I main: llama threadpool init, n_threads = 4
0.01.222.158 I 
0.01.222.252 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.222.255 I 
0.01.222.417 I sampler seed: 2090163194
0.01.222.427 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.222.432 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.222.433 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 effe in the sentence "He chased a spider and it chased him back"?

The correct answer is "back".

In the sentence, the spider is the

0.12.195.004 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.75 tokens per second)
0.12.195.007 I llama_perf_context_print:        load time =    1219.26 ms
0.12.195.009 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.195.011 I llama_perf_context_print:        eval time =   10889.37 ms /    32 runs   (  340.29 ms per token,     2.94 tokens per second)
0.12.195.012 I llama_perf_context_print:       total time =   10972.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3790 (5cb12f68)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198088.07 ms
main:    total time = 198088.07 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.635 I build: 3790 (5cb12f68) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.002.796 I main: load the model and apply lora adapter, if any
0.00.025.116 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.214 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.229 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.231 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.235 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.236 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.237 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.239 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.248 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.250 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.258 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.261 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.262 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.263 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.264 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.882 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.059 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.270 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.279 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.280 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.280 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.281 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.282 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.283 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.298 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.301 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.311 I llama_model_loader: - type  f32:   37 tensors
0.00.197.315 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.315 I llama_model_loader: - type q6_K:   19 tensors
0.00.485.941 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.487.029 I llm_load_vocab: special tokens cache size = 5
0.00.545.544 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.545.600 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.545.603 I llm_load_print_meta: arch             = gemma
0.00.545.604 I llm_load_print_meta: vocab type       = SPM
0.00.545.605 I llm_load_print_meta: n_vocab          = 256000
0.00.545.607 I llm_load_print_meta: n_merges         = 0
0.00.545.608 I llm_load_print_meta: vocab_only       = 0
0.00.545.608 I llm_load_print_meta: n_ctx_train      = 8192
0.00.545.610 I llm_load_print_meta: n_embd           = 2048
0.00.545.610 I llm_load_print_meta: n_layer          = 18
0.00.545.644 I llm_load_print_meta: n_head           = 8
0.00.545.653 I llm_load_print_meta: n_head_kv        = 1
0.00.545.654 I llm_load_print_meta: n_rot            = 256
0.00.545.654 I llm_load_print_meta: n_swa            = 0
0.00.545.654 I llm_load_print_meta: n_embd_head_k    = 256
0.00.545.655 I llm_load_print_meta: n_embd_head_v    = 256
0.00.545.659 I llm_load_print_meta: n_gqa            = 8
0.00.545.664 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.545.669 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.545.673 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.545.674 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.545.675 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.545.676 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.545.676 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.545.681 I llm_load_print_meta: n_ff             = 16384
0.00.545.690 I llm_load_print_meta: n_expert         = 0
0.00.545.691 I llm_load_print_meta: n_expert_used    = 0
0.00.545.692 I llm_load_print_meta: causal attn      = 1
0.00.545.692 I llm_load_print_meta: pooling type     = 0
0.00.545.693 I llm_load_print_meta: rope type        = 2
0.00.545.693 I llm_load_print_meta: rope scaling     = linear
0.00.545.694 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.545.695 I llm_load_print_meta: freq_scale_train = 1
0.00.545.695 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.545.697 I llm_load_print_meta: rope_finetuned   = unknown
0.00.545.697 I llm_load_print_meta: ssm_d_conv       = 0
0.00.545.697 I llm_load_print_meta: ssm_d_inner      = 0
0.00.545.698 I llm_load_print_meta: ssm_d_state      = 0
0.00.545.698 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.545.699 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.545.700 I llm_load_print_meta: model type       = 2B
0.00.545.701 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.545.702 I llm_load_print_meta: model params     = 2.51 B
0.00.545.704 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.545.704 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.545.705 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.545.706 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.545.707 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.545.707 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.545.708 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.545.708 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.545.708 I llm_load_print_meta: max token length = 93
0.00.545.880 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.604.666 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.610.303 I llama_new_context_with_model: n_ctx      = 8192
0.00.610.309 I llama_new_context_with_model: n_batch    = 2048
0.00.610.310 I llama_new_context_with_model: n_ubatch   = 512
0.00.610.310 I llama_new_context_with_model: flash_attn = 0
0.00.610.314 I llama_new_context_with_model: freq_base  = 10000.0
0.00.610.315 I llama_new_context_with_model: freq_scale = 1
0.00.641.487 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.641.534 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.641.644 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.642.980 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.642.986 I llama_new_context_with_model: graph nodes  = 601
0.00.642.987 I llama_new_context_with_model: graph splits = 1
0.00.643.002 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.218.901 I main: llama threadpool init, n_threads = 4
0.01.218.914 I 
0.01.219.011 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.219.015 I 
0.01.219.184 I sampler seed: 1219806869
0.01.219.195 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.219.202 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.219.203 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities often lead to a decline in the quality of life for people in the affected areas. 

Discuss how the concept of "quality of life" can

0.12.119.025 I llama_perf_sampler_print:    sampling time =      49.09 ms /    33 runs   (    1.49 ms per token,   672.28 tokens per second)
0.12.119.041 I llama_perf_context_print:        load time =    1216.02 ms
0.12.119.043 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.119.044 I llama_perf_context_print:        eval time =   10818.48 ms /    32 runs   (  338.08 ms per token,     2.96 tokens per second)
0.12.119.045 I llama_perf_context_print:       total time =   10900.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m3.398s
user	50m4.159s
sys	0m6.418s
