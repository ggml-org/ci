+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.553 I build: 3790 (5cb12f68) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.001.836 I main: load the model and apply lora adapter, if any
0.00.022.282 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.330 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.337 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.342 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.343 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.346 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.347 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.347 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.348 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.348 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.349 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.353 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.354 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.355 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.355 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.356 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.356 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.181 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.142 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.149 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.150 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.151 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.152 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.152 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.153 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.155 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.156 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.157 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.158 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.159 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.163 I llama_model_loader: - type  f32:   37 tensors
0.00.133.165 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.042 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.206.866 I llm_load_vocab: special tokens cache size = 5
0.00.225.489 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.225.503 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.225.504 I llm_load_print_meta: arch             = gemma
0.00.225.504 I llm_load_print_meta: vocab type       = SPM
0.00.225.505 I llm_load_print_meta: n_vocab          = 256000
0.00.225.505 I llm_load_print_meta: n_merges         = 0
0.00.225.506 I llm_load_print_meta: vocab_only       = 0
0.00.225.506 I llm_load_print_meta: n_ctx_train      = 8192
0.00.225.507 I llm_load_print_meta: n_embd           = 2048
0.00.225.507 I llm_load_print_meta: n_layer          = 18
0.00.225.519 I llm_load_print_meta: n_head           = 8
0.00.225.520 I llm_load_print_meta: n_head_kv        = 1
0.00.225.521 I llm_load_print_meta: n_rot            = 256
0.00.225.521 I llm_load_print_meta: n_swa            = 0
0.00.225.521 I llm_load_print_meta: n_embd_head_k    = 256
0.00.225.522 I llm_load_print_meta: n_embd_head_v    = 256
0.00.225.522 I llm_load_print_meta: n_gqa            = 8
0.00.225.524 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.225.524 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.225.525 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.225.527 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.225.527 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.225.527 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.225.528 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.225.529 I llm_load_print_meta: n_ff             = 16384
0.00.225.529 I llm_load_print_meta: n_expert         = 0
0.00.225.530 I llm_load_print_meta: n_expert_used    = 0
0.00.225.532 I llm_load_print_meta: causal attn      = 1
0.00.225.532 I llm_load_print_meta: pooling type     = 0
0.00.225.533 I llm_load_print_meta: rope type        = 2
0.00.225.543 I llm_load_print_meta: rope scaling     = linear
0.00.225.545 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.225.546 I llm_load_print_meta: freq_scale_train = 1
0.00.225.547 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.225.547 I llm_load_print_meta: rope_finetuned   = unknown
0.00.225.548 I llm_load_print_meta: ssm_d_conv       = 0
0.00.225.549 I llm_load_print_meta: ssm_d_inner      = 0
0.00.225.549 I llm_load_print_meta: ssm_d_state      = 0
0.00.225.549 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.225.550 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.225.550 I llm_load_print_meta: model type       = 2B
0.00.225.551 I llm_load_print_meta: model ftype      = Q8_0
0.00.225.552 I llm_load_print_meta: model params     = 2.51 B
0.00.225.553 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.225.553 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.225.554 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.225.555 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.225.555 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.225.556 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.225.556 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.225.556 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.225.556 I llm_load_print_meta: max token length = 93
0.00.225.581 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.323.328 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.323.337 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.323.338 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.323.339 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.323.340 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.323.340 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.328.517 I llama_new_context_with_model: n_ctx      = 8192
0.00.328.523 I llama_new_context_with_model: n_batch    = 2048
0.00.328.523 I llama_new_context_with_model: n_ubatch   = 512
0.00.328.523 I llama_new_context_with_model: flash_attn = 0
0.00.328.525 I llama_new_context_with_model: freq_base  = 10000.0
0.00.328.526 I llama_new_context_with_model: freq_scale = 1
0.00.357.339 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.357.351 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.357.444 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.298 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.358.306 I llama_new_context_with_model: graph nodes  = 601
0.00.358.306 I llama_new_context_with_model: graph splits = 1
0.00.358.308 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.449.190 I main: llama threadpool init, n_threads = 4
0.00.449.205 I 
0.00.449.275 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.449.279 I 
0.00.449.305 I sampler seed: 3617648017
0.00.449.316 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.449.320 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.449.321 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably.

I am unable to generate a response due to limitations in my capabilities. [end of text]


0.01.807.478 I llama_perf_sampler_print:    sampling time =       2.96 ms /    20 runs   (    0.15 ms per token,  6761.33 tokens per second)
0.01.807.480 I llama_perf_context_print:        load time =     447.34 ms
0.01.807.482 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.807.484 I llama_perf_context_print:        eval time =    1346.80 ms /    19 runs   (   70.88 ms per token,    14.11 tokens per second)
0.01.807.485 I llama_perf_context_print:       total time =    1358.30 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.539 I build: 3790 (5cb12f68) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.728 I main: llama backend init
0.00.001.855 I main: load the model and apply lora adapter, if any
0.00.021.984 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.994 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.002 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.003 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.006 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.007 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.008 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.009 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.010 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.011 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.015 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.016 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.017 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.017 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.018 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.651 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.383 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.327 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.335 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.336 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.336 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.337 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.338 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.339 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.341 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.342 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.343 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.343 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.344 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.348 I llama_model_loader: - type  f32:   37 tensors
0.00.132.350 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.306 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.205.192 I llm_load_vocab: special tokens cache size = 5
0.00.224.009 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.224.024 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.224.024 I llm_load_print_meta: arch             = gemma
0.00.224.025 I llm_load_print_meta: vocab type       = SPM
0.00.224.026 I llm_load_print_meta: n_vocab          = 256000
0.00.224.026 I llm_load_print_meta: n_merges         = 0
0.00.224.027 I llm_load_print_meta: vocab_only       = 0
0.00.224.027 I llm_load_print_meta: n_ctx_train      = 8192
0.00.224.028 I llm_load_print_meta: n_embd           = 2048
0.00.224.028 I llm_load_print_meta: n_layer          = 18
0.00.224.042 I llm_load_print_meta: n_head           = 8
0.00.224.043 I llm_load_print_meta: n_head_kv        = 1
0.00.224.044 I llm_load_print_meta: n_rot            = 256
0.00.224.044 I llm_load_print_meta: n_swa            = 0
0.00.224.044 I llm_load_print_meta: n_embd_head_k    = 256
0.00.224.045 I llm_load_print_meta: n_embd_head_v    = 256
0.00.224.046 I llm_load_print_meta: n_gqa            = 8
0.00.224.047 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.224.048 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.224.048 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.224.050 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.224.050 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.224.051 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.224.051 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.224.052 I llm_load_print_meta: n_ff             = 16384
0.00.224.052 I llm_load_print_meta: n_expert         = 0
0.00.224.053 I llm_load_print_meta: n_expert_used    = 0
0.00.224.053 I llm_load_print_meta: causal attn      = 1
0.00.224.053 I llm_load_print_meta: pooling type     = 0
0.00.224.054 I llm_load_print_meta: rope type        = 2
0.00.224.054 I llm_load_print_meta: rope scaling     = linear
0.00.224.056 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.224.057 I llm_load_print_meta: freq_scale_train = 1
0.00.224.057 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.224.057 I llm_load_print_meta: rope_finetuned   = unknown
0.00.224.057 I llm_load_print_meta: ssm_d_conv       = 0
0.00.224.058 I llm_load_print_meta: ssm_d_inner      = 0
0.00.224.058 I llm_load_print_meta: ssm_d_state      = 0
0.00.224.058 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.224.059 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.224.059 I llm_load_print_meta: model type       = 2B
0.00.224.060 I llm_load_print_meta: model ftype      = Q8_0
0.00.224.061 I llm_load_print_meta: model params     = 2.51 B
0.00.224.062 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.224.062 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.224.063 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.224.063 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.224.063 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.224.063 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.224.064 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.224.064 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.224.064 I llm_load_print_meta: max token length = 93
0.00.224.089 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.317.428 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.322.523 I llama_new_context_with_model: n_ctx      = 8192
0.00.322.531 I llama_new_context_with_model: n_batch    = 2048
0.00.322.531 I llama_new_context_with_model: n_ubatch   = 512
0.00.322.532 I llama_new_context_with_model: flash_attn = 0
0.00.322.534 I llama_new_context_with_model: freq_base  = 10000.0
0.00.322.535 I llama_new_context_with_model: freq_scale = 1
0.00.352.315 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.352.330 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.352.420 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.264 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.353.269 I llama_new_context_with_model: graph nodes  = 601
0.00.353.269 I llama_new_context_with_model: graph splits = 1
0.00.353.271 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.440.424 I main: llama threadpool init, n_threads = 4
0.00.440.435 I 
0.00.440.508 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.440.511 I 
0.00.440.539 I sampler seed: 3998675012
0.00.440.548 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.440.551 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.440.551 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically.

Answer: Incredibly.

Explanation: The given sentence is using superlative degree of adjectives. It emphasizes the extreme nature of something. [end of text]


0.02.637.330 I llama_perf_sampler_print:    sampling time =       5.15 ms /    33 runs   (    0.16 ms per token,  6406.52 tokens per second)
0.02.637.333 I llama_perf_context_print:        load time =     438.55 ms
0.02.637.334 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.637.335 I llama_perf_context_print:        eval time =    2177.75 ms /    32 runs   (   68.05 ms per token,    14.69 tokens per second)
0.02.637.336 I llama_perf_context_print:       total time =    2196.91 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.625 I build: 3790 (5cb12f68) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.849 I main: llama backend init
0.00.002.043 I main: load the model and apply lora adapter, if any
0.00.022.506 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.560 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.571 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.576 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.579 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.583 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.585 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.586 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.586 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.587 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.587 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.592 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.593 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.594 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.594 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.595 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.060 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.953 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.035 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.042 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.043 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.044 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.044 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.046 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.046 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.049 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.049 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.050 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.051 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.134.052 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.056 I llama_model_loader: - type  f32:   37 tensors
0.00.134.059 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.430 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.208.234 I llm_load_vocab: special tokens cache size = 5
0.00.226.971 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.226.986 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.226.986 I llm_load_print_meta: arch             = gemma
0.00.226.987 I llm_load_print_meta: vocab type       = SPM
0.00.226.988 I llm_load_print_meta: n_vocab          = 256000
0.00.226.988 I llm_load_print_meta: n_merges         = 0
0.00.226.988 I llm_load_print_meta: vocab_only       = 0
0.00.226.989 I llm_load_print_meta: n_ctx_train      = 8192
0.00.226.989 I llm_load_print_meta: n_embd           = 2048
0.00.226.989 I llm_load_print_meta: n_layer          = 18
0.00.227.001 I llm_load_print_meta: n_head           = 8
0.00.227.002 I llm_load_print_meta: n_head_kv        = 1
0.00.227.002 I llm_load_print_meta: n_rot            = 256
0.00.227.003 I llm_load_print_meta: n_swa            = 0
0.00.227.003 I llm_load_print_meta: n_embd_head_k    = 256
0.00.227.003 I llm_load_print_meta: n_embd_head_v    = 256
0.00.227.004 I llm_load_print_meta: n_gqa            = 8
0.00.227.005 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.227.006 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.227.007 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.227.008 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.227.009 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.227.009 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.227.009 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.227.010 I llm_load_print_meta: n_ff             = 16384
0.00.227.011 I llm_load_print_meta: n_expert         = 0
0.00.227.011 I llm_load_print_meta: n_expert_used    = 0
0.00.227.011 I llm_load_print_meta: causal attn      = 1
0.00.227.012 I llm_load_print_meta: pooling type     = 0
0.00.227.012 I llm_load_print_meta: rope type        = 2
0.00.227.013 I llm_load_print_meta: rope scaling     = linear
0.00.227.014 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.227.015 I llm_load_print_meta: freq_scale_train = 1
0.00.227.015 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.227.015 I llm_load_print_meta: rope_finetuned   = unknown
0.00.227.015 I llm_load_print_meta: ssm_d_conv       = 0
0.00.227.016 I llm_load_print_meta: ssm_d_inner      = 0
0.00.227.016 I llm_load_print_meta: ssm_d_state      = 0
0.00.227.016 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.227.016 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.227.017 I llm_load_print_meta: model type       = 2B
0.00.227.017 I llm_load_print_meta: model ftype      = Q8_0
0.00.227.019 I llm_load_print_meta: model params     = 2.51 B
0.00.227.019 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.227.020 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.227.020 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.227.021 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.227.021 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.227.021 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.227.022 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.227.022 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.227.022 I llm_load_print_meta: max token length = 93
0.00.227.041 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.301.566 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.301.574 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.301.574 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.301.575 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.301.576 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.301.576 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.306.652 I llama_new_context_with_model: n_ctx      = 8192
0.00.306.659 I llama_new_context_with_model: n_batch    = 2048
0.00.306.660 I llama_new_context_with_model: n_ubatch   = 512
0.00.306.660 I llama_new_context_with_model: flash_attn = 0
0.00.306.663 I llama_new_context_with_model: freq_base  = 10000.0
0.00.306.665 I llama_new_context_with_model: freq_scale = 1
0.00.336.299 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.336.311 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.336.404 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.337.339 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.337.347 I llama_new_context_with_model: graph nodes  = 601
0.00.337.347 I llama_new_context_with_model: graph splits = 1
0.00.337.349 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.411 I main: llama threadpool init, n_threads = 4
0.00.429.425 I 
0.00.429.499 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.429.503 I 
0.00.429.540 I sampler seed: 2692911776
0.00.429.549 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.551 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.429.552 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities.

This is an incorrect premise. There is no such thing as a "reclusal crescendo." [end of text]


0.02.165.126 I llama_perf_sampler_print:    sampling time =       3.61 ms /    25 runs   (    0.14 ms per token,  6927.13 tokens per second)
0.02.165.128 I llama_perf_context_print:        load time =     427.35 ms
0.02.165.129 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.165.131 I llama_perf_context_print:        eval time =    1721.08 ms /    24 runs   (   71.71 ms per token,    13.94 tokens per second)
0.02.165.131 I llama_perf_context_print:       total time =    1735.72 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.442 I build: 3790 (5cb12f68) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.648 I main: llama backend init
0.00.001.772 I main: load the model and apply lora adapter, if any
0.00.021.638 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.694 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.712 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.718 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.720 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.725 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.727 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.728 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.729 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.729 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.730 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.736 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.737 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.738 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.739 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.740 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.232 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.592 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.570 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.576 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.577 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.577 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.578 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.579 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.580 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.582 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.583 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.585 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.585 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.587 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.590 I llama_model_loader: - type  f32:   37 tensors
0.00.132.594 I llama_model_loader: - type q8_0:  127 tensors
0.00.199.023 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.199.754 I llm_load_vocab: special tokens cache size = 5
0.00.218.512 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.218.525 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.218.525 I llm_load_print_meta: arch             = gemma
0.00.218.526 I llm_load_print_meta: vocab type       = SPM
0.00.218.527 I llm_load_print_meta: n_vocab          = 256000
0.00.218.527 I llm_load_print_meta: n_merges         = 0
0.00.218.527 I llm_load_print_meta: vocab_only       = 0
0.00.218.528 I llm_load_print_meta: n_ctx_train      = 8192
0.00.218.528 I llm_load_print_meta: n_embd           = 2048
0.00.218.528 I llm_load_print_meta: n_layer          = 18
0.00.218.539 I llm_load_print_meta: n_head           = 8
0.00.218.541 I llm_load_print_meta: n_head_kv        = 1
0.00.218.541 I llm_load_print_meta: n_rot            = 256
0.00.218.541 I llm_load_print_meta: n_swa            = 0
0.00.218.542 I llm_load_print_meta: n_embd_head_k    = 256
0.00.218.542 I llm_load_print_meta: n_embd_head_v    = 256
0.00.218.543 I llm_load_print_meta: n_gqa            = 8
0.00.218.544 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.218.545 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.218.545 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.218.546 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.218.547 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.218.547 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.218.547 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.218.548 I llm_load_print_meta: n_ff             = 16384
0.00.218.549 I llm_load_print_meta: n_expert         = 0
0.00.218.549 I llm_load_print_meta: n_expert_used    = 0
0.00.218.549 I llm_load_print_meta: causal attn      = 1
0.00.218.549 I llm_load_print_meta: pooling type     = 0
0.00.218.550 I llm_load_print_meta: rope type        = 2
0.00.218.550 I llm_load_print_meta: rope scaling     = linear
0.00.218.551 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.218.552 I llm_load_print_meta: freq_scale_train = 1
0.00.218.552 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.218.552 I llm_load_print_meta: rope_finetuned   = unknown
0.00.218.553 I llm_load_print_meta: ssm_d_conv       = 0
0.00.218.553 I llm_load_print_meta: ssm_d_inner      = 0
0.00.218.553 I llm_load_print_meta: ssm_d_state      = 0
0.00.218.554 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.218.554 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.218.554 I llm_load_print_meta: model type       = 2B
0.00.218.555 I llm_load_print_meta: model ftype      = Q8_0
0.00.218.556 I llm_load_print_meta: model params     = 2.51 B
0.00.218.556 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.218.557 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.218.558 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.218.558 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.218.558 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.218.559 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.218.559 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.218.559 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.218.559 I llm_load_print_meta: max token length = 93
0.00.218.575 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.289.700 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.289.707 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.294.634 I llama_new_context_with_model: n_ctx      = 8192
0.00.294.641 I llama_new_context_with_model: n_batch    = 2048
0.00.294.641 I llama_new_context_with_model: n_ubatch   = 512
0.00.294.641 I llama_new_context_with_model: flash_attn = 0
0.00.294.644 I llama_new_context_with_model: freq_base  = 10000.0
0.00.294.645 I llama_new_context_with_model: freq_scale = 1
0.00.323.909 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.323.924 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.324.022 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.324.881 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.324.889 I llama_new_context_with_model: graph nodes  = 601
0.00.324.890 I llama_new_context_with_model: graph splits = 1
0.00.324.892 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.417.832 I main: llama threadpool init, n_threads = 4
0.00.417.846 I 
0.00.417.932 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.417.936 I 
0.00.417.984 I sampler seed: 1427374640
0.00.417.993 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.417.996 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.417.996 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities, it is generally advised to use an approach that prioritizes the integration of existing structures and processes. This is because:

a) Integrating existing structures

0.02.871.841 I llama_perf_sampler_print:    sampling time =       4.67 ms /    33 runs   (    0.14 ms per token,  7060.33 tokens per second)
0.02.871.844 I llama_perf_context_print:        load time =     416.04 ms
0.02.871.845 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.871.846 I llama_perf_context_print:        eval time =    2435.98 ms /    32 runs   (   76.12 ms per token,    13.14 tokens per second)
0.02.871.847 I llama_perf_context_print:       total time =    2454.02 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.168s
user	0m33.656s
sys	0m9.584s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3790 (5cb12f68)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32051.64 ms
main:    total time = 32051.64 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.542 I build: 3790 (5cb12f68) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.001.823 I main: load the model and apply lora adapter, if any
0.00.022.224 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.282 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.293 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.302 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.303 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.307 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.307 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.308 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.309 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.310 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.310 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.315 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.316 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.316 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.319 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.320 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.831 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.844 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.774 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.781 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.782 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.782 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.783 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.784 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.784 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.787 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.788 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.788 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.790 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.791 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.793 I llama_model_loader: - type  f32:   37 tensors
0.00.132.796 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.796 I llama_model_loader: - type q6_K:   19 tensors
0.00.198.894 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.199.600 I llm_load_vocab: special tokens cache size = 5
0.00.218.027 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.218.041 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.218.042 I llm_load_print_meta: arch             = gemma
0.00.218.042 I llm_load_print_meta: vocab type       = SPM
0.00.218.043 I llm_load_print_meta: n_vocab          = 256000
0.00.218.043 I llm_load_print_meta: n_merges         = 0
0.00.218.044 I llm_load_print_meta: vocab_only       = 0
0.00.218.044 I llm_load_print_meta: n_ctx_train      = 8192
0.00.218.044 I llm_load_print_meta: n_embd           = 2048
0.00.218.045 I llm_load_print_meta: n_layer          = 18
0.00.218.058 I llm_load_print_meta: n_head           = 8
0.00.218.059 I llm_load_print_meta: n_head_kv        = 1
0.00.218.059 I llm_load_print_meta: n_rot            = 256
0.00.218.059 I llm_load_print_meta: n_swa            = 0
0.00.218.059 I llm_load_print_meta: n_embd_head_k    = 256
0.00.218.060 I llm_load_print_meta: n_embd_head_v    = 256
0.00.218.061 I llm_load_print_meta: n_gqa            = 8
0.00.218.062 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.218.063 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.218.064 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.218.065 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.218.065 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.218.066 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.218.066 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.218.067 I llm_load_print_meta: n_ff             = 16384
0.00.218.067 I llm_load_print_meta: n_expert         = 0
0.00.218.068 I llm_load_print_meta: n_expert_used    = 0
0.00.218.068 I llm_load_print_meta: causal attn      = 1
0.00.218.069 I llm_load_print_meta: pooling type     = 0
0.00.218.069 I llm_load_print_meta: rope type        = 2
0.00.218.069 I llm_load_print_meta: rope scaling     = linear
0.00.218.070 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.218.071 I llm_load_print_meta: freq_scale_train = 1
0.00.218.071 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.218.072 I llm_load_print_meta: rope_finetuned   = unknown
0.00.218.072 I llm_load_print_meta: ssm_d_conv       = 0
0.00.218.072 I llm_load_print_meta: ssm_d_inner      = 0
0.00.218.072 I llm_load_print_meta: ssm_d_state      = 0
0.00.218.073 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.218.073 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.218.074 I llm_load_print_meta: model type       = 2B
0.00.218.074 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.218.075 I llm_load_print_meta: model params     = 2.51 B
0.00.218.076 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.218.076 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.218.076 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.218.077 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.218.077 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.218.077 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.218.078 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.218.078 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.218.078 I llm_load_print_meta: max token length = 93
0.00.218.095 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.275.166 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.275.173 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.275.174 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.275.175 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.275.175 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.275.176 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.280.167 I llama_new_context_with_model: n_ctx      = 8192
0.00.280.173 I llama_new_context_with_model: n_batch    = 2048
0.00.280.174 I llama_new_context_with_model: n_ubatch   = 512
0.00.280.175 I llama_new_context_with_model: flash_attn = 0
0.00.280.178 I llama_new_context_with_model: freq_base  = 10000.0
0.00.280.179 I llama_new_context_with_model: freq_scale = 1
0.00.311.266 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.311.283 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.311.379 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.312.244 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.312.253 I llama_new_context_with_model: graph nodes  = 601
0.00.312.253 I llama_new_context_with_model: graph splits = 1
0.00.312.255 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.395.396 I main: llama threadpool init, n_threads = 4
0.00.395.408 I 
0.00.395.482 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.395.485 I 
0.00.395.524 I sampler seed: 2082759265
0.00.395.533 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.395.537 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.395.538 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 afforches and embraces the opportunities that come with them.

**Answer the question following the above principles:**

Discuss how the COVID-19 pandemic has impacted

0.02.050.640 I llama_perf_sampler_print:    sampling time =       5.92 ms /    33 runs   (    0.18 ms per token,  5575.27 tokens per second)
0.02.050.642 I llama_perf_context_print:        load time =     393.56 ms
0.02.050.643 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.050.645 I llama_perf_context_print:        eval time =    1635.21 ms /    32 runs   (   51.10 ms per token,    19.57 tokens per second)
0.02.050.645 I llama_perf_context_print:       total time =    1655.25 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3790 (5cb12f68)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32150.22 ms
main:    total time = 32150.22 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.528 I build: 3790 (5cb12f68) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.711 I main: llama backend init
0.00.001.807 I main: load the model and apply lora adapter, if any
0.00.021.900 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.911 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.918 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.919 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.923 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.924 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.925 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.926 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.927 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.927 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.931 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.932 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.932 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.934 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.935 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.370 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.138 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.070 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.079 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.079 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.080 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.080 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.082 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.082 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.085 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.086 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.089 I llama_model_loader: - type  f32:   37 tensors
0.00.132.092 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.093 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.093 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.200.828 I llm_load_vocab: special tokens cache size = 5
0.00.219.394 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.219.407 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.219.408 I llm_load_print_meta: arch             = gemma
0.00.219.408 I llm_load_print_meta: vocab type       = SPM
0.00.219.409 I llm_load_print_meta: n_vocab          = 256000
0.00.219.409 I llm_load_print_meta: n_merges         = 0
0.00.219.410 I llm_load_print_meta: vocab_only       = 0
0.00.219.410 I llm_load_print_meta: n_ctx_train      = 8192
0.00.219.410 I llm_load_print_meta: n_embd           = 2048
0.00.219.411 I llm_load_print_meta: n_layer          = 18
0.00.219.424 I llm_load_print_meta: n_head           = 8
0.00.219.425 I llm_load_print_meta: n_head_kv        = 1
0.00.219.426 I llm_load_print_meta: n_rot            = 256
0.00.219.426 I llm_load_print_meta: n_swa            = 0
0.00.219.426 I llm_load_print_meta: n_embd_head_k    = 256
0.00.219.427 I llm_load_print_meta: n_embd_head_v    = 256
0.00.219.429 I llm_load_print_meta: n_gqa            = 8
0.00.219.430 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.219.431 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.219.432 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.219.434 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.219.434 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.219.435 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.219.435 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.219.436 I llm_load_print_meta: n_ff             = 16384
0.00.219.436 I llm_load_print_meta: n_expert         = 0
0.00.219.437 I llm_load_print_meta: n_expert_used    = 0
0.00.219.438 I llm_load_print_meta: causal attn      = 1
0.00.219.438 I llm_load_print_meta: pooling type     = 0
0.00.219.438 I llm_load_print_meta: rope type        = 2
0.00.219.439 I llm_load_print_meta: rope scaling     = linear
0.00.219.440 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.219.441 I llm_load_print_meta: freq_scale_train = 1
0.00.219.441 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.219.442 I llm_load_print_meta: rope_finetuned   = unknown
0.00.219.442 I llm_load_print_meta: ssm_d_conv       = 0
0.00.219.442 I llm_load_print_meta: ssm_d_inner      = 0
0.00.219.443 I llm_load_print_meta: ssm_d_state      = 0
0.00.219.443 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.219.444 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.219.445 I llm_load_print_meta: model type       = 2B
0.00.219.445 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.219.446 I llm_load_print_meta: model params     = 2.51 B
0.00.219.447 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.219.447 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.219.448 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.219.448 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.219.449 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.219.449 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.219.450 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.219.450 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.219.450 I llm_load_print_meta: max token length = 93
0.00.219.474 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.275.056 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.280.112 I llama_new_context_with_model: n_ctx      = 8192
0.00.280.118 I llama_new_context_with_model: n_batch    = 2048
0.00.280.118 I llama_new_context_with_model: n_ubatch   = 512
0.00.280.118 I llama_new_context_with_model: flash_attn = 0
0.00.280.121 I llama_new_context_with_model: freq_base  = 10000.0
0.00.280.122 I llama_new_context_with_model: freq_scale = 1
0.00.310.675 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.310.690 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.310.782 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.311.612 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.311.620 I llama_new_context_with_model: graph nodes  = 601
0.00.311.620 I llama_new_context_with_model: graph splits = 1
0.00.311.622 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.393.292 I main: llama threadpool init, n_threads = 4
0.00.393.305 I 
0.00.393.381 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.393.384 I 
0.00.393.414 I sampler seed: 2694329877
0.00.393.422 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.393.425 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.393.426 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconary term with the meaning "a group of people of the same name who are related through descent."

Answer: Surname [end of text]


0.01.720.977 I llama_perf_sampler_print:    sampling time =       4.04 ms /    27 runs   (    0.15 ms per token,  6679.86 tokens per second)
0.01.720.980 I llama_perf_context_print:        load time =     391.47 ms
0.01.720.981 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.720.982 I llama_perf_context_print:        eval time =    1312.14 ms /    26 runs   (   50.47 ms per token,    19.81 tokens per second)
0.01.720.983 I llama_perf_context_print:       total time =    1327.69 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.016s
user	8m13.715s
sys	0m7.045s
