+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.570 I build: 3767 (5c3d0f18) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.762 I main: llama backend init
0.00.001.853 I main: load the model and apply lora adapter, if any
0.00.022.305 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.353 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.364 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.369 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.370 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.373 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.374 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.375 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.375 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.376 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.376 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.381 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.381 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.383 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.383 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.384 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.534 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.037 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.869 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.875 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.876 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.877 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.878 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.878 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.879 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.882 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.884 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.884 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.885 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.886 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.889 I llama_model_loader: - type  f32:   37 tensors
0.00.131.892 I llama_model_loader: - type q8_0:  127 tensors
0.00.196.211 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.196.849 I llm_load_vocab: special tokens cache size = 5
0.00.215.306 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.215.320 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.215.321 I llm_load_print_meta: arch             = gemma
0.00.215.322 I llm_load_print_meta: vocab type       = SPM
0.00.215.322 I llm_load_print_meta: n_vocab          = 256000
0.00.215.323 I llm_load_print_meta: n_merges         = 0
0.00.215.323 I llm_load_print_meta: vocab_only       = 0
0.00.215.324 I llm_load_print_meta: n_ctx_train      = 8192
0.00.215.324 I llm_load_print_meta: n_embd           = 2048
0.00.215.324 I llm_load_print_meta: n_layer          = 18
0.00.215.336 I llm_load_print_meta: n_head           = 8
0.00.215.337 I llm_load_print_meta: n_head_kv        = 1
0.00.215.337 I llm_load_print_meta: n_rot            = 256
0.00.215.338 I llm_load_print_meta: n_swa            = 0
0.00.215.338 I llm_load_print_meta: n_embd_head_k    = 256
0.00.215.338 I llm_load_print_meta: n_embd_head_v    = 256
0.00.215.339 I llm_load_print_meta: n_gqa            = 8
0.00.215.340 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.215.342 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.215.343 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.215.344 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.215.344 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.215.344 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.215.345 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.215.346 I llm_load_print_meta: n_ff             = 16384
0.00.215.346 I llm_load_print_meta: n_expert         = 0
0.00.215.346 I llm_load_print_meta: n_expert_used    = 0
0.00.215.346 I llm_load_print_meta: causal attn      = 1
0.00.215.347 I llm_load_print_meta: pooling type     = 0
0.00.215.347 I llm_load_print_meta: rope type        = 2
0.00.215.347 I llm_load_print_meta: rope scaling     = linear
0.00.215.349 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.215.350 I llm_load_print_meta: freq_scale_train = 1
0.00.215.350 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.215.351 I llm_load_print_meta: rope_finetuned   = unknown
0.00.215.351 I llm_load_print_meta: ssm_d_conv       = 0
0.00.215.352 I llm_load_print_meta: ssm_d_inner      = 0
0.00.215.352 I llm_load_print_meta: ssm_d_state      = 0
0.00.215.352 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.215.352 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.215.353 I llm_load_print_meta: model type       = 2B
0.00.215.354 I llm_load_print_meta: model ftype      = Q8_0
0.00.215.354 I llm_load_print_meta: model params     = 2.51 B
0.00.215.355 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.215.356 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.215.356 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.215.357 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.215.357 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.215.357 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.215.358 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.215.358 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.215.359 I llm_load_print_meta: max token length = 93
0.00.215.375 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.314.935 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.314.942 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.314.943 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.314.944 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.314.944 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.314.945 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.320.093 I llama_new_context_with_model: n_ctx      = 8192
0.00.320.099 I llama_new_context_with_model: n_batch    = 2048
0.00.320.100 I llama_new_context_with_model: n_ubatch   = 512
0.00.320.100 I llama_new_context_with_model: flash_attn = 0
0.00.320.102 I llama_new_context_with_model: freq_base  = 10000.0
0.00.320.103 I llama_new_context_with_model: freq_scale = 1
0.00.349.049 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.349.063 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.349.155 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.350.009 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.350.017 I llama_new_context_with_model: graph nodes  = 601
0.00.350.017 I llama_new_context_with_model: graph splits = 1
0.00.350.020 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.441.766 I main: llama threadpool init, n_threads = 4
0.00.441.777 I 
0.00.441.850 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.441.853 I 
0.00.441.890 I sampler seed: 1905510220
0.00.441.901 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.441.903 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.441.904 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities in the comments section of a video game. 

I am unable to provide a response that includes sexually suggestive or inappropriate content. [end of text]


0.02.480.654 I llama_perf_sampler_print:    sampling time =       4.71 ms /    30 runs   (    0.16 ms per token,  6373.49 tokens per second)
0.02.480.657 I llama_perf_context_print:        load time =     439.90 ms
0.02.480.658 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.480.659 I llama_perf_context_print:        eval time =    2022.03 ms /    29 runs   (   69.73 ms per token,    14.34 tokens per second)
0.02.480.660 I llama_perf_context_print:       total time =    2038.90 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.562 I build: 3767 (5c3d0f18) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.757 I main: llama backend init
0.00.001.842 I main: load the model and apply lora adapter, if any
0.00.022.087 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.101 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.107 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.108 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.112 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.113 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.113 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.114 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.114 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.115 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.119 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.120 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.120 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.120 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.121 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.079 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.431 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.389 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.396 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.397 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.397 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.398 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.399 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.400 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.403 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.404 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.405 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.405 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.406 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.410 I llama_model_loader: - type  f32:   37 tensors
0.00.132.412 I llama_model_loader: - type q8_0:  127 tensors
0.00.195.831 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.196.478 I llm_load_vocab: special tokens cache size = 5
0.00.214.863 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.214.876 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.214.876 I llm_load_print_meta: arch             = gemma
0.00.214.877 I llm_load_print_meta: vocab type       = SPM
0.00.214.878 I llm_load_print_meta: n_vocab          = 256000
0.00.214.878 I llm_load_print_meta: n_merges         = 0
0.00.214.878 I llm_load_print_meta: vocab_only       = 0
0.00.214.879 I llm_load_print_meta: n_ctx_train      = 8192
0.00.214.879 I llm_load_print_meta: n_embd           = 2048
0.00.214.879 I llm_load_print_meta: n_layer          = 18
0.00.214.891 I llm_load_print_meta: n_head           = 8
0.00.214.892 I llm_load_print_meta: n_head_kv        = 1
0.00.214.892 I llm_load_print_meta: n_rot            = 256
0.00.214.893 I llm_load_print_meta: n_swa            = 0
0.00.214.893 I llm_load_print_meta: n_embd_head_k    = 256
0.00.214.893 I llm_load_print_meta: n_embd_head_v    = 256
0.00.214.894 I llm_load_print_meta: n_gqa            = 8
0.00.214.895 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.214.896 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.214.897 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.214.899 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.214.899 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.214.899 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.214.900 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.214.901 I llm_load_print_meta: n_ff             = 16384
0.00.214.901 I llm_load_print_meta: n_expert         = 0
0.00.214.902 I llm_load_print_meta: n_expert_used    = 0
0.00.214.902 I llm_load_print_meta: causal attn      = 1
0.00.214.902 I llm_load_print_meta: pooling type     = 0
0.00.214.902 I llm_load_print_meta: rope type        = 2
0.00.214.903 I llm_load_print_meta: rope scaling     = linear
0.00.214.905 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.214.906 I llm_load_print_meta: freq_scale_train = 1
0.00.214.906 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.214.906 I llm_load_print_meta: rope_finetuned   = unknown
0.00.214.907 I llm_load_print_meta: ssm_d_conv       = 0
0.00.214.908 I llm_load_print_meta: ssm_d_inner      = 0
0.00.214.908 I llm_load_print_meta: ssm_d_state      = 0
0.00.214.908 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.214.908 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.214.909 I llm_load_print_meta: model type       = 2B
0.00.214.909 I llm_load_print_meta: model ftype      = Q8_0
0.00.214.911 I llm_load_print_meta: model params     = 2.51 B
0.00.214.911 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.214.912 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.214.913 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.214.913 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.214.913 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.214.914 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.214.914 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.214.915 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.214.915 I llm_load_print_meta: max token length = 93
0.00.214.932 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.308.984 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.314.046 I llama_new_context_with_model: n_ctx      = 8192
0.00.314.052 I llama_new_context_with_model: n_batch    = 2048
0.00.314.052 I llama_new_context_with_model: n_ubatch   = 512
0.00.314.053 I llama_new_context_with_model: flash_attn = 0
0.00.314.056 I llama_new_context_with_model: freq_base  = 10000.0
0.00.314.057 I llama_new_context_with_model: freq_scale = 1
0.00.343.639 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.343.654 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.343.748 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.599 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.344.607 I llama_new_context_with_model: graph nodes  = 601
0.00.344.608 I llama_new_context_with_model: graph splits = 1
0.00.344.609 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.431.527 I main: llama threadpool init, n_threads = 4
0.00.431.538 I 
0.00.431.612 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.431.615 I 
0.00.431.651 I sampler seed: 3621316668
0.00.431.660 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.431.663 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.431.663 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically. [end of text]


0.00.705.230 I llama_perf_sampler_print:    sampling time =       0.65 ms /     5 runs   (    0.13 ms per token,  7645.26 tokens per second)
0.00.705.233 I llama_perf_context_print:        load time =     429.67 ms
0.00.705.234 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.705.236 I llama_perf_context_print:        eval time =     270.24 ms /     4 runs   (   67.56 ms per token,    14.80 tokens per second)
0.00.705.238 I llama_perf_context_print:       total time =     273.71 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.563 I build: 3767 (5c3d0f18) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.773 I main: llama backend init
0.00.001.877 I main: load the model and apply lora adapter, if any
0.00.022.082 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.151 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.161 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.167 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.169 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.173 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.174 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.175 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.176 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.177 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.179 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.184 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.185 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.187 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.188 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.189 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.603 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.770 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.702 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.709 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.710 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.710 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.711 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.712 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.712 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.715 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.717 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.717 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.718 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.719 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.723 I llama_model_loader: - type  f32:   37 tensors
0.00.132.726 I llama_model_loader: - type q8_0:  127 tensors
0.00.196.576 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.197.272 I llm_load_vocab: special tokens cache size = 5
0.00.215.888 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.215.903 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.215.904 I llm_load_print_meta: arch             = gemma
0.00.215.904 I llm_load_print_meta: vocab type       = SPM
0.00.215.905 I llm_load_print_meta: n_vocab          = 256000
0.00.215.906 I llm_load_print_meta: n_merges         = 0
0.00.215.906 I llm_load_print_meta: vocab_only       = 0
0.00.215.907 I llm_load_print_meta: n_ctx_train      = 8192
0.00.215.925 I llm_load_print_meta: n_embd           = 2048
0.00.215.926 I llm_load_print_meta: n_layer          = 18
0.00.215.941 I llm_load_print_meta: n_head           = 8
0.00.215.943 I llm_load_print_meta: n_head_kv        = 1
0.00.215.943 I llm_load_print_meta: n_rot            = 256
0.00.215.944 I llm_load_print_meta: n_swa            = 0
0.00.215.945 I llm_load_print_meta: n_embd_head_k    = 256
0.00.215.946 I llm_load_print_meta: n_embd_head_v    = 256
0.00.215.947 I llm_load_print_meta: n_gqa            = 8
0.00.215.948 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.215.950 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.215.952 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.215.954 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.215.954 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.215.955 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.215.956 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.215.957 I llm_load_print_meta: n_ff             = 16384
0.00.215.958 I llm_load_print_meta: n_expert         = 0
0.00.215.958 I llm_load_print_meta: n_expert_used    = 0
0.00.215.960 I llm_load_print_meta: causal attn      = 1
0.00.215.960 I llm_load_print_meta: pooling type     = 0
0.00.215.960 I llm_load_print_meta: rope type        = 2
0.00.215.961 I llm_load_print_meta: rope scaling     = linear
0.00.215.963 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.215.965 I llm_load_print_meta: freq_scale_train = 1
0.00.215.966 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.215.966 I llm_load_print_meta: rope_finetuned   = unknown
0.00.215.967 I llm_load_print_meta: ssm_d_conv       = 0
0.00.215.967 I llm_load_print_meta: ssm_d_inner      = 0
0.00.215.968 I llm_load_print_meta: ssm_d_state      = 0
0.00.215.968 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.215.969 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.215.970 I llm_load_print_meta: model type       = 2B
0.00.215.971 I llm_load_print_meta: model ftype      = Q8_0
0.00.215.972 I llm_load_print_meta: model params     = 2.51 B
0.00.215.974 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.215.974 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.215.976 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.215.977 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.215.977 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.215.978 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.215.979 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.215.980 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.215.980 I llm_load_print_meta: max token length = 93
0.00.216.012 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.290.225 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.290.234 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.290.235 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.290.235 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.290.236 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.290.237 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.295.554 I llama_new_context_with_model: n_ctx      = 8192
0.00.295.563 I llama_new_context_with_model: n_batch    = 2048
0.00.295.564 I llama_new_context_with_model: n_ubatch   = 512
0.00.295.564 I llama_new_context_with_model: flash_attn = 0
0.00.295.569 I llama_new_context_with_model: freq_base  = 10000.0
0.00.295.570 I llama_new_context_with_model: freq_scale = 1
0.00.325.666 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.325.685 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.325.778 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.326.704 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.326.711 I llama_new_context_with_model: graph nodes  = 601
0.00.326.712 I llama_new_context_with_model: graph splits = 1
0.00.326.713 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.420.079 I main: llama threadpool init, n_threads = 4
0.00.420.092 I 
0.00.420.175 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.420.180 I 
0.00.420.219 I sampler seed: 2074097550
0.00.420.232 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.420.235 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.420.236 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increadibly for the past several years. 

I am aware that my success is due to a combination of factors, including my hard work, dedication, and

0.02.731.907 I llama_perf_sampler_print:    sampling time =       4.62 ms /    33 runs   (    0.14 ms per token,  7141.31 tokens per second)
0.02.731.909 I llama_perf_context_print:        load time =     418.18 ms
0.02.731.910 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.731.911 I llama_perf_context_print:        eval time =    2294.05 ms /    32 runs   (   71.69 ms per token,    13.95 tokens per second)
0.02.731.912 I llama_perf_context_print:       total time =    2311.83 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.584 I build: 3767 (5c3d0f18) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.802 I main: llama backend init
0.00.001.939 I main: load the model and apply lora adapter, if any
0.00.022.217 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.271 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.285 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.292 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.296 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.301 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.302 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.303 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.304 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.305 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.306 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.312 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.313 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.314 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.314 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.316 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.603 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.871 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.755 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.762 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.763 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.764 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.764 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.765 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.766 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.769 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.769 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.770 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.771 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.772 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.777 I llama_model_loader: - type  f32:   37 tensors
0.00.132.779 I llama_model_loader: - type q8_0:  127 tensors
0.00.198.285 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.198.981 I llm_load_vocab: special tokens cache size = 5
0.00.217.512 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.217.526 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.217.526 I llm_load_print_meta: arch             = gemma
0.00.217.527 I llm_load_print_meta: vocab type       = SPM
0.00.217.528 I llm_load_print_meta: n_vocab          = 256000
0.00.217.529 I llm_load_print_meta: n_merges         = 0
0.00.217.529 I llm_load_print_meta: vocab_only       = 0
0.00.217.530 I llm_load_print_meta: n_ctx_train      = 8192
0.00.217.530 I llm_load_print_meta: n_embd           = 2048
0.00.217.530 I llm_load_print_meta: n_layer          = 18
0.00.217.544 I llm_load_print_meta: n_head           = 8
0.00.217.544 I llm_load_print_meta: n_head_kv        = 1
0.00.217.545 I llm_load_print_meta: n_rot            = 256
0.00.217.545 I llm_load_print_meta: n_swa            = 0
0.00.217.545 I llm_load_print_meta: n_embd_head_k    = 256
0.00.217.546 I llm_load_print_meta: n_embd_head_v    = 256
0.00.217.547 I llm_load_print_meta: n_gqa            = 8
0.00.217.548 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.217.549 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.217.549 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.217.551 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.217.551 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.217.551 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.217.551 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.217.552 I llm_load_print_meta: n_ff             = 16384
0.00.217.553 I llm_load_print_meta: n_expert         = 0
0.00.217.553 I llm_load_print_meta: n_expert_used    = 0
0.00.217.553 I llm_load_print_meta: causal attn      = 1
0.00.217.553 I llm_load_print_meta: pooling type     = 0
0.00.217.554 I llm_load_print_meta: rope type        = 2
0.00.217.554 I llm_load_print_meta: rope scaling     = linear
0.00.217.556 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.217.556 I llm_load_print_meta: freq_scale_train = 1
0.00.217.557 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.217.558 I llm_load_print_meta: rope_finetuned   = unknown
0.00.217.558 I llm_load_print_meta: ssm_d_conv       = 0
0.00.217.558 I llm_load_print_meta: ssm_d_inner      = 0
0.00.217.559 I llm_load_print_meta: ssm_d_state      = 0
0.00.217.559 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.217.559 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.217.560 I llm_load_print_meta: model type       = 2B
0.00.217.561 I llm_load_print_meta: model ftype      = Q8_0
0.00.217.562 I llm_load_print_meta: model params     = 2.51 B
0.00.217.563 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.217.564 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.217.565 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.217.565 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.217.565 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.217.566 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.217.570 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.217.571 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.217.571 I llm_load_print_meta: max token length = 93
0.00.217.591 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.287.416 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.287.424 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.292.526 I llama_new_context_with_model: n_ctx      = 8192
0.00.292.533 I llama_new_context_with_model: n_batch    = 2048
0.00.292.534 I llama_new_context_with_model: n_ubatch   = 512
0.00.292.534 I llama_new_context_with_model: flash_attn = 0
0.00.292.537 I llama_new_context_with_model: freq_base  = 10000.0
0.00.292.538 I llama_new_context_with_model: freq_scale = 1
0.00.322.811 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.322.828 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.322.927 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.323.828 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.323.837 I llama_new_context_with_model: graph nodes  = 601
0.00.323.838 I llama_new_context_with_model: graph splits = 1
0.00.323.839 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.420.449 I main: llama threadpool init, n_threads = 4
0.00.420.462 I 
0.00.420.542 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.420.546 I 
0.00.420.598 I sampler seed: 3291909229
0.00.420.607 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.420.610 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.420.611 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increadibly close to the truth.

I am unable to provide a response as it would involve making subjective and potentially misleading statements. [end of text]


0.02.477.573 I llama_perf_sampler_print:    sampling time =       4.36 ms /    28 runs   (    0.16 ms per token,  6422.02 tokens per second)
0.02.477.575 I llama_perf_context_print:        load time =     418.49 ms
0.02.477.577 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.477.579 I llama_perf_context_print:        eval time =    2040.66 ms /    27 runs   (   75.58 ms per token,    13.23 tokens per second)
0.02.477.579 I llama_perf_context_print:       total time =    2057.13 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.864s
user	0m29.436s
sys	0m9.403s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3767 (5c3d0f18)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32041.96 ms
main:    total time = 32041.96 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.513 I build: 3767 (5c3d0f18) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.710 I main: llama backend init
0.00.001.795 I main: load the model and apply lora adapter, if any
0.00.022.128 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.177 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.184 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.190 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.191 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.195 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.196 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.197 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.198 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.198 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.200 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.203 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.204 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.204 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.205 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.206 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.830 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.659 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.505 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.511 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.512 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.513 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.514 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.515 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.516 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.520 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.521 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.522 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.523 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.524 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.528 I llama_model_loader: - type  f32:   37 tensors
0.00.132.532 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.533 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.343 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.202.165 I llm_load_vocab: special tokens cache size = 5
0.00.220.894 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.220.910 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.220.911 I llm_load_print_meta: arch             = gemma
0.00.220.911 I llm_load_print_meta: vocab type       = SPM
0.00.220.912 I llm_load_print_meta: n_vocab          = 256000
0.00.220.913 I llm_load_print_meta: n_merges         = 0
0.00.220.913 I llm_load_print_meta: vocab_only       = 0
0.00.220.914 I llm_load_print_meta: n_ctx_train      = 8192
0.00.220.914 I llm_load_print_meta: n_embd           = 2048
0.00.220.914 I llm_load_print_meta: n_layer          = 18
0.00.220.927 I llm_load_print_meta: n_head           = 8
0.00.220.928 I llm_load_print_meta: n_head_kv        = 1
0.00.220.928 I llm_load_print_meta: n_rot            = 256
0.00.220.928 I llm_load_print_meta: n_swa            = 0
0.00.220.929 I llm_load_print_meta: n_embd_head_k    = 256
0.00.220.929 I llm_load_print_meta: n_embd_head_v    = 256
0.00.220.930 I llm_load_print_meta: n_gqa            = 8
0.00.220.931 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.220.932 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.220.933 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.220.934 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.220.935 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.220.935 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.220.935 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.220.936 I llm_load_print_meta: n_ff             = 16384
0.00.220.936 I llm_load_print_meta: n_expert         = 0
0.00.220.937 I llm_load_print_meta: n_expert_used    = 0
0.00.220.937 I llm_load_print_meta: causal attn      = 1
0.00.220.937 I llm_load_print_meta: pooling type     = 0
0.00.220.937 I llm_load_print_meta: rope type        = 2
0.00.220.938 I llm_load_print_meta: rope scaling     = linear
0.00.220.939 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.220.940 I llm_load_print_meta: freq_scale_train = 1
0.00.220.940 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.220.941 I llm_load_print_meta: rope_finetuned   = unknown
0.00.220.941 I llm_load_print_meta: ssm_d_conv       = 0
0.00.220.941 I llm_load_print_meta: ssm_d_inner      = 0
0.00.220.941 I llm_load_print_meta: ssm_d_state      = 0
0.00.220.942 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.220.942 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.220.942 I llm_load_print_meta: model type       = 2B
0.00.220.943 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.220.944 I llm_load_print_meta: model params     = 2.51 B
0.00.220.945 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.220.945 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.220.946 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.220.946 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.220.946 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.220.947 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.220.947 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.220.948 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.220.948 I llm_load_print_meta: max token length = 93
0.00.220.974 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.279.365 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.279.373 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.279.373 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.279.374 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.279.375 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.279.375 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.284.366 I llama_new_context_with_model: n_ctx      = 8192
0.00.284.372 I llama_new_context_with_model: n_batch    = 2048
0.00.284.373 I llama_new_context_with_model: n_ubatch   = 512
0.00.284.373 I llama_new_context_with_model: flash_attn = 0
0.00.284.376 I llama_new_context_with_model: freq_base  = 10000.0
0.00.284.377 I llama_new_context_with_model: freq_scale = 1
0.00.313.878 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.313.894 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.313.978 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.314.847 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.314.852 I llama_new_context_with_model: graph nodes  = 601
0.00.314.853 I llama_new_context_with_model: graph splits = 1
0.00.314.855 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.396.613 I main: llama threadpool init, n_threads = 4
0.00.396.625 I 
0.00.396.699 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.396.702 I 
0.00.396.731 I sampler seed: 3094929317
0.00.396.740 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.396.743 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.396.743 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneuvously. 

I am unable to generate a response due to the provided context being insufficient. Please provide more context so I can assist you. [end of text]


0.02.019.413 I llama_perf_sampler_print:    sampling time =       4.64 ms /    33 runs   (    0.14 ms per token,  7112.07 tokens per second)
0.02.019.416 I llama_perf_context_print:        load time =     394.80 ms
0.02.019.417 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.019.419 I llama_perf_context_print:        eval time =    1604.23 ms /    32 runs   (   50.13 ms per token,    19.95 tokens per second)
0.02.019.420 I llama_perf_context_print:       total time =    1622.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3767 (5c3d0f18)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32090.53 ms
main:    total time = 32090.53 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.569 I build: 3767 (5c3d0f18) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.772 I main: llama backend init
0.00.001.899 I main: load the model and apply lora adapter, if any
0.00.021.936 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.949 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.957 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.958 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.961 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.962 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.963 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.964 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.964 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.965 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.969 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.969 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.970 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.970 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.971 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.013 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.879 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.791 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.797 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.798 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.799 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.800 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.801 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.802 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.805 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.806 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.810 I llama_model_loader: - type  f32:   37 tensors
0.00.131.812 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.812 I llama_model_loader: - type q6_K:   19 tensors
0.00.194.898 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.195.538 I llm_load_vocab: special tokens cache size = 5
0.00.214.140 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.214.154 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.214.154 I llm_load_print_meta: arch             = gemma
0.00.214.155 I llm_load_print_meta: vocab type       = SPM
0.00.214.155 I llm_load_print_meta: n_vocab          = 256000
0.00.214.155 I llm_load_print_meta: n_merges         = 0
0.00.214.156 I llm_load_print_meta: vocab_only       = 0
0.00.214.156 I llm_load_print_meta: n_ctx_train      = 8192
0.00.214.156 I llm_load_print_meta: n_embd           = 2048
0.00.214.157 I llm_load_print_meta: n_layer          = 18
0.00.214.169 I llm_load_print_meta: n_head           = 8
0.00.214.170 I llm_load_print_meta: n_head_kv        = 1
0.00.214.170 I llm_load_print_meta: n_rot            = 256
0.00.214.170 I llm_load_print_meta: n_swa            = 0
0.00.214.171 I llm_load_print_meta: n_embd_head_k    = 256
0.00.214.171 I llm_load_print_meta: n_embd_head_v    = 256
0.00.214.172 I llm_load_print_meta: n_gqa            = 8
0.00.214.173 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.214.174 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.214.175 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.214.176 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.214.177 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.214.177 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.214.177 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.214.178 I llm_load_print_meta: n_ff             = 16384
0.00.214.178 I llm_load_print_meta: n_expert         = 0
0.00.214.178 I llm_load_print_meta: n_expert_used    = 0
0.00.214.179 I llm_load_print_meta: causal attn      = 1
0.00.214.179 I llm_load_print_meta: pooling type     = 0
0.00.214.179 I llm_load_print_meta: rope type        = 2
0.00.214.180 I llm_load_print_meta: rope scaling     = linear
0.00.214.181 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.214.182 I llm_load_print_meta: freq_scale_train = 1
0.00.214.182 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.214.183 I llm_load_print_meta: rope_finetuned   = unknown
0.00.214.183 I llm_load_print_meta: ssm_d_conv       = 0
0.00.214.183 I llm_load_print_meta: ssm_d_inner      = 0
0.00.214.183 I llm_load_print_meta: ssm_d_state      = 0
0.00.214.184 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.214.184 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.214.184 I llm_load_print_meta: model type       = 2B
0.00.214.185 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.214.186 I llm_load_print_meta: model params     = 2.51 B
0.00.214.186 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.214.187 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.214.187 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.214.187 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.214.188 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.214.188 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.214.188 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.214.189 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.214.189 I llm_load_print_meta: max token length = 93
0.00.214.209 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.270.872 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.275.854 I llama_new_context_with_model: n_ctx      = 8192
0.00.275.861 I llama_new_context_with_model: n_batch    = 2048
0.00.275.861 I llama_new_context_with_model: n_ubatch   = 512
0.00.275.862 I llama_new_context_with_model: flash_attn = 0
0.00.275.863 I llama_new_context_with_model: freq_base  = 10000.0
0.00.275.864 I llama_new_context_with_model: freq_scale = 1
0.00.304.753 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.304.769 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.304.862 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.305.708 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.305.716 I llama_new_context_with_model: graph nodes  = 601
0.00.305.716 I llama_new_context_with_model: graph splits = 1
0.00.305.718 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.386.111 I main: llama threadpool init, n_threads = 4
0.00.386.123 I 
0.00.386.196 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.386.200 I 
0.00.386.239 I sampler seed: 132243529
0.00.386.248 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.386.250 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.386.251 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 squaRELLA, the most powerful goddess in the land of Olympus. She is the embodiment of beauty, grace, and power. Her eyes sparkle with wisdom and

0.02.022.612 I llama_perf_sampler_print:    sampling time =       4.65 ms /    33 runs   (    0.14 ms per token,  7101.36 tokens per second)
0.02.022.616 I llama_perf_context_print:        load time =     384.20 ms
0.02.022.617 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.022.619 I llama_perf_context_print:        eval time =    1618.95 ms /    32 runs   (   50.59 ms per token,    19.77 tokens per second)
0.02.022.619 I llama_perf_context_print:       total time =    1636.51 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.209s
user	8m14.625s
sys	0m7.008s
