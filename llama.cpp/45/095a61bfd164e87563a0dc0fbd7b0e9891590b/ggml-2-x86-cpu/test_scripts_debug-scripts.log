+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.672 I build: 4403 (45095a61) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.868 I main: llama backend init
0.00.000.876 I main: load the model and apply lora adapter, if any
0.00.023.776 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.790 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.887 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.901 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.905 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.911 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.915 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.917 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.921 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.922 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.924 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.932 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.934 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.935 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.937 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.938 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.189 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.702 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.885 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.896 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.897 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.898 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.900 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.902 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.903 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.907 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.910 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.912 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.913 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.351.915 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.923 I llama_model_loader: - type  f32:   37 tensors
0.00.351.926 I llama_model_loader: - type q8_0:  127 tensors
0.00.560.933 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.617.342 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.618.249 I llm_load_vocab: special tokens cache size = 5
0.00.820.880 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.820.950 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.820.951 I llm_load_print_meta: arch             = gemma
0.00.820.952 I llm_load_print_meta: vocab type       = SPM
0.00.820.953 I llm_load_print_meta: n_vocab          = 256000
0.00.820.955 I llm_load_print_meta: n_merges         = 0
0.00.820.956 I llm_load_print_meta: vocab_only       = 0
0.00.820.956 I llm_load_print_meta: n_ctx_train      = 8192
0.00.820.957 I llm_load_print_meta: n_embd           = 2048
0.00.820.957 I llm_load_print_meta: n_layer          = 18
0.00.821.021 I llm_load_print_meta: n_head           = 8
0.00.821.028 I llm_load_print_meta: n_head_kv        = 1
0.00.821.028 I llm_load_print_meta: n_rot            = 256
0.00.821.030 I llm_load_print_meta: n_swa            = 0
0.00.821.031 I llm_load_print_meta: n_embd_head_k    = 256
0.00.821.031 I llm_load_print_meta: n_embd_head_v    = 256
0.00.821.036 I llm_load_print_meta: n_gqa            = 8
0.00.821.041 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.821.046 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.821.051 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.821.052 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.821.053 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.821.053 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.821.054 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.821.059 I llm_load_print_meta: n_ff             = 16384
0.00.821.060 I llm_load_print_meta: n_expert         = 0
0.00.821.060 I llm_load_print_meta: n_expert_used    = 0
0.00.821.061 I llm_load_print_meta: causal attn      = 1
0.00.821.061 I llm_load_print_meta: pooling type     = 0
0.00.821.063 I llm_load_print_meta: rope type        = 2
0.00.821.064 I llm_load_print_meta: rope scaling     = linear
0.00.821.065 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.821.066 I llm_load_print_meta: freq_scale_train = 1
0.00.821.066 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.821.066 I llm_load_print_meta: rope_finetuned   = unknown
0.00.821.066 I llm_load_print_meta: ssm_d_conv       = 0
0.00.821.067 I llm_load_print_meta: ssm_d_inner      = 0
0.00.821.067 I llm_load_print_meta: ssm_d_state      = 0
0.00.821.067 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.821.068 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.821.068 I llm_load_print_meta: model type       = 2B
0.00.821.069 I llm_load_print_meta: model ftype      = Q8_0
0.00.821.070 I llm_load_print_meta: model params     = 2.51 B
0.00.821.071 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.821.072 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.821.073 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.821.073 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.821.074 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.821.074 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.821.074 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.821.075 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.821.081 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.821.082 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.821.082 I llm_load_print_meta: max token length = 93
0.00.924.664 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.924.674 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.924.675 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.924.676 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.924.676 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.924.677 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.930.727 I llama_new_context_with_model: n_seq_max     = 1
0.00.930.735 I llama_new_context_with_model: n_ctx         = 4096
0.00.930.735 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.930.735 I llama_new_context_with_model: n_batch       = 2048
0.00.930.736 I llama_new_context_with_model: n_ubatch      = 512
0.00.930.737 I llama_new_context_with_model: flash_attn    = 0
0.00.930.740 I llama_new_context_with_model: freq_base     = 10000.0
0.00.930.741 I llama_new_context_with_model: freq_scale    = 1
0.00.930.742 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.930.834 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.946.411 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.946.453 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.946.570 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.949.250 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.949.255 I llama_new_context_with_model: graph nodes  = 601
0.00.949.255 I llama_new_context_with_model: graph splits = 1
0.00.949.279 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.949.282 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.558.192 I main: llama threadpool init, n_threads = 4
0.01.558.210 I 
0.01.558.328 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.558.332 I 
0.01.558.584 I sampler seed: 817611788
0.01.558.597 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.558.608 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.558.617 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.558.618 I 
 increasities to a modern woman?

**Answer:**

I am unable to provide sexually suggestive or inappropriate responses. My purpose is to assist with tasks and questions

0.15.023.379 I llama_perf_sampler_print:    sampling time =      49.62 ms /    33 runs   (    1.50 ms per token,   665.07 tokens per second)
0.15.023.383 I llama_perf_context_print:        load time =    1557.21 ms
0.15.023.396 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.023.398 I llama_perf_context_print:        eval time =   13375.76 ms /    32 runs   (  417.99 ms per token,     2.39 tokens per second)
0.15.023.400 I llama_perf_context_print:       total time =   13465.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.680 I build: 4403 (45095a61) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.889 I main: llama backend init
0.00.000.898 I main: load the model and apply lora adapter, if any
0.00.023.367 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.469 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.485 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.491 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.496 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.507 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.509 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.518 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.520 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.521 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.528 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.530 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.532 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.533 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.534 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.846 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.081 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.299 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.310 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.311 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.312 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.313 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.315 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.316 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.320 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.321 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.322 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.345 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.351.350 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.358 I llama_model_loader: - type  f32:   37 tensors
0.00.351.360 I llama_model_loader: - type q8_0:  127 tensors
0.00.565.675 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.621.788 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.622.657 I llm_load_vocab: special tokens cache size = 5
0.00.828.633 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.828.706 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.828.711 I llm_load_print_meta: arch             = gemma
0.00.828.711 I llm_load_print_meta: vocab type       = SPM
0.00.828.712 I llm_load_print_meta: n_vocab          = 256000
0.00.828.714 I llm_load_print_meta: n_merges         = 0
0.00.828.715 I llm_load_print_meta: vocab_only       = 0
0.00.828.715 I llm_load_print_meta: n_ctx_train      = 8192
0.00.828.716 I llm_load_print_meta: n_embd           = 2048
0.00.828.716 I llm_load_print_meta: n_layer          = 18
0.00.828.780 I llm_load_print_meta: n_head           = 8
0.00.828.789 I llm_load_print_meta: n_head_kv        = 1
0.00.828.790 I llm_load_print_meta: n_rot            = 256
0.00.828.790 I llm_load_print_meta: n_swa            = 0
0.00.828.790 I llm_load_print_meta: n_embd_head_k    = 256
0.00.828.791 I llm_load_print_meta: n_embd_head_v    = 256
0.00.828.796 I llm_load_print_meta: n_gqa            = 8
0.00.828.801 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.828.806 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.828.807 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.828.809 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.828.809 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.828.810 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.828.810 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.828.815 I llm_load_print_meta: n_ff             = 16384
0.00.828.816 I llm_load_print_meta: n_expert         = 0
0.00.828.817 I llm_load_print_meta: n_expert_used    = 0
0.00.828.818 I llm_load_print_meta: causal attn      = 1
0.00.828.818 I llm_load_print_meta: pooling type     = 0
0.00.828.818 I llm_load_print_meta: rope type        = 2
0.00.828.819 I llm_load_print_meta: rope scaling     = linear
0.00.828.820 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.828.821 I llm_load_print_meta: freq_scale_train = 1
0.00.828.821 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.828.822 I llm_load_print_meta: rope_finetuned   = unknown
0.00.828.822 I llm_load_print_meta: ssm_d_conv       = 0
0.00.828.822 I llm_load_print_meta: ssm_d_inner      = 0
0.00.828.831 I llm_load_print_meta: ssm_d_state      = 0
0.00.828.832 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.828.832 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.828.833 I llm_load_print_meta: model type       = 2B
0.00.828.834 I llm_load_print_meta: model ftype      = Q8_0
0.00.828.835 I llm_load_print_meta: model params     = 2.51 B
0.00.828.836 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.828.836 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.828.840 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.828.841 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.828.852 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.828.853 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.828.854 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.828.854 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.828.861 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.828.862 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.828.862 I llm_load_print_meta: max token length = 93
0.00.925.819 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.932.618 I llama_new_context_with_model: n_seq_max     = 1
0.00.932.627 I llama_new_context_with_model: n_ctx         = 4096
0.00.932.628 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.932.628 I llama_new_context_with_model: n_batch       = 2048
0.00.932.629 I llama_new_context_with_model: n_ubatch      = 512
0.00.932.630 I llama_new_context_with_model: flash_attn    = 0
0.00.932.633 I llama_new_context_with_model: freq_base     = 10000.0
0.00.932.633 I llama_new_context_with_model: freq_scale    = 1
0.00.932.634 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.932.728 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.948.527 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.948.570 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.948.692 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.951.353 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.951.357 I llama_new_context_with_model: graph nodes  = 601
0.00.951.357 I llama_new_context_with_model: graph splits = 1
0.00.951.380 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.951.382 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.560.446 I main: llama threadpool init, n_threads = 4
0.01.560.463 I 
0.01.560.581 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.560.585 I 
0.01.560.818 I sampler seed: 2621459884
0.01.560.832 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.560.841 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.560.843 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.560.843 I 
 increamically. [end of text]


0.03.240.662 I llama_perf_sampler_print:    sampling time =       6.34 ms /     5 runs   (    1.27 ms per token,   788.02 tokens per second)
0.03.240.665 I llama_perf_context_print:        load time =    1559.44 ms
0.03.240.667 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.240.669 I llama_perf_context_print:        eval time =    1667.45 ms /     4 runs   (  416.86 ms per token,     2.40 tokens per second)
0.03.240.669 I llama_perf_context_print:       total time =    1680.23 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.628 I build: 4403 (45095a61) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.849 I main: llama backend init
0.00.000.856 I main: load the model and apply lora adapter, if any
0.00.023.049 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.060 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.146 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.158 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.159 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.164 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.167 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.169 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.171 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.173 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.174 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.180 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.182 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.184 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.185 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.187 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.900 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.336.523 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.362.316 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.362.331 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.362.333 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.362.335 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.362.338 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.362.340 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.362.342 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.362.349 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.362.351 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.362.353 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.362.355 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.362.358 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.362.369 I llama_model_loader: - type  f32:   37 tensors
0.00.362.371 I llama_model_loader: - type q8_0:  127 tensors
0.00.593.308 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.665.654 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.666.712 I llm_load_vocab: special tokens cache size = 5
0.00.878.951 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.879.023 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.879.027 I llm_load_print_meta: arch             = gemma
0.00.879.028 I llm_load_print_meta: vocab type       = SPM
0.00.879.029 I llm_load_print_meta: n_vocab          = 256000
0.00.879.032 I llm_load_print_meta: n_merges         = 0
0.00.879.032 I llm_load_print_meta: vocab_only       = 0
0.00.879.033 I llm_load_print_meta: n_ctx_train      = 8192
0.00.879.033 I llm_load_print_meta: n_embd           = 2048
0.00.879.033 I llm_load_print_meta: n_layer          = 18
0.00.879.097 I llm_load_print_meta: n_head           = 8
0.00.879.107 I llm_load_print_meta: n_head_kv        = 1
0.00.879.107 I llm_load_print_meta: n_rot            = 256
0.00.879.108 I llm_load_print_meta: n_swa            = 0
0.00.879.109 I llm_load_print_meta: n_embd_head_k    = 256
0.00.879.109 I llm_load_print_meta: n_embd_head_v    = 256
0.00.879.113 I llm_load_print_meta: n_gqa            = 8
0.00.879.118 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.879.123 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.879.127 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.879.129 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.879.130 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.879.130 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.879.130 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.879.135 I llm_load_print_meta: n_ff             = 16384
0.00.879.136 I llm_load_print_meta: n_expert         = 0
0.00.879.136 I llm_load_print_meta: n_expert_used    = 0
0.00.879.137 I llm_load_print_meta: causal attn      = 1
0.00.879.137 I llm_load_print_meta: pooling type     = 0
0.00.879.137 I llm_load_print_meta: rope type        = 2
0.00.879.138 I llm_load_print_meta: rope scaling     = linear
0.00.879.139 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.879.140 I llm_load_print_meta: freq_scale_train = 1
0.00.879.140 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.879.140 I llm_load_print_meta: rope_finetuned   = unknown
0.00.879.141 I llm_load_print_meta: ssm_d_conv       = 0
0.00.879.141 I llm_load_print_meta: ssm_d_inner      = 0
0.00.879.142 I llm_load_print_meta: ssm_d_state      = 0
0.00.879.143 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.879.143 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.879.144 I llm_load_print_meta: model type       = 2B
0.00.879.146 I llm_load_print_meta: model ftype      = Q8_0
0.00.879.146 I llm_load_print_meta: model params     = 2.51 B
0.00.879.148 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.879.148 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.879.149 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.879.150 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.879.151 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.879.152 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.879.152 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.879.153 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.879.158 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.879.160 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.879.160 I llm_load_print_meta: max token length = 93
0.00.958.796 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.958.806 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.958.807 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.958.808 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.958.817 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.958.818 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.964.817 I llama_new_context_with_model: n_seq_max     = 1
0.00.964.823 I llama_new_context_with_model: n_ctx         = 4096
0.00.964.824 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.964.824 I llama_new_context_with_model: n_batch       = 2048
0.00.964.825 I llama_new_context_with_model: n_ubatch      = 512
0.00.964.826 I llama_new_context_with_model: flash_attn    = 0
0.00.964.828 I llama_new_context_with_model: freq_base     = 10000.0
0.00.964.829 I llama_new_context_with_model: freq_scale    = 1
0.00.964.830 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.964.915 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.979.518 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.979.554 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.979.672 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.982.298 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.982.302 I llama_new_context_with_model: graph nodes  = 601
0.00.982.302 I llama_new_context_with_model: graph splits = 1
0.00.982.327 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.982.330 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.622.695 I main: llama threadpool init, n_threads = 4
0.01.622.711 I 
0.01.622.845 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.622.849 I 
0.01.623.086 I sampler seed: 1440338745
0.01.623.100 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.623.121 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.623.122 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.623.143 I 
 increasively in the following context:

The pandemic has caused a significant increase in the number of people seeking mental health care.

The increase has been particularly pronounced

0.15.224.784 I llama_perf_sampler_print:    sampling time =      49.64 ms /    33 runs   (    1.50 ms per token,   664.83 tokens per second)
0.15.224.798 I llama_perf_context_print:        load time =    1621.76 ms
0.15.224.800 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.224.801 I llama_perf_context_print:        eval time =   13512.67 ms /    32 runs   (  422.27 ms per token,     2.37 tokens per second)
0.15.224.803 I llama_perf_context_print:       total time =   13602.10 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 4403 (45095a61) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.874 I main: llama backend init
0.00.000.883 I main: load the model and apply lora adapter, if any
0.00.023.552 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.563 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.658 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.670 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.673 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.678 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.684 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.686 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.688 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.690 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.692 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.700 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.705 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.709 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.710 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.712 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.979 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.500 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.836 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.845 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.847 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.848 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.849 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.851 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.852 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.856 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.857 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.859 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.860 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.350.862 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.871 I llama_model_loader: - type  f32:   37 tensors
0.00.350.874 I llama_model_loader: - type q8_0:  127 tensors
0.00.588.342 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.646.831 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.647.753 I llm_load_vocab: special tokens cache size = 5
0.00.862.924 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.863.000 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.863.001 I llm_load_print_meta: arch             = gemma
0.00.863.002 I llm_load_print_meta: vocab type       = SPM
0.00.863.003 I llm_load_print_meta: n_vocab          = 256000
0.00.863.005 I llm_load_print_meta: n_merges         = 0
0.00.863.005 I llm_load_print_meta: vocab_only       = 0
0.00.863.006 I llm_load_print_meta: n_ctx_train      = 8192
0.00.863.006 I llm_load_print_meta: n_embd           = 2048
0.00.863.007 I llm_load_print_meta: n_layer          = 18
0.00.863.076 I llm_load_print_meta: n_head           = 8
0.00.863.085 I llm_load_print_meta: n_head_kv        = 1
0.00.863.089 I llm_load_print_meta: n_rot            = 256
0.00.863.090 I llm_load_print_meta: n_swa            = 0
0.00.863.090 I llm_load_print_meta: n_embd_head_k    = 256
0.00.863.091 I llm_load_print_meta: n_embd_head_v    = 256
0.00.863.097 I llm_load_print_meta: n_gqa            = 8
0.00.863.103 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.863.110 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.863.113 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.863.114 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.863.115 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.863.116 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.863.117 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.863.125 I llm_load_print_meta: n_ff             = 16384
0.00.863.126 I llm_load_print_meta: n_expert         = 0
0.00.863.127 I llm_load_print_meta: n_expert_used    = 0
0.00.863.128 I llm_load_print_meta: causal attn      = 1
0.00.863.128 I llm_load_print_meta: pooling type     = 0
0.00.863.130 I llm_load_print_meta: rope type        = 2
0.00.863.131 I llm_load_print_meta: rope scaling     = linear
0.00.863.134 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.863.135 I llm_load_print_meta: freq_scale_train = 1
0.00.863.136 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.863.136 I llm_load_print_meta: rope_finetuned   = unknown
0.00.863.137 I llm_load_print_meta: ssm_d_conv       = 0
0.00.863.137 I llm_load_print_meta: ssm_d_inner      = 0
0.00.863.138 I llm_load_print_meta: ssm_d_state      = 0
0.00.863.139 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.863.140 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.863.141 I llm_load_print_meta: model type       = 2B
0.00.863.142 I llm_load_print_meta: model ftype      = Q8_0
0.00.863.144 I llm_load_print_meta: model params     = 2.51 B
0.00.863.146 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.863.147 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.863.148 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.863.151 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.863.152 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.863.153 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.863.153 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.863.154 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.863.162 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.863.163 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.863.164 I llm_load_print_meta: max token length = 93
0.00.936.998 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.937.007 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.943.292 I llama_new_context_with_model: n_seq_max     = 1
0.00.943.299 I llama_new_context_with_model: n_ctx         = 4096
0.00.943.300 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.943.300 I llama_new_context_with_model: n_batch       = 2048
0.00.943.300 I llama_new_context_with_model: n_ubatch      = 512
0.00.943.301 I llama_new_context_with_model: flash_attn    = 0
0.00.943.303 I llama_new_context_with_model: freq_base     = 10000.0
0.00.943.304 I llama_new_context_with_model: freq_scale    = 1
0.00.943.304 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.943.397 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.957.698 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.957.737 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.957.854 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.960.414 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.960.418 I llama_new_context_with_model: graph nodes  = 601
0.00.960.418 I llama_new_context_with_model: graph splits = 1
0.00.960.461 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.960.464 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.570.332 I main: llama threadpool init, n_threads = 4
0.01.570.348 I 
0.01.570.478 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.570.482 I 
0.01.570.721 I sampler seed: 1395510232
0.01.570.737 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.570.753 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.570.758 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.570.764 I 
 increasities by neglecting other clauses and focusing only on the clauses that support the violation.

**Example:**

Original sentence: "The company is committed to ethical

0.15.084.815 I llama_perf_sampler_print:    sampling time =      49.67 ms /    33 runs   (    1.51 ms per token,   664.38 tokens per second)
0.15.084.819 I llama_perf_context_print:        load time =    1569.36 ms
0.15.084.820 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.084.822 I llama_perf_context_print:        eval time =   13424.60 ms /    32 runs   (  419.52 ms per token,     2.38 tokens per second)
0.15.084.824 I llama_perf_context_print:       total time =   13514.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m58.116s
user	3m2.857s
sys	0m9.282s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4403 (45095a61)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186622.01 ms
main:    total time = 186622.01 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4403 (45095a61) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.000.872 I main: load the model and apply lora adapter, if any
0.00.023.396 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.408 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.516 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.529 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.531 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.535 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.539 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.541 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.544 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.546 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.548 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.556 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.562 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.564 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.566 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.569 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.408 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.664 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.854 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.862 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.864 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.865 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.866 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.868 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.869 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.873 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.874 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.876 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.877 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.353.878 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.887 I llama_model_loader: - type  f32:   37 tensors
0.00.353.889 I llama_model_loader: - type q4_K:  108 tensors
0.00.353.890 I llama_model_loader: - type q6_K:   19 tensors
0.00.572.669 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.633.930 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.634.921 I llm_load_vocab: special tokens cache size = 5
0.00.837.863 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.837.935 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.837.939 I llm_load_print_meta: arch             = gemma
0.00.837.940 I llm_load_print_meta: vocab type       = SPM
0.00.837.941 I llm_load_print_meta: n_vocab          = 256000
0.00.837.943 I llm_load_print_meta: n_merges         = 0
0.00.837.943 I llm_load_print_meta: vocab_only       = 0
0.00.837.944 I llm_load_print_meta: n_ctx_train      = 8192
0.00.837.944 I llm_load_print_meta: n_embd           = 2048
0.00.837.945 I llm_load_print_meta: n_layer          = 18
0.00.838.011 I llm_load_print_meta: n_head           = 8
0.00.838.021 I llm_load_print_meta: n_head_kv        = 1
0.00.838.021 I llm_load_print_meta: n_rot            = 256
0.00.838.022 I llm_load_print_meta: n_swa            = 0
0.00.838.023 I llm_load_print_meta: n_embd_head_k    = 256
0.00.838.023 I llm_load_print_meta: n_embd_head_v    = 256
0.00.838.028 I llm_load_print_meta: n_gqa            = 8
0.00.838.032 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.838.037 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.838.039 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.838.041 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.838.042 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.838.043 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.838.044 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.838.051 I llm_load_print_meta: n_ff             = 16384
0.00.838.053 I llm_load_print_meta: n_expert         = 0
0.00.838.054 I llm_load_print_meta: n_expert_used    = 0
0.00.838.054 I llm_load_print_meta: causal attn      = 1
0.00.838.055 I llm_load_print_meta: pooling type     = 0
0.00.838.055 I llm_load_print_meta: rope type        = 2
0.00.838.057 I llm_load_print_meta: rope scaling     = linear
0.00.838.059 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.838.059 I llm_load_print_meta: freq_scale_train = 1
0.00.838.060 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.838.061 I llm_load_print_meta: rope_finetuned   = unknown
0.00.838.062 I llm_load_print_meta: ssm_d_conv       = 0
0.00.838.062 I llm_load_print_meta: ssm_d_inner      = 0
0.00.838.063 I llm_load_print_meta: ssm_d_state      = 0
0.00.838.064 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.838.065 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.838.065 I llm_load_print_meta: model type       = 2B
0.00.838.067 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.838.068 I llm_load_print_meta: model params     = 2.51 B
0.00.838.070 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.838.071 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.838.072 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.838.073 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.838.074 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.838.078 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.838.078 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.838.079 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.838.086 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.838.091 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.838.091 I llm_load_print_meta: max token length = 93
0.00.900.260 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.900.273 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.900.274 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.900.275 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.900.275 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.900.276 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.906.605 I llama_new_context_with_model: n_seq_max     = 1
0.00.906.615 I llama_new_context_with_model: n_ctx         = 4096
0.00.906.615 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.906.616 I llama_new_context_with_model: n_batch       = 2048
0.00.906.616 I llama_new_context_with_model: n_ubatch      = 512
0.00.906.617 I llama_new_context_with_model: flash_attn    = 0
0.00.906.620 I llama_new_context_with_model: freq_base     = 10000.0
0.00.906.620 I llama_new_context_with_model: freq_scale    = 1
0.00.906.621 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.906.723 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.921.996 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.922.036 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.922.158 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.924.793 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.924.798 I llama_new_context_with_model: graph nodes  = 601
0.00.924.798 I llama_new_context_with_model: graph splits = 1
0.00.924.822 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.924.826 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.506.143 I main: llama threadpool init, n_threads = 4
0.01.506.160 I 
0.01.506.299 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.506.304 I 
0.01.506.543 I sampler seed: 633551343
0.01.506.557 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.506.567 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.506.571 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.506.572 I 
 increasities to enhance the taste and texture of the dish.

**Answer:** Seasoning [end of text]


0.08.127.336 I llama_perf_sampler_print:    sampling time =      29.52 ms /    20 runs   (    1.48 ms per token,   677.48 tokens per second)
0.08.127.339 I llama_perf_context_print:        load time =    1505.16 ms
0.08.127.340 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.127.341 I llama_perf_context_print:        eval time =    6567.46 ms /    19 runs   (  345.66 ms per token,     2.89 tokens per second)
0.08.127.342 I llama_perf_context_print:       total time =    6621.20 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4403 (45095a61)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186662.53 ms
main:    total time = 186662.53 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4403 (45095a61) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.000.854 I main: load the model and apply lora adapter, if any
0.00.023.208 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.305 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.321 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.323 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.327 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.329 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.330 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.331 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.333 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.334 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.341 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.342 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.344 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.346 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.348 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.171 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.942 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.235 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.247 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.250 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.251 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.252 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.254 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.255 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.259 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.261 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.271 I llama_model_loader: - type  f32:   37 tensors
0.00.353.273 I llama_model_loader: - type q4_K:  108 tensors
0.00.353.274 I llama_model_loader: - type q6_K:   19 tensors
0.00.566.277 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.628.068 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.629.004 I llm_load_vocab: special tokens cache size = 5
0.00.855.064 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.855.140 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.855.144 I llm_load_print_meta: arch             = gemma
0.00.855.145 I llm_load_print_meta: vocab type       = SPM
0.00.855.146 I llm_load_print_meta: n_vocab          = 256000
0.00.855.148 I llm_load_print_meta: n_merges         = 0
0.00.855.149 I llm_load_print_meta: vocab_only       = 0
0.00.855.149 I llm_load_print_meta: n_ctx_train      = 8192
0.00.855.149 I llm_load_print_meta: n_embd           = 2048
0.00.855.150 I llm_load_print_meta: n_layer          = 18
0.00.855.215 I llm_load_print_meta: n_head           = 8
0.00.855.225 I llm_load_print_meta: n_head_kv        = 1
0.00.855.227 I llm_load_print_meta: n_rot            = 256
0.00.855.227 I llm_load_print_meta: n_swa            = 0
0.00.855.228 I llm_load_print_meta: n_embd_head_k    = 256
0.00.855.228 I llm_load_print_meta: n_embd_head_v    = 256
0.00.855.233 I llm_load_print_meta: n_gqa            = 8
0.00.855.238 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.855.242 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.855.244 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.855.245 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.855.246 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.855.255 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.855.257 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.855.264 I llm_load_print_meta: n_ff             = 16384
0.00.855.264 I llm_load_print_meta: n_expert         = 0
0.00.855.265 I llm_load_print_meta: n_expert_used    = 0
0.00.855.265 I llm_load_print_meta: causal attn      = 1
0.00.855.265 I llm_load_print_meta: pooling type     = 0
0.00.855.266 I llm_load_print_meta: rope type        = 2
0.00.855.267 I llm_load_print_meta: rope scaling     = linear
0.00.855.268 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.855.269 I llm_load_print_meta: freq_scale_train = 1
0.00.855.282 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.855.282 I llm_load_print_meta: rope_finetuned   = unknown
0.00.855.283 I llm_load_print_meta: ssm_d_conv       = 0
0.00.855.283 I llm_load_print_meta: ssm_d_inner      = 0
0.00.855.284 I llm_load_print_meta: ssm_d_state      = 0
0.00.855.284 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.855.285 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.855.286 I llm_load_print_meta: model type       = 2B
0.00.855.287 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.855.288 I llm_load_print_meta: model params     = 2.51 B
0.00.855.289 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.855.290 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.855.290 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.855.292 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.855.293 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.855.293 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.855.293 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.855.294 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.855.300 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.855.301 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.855.302 I llm_load_print_meta: max token length = 93
0.00.914.982 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.920.816 I llama_new_context_with_model: n_seq_max     = 1
0.00.920.824 I llama_new_context_with_model: n_ctx         = 4096
0.00.920.824 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.920.825 I llama_new_context_with_model: n_batch       = 2048
0.00.920.825 I llama_new_context_with_model: n_ubatch      = 512
0.00.920.826 I llama_new_context_with_model: flash_attn    = 0
0.00.920.828 I llama_new_context_with_model: freq_base     = 10000.0
0.00.920.829 I llama_new_context_with_model: freq_scale    = 1
0.00.920.830 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.920.922 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.936.016 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.936.065 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.936.187 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.938.798 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.938.802 I llama_new_context_with_model: graph nodes  = 601
0.00.938.802 I llama_new_context_with_model: graph splits = 1
0.00.938.826 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.938.827 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.518.471 I main: llama threadpool init, n_threads = 4
0.01.518.488 I 
0.01.518.625 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.518.629 I 
0.01.518.860 I sampler seed: 103905734
0.01.518.882 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.518.892 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.518.893 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.518.893 I 
 encompsively, the following:

**1. Introduction to the concept of quantum entanglement.**
**2. Explanation of the phenomenon of quantum entanglement.**
**

0.12.666.083 I llama_perf_sampler_print:    sampling time =      49.67 ms /    33 runs   (    1.51 ms per token,   664.41 tokens per second)
0.12.666.086 I llama_perf_context_print:        load time =    1517.53 ms
0.12.666.087 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.666.090 I llama_perf_context_print:        eval time =   11058.37 ms /    32 runs   (  345.57 ms per token,     2.89 tokens per second)
0.12.666.091 I llama_perf_context_print:       total time =   11147.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m36.998s
user	46m27.904s
sys	0m6.411s
