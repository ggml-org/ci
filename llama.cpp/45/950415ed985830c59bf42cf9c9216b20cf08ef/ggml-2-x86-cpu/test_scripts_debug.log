+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.658 I build: 4015 (45950415) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.861 I main: llama backend init
0.00.002.797 I main: load the model and apply lora adapter, if any
0.00.025.744 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.755 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.854 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.868 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.870 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.875 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.879 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.880 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.881 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.882 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.883 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.895 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.897 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.898 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.899 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.900 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.707 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.428 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.869 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.877 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.878 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.879 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.880 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.883 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.884 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.889 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.890 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.891 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.892 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.893 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.901 I llama_model_loader: - type  f32:   37 tensors
0.00.266.903 I llama_model_loader: - type q8_0:  127 tensors
0.00.437.739 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.493.735 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.494.605 I llm_load_vocab: special tokens cache size = 5
0.00.593.832 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.593.913 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.593.917 I llm_load_print_meta: arch             = gemma
0.00.593.918 I llm_load_print_meta: vocab type       = SPM
0.00.593.919 I llm_load_print_meta: n_vocab          = 256000
0.00.593.922 I llm_load_print_meta: n_merges         = 0
0.00.593.922 I llm_load_print_meta: vocab_only       = 0
0.00.593.923 I llm_load_print_meta: n_ctx_train      = 8192
0.00.593.923 I llm_load_print_meta: n_embd           = 2048
0.00.593.923 I llm_load_print_meta: n_layer          = 18
0.00.593.992 I llm_load_print_meta: n_head           = 8
0.00.594.002 I llm_load_print_meta: n_head_kv        = 1
0.00.594.003 I llm_load_print_meta: n_rot            = 256
0.00.594.004 I llm_load_print_meta: n_swa            = 0
0.00.594.004 I llm_load_print_meta: n_embd_head_k    = 256
0.00.594.018 I llm_load_print_meta: n_embd_head_v    = 256
0.00.594.023 I llm_load_print_meta: n_gqa            = 8
0.00.594.031 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.594.036 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.594.050 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.594.054 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.594.055 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.594.055 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.594.055 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.594.061 I llm_load_print_meta: n_ff             = 16384
0.00.594.069 I llm_load_print_meta: n_expert         = 0
0.00.594.072 I llm_load_print_meta: n_expert_used    = 0
0.00.594.073 I llm_load_print_meta: causal attn      = 1
0.00.594.073 I llm_load_print_meta: pooling type     = 0
0.00.594.073 I llm_load_print_meta: rope type        = 2
0.00.594.074 I llm_load_print_meta: rope scaling     = linear
0.00.594.075 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.594.076 I llm_load_print_meta: freq_scale_train = 1
0.00.594.076 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.594.077 I llm_load_print_meta: rope_finetuned   = unknown
0.00.594.077 I llm_load_print_meta: ssm_d_conv       = 0
0.00.594.077 I llm_load_print_meta: ssm_d_inner      = 0
0.00.594.077 I llm_load_print_meta: ssm_d_state      = 0
0.00.594.078 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.594.078 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.594.079 I llm_load_print_meta: model type       = 2B
0.00.594.080 I llm_load_print_meta: model ftype      = Q8_0
0.00.594.081 I llm_load_print_meta: model params     = 2.51 B
0.00.594.091 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.594.092 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.594.093 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.594.093 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.594.094 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.594.095 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.594.096 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.594.096 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.594.103 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.594.104 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.594.105 I llm_load_print_meta: max token length = 93
0.00.699.457 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.699.466 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.699.467 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.699.467 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.699.468 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.699.469 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.705.295 I llama_new_context_with_model: n_seq_max     = 1
0.00.705.302 I llama_new_context_with_model: n_ctx         = 4096
0.00.705.303 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.705.303 I llama_new_context_with_model: n_batch       = 2048
0.00.705.304 I llama_new_context_with_model: n_ubatch      = 512
0.00.705.304 I llama_new_context_with_model: flash_attn    = 0
0.00.705.306 I llama_new_context_with_model: freq_base     = 10000.0
0.00.705.307 I llama_new_context_with_model: freq_scale    = 1
0.00.705.308 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.719.772 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.719.811 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.719.938 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.722.528 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.722.532 I llama_new_context_with_model: graph nodes  = 601
0.00.722.532 I llama_new_context_with_model: graph splits = 1
0.00.722.556 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.329.453 I main: llama threadpool init, n_threads = 4
0.01.329.463 I 
0.01.329.568 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.329.572 I 
0.01.329.801 I sampler seed: 349259014
0.01.329.813 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.329.822 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.329.823 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.329.823 I 
 increably, its once majestic halls echoing with the ghosts of a glorious past.

The air was thick with the scent of aged parchment, leather, and the

0.14.805.057 I llama_perf_sampler_print:    sampling time =      49.14 ms /    33 runs   (    1.49 ms per token,   671.50 tokens per second)
0.14.805.060 I llama_perf_context_print:        load time =    1326.56 ms
0.14.805.072 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.805.074 I llama_perf_context_print:        eval time =   13385.19 ms /    32 runs   (  418.29 ms per token,     2.39 tokens per second)
0.14.805.075 I llama_perf_context_print:       total time =   13475.61 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4015 (45950415) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.002.761 I main: load the model and apply lora adapter, if any
0.00.025.260 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.349 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.362 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.364 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.368 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.372 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.373 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.374 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.375 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.376 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.383 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.384 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.386 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.387 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.388 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.428 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.604 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.011 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.020 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.021 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.022 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.023 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.024 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.026 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.029 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.030 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.032 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.033 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.266.034 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.042 I llama_model_loader: - type  f32:   37 tensors
0.00.266.045 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.356 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.501.450 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.502.377 I llm_load_vocab: special tokens cache size = 5
0.00.605.844 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.918 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.919 I llm_load_print_meta: arch             = gemma
0.00.605.920 I llm_load_print_meta: vocab type       = SPM
0.00.605.920 I llm_load_print_meta: n_vocab          = 256000
0.00.605.923 I llm_load_print_meta: n_merges         = 0
0.00.605.924 I llm_load_print_meta: vocab_only       = 0
0.00.605.924 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.925 I llm_load_print_meta: n_embd           = 2048
0.00.605.925 I llm_load_print_meta: n_layer          = 18
0.00.605.992 I llm_load_print_meta: n_head           = 8
0.00.605.999 I llm_load_print_meta: n_head_kv        = 1
0.00.605.999 I llm_load_print_meta: n_rot            = 256
0.00.606.000 I llm_load_print_meta: n_swa            = 0
0.00.606.000 I llm_load_print_meta: n_embd_head_k    = 256
0.00.606.001 I llm_load_print_meta: n_embd_head_v    = 256
0.00.606.007 I llm_load_print_meta: n_gqa            = 8
0.00.606.012 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.606.017 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.606.018 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.606.020 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.606.020 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.606.020 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.606.021 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.606.025 I llm_load_print_meta: n_ff             = 16384
0.00.606.026 I llm_load_print_meta: n_expert         = 0
0.00.606.026 I llm_load_print_meta: n_expert_used    = 0
0.00.606.027 I llm_load_print_meta: causal attn      = 1
0.00.606.027 I llm_load_print_meta: pooling type     = 0
0.00.606.028 I llm_load_print_meta: rope type        = 2
0.00.606.028 I llm_load_print_meta: rope scaling     = linear
0.00.606.030 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.606.031 I llm_load_print_meta: freq_scale_train = 1
0.00.606.032 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.606.032 I llm_load_print_meta: rope_finetuned   = unknown
0.00.606.034 I llm_load_print_meta: ssm_d_conv       = 0
0.00.606.034 I llm_load_print_meta: ssm_d_inner      = 0
0.00.606.035 I llm_load_print_meta: ssm_d_state      = 0
0.00.606.035 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.606.035 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.606.037 I llm_load_print_meta: model type       = 2B
0.00.606.038 I llm_load_print_meta: model ftype      = Q8_0
0.00.606.039 I llm_load_print_meta: model params     = 2.51 B
0.00.606.049 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.606.049 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.606.050 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.606.061 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.606.062 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.606.067 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.606.067 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.606.068 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.606.074 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.606.089 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.606.090 I llm_load_print_meta: max token length = 93
0.00.706.657 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.712.654 I llama_new_context_with_model: n_seq_max     = 1
0.00.712.660 I llama_new_context_with_model: n_ctx         = 4096
0.00.712.661 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.712.661 I llama_new_context_with_model: n_batch       = 2048
0.00.712.661 I llama_new_context_with_model: n_ubatch      = 512
0.00.712.662 I llama_new_context_with_model: flash_attn    = 0
0.00.712.665 I llama_new_context_with_model: freq_base     = 10000.0
0.00.712.665 I llama_new_context_with_model: freq_scale    = 1
0.00.712.666 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.727.949 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.727.994 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.728.121 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.730.666 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.730.670 I llama_new_context_with_model: graph nodes  = 601
0.00.730.671 I llama_new_context_with_model: graph splits = 1
0.00.730.696 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.340.189 I main: llama threadpool init, n_threads = 4
0.01.340.201 I 
0.01.340.309 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.340.312 I 
0.01.340.544 I sampler seed: 1962919840
0.01.340.556 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.340.563 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.340.564 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.340.564 I 
 increasels. 

What is the meaning of "increasingly"?

The adverb form of "increase" means "moving or developing in a gradually increasing

0.14.897.631 I llama_perf_sampler_print:    sampling time =      49.20 ms /    33 runs   (    1.49 ms per token,   670.73 tokens per second)
0.14.897.657 I llama_perf_context_print:        load time =    1337.33 ms
0.14.897.659 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.897.668 I llama_perf_context_print:        eval time =   13467.83 ms /    32 runs   (  420.87 ms per token,     2.38 tokens per second)
0.14.897.672 I llama_perf_context_print:       total time =   13557.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 4015 (45950415) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.860 I main: llama backend init
0.00.002.825 I main: load the model and apply lora adapter, if any
0.00.025.584 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.594 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.686 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.699 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.701 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.705 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.707 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.708 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.710 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.711 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.712 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.719 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.720 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.722 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.723 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.724 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.128 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.877 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.343 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.354 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.355 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.357 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.358 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.359 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.360 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.364 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.365 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.366 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.367 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.268.368 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.377 I llama_model_loader: - type  f32:   37 tensors
0.00.268.379 I llama_model_loader: - type q8_0:  127 tensors
0.00.455.358 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.721 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.677 I llm_load_vocab: special tokens cache size = 5
0.00.610.666 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.734 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.735 I llm_load_print_meta: arch             = gemma
0.00.610.736 I llm_load_print_meta: vocab type       = SPM
0.00.610.737 I llm_load_print_meta: n_vocab          = 256000
0.00.610.740 I llm_load_print_meta: n_merges         = 0
0.00.610.741 I llm_load_print_meta: vocab_only       = 0
0.00.610.741 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.741 I llm_load_print_meta: n_embd           = 2048
0.00.610.742 I llm_load_print_meta: n_layer          = 18
0.00.610.805 I llm_load_print_meta: n_head           = 8
0.00.610.814 I llm_load_print_meta: n_head_kv        = 1
0.00.610.818 I llm_load_print_meta: n_rot            = 256
0.00.610.818 I llm_load_print_meta: n_swa            = 0
0.00.610.819 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.819 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.825 I llm_load_print_meta: n_gqa            = 8
0.00.610.831 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.836 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.838 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.839 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.839 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.840 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.841 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.846 I llm_load_print_meta: n_ff             = 16384
0.00.610.846 I llm_load_print_meta: n_expert         = 0
0.00.610.850 I llm_load_print_meta: n_expert_used    = 0
0.00.610.850 I llm_load_print_meta: causal attn      = 1
0.00.610.851 I llm_load_print_meta: pooling type     = 0
0.00.610.851 I llm_load_print_meta: rope type        = 2
0.00.610.852 I llm_load_print_meta: rope scaling     = linear
0.00.610.853 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.854 I llm_load_print_meta: freq_scale_train = 1
0.00.610.854 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.855 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.855 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.855 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.856 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.856 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.856 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.857 I llm_load_print_meta: model type       = 2B
0.00.610.867 I llm_load_print_meta: model ftype      = Q8_0
0.00.610.868 I llm_load_print_meta: model params     = 2.51 B
0.00.610.876 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.610.877 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.878 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.879 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.879 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.879 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.880 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.881 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.888 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.889 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.890 I llm_load_print_meta: max token length = 93
0.00.708.547 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.708.558 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.708.559 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.708.559 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.708.560 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.708.561 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.714.315 I llama_new_context_with_model: n_seq_max     = 1
0.00.714.322 I llama_new_context_with_model: n_ctx         = 4096
0.00.714.322 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.714.323 I llama_new_context_with_model: n_batch       = 2048
0.00.714.323 I llama_new_context_with_model: n_ubatch      = 512
0.00.714.324 I llama_new_context_with_model: flash_attn    = 0
0.00.714.326 I llama_new_context_with_model: freq_base     = 10000.0
0.00.714.327 I llama_new_context_with_model: freq_scale    = 1
0.00.714.327 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.728.911 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.728.950 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.729.075 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.731.588 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.731.591 I llama_new_context_with_model: graph nodes  = 601
0.00.731.592 I llama_new_context_with_model: graph splits = 1
0.00.731.616 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.336.443 I main: llama threadpool init, n_threads = 4
0.01.336.456 I 
0.01.336.557 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.336.561 I 
0.01.336.807 I sampler seed: 2804866527
0.01.336.820 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.336.826 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.336.829 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.336.830 I 
 increably. [end of text]


0.03.024.440 I llama_perf_sampler_print:    sampling time =       6.23 ms /     5 runs   (    1.25 ms per token,   803.08 tokens per second)
0.03.024.455 I llama_perf_context_print:        load time =    1333.52 ms
0.03.024.457 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.024.459 I llama_perf_context_print:        eval time =    1675.18 ms /     4 runs   (  418.79 ms per token,     2.39 tokens per second)
0.03.024.460 I llama_perf_context_print:       total time =    1688.00 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.618 I build: 4015 (45950415) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.824 I main: llama backend init
0.00.002.763 I main: load the model and apply lora adapter, if any
0.00.026.627 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.026.638 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.026.722 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.732 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.734 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.738 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.739 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.741 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.743 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.744 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.746 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.751 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.755 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.756 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.757 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.758 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.501 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.393 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.930 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.943 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.944 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.945 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.946 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.947 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.949 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.953 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.954 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.955 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.956 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.957 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.965 I llama_model_loader: - type  f32:   37 tensors
0.00.266.968 I llama_model_loader: - type q8_0:  127 tensors
0.00.438.031 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.500.758 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.501.767 I llm_load_vocab: special tokens cache size = 5
0.00.602.568 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.602.637 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.602.637 I llm_load_print_meta: arch             = gemma
0.00.602.639 I llm_load_print_meta: vocab type       = SPM
0.00.602.639 I llm_load_print_meta: n_vocab          = 256000
0.00.602.642 I llm_load_print_meta: n_merges         = 0
0.00.602.642 I llm_load_print_meta: vocab_only       = 0
0.00.602.643 I llm_load_print_meta: n_ctx_train      = 8192
0.00.602.643 I llm_load_print_meta: n_embd           = 2048
0.00.602.643 I llm_load_print_meta: n_layer          = 18
0.00.602.710 I llm_load_print_meta: n_head           = 8
0.00.602.717 I llm_load_print_meta: n_head_kv        = 1
0.00.602.718 I llm_load_print_meta: n_rot            = 256
0.00.602.718 I llm_load_print_meta: n_swa            = 0
0.00.602.718 I llm_load_print_meta: n_embd_head_k    = 256
0.00.602.719 I llm_load_print_meta: n_embd_head_v    = 256
0.00.602.724 I llm_load_print_meta: n_gqa            = 8
0.00.602.729 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.602.735 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.602.737 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.602.738 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.602.739 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.602.739 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.602.739 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.602.744 I llm_load_print_meta: n_ff             = 16384
0.00.602.745 I llm_load_print_meta: n_expert         = 0
0.00.602.745 I llm_load_print_meta: n_expert_used    = 0
0.00.602.745 I llm_load_print_meta: causal attn      = 1
0.00.602.746 I llm_load_print_meta: pooling type     = 0
0.00.602.746 I llm_load_print_meta: rope type        = 2
0.00.602.746 I llm_load_print_meta: rope scaling     = linear
0.00.602.748 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.602.748 I llm_load_print_meta: freq_scale_train = 1
0.00.602.749 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.602.749 I llm_load_print_meta: rope_finetuned   = unknown
0.00.602.749 I llm_load_print_meta: ssm_d_conv       = 0
0.00.602.749 I llm_load_print_meta: ssm_d_inner      = 0
0.00.602.750 I llm_load_print_meta: ssm_d_state      = 0
0.00.602.750 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.602.750 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.602.762 I llm_load_print_meta: model type       = 2B
0.00.602.763 I llm_load_print_meta: model ftype      = Q8_0
0.00.602.764 I llm_load_print_meta: model params     = 2.51 B
0.00.602.774 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.602.775 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.602.775 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.602.775 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.602.777 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.602.777 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.602.777 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.602.778 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.602.784 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.602.786 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.602.786 I llm_load_print_meta: max token length = 93
0.00.675.987 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.675.997 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.681.877 I llama_new_context_with_model: n_seq_max     = 1
0.00.681.883 I llama_new_context_with_model: n_ctx         = 4096
0.00.681.884 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.681.884 I llama_new_context_with_model: n_batch       = 2048
0.00.681.884 I llama_new_context_with_model: n_ubatch      = 512
0.00.681.885 I llama_new_context_with_model: flash_attn    = 0
0.00.681.887 I llama_new_context_with_model: freq_base     = 10000.0
0.00.681.888 I llama_new_context_with_model: freq_scale    = 1
0.00.681.889 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.696.383 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.696.421 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.696.548 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.699.066 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.699.070 I llama_new_context_with_model: graph nodes  = 601
0.00.699.071 I llama_new_context_with_model: graph splits = 1
0.00.699.094 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.302.192 I main: llama threadpool init, n_threads = 4
0.01.302.203 I 
0.01.302.316 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.302.320 I 
0.01.302.555 I sampler seed: 4228869968
0.01.302.568 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.302.575 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.302.578 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.302.579 I 
 increamental for all valid integers n. [end of text]


0.05.114.183 I llama_perf_sampler_print:    sampling time =      13.88 ms /    10 runs   (    1.39 ms per token,   720.67 tokens per second)
0.05.114.199 I llama_perf_context_print:        load time =    1299.33 ms
0.05.114.200 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.114.202 I llama_perf_context_print:        eval time =    3785.09 ms /     9 runs   (  420.57 ms per token,     2.38 tokens per second)
0.05.114.202 I llama_perf_context_print:       total time =    3812.00 ms /    10 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m47.869s
user	2m22.753s
sys	0m9.426s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4015 (45950415)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198921.82 ms
main:    total time = 198921.82 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.645 I build: 4015 (45950415) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.847 I main: llama backend init
0.00.002.816 I main: load the model and apply lora adapter, if any
0.00.025.548 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.560 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.651 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.664 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.666 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.671 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.674 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.676 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.677 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.678 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.687 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.693 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.695 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.703 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.704 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.705 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.171 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.305 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.577 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.586 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.587 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.588 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.589 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.590 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.592 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.596 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.597 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.598 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.599 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.600 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.609 I llama_model_loader: - type  f32:   37 tensors
0.00.266.611 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.612 I llama_model_loader: - type q6_K:   19 tensors
0.00.455.396 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.575 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.493 I llm_load_vocab: special tokens cache size = 5
0.00.617.770 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.617.838 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.617.842 I llm_load_print_meta: arch             = gemma
0.00.617.843 I llm_load_print_meta: vocab type       = SPM
0.00.617.844 I llm_load_print_meta: n_vocab          = 256000
0.00.617.846 I llm_load_print_meta: n_merges         = 0
0.00.617.847 I llm_load_print_meta: vocab_only       = 0
0.00.617.847 I llm_load_print_meta: n_ctx_train      = 8192
0.00.617.848 I llm_load_print_meta: n_embd           = 2048
0.00.617.849 I llm_load_print_meta: n_layer          = 18
0.00.617.911 I llm_load_print_meta: n_head           = 8
0.00.617.921 I llm_load_print_meta: n_head_kv        = 1
0.00.617.922 I llm_load_print_meta: n_rot            = 256
0.00.617.923 I llm_load_print_meta: n_swa            = 0
0.00.617.923 I llm_load_print_meta: n_embd_head_k    = 256
0.00.617.924 I llm_load_print_meta: n_embd_head_v    = 256
0.00.617.928 I llm_load_print_meta: n_gqa            = 8
0.00.617.933 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.617.939 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.617.940 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.617.941 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.617.945 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.617.945 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.617.945 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.617.950 I llm_load_print_meta: n_ff             = 16384
0.00.617.951 I llm_load_print_meta: n_expert         = 0
0.00.617.952 I llm_load_print_meta: n_expert_used    = 0
0.00.617.953 I llm_load_print_meta: causal attn      = 1
0.00.617.953 I llm_load_print_meta: pooling type     = 0
0.00.617.953 I llm_load_print_meta: rope type        = 2
0.00.617.954 I llm_load_print_meta: rope scaling     = linear
0.00.617.955 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.617.956 I llm_load_print_meta: freq_scale_train = 1
0.00.617.956 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.617.964 I llm_load_print_meta: rope_finetuned   = unknown
0.00.617.965 I llm_load_print_meta: ssm_d_conv       = 0
0.00.617.965 I llm_load_print_meta: ssm_d_inner      = 0
0.00.617.965 I llm_load_print_meta: ssm_d_state      = 0
0.00.617.966 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.617.967 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.617.967 I llm_load_print_meta: model type       = 2B
0.00.617.969 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.617.970 I llm_load_print_meta: model params     = 2.51 B
0.00.617.980 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.617.980 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.617.981 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.617.990 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.617.992 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.617.992 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.617.992 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.618.002 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.618.009 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.618.011 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.618.011 I llm_load_print_meta: max token length = 93
0.00.682.416 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.682.424 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.682.425 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.682.425 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.682.426 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.682.427 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.688.184 I llama_new_context_with_model: n_seq_max     = 1
0.00.688.191 I llama_new_context_with_model: n_ctx         = 4096
0.00.688.191 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.688.192 I llama_new_context_with_model: n_batch       = 2048
0.00.688.192 I llama_new_context_with_model: n_ubatch      = 512
0.00.688.193 I llama_new_context_with_model: flash_attn    = 0
0.00.688.195 I llama_new_context_with_model: freq_base     = 10000.0
0.00.688.196 I llama_new_context_with_model: freq_scale    = 1
0.00.688.196 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.703.268 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.703.304 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.703.427 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.705.945 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.705.949 I llama_new_context_with_model: graph nodes  = 601
0.00.705.949 I llama_new_context_with_model: graph splits = 1
0.00.705.988 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.277.759 I main: llama threadpool init, n_threads = 4
0.01.277.772 I 
0.01.277.876 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.277.877 I 
0.01.278.124 I sampler seed: 166018894
0.01.278.136 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.278.143 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.278.144 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.278.144 I 
 seconally with a touch of melancholy, the sun sinking beneath the horizon, painting the sky in hues of twilight.

The air crackled with unspoken words,

0.12.094.259 I llama_perf_sampler_print:    sampling time =      49.13 ms /    33 runs   (    1.49 ms per token,   671.66 tokens per second)
0.12.094.262 I llama_perf_context_print:        load time =    1274.85 ms
0.12.094.263 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.094.265 I llama_perf_context_print:        eval time =   10725.28 ms /    32 runs   (  335.16 ms per token,     2.98 tokens per second)
0.12.094.265 I llama_perf_context_print:       total time =   10816.51 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4015 (45950415)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198896.51 ms
main:    total time = 198896.51 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 4015 (45950415) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.784 I main: load the model and apply lora adapter, if any
0.00.024.997 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.097 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.110 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.112 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.117 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.121 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.122 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.123 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.124 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.125 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.131 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.132 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.133 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.134 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.135 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.975 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.241 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.542 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.550 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.551 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.552 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.554 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.555 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.556 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.560 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.561 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.568 I llama_model_loader: - type  f32:   37 tensors
0.00.264.570 I llama_model_loader: - type q4_K:  108 tensors
0.00.264.571 I llama_model_loader: - type q6_K:   19 tensors
0.00.455.991 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.082 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.517.953 I llm_load_vocab: special tokens cache size = 5
0.00.620.533 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.620.599 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.620.600 I llm_load_print_meta: arch             = gemma
0.00.620.600 I llm_load_print_meta: vocab type       = SPM
0.00.620.602 I llm_load_print_meta: n_vocab          = 256000
0.00.620.605 I llm_load_print_meta: n_merges         = 0
0.00.620.605 I llm_load_print_meta: vocab_only       = 0
0.00.620.606 I llm_load_print_meta: n_ctx_train      = 8192
0.00.620.606 I llm_load_print_meta: n_embd           = 2048
0.00.620.606 I llm_load_print_meta: n_layer          = 18
0.00.620.671 I llm_load_print_meta: n_head           = 8
0.00.620.678 I llm_load_print_meta: n_head_kv        = 1
0.00.620.679 I llm_load_print_meta: n_rot            = 256
0.00.620.679 I llm_load_print_meta: n_swa            = 0
0.00.620.681 I llm_load_print_meta: n_embd_head_k    = 256
0.00.620.681 I llm_load_print_meta: n_embd_head_v    = 256
0.00.620.686 I llm_load_print_meta: n_gqa            = 8
0.00.620.691 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.620.696 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.620.697 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.620.702 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.620.703 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.620.703 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.620.705 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.620.710 I llm_load_print_meta: n_ff             = 16384
0.00.620.710 I llm_load_print_meta: n_expert         = 0
0.00.620.710 I llm_load_print_meta: n_expert_used    = 0
0.00.620.711 I llm_load_print_meta: causal attn      = 1
0.00.620.712 I llm_load_print_meta: pooling type     = 0
0.00.620.712 I llm_load_print_meta: rope type        = 2
0.00.620.713 I llm_load_print_meta: rope scaling     = linear
0.00.620.714 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.620.715 I llm_load_print_meta: freq_scale_train = 1
0.00.620.716 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.620.717 I llm_load_print_meta: rope_finetuned   = unknown
0.00.620.717 I llm_load_print_meta: ssm_d_conv       = 0
0.00.620.717 I llm_load_print_meta: ssm_d_inner      = 0
0.00.620.718 I llm_load_print_meta: ssm_d_state      = 0
0.00.620.719 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.620.719 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.620.720 I llm_load_print_meta: model type       = 2B
0.00.620.721 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.620.721 I llm_load_print_meta: model params     = 2.51 B
0.00.620.731 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.620.731 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.620.732 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.620.733 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.620.734 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.620.734 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.620.735 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.620.736 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.620.741 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.620.743 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.620.743 I llm_load_print_meta: max token length = 93
0.00.682.804 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.688.500 I llama_new_context_with_model: n_seq_max     = 1
0.00.688.506 I llama_new_context_with_model: n_ctx         = 4096
0.00.688.507 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.688.507 I llama_new_context_with_model: n_batch       = 2048
0.00.688.507 I llama_new_context_with_model: n_ubatch      = 512
0.00.688.508 I llama_new_context_with_model: flash_attn    = 0
0.00.688.510 I llama_new_context_with_model: freq_base     = 10000.0
0.00.688.510 I llama_new_context_with_model: freq_scale    = 1
0.00.688.511 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.703.586 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.703.627 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.703.753 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.706.303 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.706.307 I llama_new_context_with_model: graph nodes  = 601
0.00.706.307 I llama_new_context_with_model: graph splits = 1
0.00.706.331 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.277.230 I main: llama threadpool init, n_threads = 4
0.01.277.243 I 
0.01.277.354 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.277.358 I 
0.01.277.593 I sampler seed: 2981614916
0.01.277.605 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.277.612 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.277.615 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.277.616 I 
 encompating the concepts of learning, memory, and forgetting.

**Learning**

Learning is a multifaceted process that encompasses the acquisition of knowledge, skills, and

0.12.161.517 I llama_perf_sampler_print:    sampling time =      49.06 ms /    33 runs   (    1.49 ms per token,   672.59 tokens per second)
0.12.161.520 I llama_perf_context_print:        load time =    1274.35 ms
0.12.161.522 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.161.537 I llama_perf_context_print:        eval time =   10794.72 ms /    32 runs   (  337.34 ms per token,     2.96 tokens per second)
0.12.161.539 I llama_perf_context_print:       total time =   10884.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.990s
user	50m6.001s
sys	0m6.262s
