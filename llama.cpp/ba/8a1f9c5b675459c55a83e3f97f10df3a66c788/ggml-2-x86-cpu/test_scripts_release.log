+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.189 I build: 4460 (ba8a1f9c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.376 I main: llama backend init
0.00.000.383 I main: load the model and apply lora adapter, if any
0.00.029.703 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.029.712 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.029.720 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.726 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.727 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.730 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.731 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.732 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.733 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.733 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.735 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.739 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.740 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.743 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.743 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.029.744 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.055.980 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.250 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.136.659 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.136.665 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.136.666 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.136.666 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.136.667 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.136.668 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.136.669 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.136.670 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.136.671 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.136.671 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.136.672 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.136.674 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.136.676 I llama_model_loader: - type  f32:   37 tensors
0.00.136.677 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.243 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.010 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.560 I llm_load_vocab: special tokens cache size = 5
0.00.264.088 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.105 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.107 I llm_load_print_meta: arch             = gemma
0.00.264.108 I llm_load_print_meta: vocab type       = SPM
0.00.264.108 I llm_load_print_meta: n_vocab          = 256000
0.00.264.109 I llm_load_print_meta: n_merges         = 0
0.00.264.109 I llm_load_print_meta: vocab_only       = 0
0.00.264.109 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.110 I llm_load_print_meta: n_embd           = 2048
0.00.264.110 I llm_load_print_meta: n_layer          = 18
0.00.264.121 I llm_load_print_meta: n_head           = 8
0.00.264.123 I llm_load_print_meta: n_head_kv        = 1
0.00.264.124 I llm_load_print_meta: n_rot            = 256
0.00.264.124 I llm_load_print_meta: n_swa            = 0
0.00.264.124 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.125 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.126 I llm_load_print_meta: n_gqa            = 8
0.00.264.128 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.129 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.130 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.132 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.132 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.133 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.133 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.135 I llm_load_print_meta: n_ff             = 16384
0.00.264.135 I llm_load_print_meta: n_expert         = 0
0.00.264.136 I llm_load_print_meta: n_expert_used    = 0
0.00.264.136 I llm_load_print_meta: causal attn      = 1
0.00.264.136 I llm_load_print_meta: pooling type     = 0
0.00.264.137 I llm_load_print_meta: rope type        = 2
0.00.264.137 I llm_load_print_meta: rope scaling     = linear
0.00.264.138 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.139 I llm_load_print_meta: freq_scale_train = 1
0.00.264.139 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.140 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.140 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.140 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.140 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.141 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.141 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.143 I llm_load_print_meta: model type       = 2B
0.00.264.144 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.145 I llm_load_print_meta: model params     = 2.51 B
0.00.264.145 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.146 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.146 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.146 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.147 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.147 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.147 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.148 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.148 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.148 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.149 I llm_load_print_meta: max token length = 93
0.00.367.359 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.367.368 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.367.369 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.367.369 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.367.370 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.367.371 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.368.722 I llama_new_context_with_model: n_seq_max     = 1
0.00.368.726 I llama_new_context_with_model: n_ctx         = 4096
0.00.368.726 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.368.726 I llama_new_context_with_model: n_batch       = 2048
0.00.368.727 I llama_new_context_with_model: n_ubatch      = 512
0.00.368.727 I llama_new_context_with_model: flash_attn    = 0
0.00.368.729 I llama_new_context_with_model: freq_base     = 10000.0
0.00.368.730 I llama_new_context_with_model: freq_scale    = 1
0.00.368.731 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.368.750 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.382.477 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.382.488 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.382.582 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.486 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.493 I llama_new_context_with_model: graph nodes  = 601
0.00.384.493 I llama_new_context_with_model: graph splits = 1
0.00.384.496 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.384.497 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.208 I main: llama threadpool init, n_threads = 4
0.00.469.222 I 
0.00.469.299 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.469.302 I 
0.00.469.335 I sampler seed: 2301483661
0.00.469.346 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.359 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.363 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.363 I 
 seconary to the primary or basic concept.

**Assistant**

A concept is a fundamental idea or principle that provides a framework for understanding and interpreting other ideas

0.02.716.218 I llama_perf_sampler_print:    sampling time =       5.62 ms /    33 runs   (    0.17 ms per token,  5866.67 tokens per second)
0.02.716.221 I llama_perf_context_print:        load time =     468.81 ms
0.02.716.222 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.716.223 I llama_perf_context_print:        eval time =    2227.91 ms /    32 runs   (   69.62 ms per token,    14.36 tokens per second)
0.02.716.224 I llama_perf_context_print:       total time =    2247.02 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.181 I build: 4460 (ba8a1f9c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.368 I main: llama backend init
0.00.000.374 I main: load the model and apply lora adapter, if any
0.00.029.255 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.029.270 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.278 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.279 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.283 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.283 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.284 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.285 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.286 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.286 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.290 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.290 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.291 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.292 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.029.293 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.055.959 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.129.986 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.136.419 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.136.426 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.136.427 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.136.428 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.136.428 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.136.429 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.136.430 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.136.433 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.136.434 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.136.435 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.136.436 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.136.436 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.136.439 I llama_model_loader: - type  f32:   37 tensors
0.00.136.440 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.507 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.630 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.152 I llm_load_vocab: special tokens cache size = 5
0.00.266.535 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.552 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.553 I llm_load_print_meta: arch             = gemma
0.00.266.553 I llm_load_print_meta: vocab type       = SPM
0.00.266.554 I llm_load_print_meta: n_vocab          = 256000
0.00.266.554 I llm_load_print_meta: n_merges         = 0
0.00.266.555 I llm_load_print_meta: vocab_only       = 0
0.00.266.555 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.555 I llm_load_print_meta: n_embd           = 2048
0.00.266.556 I llm_load_print_meta: n_layer          = 18
0.00.266.567 I llm_load_print_meta: n_head           = 8
0.00.266.569 I llm_load_print_meta: n_head_kv        = 1
0.00.266.569 I llm_load_print_meta: n_rot            = 256
0.00.266.570 I llm_load_print_meta: n_swa            = 0
0.00.266.570 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.570 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.572 I llm_load_print_meta: n_gqa            = 8
0.00.266.574 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.575 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.576 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.577 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.578 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.578 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.578 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.580 I llm_load_print_meta: n_ff             = 16384
0.00.266.580 I llm_load_print_meta: n_expert         = 0
0.00.266.581 I llm_load_print_meta: n_expert_used    = 0
0.00.266.581 I llm_load_print_meta: causal attn      = 1
0.00.266.581 I llm_load_print_meta: pooling type     = 0
0.00.266.581 I llm_load_print_meta: rope type        = 2
0.00.266.582 I llm_load_print_meta: rope scaling     = linear
0.00.266.583 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.584 I llm_load_print_meta: freq_scale_train = 1
0.00.266.584 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.584 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.585 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.585 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.585 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.585 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.586 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.588 I llm_load_print_meta: model type       = 2B
0.00.266.589 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.590 I llm_load_print_meta: model params     = 2.51 B
0.00.266.591 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.591 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.591 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.592 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.592 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.592 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.593 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.593 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.593 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.594 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.594 I llm_load_print_meta: max token length = 93
0.00.362.849 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.364.112 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.116 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.116 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.117 I llama_new_context_with_model: n_batch       = 2048
0.00.364.117 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.118 I llama_new_context_with_model: flash_attn    = 0
0.00.364.120 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.120 I llama_new_context_with_model: freq_scale    = 1
0.00.364.121 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.364.141 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.378.233 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.378.247 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.378.342 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.548 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.555 I llama_new_context_with_model: graph nodes  = 601
0.00.380.555 I llama_new_context_with_model: graph splits = 1
0.00.380.558 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.380.559 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.330 I main: llama threadpool init, n_threads = 4
0.00.461.343 I 
0.00.461.417 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.461.420 I 
0.00.461.453 I sampler seed: 3474463365
0.00.461.463 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.475 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.479 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.479 I 
 increably.

I am unable to generate the requested text due to a technical limitation. [end of text]


0.01.757.598 I llama_perf_sampler_print:    sampling time =       3.37 ms /    20 runs   (    0.17 ms per token,  5927.68 tokens per second)
0.01.757.601 I llama_perf_context_print:        load time =     460.94 ms
0.01.757.603 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.757.605 I llama_perf_context_print:        eval time =    1284.57 ms /    19 runs   (   67.61 ms per token,    14.79 tokens per second)
0.01.757.606 I llama_perf_context_print:       total time =    1296.28 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.537 I build: 4460 (ba8a1f9c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.723 I main: llama backend init
0.00.000.729 I main: load the model and apply lora adapter, if any
0.00.030.187 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.030.195 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.030.203 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.210 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.211 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.214 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.215 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.216 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.217 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.217 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.217 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.222 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.222 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.223 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.224 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.224 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.056.321 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.822 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.351 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.358 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.358 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.359 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.360 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.361 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.362 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.364 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.365 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.367 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.367 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.137.368 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.137.372 I llama_model_loader: - type  f32:   37 tensors
0.00.137.373 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.300 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.415 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.006 I llm_load_vocab: special tokens cache size = 5
0.00.266.586 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.602 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.603 I llm_load_print_meta: arch             = gemma
0.00.266.604 I llm_load_print_meta: vocab type       = SPM
0.00.266.604 I llm_load_print_meta: n_vocab          = 256000
0.00.266.605 I llm_load_print_meta: n_merges         = 0
0.00.266.605 I llm_load_print_meta: vocab_only       = 0
0.00.266.605 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.606 I llm_load_print_meta: n_embd           = 2048
0.00.266.606 I llm_load_print_meta: n_layer          = 18
0.00.266.618 I llm_load_print_meta: n_head           = 8
0.00.266.621 I llm_load_print_meta: n_head_kv        = 1
0.00.266.621 I llm_load_print_meta: n_rot            = 256
0.00.266.621 I llm_load_print_meta: n_swa            = 0
0.00.266.622 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.622 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.624 I llm_load_print_meta: n_gqa            = 8
0.00.266.626 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.627 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.628 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.629 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.630 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.630 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.631 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.632 I llm_load_print_meta: n_ff             = 16384
0.00.266.633 I llm_load_print_meta: n_expert         = 0
0.00.266.633 I llm_load_print_meta: n_expert_used    = 0
0.00.266.634 I llm_load_print_meta: causal attn      = 1
0.00.266.634 I llm_load_print_meta: pooling type     = 0
0.00.266.634 I llm_load_print_meta: rope type        = 2
0.00.266.634 I llm_load_print_meta: rope scaling     = linear
0.00.266.636 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.637 I llm_load_print_meta: freq_scale_train = 1
0.00.266.637 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.637 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.638 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.638 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.638 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.638 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.639 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.641 I llm_load_print_meta: model type       = 2B
0.00.266.642 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.643 I llm_load_print_meta: model params     = 2.51 B
0.00.266.644 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.644 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.644 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.645 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.645 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.645 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.646 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.646 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.646 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.646 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.647 I llm_load_print_meta: max token length = 93
0.00.349.584 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.349.592 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.349.593 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.349.594 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.349.594 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.349.595 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.350.963 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.968 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.968 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.969 I llama_new_context_with_model: n_batch       = 2048
0.00.350.969 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.970 I llama_new_context_with_model: flash_attn    = 0
0.00.350.972 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.972 I llama_new_context_with_model: freq_scale    = 1
0.00.350.973 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.990 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.364.782 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.364.795 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.364.894 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.367.102 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.367.109 I llama_new_context_with_model: graph nodes  = 601
0.00.367.109 I llama_new_context_with_model: graph splits = 1
0.00.367.113 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.367.113 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.454.310 I main: llama threadpool init, n_threads = 4
0.00.454.323 I 
0.00.454.401 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.454.404 I 
0.00.454.437 I sampler seed: 2672001600
0.00.454.448 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.454.452 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.454.452 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.454.452 I 
 increasities to the user by providing explanations and examples of the issues involved.

**Issue:** Slow response times in live chat

**Explanation:**

- The

0.02.690.969 I llama_perf_sampler_print:    sampling time =       5.57 ms /    33 runs   (    0.17 ms per token,  5922.47 tokens per second)
0.02.690.971 I llama_perf_context_print:        load time =     453.56 ms
0.02.690.972 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.690.974 I llama_perf_context_print:        eval time =    2217.59 ms /    32 runs   (   69.30 ms per token,    14.43 tokens per second)
0.02.690.974 I llama_perf_context_print:       total time =    2236.67 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.540 I build: 4460 (ba8a1f9c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.721 I main: llama backend init
0.00.000.727 I main: load the model and apply lora adapter, if any
0.00.029.704 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.029.715 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.029.722 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.729 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.730 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.733 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.734 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.735 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.735 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.736 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.737 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.741 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.742 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.742 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.743 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.029.743 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.056.078 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.804 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.456 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.464 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.465 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.466 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.467 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.469 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.470 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.473 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.474 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.475 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.476 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.137.477 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.137.481 I llama_model_loader: - type  f32:   37 tensors
0.00.137.482 I llama_model_loader: - type q8_0:  127 tensors
0.00.218.123 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.265.974 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.266.516 I llm_load_vocab: special tokens cache size = 5
0.00.286.913 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.286.932 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.286.933 I llm_load_print_meta: arch             = gemma
0.00.286.934 I llm_load_print_meta: vocab type       = SPM
0.00.286.934 I llm_load_print_meta: n_vocab          = 256000
0.00.286.935 I llm_load_print_meta: n_merges         = 0
0.00.286.935 I llm_load_print_meta: vocab_only       = 0
0.00.286.936 I llm_load_print_meta: n_ctx_train      = 8192
0.00.286.936 I llm_load_print_meta: n_embd           = 2048
0.00.286.937 I llm_load_print_meta: n_layer          = 18
0.00.286.947 I llm_load_print_meta: n_head           = 8
0.00.286.949 I llm_load_print_meta: n_head_kv        = 1
0.00.286.949 I llm_load_print_meta: n_rot            = 256
0.00.286.950 I llm_load_print_meta: n_swa            = 0
0.00.286.950 I llm_load_print_meta: n_embd_head_k    = 256
0.00.286.950 I llm_load_print_meta: n_embd_head_v    = 256
0.00.286.952 I llm_load_print_meta: n_gqa            = 8
0.00.286.954 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.286.955 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.286.956 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.286.958 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.286.959 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.286.959 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.286.959 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.286.961 I llm_load_print_meta: n_ff             = 16384
0.00.286.962 I llm_load_print_meta: n_expert         = 0
0.00.286.962 I llm_load_print_meta: n_expert_used    = 0
0.00.286.963 I llm_load_print_meta: causal attn      = 1
0.00.286.963 I llm_load_print_meta: pooling type     = 0
0.00.286.963 I llm_load_print_meta: rope type        = 2
0.00.286.964 I llm_load_print_meta: rope scaling     = linear
0.00.286.965 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.286.966 I llm_load_print_meta: freq_scale_train = 1
0.00.286.966 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.286.967 I llm_load_print_meta: rope_finetuned   = unknown
0.00.286.967 I llm_load_print_meta: ssm_d_conv       = 0
0.00.286.967 I llm_load_print_meta: ssm_d_inner      = 0
0.00.286.967 I llm_load_print_meta: ssm_d_state      = 0
0.00.286.968 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.286.968 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.286.970 I llm_load_print_meta: model type       = 2B
0.00.286.971 I llm_load_print_meta: model ftype      = Q8_0
0.00.286.972 I llm_load_print_meta: model params     = 2.51 B
0.00.286.972 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.286.973 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.286.973 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.286.973 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.286.974 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.286.974 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.286.974 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.286.975 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.286.975 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.286.976 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.286.976 I llm_load_print_meta: max token length = 93
0.00.358.414 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.358.422 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.359.707 I llama_new_context_with_model: n_seq_max     = 1
0.00.359.711 I llama_new_context_with_model: n_ctx         = 4096
0.00.359.712 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.359.712 I llama_new_context_with_model: n_batch       = 2048
0.00.359.712 I llama_new_context_with_model: n_ubatch      = 512
0.00.359.713 I llama_new_context_with_model: flash_attn    = 0
0.00.359.714 I llama_new_context_with_model: freq_base     = 10000.0
0.00.359.715 I llama_new_context_with_model: freq_scale    = 1
0.00.359.716 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.733 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.373.633 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.373.645 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.373.738 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.375.597 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.375.603 I llama_new_context_with_model: graph nodes  = 601
0.00.375.603 I llama_new_context_with_model: graph splits = 1
0.00.375.606 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.375.606 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.704 I main: llama threadpool init, n_threads = 4
0.00.463.718 I 
0.00.463.793 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.463.797 I 
0.00.463.829 I sampler seed: 2248209281
0.00.463.841 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.844 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.844 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.845 I 
 increasities, and the role of the uterus in sexual reproduction. [end of text]


0.01.523.667 I llama_perf_sampler_print:    sampling time =       2.56 ms /    15 runs   (    0.17 ms per token,  5866.25 tokens per second)
0.01.523.670 I llama_perf_context_print:        load time =     462.96 ms
0.01.523.671 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.523.672 I llama_perf_context_print:        eval time =    1050.91 ms /    14 runs   (   75.07 ms per token,    13.32 tokens per second)
0.01.523.673 I llama_perf_context_print:       total time =    1059.97 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.530s
user	0m30.342s
sys	0m9.355s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4460 (ba8a1f9c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40226.23 ms
main:    total time = 40226.23 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.583 I build: 4460 (ba8a1f9c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.796 I main: llama backend init
0.00.000.803 I main: load the model and apply lora adapter, if any
0.00.030.538 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.030.552 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.030.561 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.568 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.569 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.572 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.573 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.573 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.574 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.575 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.575 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.580 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.581 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.581 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.582 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.057.180 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.132.024 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.138.555 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.138.563 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.138.564 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.138.565 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.138.566 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.138.568 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.138.569 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.138.571 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.138.572 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.138.573 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.138.574 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.138.575 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.138.577 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.138.581 I llama_model_loader: - type  f32:   37 tensors
0.00.138.582 I llama_model_loader: - type q4_K:  108 tensors
0.00.138.582 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.708 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.327 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.917 I llm_load_vocab: special tokens cache size = 5
0.00.270.450 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.468 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.469 I llm_load_print_meta: arch             = gemma
0.00.270.469 I llm_load_print_meta: vocab type       = SPM
0.00.270.470 I llm_load_print_meta: n_vocab          = 256000
0.00.270.470 I llm_load_print_meta: n_merges         = 0
0.00.270.471 I llm_load_print_meta: vocab_only       = 0
0.00.270.471 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.471 I llm_load_print_meta: n_embd           = 2048
0.00.270.472 I llm_load_print_meta: n_layer          = 18
0.00.270.484 I llm_load_print_meta: n_head           = 8
0.00.270.486 I llm_load_print_meta: n_head_kv        = 1
0.00.270.487 I llm_load_print_meta: n_rot            = 256
0.00.270.487 I llm_load_print_meta: n_swa            = 0
0.00.270.487 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.488 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.489 I llm_load_print_meta: n_gqa            = 8
0.00.270.491 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.492 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.493 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.494 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.495 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.495 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.496 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.498 I llm_load_print_meta: n_ff             = 16384
0.00.270.498 I llm_load_print_meta: n_expert         = 0
0.00.270.498 I llm_load_print_meta: n_expert_used    = 0
0.00.270.499 I llm_load_print_meta: causal attn      = 1
0.00.270.499 I llm_load_print_meta: pooling type     = 0
0.00.270.499 I llm_load_print_meta: rope type        = 2
0.00.270.500 I llm_load_print_meta: rope scaling     = linear
0.00.270.501 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.502 I llm_load_print_meta: freq_scale_train = 1
0.00.270.502 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.502 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.503 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.503 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.504 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.504 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.505 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.506 I llm_load_print_meta: model type       = 2B
0.00.270.507 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.270.508 I llm_load_print_meta: model params     = 2.51 B
0.00.270.509 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.270.509 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.510 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.510 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.510 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.510 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.511 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.511 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.512 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.512 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.512 I llm_load_print_meta: max token length = 93
0.00.330.215 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.330.222 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.330.223 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.330.223 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.330.224 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.330.224 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.331.463 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.468 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.468 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.468 I llama_new_context_with_model: n_batch       = 2048
0.00.331.469 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.470 I llama_new_context_with_model: flash_attn    = 0
0.00.331.472 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.473 I llama_new_context_with_model: freq_scale    = 1
0.00.331.474 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.331.491 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.345.747 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.760 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.345.861 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.348.076 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.348.083 I llama_new_context_with_model: graph nodes  = 601
0.00.348.083 I llama_new_context_with_model: graph splits = 1
0.00.348.087 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.348.088 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.424.203 I main: llama threadpool init, n_threads = 4
0.00.424.217 I 
0.00.424.297 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.424.301 I 
0.00.424.342 I sampler seed: 2474505280
0.00.424.354 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.424.357 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.424.359 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.424.360 I 
 suscepted of the sentence:

a) The sentence is grammatically incorrect.
b) The sentence is ambiguous.
c) The sentence is clear and

0.02.024.100 I llama_perf_sampler_print:    sampling time =       5.62 ms /    33 runs   (    0.17 ms per token,  5866.67 tokens per second)
0.02.024.103 I llama_perf_context_print:        load time =     423.38 ms
0.02.024.105 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.024.106 I llama_perf_context_print:        eval time =    1580.59 ms /    32 runs   (   49.39 ms per token,    20.25 tokens per second)
0.02.024.107 I llama_perf_context_print:       total time =    1599.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4460 (ba8a1f9c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40186.57 ms
main:    total time = 40186.57 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.631 I build: 4460 (ba8a1f9c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.839 I main: llama backend init
0.00.000.846 I main: load the model and apply lora adapter, if any
0.00.030.361 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.030.379 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.389 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.390 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.394 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.394 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.396 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.397 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.398 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.408 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.415 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.415 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.416 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.417 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.056.965 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.858 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.138.354 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.138.361 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.138.362 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.138.362 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.138.363 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.138.364 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.138.365 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.138.367 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.138.368 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.138.369 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.138.372 I llama_model_loader: - type  f32:   37 tensors
0.00.138.373 I llama_model_loader: - type q4_K:  108 tensors
0.00.138.374 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.790 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.085 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.544 I llm_load_vocab: special tokens cache size = 5
0.00.264.868 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.883 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.885 I llm_load_print_meta: arch             = gemma
0.00.264.886 I llm_load_print_meta: vocab type       = SPM
0.00.264.886 I llm_load_print_meta: n_vocab          = 256000
0.00.264.887 I llm_load_print_meta: n_merges         = 0
0.00.264.887 I llm_load_print_meta: vocab_only       = 0
0.00.264.887 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.888 I llm_load_print_meta: n_embd           = 2048
0.00.264.888 I llm_load_print_meta: n_layer          = 18
0.00.264.899 I llm_load_print_meta: n_head           = 8
0.00.264.901 I llm_load_print_meta: n_head_kv        = 1
0.00.264.901 I llm_load_print_meta: n_rot            = 256
0.00.264.901 I llm_load_print_meta: n_swa            = 0
0.00.264.902 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.902 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.904 I llm_load_print_meta: n_gqa            = 8
0.00.264.906 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.907 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.908 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.909 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.910 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.910 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.911 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.912 I llm_load_print_meta: n_ff             = 16384
0.00.264.913 I llm_load_print_meta: n_expert         = 0
0.00.264.914 I llm_load_print_meta: n_expert_used    = 0
0.00.264.914 I llm_load_print_meta: causal attn      = 1
0.00.264.914 I llm_load_print_meta: pooling type     = 0
0.00.264.915 I llm_load_print_meta: rope type        = 2
0.00.264.915 I llm_load_print_meta: rope scaling     = linear
0.00.264.917 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.918 I llm_load_print_meta: freq_scale_train = 1
0.00.264.918 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.919 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.919 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.919 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.920 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.920 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.920 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.923 I llm_load_print_meta: model type       = 2B
0.00.264.924 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.925 I llm_load_print_meta: model params     = 2.51 B
0.00.264.926 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.926 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.927 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.927 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.927 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.928 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.929 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.929 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.930 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.930 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.930 I llm_load_print_meta: max token length = 93
0.00.323.533 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.324.773 I llama_new_context_with_model: n_seq_max     = 1
0.00.324.777 I llama_new_context_with_model: n_ctx         = 4096
0.00.324.777 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.324.778 I llama_new_context_with_model: n_batch       = 2048
0.00.324.778 I llama_new_context_with_model: n_ubatch      = 512
0.00.324.778 I llama_new_context_with_model: flash_attn    = 0
0.00.324.781 I llama_new_context_with_model: freq_base     = 10000.0
0.00.324.781 I llama_new_context_with_model: freq_scale    = 1
0.00.324.783 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.324.800 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.339.082 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.339.094 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.339.186 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.341.387 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.341.394 I llama_new_context_with_model: graph nodes  = 601
0.00.341.394 I llama_new_context_with_model: graph splits = 1
0.00.341.398 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.341.398 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.416.015 I main: llama threadpool init, n_threads = 4
0.00.416.028 I 
0.00.416.102 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.416.103 I 
0.00.416.136 I sampler seed: 677018242
0.00.416.144 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.416.147 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.416.148 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.416.148 I 
 suscepted by the wind and carried across vast landscapes.

**Explanation:**

- The sentence conveys a sense of mystery and awe towards the vast expanse of the

0.01.961.521 I llama_perf_sampler_print:    sampling time =       5.86 ms /    33 runs   (    0.18 ms per token,  5633.32 tokens per second)
0.01.961.524 I llama_perf_context_print:        load time =     415.15 ms
0.01.961.525 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.961.526 I llama_perf_context_print:        eval time =    1526.60 ms /    32 runs   (   47.71 ms per token,    20.96 tokens per second)
0.01.961.527 I llama_perf_context_print:       total time =    1545.51 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.479s
user	10m24.102s
sys	0m6.758s
