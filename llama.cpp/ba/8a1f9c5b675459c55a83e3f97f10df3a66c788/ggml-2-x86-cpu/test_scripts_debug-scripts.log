+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 4460 (ba8a1f9c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.820 I main: llama backend init
0.00.000.828 I main: load the model and apply lora adapter, if any
0.00.085.512 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.525 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.620 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.642 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.645 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.650 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.652 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.654 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.656 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.657 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.659 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.666 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.667 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.669 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.671 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.672 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.290.916 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.398.069 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.422.180 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.422.192 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.422.194 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.422.196 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.422.198 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.422.200 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.422.202 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.422.207 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.422.209 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.422.211 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.422.213 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.422.214 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.422.224 I llama_model_loader: - type  f32:   37 tensors
0.00.422.226 I llama_model_loader: - type q8_0:  127 tensors
0.00.673.436 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.797.931 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.799.022 I llm_load_vocab: special tokens cache size = 5
0.01.006.221 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.006.301 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.006.306 I llm_load_print_meta: arch             = gemma
0.01.006.306 I llm_load_print_meta: vocab type       = SPM
0.01.006.308 I llm_load_print_meta: n_vocab          = 256000
0.01.006.310 I llm_load_print_meta: n_merges         = 0
0.01.006.311 I llm_load_print_meta: vocab_only       = 0
0.01.006.311 I llm_load_print_meta: n_ctx_train      = 8192
0.01.006.312 I llm_load_print_meta: n_embd           = 2048
0.01.006.312 I llm_load_print_meta: n_layer          = 18
0.01.006.391 I llm_load_print_meta: n_head           = 8
0.01.006.399 I llm_load_print_meta: n_head_kv        = 1
0.01.006.400 I llm_load_print_meta: n_rot            = 256
0.01.006.401 I llm_load_print_meta: n_swa            = 0
0.01.006.401 I llm_load_print_meta: n_embd_head_k    = 256
0.01.006.401 I llm_load_print_meta: n_embd_head_v    = 256
0.01.006.406 I llm_load_print_meta: n_gqa            = 8
0.01.006.411 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.006.416 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.006.417 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.006.418 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.006.419 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.006.419 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.006.420 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.006.425 I llm_load_print_meta: n_ff             = 16384
0.01.006.427 I llm_load_print_meta: n_expert         = 0
0.01.006.427 I llm_load_print_meta: n_expert_used    = 0
0.01.006.428 I llm_load_print_meta: causal attn      = 1
0.01.006.429 I llm_load_print_meta: pooling type     = 0
0.01.006.429 I llm_load_print_meta: rope type        = 2
0.01.006.430 I llm_load_print_meta: rope scaling     = linear
0.01.006.431 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.006.432 I llm_load_print_meta: freq_scale_train = 1
0.01.006.432 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.006.433 I llm_load_print_meta: rope_finetuned   = unknown
0.01.006.434 I llm_load_print_meta: ssm_d_conv       = 0
0.01.006.434 I llm_load_print_meta: ssm_d_inner      = 0
0.01.006.435 I llm_load_print_meta: ssm_d_state      = 0
0.01.006.435 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.006.436 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.006.439 I llm_load_print_meta: model type       = 2B
0.01.006.441 I llm_load_print_meta: model ftype      = Q8_0
0.01.006.442 I llm_load_print_meta: model params     = 2.51 B
0.01.006.443 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.006.444 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.006.445 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.006.445 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.006.446 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.006.446 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.006.447 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.006.448 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.006.454 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.006.456 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.006.456 I llm_load_print_meta: max token length = 93
0.01.109.500 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.109.509 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.109.510 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.109.511 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.109.512 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.109.512 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.116.537 I llama_new_context_with_model: n_seq_max     = 1
0.01.116.543 I llama_new_context_with_model: n_ctx         = 4096
0.01.116.543 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.116.543 I llama_new_context_with_model: n_batch       = 2048
0.01.116.544 I llama_new_context_with_model: n_ubatch      = 512
0.01.116.545 I llama_new_context_with_model: flash_attn    = 0
0.01.116.547 I llama_new_context_with_model: freq_base     = 10000.0
0.01.116.547 I llama_new_context_with_model: freq_scale    = 1
0.01.116.548 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.116.628 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.130.598 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.130.638 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.130.754 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.134.303 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.134.307 I llama_new_context_with_model: graph nodes  = 601
0.01.134.307 I llama_new_context_with_model: graph splits = 1
0.01.134.331 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.134.334 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.741.040 I main: llama threadpool init, n_threads = 4
0.01.741.057 I 
0.01.741.178 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.741.182 I 
0.01.741.415 I sampler seed: 4290309654
0.01.741.429 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.741.439 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.741.443 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.741.443 I 
 increasities!

I am unable to generate a response that violates our policies. [end of text]


0.08.957.250 I llama_perf_sampler_print:    sampling time =      26.53 ms /    18 runs   (    1.47 ms per token,   678.58 tokens per second)
0.08.957.272 I llama_perf_context_print:        load time =    1740.13 ms
0.08.957.275 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.957.277 I llama_perf_context_print:        eval time =    7170.36 ms /    17 runs   (  421.79 ms per token,     2.37 tokens per second)
0.08.957.278 I llama_perf_context_print:       total time =    7216.22 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.684 I build: 4460 (ba8a1f9c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.883 I main: llama backend init
0.00.000.890 I main: load the model and apply lora adapter, if any
0.00.085.579 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.085.686 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.711 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.714 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.719 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.721 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.723 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.724 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.726 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.728 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.736 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.739 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.741 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.742 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.744 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.308.934 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.421.907 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.446.198 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.446.214 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.446.216 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.446.218 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.446.220 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.446.222 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.446.224 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.446.229 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.446.231 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.446.232 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.446.259 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.446.261 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.446.271 I llama_model_loader: - type  f32:   37 tensors
0.00.446.283 I llama_model_loader: - type q8_0:  127 tensors
0.00.707.236 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.824.666 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.825.612 I llm_load_vocab: special tokens cache size = 5
0.01.040.220 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.040.300 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.040.304 I llm_load_print_meta: arch             = gemma
0.01.040.305 I llm_load_print_meta: vocab type       = SPM
0.01.040.306 I llm_load_print_meta: n_vocab          = 256000
0.01.040.308 I llm_load_print_meta: n_merges         = 0
0.01.040.309 I llm_load_print_meta: vocab_only       = 0
0.01.040.309 I llm_load_print_meta: n_ctx_train      = 8192
0.01.040.310 I llm_load_print_meta: n_embd           = 2048
0.01.040.310 I llm_load_print_meta: n_layer          = 18
0.01.040.392 I llm_load_print_meta: n_head           = 8
0.01.040.403 I llm_load_print_meta: n_head_kv        = 1
0.01.040.403 I llm_load_print_meta: n_rot            = 256
0.01.040.404 I llm_load_print_meta: n_swa            = 0
0.01.040.404 I llm_load_print_meta: n_embd_head_k    = 256
0.01.040.405 I llm_load_print_meta: n_embd_head_v    = 256
0.01.040.410 I llm_load_print_meta: n_gqa            = 8
0.01.040.415 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.040.420 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.040.421 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.040.422 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.040.423 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.040.423 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.040.423 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.040.428 I llm_load_print_meta: n_ff             = 16384
0.01.040.429 I llm_load_print_meta: n_expert         = 0
0.01.040.429 I llm_load_print_meta: n_expert_used    = 0
0.01.040.430 I llm_load_print_meta: causal attn      = 1
0.01.040.431 I llm_load_print_meta: pooling type     = 0
0.01.040.432 I llm_load_print_meta: rope type        = 2
0.01.040.432 I llm_load_print_meta: rope scaling     = linear
0.01.040.434 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.040.435 I llm_load_print_meta: freq_scale_train = 1
0.01.040.436 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.040.437 I llm_load_print_meta: rope_finetuned   = unknown
0.01.040.437 I llm_load_print_meta: ssm_d_conv       = 0
0.01.040.437 I llm_load_print_meta: ssm_d_inner      = 0
0.01.040.438 I llm_load_print_meta: ssm_d_state      = 0
0.01.040.438 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.040.461 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.040.464 I llm_load_print_meta: model type       = 2B
0.01.040.468 I llm_load_print_meta: model ftype      = Q8_0
0.01.040.469 I llm_load_print_meta: model params     = 2.51 B
0.01.040.471 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.040.471 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.040.472 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.040.472 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.040.473 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.040.473 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.040.474 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.040.474 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.040.480 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.040.481 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.040.482 I llm_load_print_meta: max token length = 93
0.01.139.859 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.146.867 I llama_new_context_with_model: n_seq_max     = 1
0.01.146.873 I llama_new_context_with_model: n_ctx         = 4096
0.01.146.874 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.146.874 I llama_new_context_with_model: n_batch       = 2048
0.01.146.874 I llama_new_context_with_model: n_ubatch      = 512
0.01.146.875 I llama_new_context_with_model: flash_attn    = 0
0.01.146.877 I llama_new_context_with_model: freq_base     = 10000.0
0.01.146.878 I llama_new_context_with_model: freq_scale    = 1
0.01.146.878 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.146.956 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.161.591 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.161.629 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.161.748 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.165.006 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.165.010 I llama_new_context_with_model: graph nodes  = 601
0.01.165.010 I llama_new_context_with_model: graph splits = 1
0.01.165.035 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.165.038 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.773.096 I main: llama threadpool init, n_threads = 4
0.01.773.113 I 
0.01.773.231 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.773.236 I 
0.01.773.465 I sampler seed: 4193258255
0.01.773.478 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.773.490 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.773.491 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.773.491 I 
 increasities as a means of promoting artistic expression. [end of text]


0.06.452.889 I llama_perf_sampler_print:    sampling time =      17.38 ms /    12 runs   (    1.45 ms per token,   690.41 tokens per second)
0.06.452.891 I llama_perf_context_print:        load time =    1772.12 ms
0.06.452.893 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.452.894 I llama_perf_context_print:        eval time =    4648.15 ms /    11 runs   (  422.56 ms per token,     2.37 tokens per second)
0.06.452.895 I llama_perf_context_print:       total time =    4679.80 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 4460 (ba8a1f9c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.000.850 I main: load the model and apply lora adapter, if any
0.00.086.022 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.086.035 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.086.131 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.150 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.153 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.158 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.160 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.162 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.164 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.166 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.167 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.175 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.177 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.178 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.180 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.181 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.306.253 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.408.616 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.433.073 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.433.091 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.433.093 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.433.095 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.433.097 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.433.099 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.433.101 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.433.106 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.433.108 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.433.110 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.433.112 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.433.114 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.433.122 I llama_model_loader: - type  f32:   37 tensors
0.00.433.124 I llama_model_loader: - type q8_0:  127 tensors
0.00.699.068 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.818.042 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.819.047 I llm_load_vocab: special tokens cache size = 5
0.01.041.422 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.041.504 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.041.509 I llm_load_print_meta: arch             = gemma
0.01.041.510 I llm_load_print_meta: vocab type       = SPM
0.01.041.511 I llm_load_print_meta: n_vocab          = 256000
0.01.041.513 I llm_load_print_meta: n_merges         = 0
0.01.041.513 I llm_load_print_meta: vocab_only       = 0
0.01.041.514 I llm_load_print_meta: n_ctx_train      = 8192
0.01.041.514 I llm_load_print_meta: n_embd           = 2048
0.01.041.514 I llm_load_print_meta: n_layer          = 18
0.01.041.593 I llm_load_print_meta: n_head           = 8
0.01.041.604 I llm_load_print_meta: n_head_kv        = 1
0.01.041.605 I llm_load_print_meta: n_rot            = 256
0.01.041.605 I llm_load_print_meta: n_swa            = 0
0.01.041.606 I llm_load_print_meta: n_embd_head_k    = 256
0.01.041.606 I llm_load_print_meta: n_embd_head_v    = 256
0.01.041.611 I llm_load_print_meta: n_gqa            = 8
0.01.041.615 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.041.621 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.041.623 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.041.625 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.041.625 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.041.636 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.041.637 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.041.642 I llm_load_print_meta: n_ff             = 16384
0.01.041.642 I llm_load_print_meta: n_expert         = 0
0.01.041.643 I llm_load_print_meta: n_expert_used    = 0
0.01.041.643 I llm_load_print_meta: causal attn      = 1
0.01.041.644 I llm_load_print_meta: pooling type     = 0
0.01.041.645 I llm_load_print_meta: rope type        = 2
0.01.041.645 I llm_load_print_meta: rope scaling     = linear
0.01.041.647 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.041.659 I llm_load_print_meta: freq_scale_train = 1
0.01.041.661 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.041.661 I llm_load_print_meta: rope_finetuned   = unknown
0.01.041.662 I llm_load_print_meta: ssm_d_conv       = 0
0.01.041.662 I llm_load_print_meta: ssm_d_inner      = 0
0.01.041.662 I llm_load_print_meta: ssm_d_state      = 0
0.01.041.663 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.041.663 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.041.667 I llm_load_print_meta: model type       = 2B
0.01.041.669 I llm_load_print_meta: model ftype      = Q8_0
0.01.041.670 I llm_load_print_meta: model params     = 2.51 B
0.01.041.671 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.041.671 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.041.672 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.041.672 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.041.673 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.041.674 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.041.674 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.041.675 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.041.680 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.041.682 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.041.682 I llm_load_print_meta: max token length = 93
0.01.121.612 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.121.619 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.121.620 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.121.620 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.121.621 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.121.622 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.128.435 I llama_new_context_with_model: n_seq_max     = 1
0.01.128.440 I llama_new_context_with_model: n_ctx         = 4096
0.01.128.441 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.128.441 I llama_new_context_with_model: n_batch       = 2048
0.01.128.442 I llama_new_context_with_model: n_ubatch      = 512
0.01.128.442 I llama_new_context_with_model: flash_attn    = 0
0.01.128.444 I llama_new_context_with_model: freq_base     = 10000.0
0.01.128.445 I llama_new_context_with_model: freq_scale    = 1
0.01.128.446 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.128.524 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.142.464 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.142.505 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.142.627 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.146.161 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.146.165 I llama_new_context_with_model: graph nodes  = 601
0.01.146.165 I llama_new_context_with_model: graph splits = 1
0.01.146.189 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.146.192 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.756.800 I main: llama threadpool init, n_threads = 4
0.01.756.815 I 
0.01.756.941 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.756.945 I 
0.01.757.178 I sampler seed: 2084028349
0.01.757.191 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.757.203 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.757.204 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.757.216 I 
 seconded to the query.

I am unable to find the requested information in the provided context. Please provide more context or specify your query more clearly. [end of text]


0.15.423.698 I llama_perf_sampler_print:    sampling time =      49.55 ms /    33 runs   (    1.50 ms per token,   665.99 tokens per second)
0.15.423.712 I llama_perf_context_print:        load time =    1755.87 ms
0.15.423.714 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.423.716 I llama_perf_context_print:        eval time =   13581.11 ms /    32 runs   (  424.41 ms per token,     2.36 tokens per second)
0.15.423.717 I llama_perf_context_print:       total time =   13666.91 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.656 I build: 4460 (ba8a1f9c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.875 I main: llama backend init
0.00.000.883 I main: load the model and apply lora adapter, if any
0.00.086.854 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.086.867 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.086.964 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.986 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.988 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.993 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.995 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.997 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.998 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.087.000 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.087.002 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.087.009 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.087.011 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.087.013 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.087.014 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.087.016 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.299.122 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.401.291 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.425.567 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.425.578 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.425.580 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.425.582 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.425.584 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.425.602 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.425.605 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.425.611 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.425.613 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.425.615 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.425.617 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.425.619 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.425.626 I llama_model_loader: - type  f32:   37 tensors
0.00.425.631 I llama_model_loader: - type q8_0:  127 tensors
0.00.682.953 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.809.550 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.810.549 I llm_load_vocab: special tokens cache size = 5
0.01.030.261 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.030.344 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.030.349 I llm_load_print_meta: arch             = gemma
0.01.030.349 I llm_load_print_meta: vocab type       = SPM
0.01.030.350 I llm_load_print_meta: n_vocab          = 256000
0.01.030.352 I llm_load_print_meta: n_merges         = 0
0.01.030.353 I llm_load_print_meta: vocab_only       = 0
0.01.030.353 I llm_load_print_meta: n_ctx_train      = 8192
0.01.030.354 I llm_load_print_meta: n_embd           = 2048
0.01.030.354 I llm_load_print_meta: n_layer          = 18
0.01.030.434 I llm_load_print_meta: n_head           = 8
0.01.030.441 I llm_load_print_meta: n_head_kv        = 1
0.01.030.442 I llm_load_print_meta: n_rot            = 256
0.01.030.442 I llm_load_print_meta: n_swa            = 0
0.01.030.442 I llm_load_print_meta: n_embd_head_k    = 256
0.01.030.443 I llm_load_print_meta: n_embd_head_v    = 256
0.01.030.448 I llm_load_print_meta: n_gqa            = 8
0.01.030.453 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.030.457 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.030.459 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.030.460 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.030.460 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.030.461 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.030.461 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.030.466 I llm_load_print_meta: n_ff             = 16384
0.01.030.472 I llm_load_print_meta: n_expert         = 0
0.01.030.472 I llm_load_print_meta: n_expert_used    = 0
0.01.030.473 I llm_load_print_meta: causal attn      = 1
0.01.030.473 I llm_load_print_meta: pooling type     = 0
0.01.030.473 I llm_load_print_meta: rope type        = 2
0.01.030.474 I llm_load_print_meta: rope scaling     = linear
0.01.030.475 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.030.476 I llm_load_print_meta: freq_scale_train = 1
0.01.030.476 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.030.476 I llm_load_print_meta: rope_finetuned   = unknown
0.01.030.477 I llm_load_print_meta: ssm_d_conv       = 0
0.01.030.477 I llm_load_print_meta: ssm_d_inner      = 0
0.01.030.477 I llm_load_print_meta: ssm_d_state      = 0
0.01.030.480 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.030.480 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.030.483 I llm_load_print_meta: model type       = 2B
0.01.030.486 I llm_load_print_meta: model ftype      = Q8_0
0.01.030.486 I llm_load_print_meta: model params     = 2.51 B
0.01.030.487 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.030.488 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.030.488 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.030.488 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.030.489 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.030.489 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.030.490 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.030.491 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.030.497 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.030.498 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.030.498 I llm_load_print_meta: max token length = 93
0.01.104.722 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.104.733 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.111.661 I llama_new_context_with_model: n_seq_max     = 1
0.01.111.667 I llama_new_context_with_model: n_ctx         = 4096
0.01.111.667 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.111.667 I llama_new_context_with_model: n_batch       = 2048
0.01.111.668 I llama_new_context_with_model: n_ubatch      = 512
0.01.111.668 I llama_new_context_with_model: flash_attn    = 0
0.01.111.670 I llama_new_context_with_model: freq_base     = 10000.0
0.01.111.671 I llama_new_context_with_model: freq_scale    = 1
0.01.111.672 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.111.751 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.125.789 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.125.829 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.125.958 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.129.149 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.129.153 I llama_new_context_with_model: graph nodes  = 601
0.01.129.154 I llama_new_context_with_model: graph splits = 1
0.01.129.179 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.129.181 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.737.616 I main: llama threadpool init, n_threads = 4
0.01.737.634 I 
0.01.737.757 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.737.761 I 
0.01.737.993 I sampler seed: 2799703720
0.01.738.008 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.738.018 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.738.021 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.738.021 I 
 increasities is a common trope in fantasy and science fiction stories. It is a way to create a sense of urgency and danger by portraying a situation where time is

0.15.372.995 I llama_perf_sampler_print:    sampling time =      49.55 ms /    33 runs   (    1.50 ms per token,   665.98 tokens per second)
0.15.372.998 I llama_perf_context_print:        load time =    1736.65 ms
0.15.373.000 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.373.004 I llama_perf_context_print:        eval time =   13550.18 ms /    32 runs   (  423.44 ms per token,     2.36 tokens per second)
0.15.373.005 I llama_perf_context_print:       total time =   13635.39 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m57.375s
user	2m52.596s
sys	0m9.336s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4460 (ba8a1f9c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186554.23 ms
main:    total time = 186554.23 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 4460 (ba8a1f9c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.825 I main: llama backend init
0.00.000.832 I main: load the model and apply lora adapter, if any
0.00.085.471 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.485 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.581 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.602 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.605 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.610 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.612 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.614 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.616 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.618 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.619 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.626 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.628 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.629 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.631 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.289.622 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.400.825 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.425.405 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.425.421 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.425.423 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.425.425 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.425.427 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.425.429 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.425.431 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.425.435 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.425.437 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.425.439 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.425.441 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.425.442 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.425.444 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.425.452 I llama_model_loader: - type  f32:   37 tensors
0.00.425.454 I llama_model_loader: - type q4_K:  108 tensors
0.00.425.455 I llama_model_loader: - type q6_K:   19 tensors
0.00.717.888 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.860.850 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.861.820 I llm_load_vocab: special tokens cache size = 5
0.01.084.692 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.084.770 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.084.775 I llm_load_print_meta: arch             = gemma
0.01.084.775 I llm_load_print_meta: vocab type       = SPM
0.01.084.776 I llm_load_print_meta: n_vocab          = 256000
0.01.084.778 I llm_load_print_meta: n_merges         = 0
0.01.084.779 I llm_load_print_meta: vocab_only       = 0
0.01.084.779 I llm_load_print_meta: n_ctx_train      = 8192
0.01.084.779 I llm_load_print_meta: n_embd           = 2048
0.01.084.780 I llm_load_print_meta: n_layer          = 18
0.01.084.861 I llm_load_print_meta: n_head           = 8
0.01.084.871 I llm_load_print_meta: n_head_kv        = 1
0.01.084.872 I llm_load_print_meta: n_rot            = 256
0.01.084.872 I llm_load_print_meta: n_swa            = 0
0.01.084.872 I llm_load_print_meta: n_embd_head_k    = 256
0.01.084.872 I llm_load_print_meta: n_embd_head_v    = 256
0.01.084.877 I llm_load_print_meta: n_gqa            = 8
0.01.084.882 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.084.887 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.084.889 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.084.890 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.084.891 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.084.891 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.084.894 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.084.899 I llm_load_print_meta: n_ff             = 16384
0.01.084.900 I llm_load_print_meta: n_expert         = 0
0.01.084.900 I llm_load_print_meta: n_expert_used    = 0
0.01.084.901 I llm_load_print_meta: causal attn      = 1
0.01.084.902 I llm_load_print_meta: pooling type     = 0
0.01.084.903 I llm_load_print_meta: rope type        = 2
0.01.084.903 I llm_load_print_meta: rope scaling     = linear
0.01.084.905 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.084.906 I llm_load_print_meta: freq_scale_train = 1
0.01.084.907 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.084.907 I llm_load_print_meta: rope_finetuned   = unknown
0.01.084.907 I llm_load_print_meta: ssm_d_conv       = 0
0.01.084.908 I llm_load_print_meta: ssm_d_inner      = 0
0.01.084.909 I llm_load_print_meta: ssm_d_state      = 0
0.01.084.909 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.084.910 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.084.913 I llm_load_print_meta: model type       = 2B
0.01.084.917 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.084.918 I llm_load_print_meta: model params     = 2.51 B
0.01.084.919 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.084.922 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.084.922 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.084.923 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.084.923 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.084.924 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.084.924 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.084.924 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.084.931 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.084.932 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.084.933 I llm_load_print_meta: max token length = 93
0.01.149.731 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.149.738 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.149.739 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.149.740 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.149.741 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.149.741 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.156.692 I llama_new_context_with_model: n_seq_max     = 1
0.01.156.697 I llama_new_context_with_model: n_ctx         = 4096
0.01.156.698 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.156.698 I llama_new_context_with_model: n_batch       = 2048
0.01.156.698 I llama_new_context_with_model: n_ubatch      = 512
0.01.156.699 I llama_new_context_with_model: flash_attn    = 0
0.01.156.701 I llama_new_context_with_model: freq_base     = 10000.0
0.01.156.702 I llama_new_context_with_model: freq_scale    = 1
0.01.156.703 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.156.783 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.171.081 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.171.122 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.171.239 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.174.864 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.174.868 I llama_new_context_with_model: graph nodes  = 601
0.01.174.869 I llama_new_context_with_model: graph splits = 1
0.01.174.892 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.174.896 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.755.622 I main: llama threadpool init, n_threads = 4
0.01.755.640 I 
0.01.755.770 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.755.775 I 
0.01.756.006 I sampler seed: 2126429938
0.01.756.019 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.756.032 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.756.032 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.756.033 I 
 maneuvously.

I am unable to generate a response as requested as I am unable to express emotions or personal opinions. [end of text]


0.10.783.158 I llama_perf_sampler_print:    sampling time =      40.35 ms /    27 runs   (    1.49 ms per token,   669.21 tokens per second)
0.10.783.162 I llama_perf_context_print:        load time =    1754.71 ms
0.10.783.174 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.783.176 I llama_perf_context_print:        eval time =    8957.80 ms /    26 runs   (  344.53 ms per token,     2.90 tokens per second)
0.10.783.177 I llama_perf_context_print:       total time =    9027.55 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4460 (ba8a1f9c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186588.61 ms
main:    total time = 186588.61 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.656 I build: 4460 (ba8a1f9c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.000.865 I main: load the model and apply lora adapter, if any
0.00.085.841 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.085.963 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.989 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.991 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.996 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.998 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.000 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.002 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.003 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.005 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.012 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.014 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.016 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.017 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.299.710 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.401.967 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.426.197 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.426.208 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.426.210 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.426.212 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.426.214 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.426.215 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.426.217 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.426.222 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.426.224 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.426.226 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.426.233 I llama_model_loader: - type  f32:   37 tensors
0.00.426.236 I llama_model_loader: - type q4_K:  108 tensors
0.00.426.236 I llama_model_loader: - type q6_K:   19 tensors
0.00.684.233 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.804.801 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.805.691 I llm_load_vocab: special tokens cache size = 5
0.01.026.849 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.026.928 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.026.932 I llm_load_print_meta: arch             = gemma
0.01.026.933 I llm_load_print_meta: vocab type       = SPM
0.01.026.934 I llm_load_print_meta: n_vocab          = 256000
0.01.026.936 I llm_load_print_meta: n_merges         = 0
0.01.026.936 I llm_load_print_meta: vocab_only       = 0
0.01.026.937 I llm_load_print_meta: n_ctx_train      = 8192
0.01.026.937 I llm_load_print_meta: n_embd           = 2048
0.01.026.937 I llm_load_print_meta: n_layer          = 18
0.01.027.017 I llm_load_print_meta: n_head           = 8
0.01.027.025 I llm_load_print_meta: n_head_kv        = 1
0.01.027.026 I llm_load_print_meta: n_rot            = 256
0.01.027.026 I llm_load_print_meta: n_swa            = 0
0.01.027.027 I llm_load_print_meta: n_embd_head_k    = 256
0.01.027.028 I llm_load_print_meta: n_embd_head_v    = 256
0.01.027.032 I llm_load_print_meta: n_gqa            = 8
0.01.027.037 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.027.043 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.027.045 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.027.046 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.027.047 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.027.047 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.027.048 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.027.052 I llm_load_print_meta: n_ff             = 16384
0.01.027.053 I llm_load_print_meta: n_expert         = 0
0.01.027.053 I llm_load_print_meta: n_expert_used    = 0
0.01.027.054 I llm_load_print_meta: causal attn      = 1
0.01.027.055 I llm_load_print_meta: pooling type     = 0
0.01.027.055 I llm_load_print_meta: rope type        = 2
0.01.027.056 I llm_load_print_meta: rope scaling     = linear
0.01.027.058 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.027.058 I llm_load_print_meta: freq_scale_train = 1
0.01.027.059 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.027.060 I llm_load_print_meta: rope_finetuned   = unknown
0.01.027.061 I llm_load_print_meta: ssm_d_conv       = 0
0.01.027.061 I llm_load_print_meta: ssm_d_inner      = 0
0.01.027.062 I llm_load_print_meta: ssm_d_state      = 0
0.01.027.062 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.027.062 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.027.065 I llm_load_print_meta: model type       = 2B
0.01.027.072 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.027.072 I llm_load_print_meta: model params     = 2.51 B
0.01.027.073 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.027.074 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.027.075 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.027.075 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.027.076 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.027.077 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.027.077 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.027.078 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.027.084 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.027.089 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.027.089 I llm_load_print_meta: max token length = 93
0.01.087.170 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.094.279 I llama_new_context_with_model: n_seq_max     = 1
0.01.094.285 I llama_new_context_with_model: n_ctx         = 4096
0.01.094.285 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.094.285 I llama_new_context_with_model: n_batch       = 2048
0.01.094.286 I llama_new_context_with_model: n_ubatch      = 512
0.01.094.286 I llama_new_context_with_model: flash_attn    = 0
0.01.094.289 I llama_new_context_with_model: freq_base     = 10000.0
0.01.094.290 I llama_new_context_with_model: freq_scale    = 1
0.01.094.290 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.094.372 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.110.120 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.110.160 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.110.283 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.113.637 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.113.641 I llama_new_context_with_model: graph nodes  = 601
0.01.113.641 I llama_new_context_with_model: graph splits = 1
0.01.113.666 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.113.669 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.693.912 I main: llama threadpool init, n_threads = 4
0.01.693.927 I 
0.01.694.055 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.694.059 I 
0.01.694.290 I sampler seed: 476718778
0.01.694.305 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.694.317 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.694.318 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.694.318 I 
 encompassing the spectrum of human experiences, from profound love and loss to fleeting joys and bitter disappointments.

**Title:** "The Tapestry of Existence: A

0.12.823.782 I llama_perf_sampler_print:    sampling time =      49.59 ms /    33 runs   (    1.50 ms per token,   665.43 tokens per second)
0.12.823.796 I llama_perf_context_print:        load time =    1692.95 ms
0.12.823.798 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.823.800 I llama_perf_context_print:        eval time =   11044.03 ms /    32 runs   (  345.13 ms per token,     2.90 tokens per second)
0.12.823.801 I llama_perf_context_print:       total time =   11129.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m40.032s
user	46m35.898s
sys	0m6.313s
