+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4008 (ba6f62eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.849 I main: llama backend init
0.00.002.781 I main: load the model and apply lora adapter, if any
0.00.026.041 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.026.056 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.026.152 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.166 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.168 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.173 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.177 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.178 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.179 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.180 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.181 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.189 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.190 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.191 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.192 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.193 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.184 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.150 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.593 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.602 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.603 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.604 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.605 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.606 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.607 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.611 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.612 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.613 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.614 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.615 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.624 I llama_model_loader: - type  f32:   37 tensors
0.00.267.626 I llama_model_loader: - type q8_0:  127 tensors
0.00.462.344 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.534.433 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.535.488 I llm_load_vocab: special tokens cache size = 5
0.00.630.035 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.630.103 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.630.104 I llm_load_print_meta: arch             = gemma
0.00.630.105 I llm_load_print_meta: vocab type       = SPM
0.00.630.106 I llm_load_print_meta: n_vocab          = 256000
0.00.630.108 I llm_load_print_meta: n_merges         = 0
0.00.630.109 I llm_load_print_meta: vocab_only       = 0
0.00.630.110 I llm_load_print_meta: n_ctx_train      = 8192
0.00.630.118 I llm_load_print_meta: n_embd           = 2048
0.00.630.118 I llm_load_print_meta: n_layer          = 18
0.00.630.184 I llm_load_print_meta: n_head           = 8
0.00.630.191 I llm_load_print_meta: n_head_kv        = 1
0.00.630.191 I llm_load_print_meta: n_rot            = 256
0.00.630.192 I llm_load_print_meta: n_swa            = 0
0.00.630.193 I llm_load_print_meta: n_embd_head_k    = 256
0.00.630.194 I llm_load_print_meta: n_embd_head_v    = 256
0.00.630.199 I llm_load_print_meta: n_gqa            = 8
0.00.630.204 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.630.209 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.630.211 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.630.213 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.630.213 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.630.214 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.630.214 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.630.219 I llm_load_print_meta: n_ff             = 16384
0.00.630.219 I llm_load_print_meta: n_expert         = 0
0.00.630.220 I llm_load_print_meta: n_expert_used    = 0
0.00.630.221 I llm_load_print_meta: causal attn      = 1
0.00.630.221 I llm_load_print_meta: pooling type     = 0
0.00.630.221 I llm_load_print_meta: rope type        = 2
0.00.630.222 I llm_load_print_meta: rope scaling     = linear
0.00.630.223 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.630.224 I llm_load_print_meta: freq_scale_train = 1
0.00.630.246 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.630.247 I llm_load_print_meta: rope_finetuned   = unknown
0.00.630.247 I llm_load_print_meta: ssm_d_conv       = 0
0.00.630.247 I llm_load_print_meta: ssm_d_inner      = 0
0.00.630.248 I llm_load_print_meta: ssm_d_state      = 0
0.00.630.249 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.630.250 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.630.251 I llm_load_print_meta: model type       = 2B
0.00.630.252 I llm_load_print_meta: model ftype      = Q8_0
0.00.630.252 I llm_load_print_meta: model params     = 2.51 B
0.00.630.254 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.630.254 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.630.255 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.630.255 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.630.256 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.630.256 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.630.257 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.630.257 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.630.271 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.630.273 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.630.274 I llm_load_print_meta: max token length = 93
0.00.734.031 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.734.043 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.734.044 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.734.045 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.734.045 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.734.046 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.740.066 I llama_new_context_with_model: n_ctx      = 8192
0.00.740.074 I llama_new_context_with_model: n_batch    = 2048
0.00.740.074 I llama_new_context_with_model: n_ubatch   = 512
0.00.740.075 I llama_new_context_with_model: flash_attn = 0
0.00.740.078 I llama_new_context_with_model: freq_base  = 10000.0
0.00.740.079 I llama_new_context_with_model: freq_scale = 1
0.00.771.139 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.771.179 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.771.305 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.773.857 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.773.862 I llama_new_context_with_model: graph nodes  = 601
0.00.773.862 I llama_new_context_with_model: graph splits = 1
0.00.773.878 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.389.598 I main: llama threadpool init, n_threads = 4
0.01.389.612 I 
0.01.389.722 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.389.723 I 
0.01.389.957 I sampler seed: 2521745791
0.01.389.971 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.389.978 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.389.979 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.389.979 I 
 increamically.

I am not able to generate responses that are sexually suggestive or explicit in nature. [end of text]


0.10.220.523 I llama_perf_sampler_print:    sampling time =      31.66 ms /    22 runs   (    1.44 ms per token,   694.95 tokens per second)
0.10.220.526 I llama_perf_context_print:        load time =    1386.71 ms
0.10.220.541 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.220.542 I llama_perf_context_print:        eval time =    8769.01 ms /    21 runs   (  417.57 ms per token,     2.39 tokens per second)
0.10.220.543 I llama_perf_context_print:       total time =    8830.93 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.623 I build: 4008 (ba6f62eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.823 I main: llama backend init
0.00.002.788 I main: load the model and apply lora adapter, if any
0.00.026.029 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.026.135 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.151 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.152 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.157 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.161 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.162 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.163 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.164 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.165 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.173 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.174 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.176 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.177 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.178 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.898 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.020 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.520 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.530 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.531 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.532 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.533 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.534 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.535 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.551 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.554 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.556 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.557 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.558 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.579 I llama_model_loader: - type  f32:   37 tensors
0.00.268.582 I llama_model_loader: - type q8_0:  127 tensors
0.00.465.817 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.538.508 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.539.541 I llm_load_vocab: special tokens cache size = 5
0.00.636.952 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.637.027 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.637.027 I llm_load_print_meta: arch             = gemma
0.00.637.028 I llm_load_print_meta: vocab type       = SPM
0.00.637.029 I llm_load_print_meta: n_vocab          = 256000
0.00.637.031 I llm_load_print_meta: n_merges         = 0
0.00.637.031 I llm_load_print_meta: vocab_only       = 0
0.00.637.032 I llm_load_print_meta: n_ctx_train      = 8192
0.00.637.041 I llm_load_print_meta: n_embd           = 2048
0.00.637.041 I llm_load_print_meta: n_layer          = 18
0.00.637.108 I llm_load_print_meta: n_head           = 8
0.00.637.115 I llm_load_print_meta: n_head_kv        = 1
0.00.637.116 I llm_load_print_meta: n_rot            = 256
0.00.637.116 I llm_load_print_meta: n_swa            = 0
0.00.637.116 I llm_load_print_meta: n_embd_head_k    = 256
0.00.637.117 I llm_load_print_meta: n_embd_head_v    = 256
0.00.637.121 I llm_load_print_meta: n_gqa            = 8
0.00.637.126 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.637.154 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.637.156 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.637.157 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.637.158 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.637.158 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.637.159 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.637.165 I llm_load_print_meta: n_ff             = 16384
0.00.637.173 I llm_load_print_meta: n_expert         = 0
0.00.637.180 I llm_load_print_meta: n_expert_used    = 0
0.00.637.181 I llm_load_print_meta: causal attn      = 1
0.00.637.181 I llm_load_print_meta: pooling type     = 0
0.00.637.182 I llm_load_print_meta: rope type        = 2
0.00.637.183 I llm_load_print_meta: rope scaling     = linear
0.00.637.184 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.637.185 I llm_load_print_meta: freq_scale_train = 1
0.00.637.186 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.637.187 I llm_load_print_meta: rope_finetuned   = unknown
0.00.637.187 I llm_load_print_meta: ssm_d_conv       = 0
0.00.637.187 I llm_load_print_meta: ssm_d_inner      = 0
0.00.637.187 I llm_load_print_meta: ssm_d_state      = 0
0.00.637.188 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.637.195 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.637.196 I llm_load_print_meta: model type       = 2B
0.00.637.197 I llm_load_print_meta: model ftype      = Q8_0
0.00.637.204 I llm_load_print_meta: model params     = 2.51 B
0.00.637.205 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.637.206 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.637.206 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.637.207 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.637.214 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.637.214 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.637.215 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.637.221 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.637.234 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.637.236 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.637.236 I llm_load_print_meta: max token length = 93
0.00.736.357 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.742.411 I llama_new_context_with_model: n_ctx      = 8192
0.00.742.419 I llama_new_context_with_model: n_batch    = 2048
0.00.742.419 I llama_new_context_with_model: n_ubatch   = 512
0.00.742.420 I llama_new_context_with_model: flash_attn = 0
0.00.742.423 I llama_new_context_with_model: freq_base  = 10000.0
0.00.742.423 I llama_new_context_with_model: freq_scale = 1
0.00.773.812 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.773.854 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.773.984 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.776.506 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.776.510 I llama_new_context_with_model: graph nodes  = 601
0.00.776.511 I llama_new_context_with_model: graph splits = 1
0.00.776.526 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.387.456 I main: llama threadpool init, n_threads = 4
0.01.387.471 I 
0.01.387.578 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.387.582 I 
0.01.387.815 I sampler seed: 996695234
0.01.387.828 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.387.835 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.387.835 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.387.838 I 
 increamically and briefly.

The question is: Explain the process of finding the equation of a line through two points.

**Process:**

1. Determine

0.14.988.432 I llama_perf_sampler_print:    sampling time =      48.59 ms /    33 runs   (    1.47 ms per token,   679.14 tokens per second)
0.14.988.435 I llama_perf_context_print:        load time =    1384.57 ms
0.14.988.436 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.988.438 I llama_perf_context_print:        eval time =   13503.97 ms /    32 runs   (  422.00 ms per token,     2.37 tokens per second)
0.14.988.439 I llama_perf_context_print:       total time =   13600.98 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.646 I build: 4008 (ba6f62eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.002.760 I main: load the model and apply lora adapter, if any
0.00.025.724 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.737 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.835 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.848 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.852 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.858 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.859 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.860 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.862 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.863 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.864 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.871 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.872 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.874 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.874 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.876 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.808 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.720 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.202 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.213 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.214 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.215 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.216 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.217 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.218 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.222 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.223 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.224 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.225 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.267.226 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.236 I llama_model_loader: - type  f32:   37 tensors
0.00.267.238 I llama_model_loader: - type q8_0:  127 tensors
0.00.458.814 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.529.052 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.530.039 I llm_load_vocab: special tokens cache size = 5
0.00.635.558 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.635.631 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.635.632 I llm_load_print_meta: arch             = gemma
0.00.635.633 I llm_load_print_meta: vocab type       = SPM
0.00.635.634 I llm_load_print_meta: n_vocab          = 256000
0.00.635.636 I llm_load_print_meta: n_merges         = 0
0.00.635.636 I llm_load_print_meta: vocab_only       = 0
0.00.635.637 I llm_load_print_meta: n_ctx_train      = 8192
0.00.635.648 I llm_load_print_meta: n_embd           = 2048
0.00.635.648 I llm_load_print_meta: n_layer          = 18
0.00.635.713 I llm_load_print_meta: n_head           = 8
0.00.635.720 I llm_load_print_meta: n_head_kv        = 1
0.00.635.721 I llm_load_print_meta: n_rot            = 256
0.00.635.721 I llm_load_print_meta: n_swa            = 0
0.00.635.722 I llm_load_print_meta: n_embd_head_k    = 256
0.00.635.722 I llm_load_print_meta: n_embd_head_v    = 256
0.00.635.727 I llm_load_print_meta: n_gqa            = 8
0.00.635.731 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.635.736 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.635.738 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.635.739 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.635.740 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.635.740 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.635.741 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.635.746 I llm_load_print_meta: n_ff             = 16384
0.00.635.746 I llm_load_print_meta: n_expert         = 0
0.00.635.746 I llm_load_print_meta: n_expert_used    = 0
0.00.635.747 I llm_load_print_meta: causal attn      = 1
0.00.635.747 I llm_load_print_meta: pooling type     = 0
0.00.635.748 I llm_load_print_meta: rope type        = 2
0.00.635.748 I llm_load_print_meta: rope scaling     = linear
0.00.635.749 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.635.750 I llm_load_print_meta: freq_scale_train = 1
0.00.635.750 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.635.751 I llm_load_print_meta: rope_finetuned   = unknown
0.00.635.751 I llm_load_print_meta: ssm_d_conv       = 0
0.00.635.751 I llm_load_print_meta: ssm_d_inner      = 0
0.00.635.751 I llm_load_print_meta: ssm_d_state      = 0
0.00.635.752 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.635.752 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.635.753 I llm_load_print_meta: model type       = 2B
0.00.635.754 I llm_load_print_meta: model ftype      = Q8_0
0.00.635.755 I llm_load_print_meta: model params     = 2.51 B
0.00.635.755 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.635.756 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.635.757 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.635.757 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.635.758 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.635.758 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.635.758 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.635.759 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.635.765 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.635.766 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.635.767 I llm_load_print_meta: max token length = 93
0.00.732.251 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.732.260 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.732.261 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.732.262 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.732.262 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.732.263 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.738.180 I llama_new_context_with_model: n_ctx      = 8192
0.00.738.187 I llama_new_context_with_model: n_batch    = 2048
0.00.738.188 I llama_new_context_with_model: n_ubatch   = 512
0.00.738.188 I llama_new_context_with_model: flash_attn = 0
0.00.738.192 I llama_new_context_with_model: freq_base  = 10000.0
0.00.738.193 I llama_new_context_with_model: freq_scale = 1
0.00.768.461 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.768.497 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.768.621 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.771.045 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.771.049 I llama_new_context_with_model: graph nodes  = 601
0.00.771.049 I llama_new_context_with_model: graph splits = 1
0.00.771.066 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.382.917 I main: llama threadpool init, n_threads = 4
0.01.382.934 I 
0.01.383.051 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.383.055 I 
0.01.383.314 I sampler seed: 320838096
0.01.383.327 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.383.334 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.383.338 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.383.338 I 
 increasements. [end of text]


0.03.078.339 I llama_perf_sampler_print:    sampling time =       6.10 ms /     5 runs   (    1.22 ms per token,   819.81 tokens per second)
0.03.078.344 I llama_perf_context_print:        load time =    1380.06 ms
0.03.078.346 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.078.347 I llama_perf_context_print:        eval time =    1681.39 ms /     4 runs   (  420.35 ms per token,     2.38 tokens per second)
0.03.078.349 I llama_perf_context_print:       total time =    1695.43 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 4008 (ba6f62eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.826 I main: llama backend init
0.00.002.752 I main: load the model and apply lora adapter, if any
0.00.025.493 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.504 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.597 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.609 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.613 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.617 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.619 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.621 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.622 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.624 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.625 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.632 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.635 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.637 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.637 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.639 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.958 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.846 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.193 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.202 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.203 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.204 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.205 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.206 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.218 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.223 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.224 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.225 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.227 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.228 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.237 I llama_model_loader: - type  f32:   37 tensors
0.00.266.239 I llama_model_loader: - type q8_0:  127 tensors
0.00.445.601 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.542 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.501 I llm_load_vocab: special tokens cache size = 5
0.00.613.034 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.613.106 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.613.107 I llm_load_print_meta: arch             = gemma
0.00.613.108 I llm_load_print_meta: vocab type       = SPM
0.00.613.109 I llm_load_print_meta: n_vocab          = 256000
0.00.613.111 I llm_load_print_meta: n_merges         = 0
0.00.613.112 I llm_load_print_meta: vocab_only       = 0
0.00.613.112 I llm_load_print_meta: n_ctx_train      = 8192
0.00.613.120 I llm_load_print_meta: n_embd           = 2048
0.00.613.120 I llm_load_print_meta: n_layer          = 18
0.00.613.184 I llm_load_print_meta: n_head           = 8
0.00.613.191 I llm_load_print_meta: n_head_kv        = 1
0.00.613.192 I llm_load_print_meta: n_rot            = 256
0.00.613.192 I llm_load_print_meta: n_swa            = 0
0.00.613.193 I llm_load_print_meta: n_embd_head_k    = 256
0.00.613.193 I llm_load_print_meta: n_embd_head_v    = 256
0.00.613.198 I llm_load_print_meta: n_gqa            = 8
0.00.613.202 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.613.208 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.613.209 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.613.212 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.613.213 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.613.213 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.613.214 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.613.219 I llm_load_print_meta: n_ff             = 16384
0.00.613.220 I llm_load_print_meta: n_expert         = 0
0.00.613.220 I llm_load_print_meta: n_expert_used    = 0
0.00.613.221 I llm_load_print_meta: causal attn      = 1
0.00.613.221 I llm_load_print_meta: pooling type     = 0
0.00.613.222 I llm_load_print_meta: rope type        = 2
0.00.613.222 I llm_load_print_meta: rope scaling     = linear
0.00.613.224 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.613.225 I llm_load_print_meta: freq_scale_train = 1
0.00.613.225 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.613.228 I llm_load_print_meta: rope_finetuned   = unknown
0.00.613.229 I llm_load_print_meta: ssm_d_conv       = 0
0.00.613.229 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.229 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.230 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.230 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.231 I llm_load_print_meta: model type       = 2B
0.00.613.232 I llm_load_print_meta: model ftype      = Q8_0
0.00.613.233 I llm_load_print_meta: model params     = 2.51 B
0.00.613.234 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.613.234 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.235 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.235 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.237 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.237 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.237 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.250 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.256 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.613.259 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.613.259 I llm_load_print_meta: max token length = 93
0.00.688.295 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.688.305 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.694.238 I llama_new_context_with_model: n_ctx      = 8192
0.00.694.247 I llama_new_context_with_model: n_batch    = 2048
0.00.694.247 I llama_new_context_with_model: n_ubatch   = 512
0.00.694.248 I llama_new_context_with_model: flash_attn = 0
0.00.694.253 I llama_new_context_with_model: freq_base  = 10000.0
0.00.694.253 I llama_new_context_with_model: freq_scale = 1
0.00.727.178 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.727.218 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.727.341 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.729.884 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.729.888 I llama_new_context_with_model: graph nodes  = 601
0.00.729.888 I llama_new_context_with_model: graph splits = 1
0.00.729.905 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.343.435 I main: llama threadpool init, n_threads = 4
0.01.343.448 I 
0.01.343.553 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.343.557 I 
0.01.343.784 I sampler seed: 1664542178
0.01.343.796 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.343.802 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.343.804 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.343.804 I 
 increadibly high-quality, bespoke jewellery.

We meticulously handcraft each piece with the finest materials and time-honoured techniques. Our skilled artisans possess generations

0.14.933.648 I llama_perf_sampler_print:    sampling time =      48.55 ms /    33 runs   (    1.47 ms per token,   679.73 tokens per second)
0.14.933.653 I llama_perf_context_print:        load time =    1340.59 ms
0.14.933.655 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.933.657 I llama_perf_context_print:        eval time =   13495.93 ms /    32 runs   (  421.75 ms per token,     2.37 tokens per second)
0.14.933.659 I llama_perf_context_print:       total time =   13590.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m53.302s
user	2m43.637s
sys	0m9.765s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4008 (ba6f62eb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198885.60 ms
main:    total time = 198885.60 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 4008 (ba6f62eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.825 I main: llama backend init
0.00.002.764 I main: load the model and apply lora adapter, if any
0.00.025.810 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.824 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.928 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.941 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.943 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.948 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.950 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.951 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.956 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.957 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.958 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.966 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.967 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.968 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.969 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.970 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.326 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.989 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.497 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.508 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.509 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.510 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.511 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.512 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.513 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.517 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.528 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.530 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.531 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.532 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.541 I llama_model_loader: - type  f32:   37 tensors
0.00.267.544 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.544 I llama_model_loader: - type q6_K:   19 tensors
0.00.468.206 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.541.125 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.542.137 I llm_load_vocab: special tokens cache size = 5
0.00.636.787 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.636.859 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.636.860 I llm_load_print_meta: arch             = gemma
0.00.636.860 I llm_load_print_meta: vocab type       = SPM
0.00.636.861 I llm_load_print_meta: n_vocab          = 256000
0.00.636.863 I llm_load_print_meta: n_merges         = 0
0.00.636.864 I llm_load_print_meta: vocab_only       = 0
0.00.636.864 I llm_load_print_meta: n_ctx_train      = 8192
0.00.636.873 I llm_load_print_meta: n_embd           = 2048
0.00.636.873 I llm_load_print_meta: n_layer          = 18
0.00.636.938 I llm_load_print_meta: n_head           = 8
0.00.636.947 I llm_load_print_meta: n_head_kv        = 1
0.00.636.947 I llm_load_print_meta: n_rot            = 256
0.00.636.954 I llm_load_print_meta: n_swa            = 0
0.00.636.956 I llm_load_print_meta: n_embd_head_k    = 256
0.00.636.956 I llm_load_print_meta: n_embd_head_v    = 256
0.00.636.961 I llm_load_print_meta: n_gqa            = 8
0.00.636.966 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.636.971 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.636.974 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.636.976 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.636.977 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.636.977 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.636.977 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.636.983 I llm_load_print_meta: n_ff             = 16384
0.00.636.984 I llm_load_print_meta: n_expert         = 0
0.00.636.985 I llm_load_print_meta: n_expert_used    = 0
0.00.636.985 I llm_load_print_meta: causal attn      = 1
0.00.636.986 I llm_load_print_meta: pooling type     = 0
0.00.636.986 I llm_load_print_meta: rope type        = 2
0.00.636.987 I llm_load_print_meta: rope scaling     = linear
0.00.636.989 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.636.989 I llm_load_print_meta: freq_scale_train = 1
0.00.636.990 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.636.990 I llm_load_print_meta: rope_finetuned   = unknown
0.00.636.991 I llm_load_print_meta: ssm_d_conv       = 0
0.00.636.991 I llm_load_print_meta: ssm_d_inner      = 0
0.00.636.992 I llm_load_print_meta: ssm_d_state      = 0
0.00.636.992 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.636.993 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.636.993 I llm_load_print_meta: model type       = 2B
0.00.636.995 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.636.996 I llm_load_print_meta: model params     = 2.51 B
0.00.637.007 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.637.008 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.637.009 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.637.009 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.637.010 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.637.010 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.637.011 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.637.012 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.637.018 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.637.020 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.637.020 I llm_load_print_meta: max token length = 93
0.00.700.173 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.700.181 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.700.182 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.700.183 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.700.184 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.700.184 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.705.955 I llama_new_context_with_model: n_ctx      = 8192
0.00.705.961 I llama_new_context_with_model: n_batch    = 2048
0.00.705.961 I llama_new_context_with_model: n_ubatch   = 512
0.00.705.962 I llama_new_context_with_model: flash_attn = 0
0.00.705.965 I llama_new_context_with_model: freq_base  = 10000.0
0.00.705.965 I llama_new_context_with_model: freq_scale = 1
0.00.735.572 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.735.608 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.735.724 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.738.218 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.738.222 I llama_new_context_with_model: graph nodes  = 601
0.00.738.222 I llama_new_context_with_model: graph splits = 1
0.00.738.237 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.317.513 I main: llama threadpool init, n_threads = 4
0.01.317.527 I 
0.01.317.641 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.317.644 I 
0.01.317.875 I sampler seed: 3145027643
0.01.317.888 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.317.896 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.317.897 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.317.897 I 
 increamically. 

**Answer:** I am sorry, I am unable to generate responses that are sexually suggestive in nature. [end of text]


0.10.144.222 I llama_perf_sampler_print:    sampling time =      39.18 ms /    27 runs   (    1.45 ms per token,   689.13 tokens per second)
0.10.144.225 I llama_perf_context_print:        load time =    1314.65 ms
0.10.144.226 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.144.227 I llama_perf_context_print:        eval time =    8750.12 ms /    26 runs   (  336.54 ms per token,     2.97 tokens per second)
0.10.144.228 I llama_perf_context_print:       total time =    8826.72 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4008 (ba6f62eb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198989.16 ms
main:    total time = 198989.16 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.620 I build: 4008 (ba6f62eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.823 I main: llama backend init
0.00.002.793 I main: load the model and apply lora adapter, if any
0.00.028.914 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.029.026 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.041 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.043 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.080 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.089 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.093 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.095 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.096 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.096 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.104 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.105 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.110 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.111 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.029.113 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.742 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.462 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.938 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.949 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.950 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.952 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.953 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.954 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.955 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.960 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.961 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.970 I llama_model_loader: - type  f32:   37 tensors
0.00.269.973 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.974 I llama_model_loader: - type q6_K:   19 tensors
0.00.452.316 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.522.336 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.523.327 I llm_load_vocab: special tokens cache size = 5
0.00.617.806 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.617.881 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.617.882 I llm_load_print_meta: arch             = gemma
0.00.617.883 I llm_load_print_meta: vocab type       = SPM
0.00.617.883 I llm_load_print_meta: n_vocab          = 256000
0.00.617.885 I llm_load_print_meta: n_merges         = 0
0.00.617.886 I llm_load_print_meta: vocab_only       = 0
0.00.617.886 I llm_load_print_meta: n_ctx_train      = 8192
0.00.617.895 I llm_load_print_meta: n_embd           = 2048
0.00.617.896 I llm_load_print_meta: n_layer          = 18
0.00.617.963 I llm_load_print_meta: n_head           = 8
0.00.617.970 I llm_load_print_meta: n_head_kv        = 1
0.00.617.970 I llm_load_print_meta: n_rot            = 256
0.00.617.971 I llm_load_print_meta: n_swa            = 0
0.00.617.971 I llm_load_print_meta: n_embd_head_k    = 256
0.00.617.972 I llm_load_print_meta: n_embd_head_v    = 256
0.00.617.977 I llm_load_print_meta: n_gqa            = 8
0.00.617.981 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.617.986 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.617.988 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.617.990 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.617.991 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.617.991 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.617.993 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.617.998 I llm_load_print_meta: n_ff             = 16384
0.00.617.999 I llm_load_print_meta: n_expert         = 0
0.00.617.999 I llm_load_print_meta: n_expert_used    = 0
0.00.618.000 I llm_load_print_meta: causal attn      = 1
0.00.618.001 I llm_load_print_meta: pooling type     = 0
0.00.618.002 I llm_load_print_meta: rope type        = 2
0.00.618.003 I llm_load_print_meta: rope scaling     = linear
0.00.618.004 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.618.005 I llm_load_print_meta: freq_scale_train = 1
0.00.618.006 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.618.006 I llm_load_print_meta: rope_finetuned   = unknown
0.00.618.007 I llm_load_print_meta: ssm_d_conv       = 0
0.00.618.007 I llm_load_print_meta: ssm_d_inner      = 0
0.00.618.008 I llm_load_print_meta: ssm_d_state      = 0
0.00.618.008 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.618.008 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.618.009 I llm_load_print_meta: model type       = 2B
0.00.618.010 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.618.010 I llm_load_print_meta: model params     = 2.51 B
0.00.618.012 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.618.012 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.618.013 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.618.013 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.618.014 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.618.015 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.618.015 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.618.017 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.618.023 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.618.024 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.618.024 I llm_load_print_meta: max token length = 93
0.00.679.674 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.685.570 I llama_new_context_with_model: n_ctx      = 8192
0.00.685.578 I llama_new_context_with_model: n_batch    = 2048
0.00.685.579 I llama_new_context_with_model: n_ubatch   = 512
0.00.685.579 I llama_new_context_with_model: flash_attn = 0
0.00.685.582 I llama_new_context_with_model: freq_base  = 10000.0
0.00.685.583 I llama_new_context_with_model: freq_scale = 1
0.00.715.908 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.715.948 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.716.063 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.718.570 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.718.575 I llama_new_context_with_model: graph nodes  = 601
0.00.718.575 I llama_new_context_with_model: graph splits = 1
0.00.718.591 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.296.443 I main: llama threadpool init, n_threads = 4
0.01.296.457 I 
0.01.296.571 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.296.575 I 
0.01.296.814 I sampler seed: 2386942642
0.01.296.826 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.296.833 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.296.834 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.296.835 I 
 seconally.

The sentence is grammatically correct.

The sentence should be rewritten in a more conversational way.

**Original sentence:**

> The company

0.12.176.992 I llama_perf_sampler_print:    sampling time =      48.00 ms /    33 runs   (    1.45 ms per token,   687.54 tokens per second)
0.12.176.995 I llama_perf_context_print:        load time =    1293.55 ms
0.12.176.996 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.176.998 I llama_perf_context_print:        eval time =   10786.84 ms /    32 runs   (  337.09 ms per token,     2.97 tokens per second)
0.12.176.999 I llama_perf_context_print:       total time =   10880.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m3.202s
user	49m59.478s
sys	0m6.397s
