+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.599 I build: 4240 (64ed2091) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.817 I main: llama backend init
0.00.000.824 I main: load the model and apply lora adapter, if any
0.00.021.293 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.304 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.311 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.316 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.317 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.320 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.321 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.321 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.323 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.324 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.324 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.328 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.329 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.330 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.331 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.331 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.244 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.368 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.291 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.300 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.301 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.302 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.303 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.304 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.305 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.309 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.311 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.312 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.313 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.314 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.318 I llama_model_loader: - type  f32:   37 tensors
0.00.132.320 I llama_model_loader: - type q8_0:  127 tensors
0.00.218.675 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.272.829 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.273.538 I llm_load_vocab: special tokens cache size = 5
0.00.294.526 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.294.545 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.294.545 I llm_load_print_meta: arch             = gemma
0.00.294.546 I llm_load_print_meta: vocab type       = SPM
0.00.294.547 I llm_load_print_meta: n_vocab          = 256000
0.00.294.547 I llm_load_print_meta: n_merges         = 0
0.00.294.547 I llm_load_print_meta: vocab_only       = 0
0.00.294.548 I llm_load_print_meta: n_ctx_train      = 8192
0.00.294.548 I llm_load_print_meta: n_embd           = 2048
0.00.294.548 I llm_load_print_meta: n_layer          = 18
0.00.294.561 I llm_load_print_meta: n_head           = 8
0.00.294.562 I llm_load_print_meta: n_head_kv        = 1
0.00.294.563 I llm_load_print_meta: n_rot            = 256
0.00.294.563 I llm_load_print_meta: n_swa            = 0
0.00.294.563 I llm_load_print_meta: n_embd_head_k    = 256
0.00.294.563 I llm_load_print_meta: n_embd_head_v    = 256
0.00.294.564 I llm_load_print_meta: n_gqa            = 8
0.00.294.565 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.294.566 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.294.567 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.294.568 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.294.569 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.294.569 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.294.569 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.294.570 I llm_load_print_meta: n_ff             = 16384
0.00.294.571 I llm_load_print_meta: n_expert         = 0
0.00.294.571 I llm_load_print_meta: n_expert_used    = 0
0.00.294.571 I llm_load_print_meta: causal attn      = 1
0.00.294.571 I llm_load_print_meta: pooling type     = 0
0.00.294.572 I llm_load_print_meta: rope type        = 2
0.00.294.572 I llm_load_print_meta: rope scaling     = linear
0.00.294.573 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.294.574 I llm_load_print_meta: freq_scale_train = 1
0.00.294.574 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.294.575 I llm_load_print_meta: rope_finetuned   = unknown
0.00.294.575 I llm_load_print_meta: ssm_d_conv       = 0
0.00.294.575 I llm_load_print_meta: ssm_d_inner      = 0
0.00.294.576 I llm_load_print_meta: ssm_d_state      = 0
0.00.294.576 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.294.576 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.294.577 I llm_load_print_meta: model type       = 2B
0.00.294.577 I llm_load_print_meta: model ftype      = Q8_0
0.00.294.578 I llm_load_print_meta: model params     = 2.51 B
0.00.294.579 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.294.579 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.294.580 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.294.580 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.294.581 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.294.581 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.294.581 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.294.582 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.294.582 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.294.583 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.294.583 I llm_load_print_meta: max token length = 93
0.00.395.988 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.395.994 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.395.995 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.395.996 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.395.997 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.395.997 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.401.301 I llama_new_context_with_model: n_seq_max     = 1
0.00.401.307 I llama_new_context_with_model: n_ctx         = 4096
0.00.401.308 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.401.308 I llama_new_context_with_model: n_batch       = 2048
0.00.401.308 I llama_new_context_with_model: n_ubatch      = 512
0.00.401.309 I llama_new_context_with_model: flash_attn    = 0
0.00.401.311 I llama_new_context_with_model: freq_base     = 10000.0
0.00.401.312 I llama_new_context_with_model: freq_scale    = 1
0.00.401.313 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.416.647 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.416.661 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.416.761 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.418.027 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.418.033 I llama_new_context_with_model: graph nodes  = 601
0.00.418.033 I llama_new_context_with_model: graph splits = 1
0.00.418.036 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.503.365 I main: llama threadpool init, n_threads = 4
0.00.503.381 I 
0.00.503.453 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.503.456 I 
0.00.503.501 I sampler seed: 2977887259
0.00.503.512 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.503.523 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.503.526 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.503.527 I 
 increamically!

I cannot answer this question as it contains inappropriate and potentially harmful language. [end of text]


0.01.875.090 I llama_perf_sampler_print:    sampling time =       3.05 ms /    20 runs   (    0.15 ms per token,  6548.79 tokens per second)
0.01.875.094 I llama_perf_context_print:        load time =     502.52 ms
0.01.875.095 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.875.097 I llama_perf_context_print:        eval time =    1359.14 ms /    19 runs   (   71.53 ms per token,    13.98 tokens per second)
0.01.875.098 I llama_perf_context_print:       total time =    1371.73 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.537 I build: 4240 (64ed2091) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.000.732 I main: load the model and apply lora adapter, if any
0.00.021.172 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.187 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.194 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.195 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.199 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.200 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.201 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.202 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.202 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.203 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.207 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.208 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.209 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.209 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.210 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.902 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.433 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.361 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.369 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.370 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.371 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.371 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.372 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.373 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.375 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.376 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.377 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.377 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.379 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.384 I llama_model_loader: - type  f32:   37 tensors
0.00.132.385 I llama_model_loader: - type q8_0:  127 tensors
0.00.216.795 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.693 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.371 I llm_load_vocab: special tokens cache size = 5
0.00.286.384 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.286.403 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.286.403 I llm_load_print_meta: arch             = gemma
0.00.286.404 I llm_load_print_meta: vocab type       = SPM
0.00.286.405 I llm_load_print_meta: n_vocab          = 256000
0.00.286.405 I llm_load_print_meta: n_merges         = 0
0.00.286.406 I llm_load_print_meta: vocab_only       = 0
0.00.286.406 I llm_load_print_meta: n_ctx_train      = 8192
0.00.286.406 I llm_load_print_meta: n_embd           = 2048
0.00.286.407 I llm_load_print_meta: n_layer          = 18
0.00.286.419 I llm_load_print_meta: n_head           = 8
0.00.286.420 I llm_load_print_meta: n_head_kv        = 1
0.00.286.420 I llm_load_print_meta: n_rot            = 256
0.00.286.421 I llm_load_print_meta: n_swa            = 0
0.00.286.421 I llm_load_print_meta: n_embd_head_k    = 256
0.00.286.421 I llm_load_print_meta: n_embd_head_v    = 256
0.00.286.422 I llm_load_print_meta: n_gqa            = 8
0.00.286.423 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.286.424 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.286.424 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.286.426 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.286.426 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.286.427 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.286.427 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.286.428 I llm_load_print_meta: n_ff             = 16384
0.00.286.428 I llm_load_print_meta: n_expert         = 0
0.00.286.428 I llm_load_print_meta: n_expert_used    = 0
0.00.286.429 I llm_load_print_meta: causal attn      = 1
0.00.286.429 I llm_load_print_meta: pooling type     = 0
0.00.286.429 I llm_load_print_meta: rope type        = 2
0.00.286.430 I llm_load_print_meta: rope scaling     = linear
0.00.286.431 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.286.432 I llm_load_print_meta: freq_scale_train = 1
0.00.286.432 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.286.432 I llm_load_print_meta: rope_finetuned   = unknown
0.00.286.433 I llm_load_print_meta: ssm_d_conv       = 0
0.00.286.433 I llm_load_print_meta: ssm_d_inner      = 0
0.00.286.433 I llm_load_print_meta: ssm_d_state      = 0
0.00.286.433 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.286.434 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.286.434 I llm_load_print_meta: model type       = 2B
0.00.286.435 I llm_load_print_meta: model ftype      = Q8_0
0.00.286.436 I llm_load_print_meta: model params     = 2.51 B
0.00.286.436 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.286.437 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.286.437 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.286.437 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.286.438 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.286.438 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.286.438 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.286.439 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.286.439 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.286.440 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.286.440 I llm_load_print_meta: max token length = 93
0.00.379.030 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.384.227 I llama_new_context_with_model: n_seq_max     = 1
0.00.384.234 I llama_new_context_with_model: n_ctx         = 4096
0.00.384.235 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.384.235 I llama_new_context_with_model: n_batch       = 2048
0.00.384.236 I llama_new_context_with_model: n_ubatch      = 512
0.00.384.236 I llama_new_context_with_model: flash_attn    = 0
0.00.384.238 I llama_new_context_with_model: freq_base     = 10000.0
0.00.384.239 I llama_new_context_with_model: freq_scale    = 1
0.00.384.240 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.398.980 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.398.994 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.399.087 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.400.342 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.400.349 I llama_new_context_with_model: graph nodes  = 601
0.00.400.349 I llama_new_context_with_model: graph splits = 1
0.00.400.351 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.483.162 I main: llama threadpool init, n_threads = 4
0.00.483.179 I 
0.00.483.251 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.483.255 I 
0.00.483.296 I sampler seed: 107750427
0.00.483.307 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.483.315 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.483.318 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.483.318 I 
 increasively.

I'm not sure what you're trying to say.
Can you please explain what you mean? [end of text]


0.02.349.048 I llama_perf_sampler_print:    sampling time =       4.00 ms /    28 runs   (    0.14 ms per token,  7007.01 tokens per second)
0.02.349.051 I llama_perf_context_print:        load time =     482.41 ms
0.02.349.053 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.349.054 I llama_perf_context_print:        eval time =    1849.74 ms /    27 runs   (   68.51 ms per token,    14.60 tokens per second)
0.02.349.055 I llama_perf_context_print:       total time =    1865.89 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.569 I build: 4240 (64ed2091) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.764 I main: llama backend init
0.00.000.770 I main: load the model and apply lora adapter, if any
0.00.022.180 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.191 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.199 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.210 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.211 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.215 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.216 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.216 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.217 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.218 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.218 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.222 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.223 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.224 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.224 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.225 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.428 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.604 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.453 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.460 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.461 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.462 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.463 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.464 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.465 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.468 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.469 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.470 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.470 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.471 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.475 I llama_model_loader: - type  f32:   37 tensors
0.00.133.477 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.025 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.461 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.133 I llm_load_vocab: special tokens cache size = 5
0.00.275.072 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.092 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.093 I llm_load_print_meta: arch             = gemma
0.00.275.093 I llm_load_print_meta: vocab type       = SPM
0.00.275.094 I llm_load_print_meta: n_vocab          = 256000
0.00.275.094 I llm_load_print_meta: n_merges         = 0
0.00.275.094 I llm_load_print_meta: vocab_only       = 0
0.00.275.094 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.095 I llm_load_print_meta: n_embd           = 2048
0.00.275.095 I llm_load_print_meta: n_layer          = 18
0.00.275.106 I llm_load_print_meta: n_head           = 8
0.00.275.107 I llm_load_print_meta: n_head_kv        = 1
0.00.275.107 I llm_load_print_meta: n_rot            = 256
0.00.275.107 I llm_load_print_meta: n_swa            = 0
0.00.275.107 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.108 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.108 I llm_load_print_meta: n_gqa            = 8
0.00.275.109 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.111 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.112 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.113 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.113 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.113 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.114 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.115 I llm_load_print_meta: n_ff             = 16384
0.00.275.115 I llm_load_print_meta: n_expert         = 0
0.00.275.115 I llm_load_print_meta: n_expert_used    = 0
0.00.275.115 I llm_load_print_meta: causal attn      = 1
0.00.275.115 I llm_load_print_meta: pooling type     = 0
0.00.275.116 I llm_load_print_meta: rope type        = 2
0.00.275.116 I llm_load_print_meta: rope scaling     = linear
0.00.275.117 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.118 I llm_load_print_meta: freq_scale_train = 1
0.00.275.118 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.119 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.119 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.119 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.119 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.120 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.120 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.121 I llm_load_print_meta: model type       = 2B
0.00.275.121 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.122 I llm_load_print_meta: model params     = 2.51 B
0.00.275.123 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.123 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.123 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.124 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.124 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.124 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.125 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.125 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.126 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.126 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.127 I llm_load_print_meta: max token length = 93
0.00.351.323 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.351.330 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.351.331 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.351.332 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.351.332 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.351.333 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.356.870 I llama_new_context_with_model: n_seq_max     = 1
0.00.356.877 I llama_new_context_with_model: n_ctx         = 4096
0.00.356.878 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.356.878 I llama_new_context_with_model: n_batch       = 2048
0.00.356.879 I llama_new_context_with_model: n_ubatch      = 512
0.00.356.879 I llama_new_context_with_model: flash_attn    = 0
0.00.356.883 I llama_new_context_with_model: freq_base     = 10000.0
0.00.356.884 I llama_new_context_with_model: freq_scale    = 1
0.00.356.885 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.372.123 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.372.138 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.372.248 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.373.555 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.373.562 I llama_new_context_with_model: graph nodes  = 601
0.00.373.562 I llama_new_context_with_model: graph splits = 1
0.00.373.564 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.865 I main: llama threadpool init, n_threads = 4
0.00.463.880 I 
0.00.463.953 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.463.957 I 
0.00.464.002 I sampler seed: 2763885483
0.00.464.013 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.024 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.027 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.028 I 
 increamically.

I am sorry, I am unable to generate responses that are sexually suggestive in nature. [end of text]


0.02.045.857 I llama_perf_sampler_print:    sampling time =       3.43 ms /    23 runs   (    0.15 ms per token,  6705.54 tokens per second)
0.02.045.860 I llama_perf_context_print:        load time =     463.07 ms
0.02.045.861 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.045.863 I llama_perf_context_print:        eval time =    1567.79 ms /    22 runs   (   71.26 ms per token,    14.03 tokens per second)
0.02.045.864 I llama_perf_context_print:       total time =    1582.00 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.614 I build: 4240 (64ed2091) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.821 I main: llama backend init
0.00.000.828 I main: load the model and apply lora adapter, if any
0.00.021.139 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.150 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.158 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.164 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.164 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.169 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.169 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.170 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.171 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.172 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.172 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.179 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.180 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.181 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.182 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.183 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.870 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.853 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.736 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.743 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.744 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.745 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.746 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.746 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.747 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.750 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.750 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.751 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.752 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.753 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.757 I llama_model_loader: - type  f32:   37 tensors
0.00.133.758 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.157 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.550 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.147 I llm_load_vocab: special tokens cache size = 5
0.00.281.271 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.293 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.294 I llm_load_print_meta: arch             = gemma
0.00.281.294 I llm_load_print_meta: vocab type       = SPM
0.00.281.295 I llm_load_print_meta: n_vocab          = 256000
0.00.281.295 I llm_load_print_meta: n_merges         = 0
0.00.281.296 I llm_load_print_meta: vocab_only       = 0
0.00.281.296 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.297 I llm_load_print_meta: n_embd           = 2048
0.00.281.297 I llm_load_print_meta: n_layer          = 18
0.00.281.310 I llm_load_print_meta: n_head           = 8
0.00.281.313 I llm_load_print_meta: n_head_kv        = 1
0.00.281.313 I llm_load_print_meta: n_rot            = 256
0.00.281.314 I llm_load_print_meta: n_swa            = 0
0.00.281.315 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.315 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.316 I llm_load_print_meta: n_gqa            = 8
0.00.281.318 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.319 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.320 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.321 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.322 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.323 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.323 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.325 I llm_load_print_meta: n_ff             = 16384
0.00.281.325 I llm_load_print_meta: n_expert         = 0
0.00.281.326 I llm_load_print_meta: n_expert_used    = 0
0.00.281.326 I llm_load_print_meta: causal attn      = 1
0.00.281.326 I llm_load_print_meta: pooling type     = 0
0.00.281.327 I llm_load_print_meta: rope type        = 2
0.00.281.327 I llm_load_print_meta: rope scaling     = linear
0.00.281.329 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.330 I llm_load_print_meta: freq_scale_train = 1
0.00.281.330 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.331 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.332 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.332 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.332 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.333 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.333 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.334 I llm_load_print_meta: model type       = 2B
0.00.281.335 I llm_load_print_meta: model ftype      = Q8_0
0.00.281.336 I llm_load_print_meta: model params     = 2.51 B
0.00.281.337 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.281.337 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.337 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.338 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.338 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.338 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.339 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.339 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.340 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.340 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.340 I llm_load_print_meta: max token length = 93
0.00.352.327 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.352.332 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.357.671 I llama_new_context_with_model: n_seq_max     = 1
0.00.357.678 I llama_new_context_with_model: n_ctx         = 4096
0.00.357.678 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.357.679 I llama_new_context_with_model: n_batch       = 2048
0.00.357.679 I llama_new_context_with_model: n_ubatch      = 512
0.00.357.680 I llama_new_context_with_model: flash_attn    = 0
0.00.357.682 I llama_new_context_with_model: freq_base     = 10000.0
0.00.357.683 I llama_new_context_with_model: freq_scale    = 1
0.00.357.684 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.371.992 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.372.007 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.372.108 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.373.398 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.373.405 I llama_new_context_with_model: graph nodes  = 601
0.00.373.405 I llama_new_context_with_model: graph splits = 1
0.00.373.408 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.088 I main: llama threadpool init, n_threads = 4
0.00.463.104 I 
0.00.463.188 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.463.191 I 
0.00.463.238 I sampler seed: 3554922477
0.00.463.249 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.255 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.256 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.257 I 
 increasels, and the like.

I am not sure what this means.

Please provide a definition and explain what this means.

I apologize for any

0.02.922.453 I llama_perf_sampler_print:    sampling time =       4.75 ms /    33 runs   (    0.14 ms per token,  6948.83 tokens per second)
0.02.922.455 I llama_perf_context_print:        load time =     462.24 ms
0.02.922.457 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.922.458 I llama_perf_context_print:        eval time =    2439.57 ms /    32 runs   (   76.24 ms per token,    13.12 tokens per second)
0.02.922.459 I llama_perf_context_print:       total time =    2459.37 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.139s
user	0m32.054s
sys	0m9.559s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4240 (64ed2091)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40232.68 ms
main:    total time = 40232.68 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.546 I build: 4240 (64ed2091) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.760 I main: llama backend init
0.00.000.767 I main: load the model and apply lora adapter, if any
0.00.021.174 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.185 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.193 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.198 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.199 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.203 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.204 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.204 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.205 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.205 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.206 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.210 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.214 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.215 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.216 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.216 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.274 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.995 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.827 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.833 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.834 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.835 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.836 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.838 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.839 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.842 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.842 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.843 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.844 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.844 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.848 I llama_model_loader: - type  f32:   37 tensors
0.00.131.849 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.849 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.140 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.265 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.860 I llm_load_vocab: special tokens cache size = 5
0.00.273.765 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.780 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.781 I llm_load_print_meta: arch             = gemma
0.00.273.782 I llm_load_print_meta: vocab type       = SPM
0.00.273.782 I llm_load_print_meta: n_vocab          = 256000
0.00.273.783 I llm_load_print_meta: n_merges         = 0
0.00.273.783 I llm_load_print_meta: vocab_only       = 0
0.00.273.784 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.784 I llm_load_print_meta: n_embd           = 2048
0.00.273.784 I llm_load_print_meta: n_layer          = 18
0.00.273.796 I llm_load_print_meta: n_head           = 8
0.00.273.797 I llm_load_print_meta: n_head_kv        = 1
0.00.273.797 I llm_load_print_meta: n_rot            = 256
0.00.273.797 I llm_load_print_meta: n_swa            = 0
0.00.273.797 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.797 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.798 I llm_load_print_meta: n_gqa            = 8
0.00.273.800 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.800 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.801 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.802 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.803 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.803 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.803 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.804 I llm_load_print_meta: n_ff             = 16384
0.00.273.804 I llm_load_print_meta: n_expert         = 0
0.00.273.805 I llm_load_print_meta: n_expert_used    = 0
0.00.273.805 I llm_load_print_meta: causal attn      = 1
0.00.273.805 I llm_load_print_meta: pooling type     = 0
0.00.273.805 I llm_load_print_meta: rope type        = 2
0.00.273.805 I llm_load_print_meta: rope scaling     = linear
0.00.273.807 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.808 I llm_load_print_meta: freq_scale_train = 1
0.00.273.808 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.809 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.809 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.809 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.810 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.810 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.811 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.812 I llm_load_print_meta: model type       = 2B
0.00.273.812 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.273.813 I llm_load_print_meta: model params     = 2.51 B
0.00.273.814 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.273.814 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.814 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.814 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.815 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.816 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.816 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.817 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.817 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.817 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.818 I llm_load_print_meta: max token length = 93
0.00.334.093 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.334.100 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.334.101 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.334.102 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.334.102 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.334.103 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.339.209 I llama_new_context_with_model: n_seq_max     = 1
0.00.339.215 I llama_new_context_with_model: n_ctx         = 4096
0.00.339.216 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.339.216 I llama_new_context_with_model: n_batch       = 2048
0.00.339.217 I llama_new_context_with_model: n_ubatch      = 512
0.00.339.217 I llama_new_context_with_model: flash_attn    = 0
0.00.339.219 I llama_new_context_with_model: freq_base     = 10000.0
0.00.339.220 I llama_new_context_with_model: freq_scale    = 1
0.00.339.221 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.354.427 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.354.442 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.354.548 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.355.787 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.355.793 I llama_new_context_with_model: graph nodes  = 601
0.00.355.793 I llama_new_context_with_model: graph splits = 1
0.00.355.795 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.432.207 I main: llama threadpool init, n_threads = 4
0.00.432.222 I 
0.00.432.297 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.432.300 I 
0.00.432.352 I sampler seed: 4081709991
0.00.432.363 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.432.374 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.432.378 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.432.378 I 
 seconally.

I understand your concern, and I want to assure you that we are committed to addressing it.

However, before we can take any concrete

0.02.123.623 I llama_perf_sampler_print:    sampling time =       5.03 ms /    33 runs   (    0.15 ms per token,  6563.25 tokens per second)
0.02.123.626 I llama_perf_context_print:        load time =     431.42 ms
0.02.123.627 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.123.628 I llama_perf_context_print:        eval time =    1672.23 ms /    32 runs   (   52.26 ms per token,    19.14 tokens per second)
0.02.123.629 I llama_perf_context_print:       total time =    1691.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4240 (64ed2091)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40227.03 ms
main:    total time = 40227.03 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.553 I build: 4240 (64ed2091) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.751 I main: llama backend init
0.00.000.758 I main: load the model and apply lora adapter, if any
0.00.021.424 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.439 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.449 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.451 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.455 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.456 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.457 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.458 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.458 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.459 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.463 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.464 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.464 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.465 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.465 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.746 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.276 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.145 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.152 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.153 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.154 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.154 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.156 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.156 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.159 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.160 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.165 I llama_model_loader: - type  f32:   37 tensors
0.00.133.166 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.166 I llama_model_loader: - type q6_K:   19 tensors
0.00.211.472 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.262.620 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.263.284 I llm_load_vocab: special tokens cache size = 5
0.00.284.178 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.284.195 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.284.196 I llm_load_print_meta: arch             = gemma
0.00.284.197 I llm_load_print_meta: vocab type       = SPM
0.00.284.197 I llm_load_print_meta: n_vocab          = 256000
0.00.284.198 I llm_load_print_meta: n_merges         = 0
0.00.284.198 I llm_load_print_meta: vocab_only       = 0
0.00.284.199 I llm_load_print_meta: n_ctx_train      = 8192
0.00.284.199 I llm_load_print_meta: n_embd           = 2048
0.00.284.199 I llm_load_print_meta: n_layer          = 18
0.00.284.210 I llm_load_print_meta: n_head           = 8
0.00.284.212 I llm_load_print_meta: n_head_kv        = 1
0.00.284.212 I llm_load_print_meta: n_rot            = 256
0.00.284.212 I llm_load_print_meta: n_swa            = 0
0.00.284.213 I llm_load_print_meta: n_embd_head_k    = 256
0.00.284.213 I llm_load_print_meta: n_embd_head_v    = 256
0.00.284.214 I llm_load_print_meta: n_gqa            = 8
0.00.284.215 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.284.216 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.284.217 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.284.218 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.284.218 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.284.219 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.284.219 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.284.220 I llm_load_print_meta: n_ff             = 16384
0.00.284.220 I llm_load_print_meta: n_expert         = 0
0.00.284.221 I llm_load_print_meta: n_expert_used    = 0
0.00.284.221 I llm_load_print_meta: causal attn      = 1
0.00.284.221 I llm_load_print_meta: pooling type     = 0
0.00.284.222 I llm_load_print_meta: rope type        = 2
0.00.284.222 I llm_load_print_meta: rope scaling     = linear
0.00.284.223 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.284.224 I llm_load_print_meta: freq_scale_train = 1
0.00.284.224 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.284.224 I llm_load_print_meta: rope_finetuned   = unknown
0.00.284.224 I llm_load_print_meta: ssm_d_conv       = 0
0.00.284.225 I llm_load_print_meta: ssm_d_inner      = 0
0.00.284.225 I llm_load_print_meta: ssm_d_state      = 0
0.00.284.225 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.284.226 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.284.226 I llm_load_print_meta: model type       = 2B
0.00.284.227 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.284.228 I llm_load_print_meta: model params     = 2.51 B
0.00.284.228 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.284.229 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.284.230 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.284.230 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.284.231 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.284.231 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.284.231 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.284.232 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.284.232 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.284.233 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.284.234 I llm_load_print_meta: max token length = 93
0.00.340.917 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.346.207 I llama_new_context_with_model: n_seq_max     = 1
0.00.346.214 I llama_new_context_with_model: n_ctx         = 4096
0.00.346.215 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.346.215 I llama_new_context_with_model: n_batch       = 2048
0.00.346.216 I llama_new_context_with_model: n_ubatch      = 512
0.00.346.216 I llama_new_context_with_model: flash_attn    = 0
0.00.346.219 I llama_new_context_with_model: freq_base     = 10000.0
0.00.346.220 I llama_new_context_with_model: freq_scale    = 1
0.00.346.220 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.361.442 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.361.460 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.361.555 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.362.912 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.362.919 I llama_new_context_with_model: graph nodes  = 601
0.00.362.919 I llama_new_context_with_model: graph splits = 1
0.00.362.921 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.439.470 I main: llama threadpool init, n_threads = 4
0.00.439.487 I 
0.00.439.565 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.439.568 I 
0.00.439.611 I sampler seed: 2974307364
0.00.439.623 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.439.635 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.439.638 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.439.639 I 
 increasities:

I. The correct answer is B.

Explanation:
The correct answer is B. The explanation provided is consistent with the given premise.

0.02.076.400 I llama_perf_sampler_print:    sampling time =       5.06 ms /    33 runs   (    0.15 ms per token,  6520.45 tokens per second)
0.02.076.403 I llama_perf_context_print:        load time =     438.69 ms
0.02.076.406 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.076.408 I llama_perf_context_print:        eval time =    1617.18 ms /    32 runs   (   50.54 ms per token,    19.79 tokens per second)
0.02.076.409 I llama_perf_context_print:       total time =    1636.94 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.486s
user	10m25.202s
sys	0m6.908s
