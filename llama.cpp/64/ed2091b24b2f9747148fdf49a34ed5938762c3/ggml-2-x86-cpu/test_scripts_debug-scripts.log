+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.673 I build: 4240 (64ed2091) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.000.871 I main: load the model and apply lora adapter, if any
0.00.023.974 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.986 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.077 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.089 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.091 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.097 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.101 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.102 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.103 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.105 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.106 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.115 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.117 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.119 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.120 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.122 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.828 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.426 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.679 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.691 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.693 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.694 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.714 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.716 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.718 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.722 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.724 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.726 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.727 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.352.729 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.739 I llama_model_loader: - type  f32:   37 tensors
0.00.352.744 I llama_model_loader: - type q8_0:  127 tensors
0.00.626.626 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.758.827 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.759.870 I llm_load_vocab: special tokens cache size = 5
0.00.952.880 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.952.959 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.952.960 I llm_load_print_meta: arch             = gemma
0.00.952.960 I llm_load_print_meta: vocab type       = SPM
0.00.952.961 I llm_load_print_meta: n_vocab          = 256000
0.00.952.964 I llm_load_print_meta: n_merges         = 0
0.00.952.964 I llm_load_print_meta: vocab_only       = 0
0.00.952.965 I llm_load_print_meta: n_ctx_train      = 8192
0.00.952.965 I llm_load_print_meta: n_embd           = 2048
0.00.952.965 I llm_load_print_meta: n_layer          = 18
0.00.953.033 I llm_load_print_meta: n_head           = 8
0.00.953.040 I llm_load_print_meta: n_head_kv        = 1
0.00.953.041 I llm_load_print_meta: n_rot            = 256
0.00.953.041 I llm_load_print_meta: n_swa            = 0
0.00.953.042 I llm_load_print_meta: n_embd_head_k    = 256
0.00.953.042 I llm_load_print_meta: n_embd_head_v    = 256
0.00.953.047 I llm_load_print_meta: n_gqa            = 8
0.00.953.052 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.953.057 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.953.058 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.953.059 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.953.060 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.953.061 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.953.061 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.953.066 I llm_load_print_meta: n_ff             = 16384
0.00.953.066 I llm_load_print_meta: n_expert         = 0
0.00.953.066 I llm_load_print_meta: n_expert_used    = 0
0.00.953.067 I llm_load_print_meta: causal attn      = 1
0.00.953.067 I llm_load_print_meta: pooling type     = 0
0.00.953.067 I llm_load_print_meta: rope type        = 2
0.00.953.068 I llm_load_print_meta: rope scaling     = linear
0.00.953.069 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.953.070 I llm_load_print_meta: freq_scale_train = 1
0.00.953.070 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.953.071 I llm_load_print_meta: rope_finetuned   = unknown
0.00.953.071 I llm_load_print_meta: ssm_d_conv       = 0
0.00.953.071 I llm_load_print_meta: ssm_d_inner      = 0
0.00.953.072 I llm_load_print_meta: ssm_d_state      = 0
0.00.953.072 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.953.072 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.953.073 I llm_load_print_meta: model type       = 2B
0.00.953.074 I llm_load_print_meta: model ftype      = Q8_0
0.00.953.074 I llm_load_print_meta: model params     = 2.51 B
0.00.953.084 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.953.085 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.953.085 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.953.086 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.953.086 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.953.087 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.953.087 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.953.087 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.953.094 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.953.095 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.953.095 I llm_load_print_meta: max token length = 93
0.01.055.820 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.055.831 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.055.832 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.055.832 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.055.833 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.055.834 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.062.093 I llama_new_context_with_model: n_seq_max     = 1
0.01.062.104 I llama_new_context_with_model: n_ctx         = 4096
0.01.062.104 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.062.105 I llama_new_context_with_model: n_batch       = 2048
0.01.062.106 I llama_new_context_with_model: n_ubatch      = 512
0.01.062.106 I llama_new_context_with_model: flash_attn    = 0
0.01.062.110 I llama_new_context_with_model: freq_base     = 10000.0
0.01.062.111 I llama_new_context_with_model: freq_scale    = 1
0.01.062.112 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.077.600 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.077.645 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.077.782 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.080.381 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.080.385 I llama_new_context_with_model: graph nodes  = 601
0.01.080.385 I llama_new_context_with_model: graph splits = 1
0.01.080.409 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.692.797 I main: llama threadpool init, n_threads = 4
0.01.692.815 I 
0.01.692.942 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.692.946 I 
0.01.693.187 I sampler seed: 121220889
0.01.693.201 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.693.213 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.693.214 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.693.214 I 
 increadibly.

I am unable to answer your question as it contains inappropriate content. [end of text]


0.09.345.812 I llama_perf_sampler_print:    sampling time =      27.87 ms /    19 runs   (    1.47 ms per token,   681.83 tokens per second)
0.09.345.815 I llama_perf_context_print:        load time =    1691.83 ms
0.09.345.818 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.345.820 I llama_perf_context_print:        eval time =    7600.52 ms /    18 runs   (  422.25 ms per token,     2.37 tokens per second)
0.09.345.821 I llama_perf_context_print:       total time =    7653.02 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.661 I build: 4240 (64ed2091) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.000.872 I main: load the model and apply lora adapter, if any
0.00.023.521 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.624 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.640 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.644 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.652 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.654 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.655 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.657 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.659 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.660 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.667 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.672 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.673 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.674 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.676 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.237.591 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.341.061 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.364.417 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.364.426 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.364.428 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.364.429 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.364.431 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.364.432 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.364.434 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.364.438 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.364.439 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.364.441 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.364.442 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.364.444 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.364.453 I llama_model_loader: - type  f32:   37 tensors
0.00.364.456 I llama_model_loader: - type q8_0:  127 tensors
0.00.647.365 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.774.476 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.775.460 I llm_load_vocab: special tokens cache size = 5
0.00.976.847 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.976.926 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.976.927 I llm_load_print_meta: arch             = gemma
0.00.976.927 I llm_load_print_meta: vocab type       = SPM
0.00.976.928 I llm_load_print_meta: n_vocab          = 256000
0.00.976.931 I llm_load_print_meta: n_merges         = 0
0.00.976.931 I llm_load_print_meta: vocab_only       = 0
0.00.976.932 I llm_load_print_meta: n_ctx_train      = 8192
0.00.976.932 I llm_load_print_meta: n_embd           = 2048
0.00.976.933 I llm_load_print_meta: n_layer          = 18
0.00.976.997 I llm_load_print_meta: n_head           = 8
0.00.977.004 I llm_load_print_meta: n_head_kv        = 1
0.00.977.005 I llm_load_print_meta: n_rot            = 256
0.00.977.005 I llm_load_print_meta: n_swa            = 0
0.00.977.006 I llm_load_print_meta: n_embd_head_k    = 256
0.00.977.007 I llm_load_print_meta: n_embd_head_v    = 256
0.00.977.011 I llm_load_print_meta: n_gqa            = 8
0.00.977.016 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.977.021 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.977.022 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.977.028 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.977.029 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.977.029 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.977.029 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.977.034 I llm_load_print_meta: n_ff             = 16384
0.00.977.035 I llm_load_print_meta: n_expert         = 0
0.00.977.036 I llm_load_print_meta: n_expert_used    = 0
0.00.977.036 I llm_load_print_meta: causal attn      = 1
0.00.977.037 I llm_load_print_meta: pooling type     = 0
0.00.977.037 I llm_load_print_meta: rope type        = 2
0.00.977.038 I llm_load_print_meta: rope scaling     = linear
0.00.977.039 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.977.040 I llm_load_print_meta: freq_scale_train = 1
0.00.977.040 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.977.041 I llm_load_print_meta: rope_finetuned   = unknown
0.00.977.041 I llm_load_print_meta: ssm_d_conv       = 0
0.00.977.041 I llm_load_print_meta: ssm_d_inner      = 0
0.00.977.042 I llm_load_print_meta: ssm_d_state      = 0
0.00.977.045 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.977.046 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.977.047 I llm_load_print_meta: model type       = 2B
0.00.977.048 I llm_load_print_meta: model ftype      = Q8_0
0.00.977.049 I llm_load_print_meta: model params     = 2.51 B
0.00.977.058 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.977.058 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.977.059 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.977.072 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.977.073 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.977.074 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.977.075 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.977.075 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.977.082 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.977.083 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.977.084 I llm_load_print_meta: max token length = 93
0.01.073.597 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.079.647 I llama_new_context_with_model: n_seq_max     = 1
0.01.079.655 I llama_new_context_with_model: n_ctx         = 4096
0.01.079.656 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.079.656 I llama_new_context_with_model: n_batch       = 2048
0.01.079.657 I llama_new_context_with_model: n_ubatch      = 512
0.01.079.658 I llama_new_context_with_model: flash_attn    = 0
0.01.079.661 I llama_new_context_with_model: freq_base     = 10000.0
0.01.079.662 I llama_new_context_with_model: freq_scale    = 1
0.01.079.663 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.094.773 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.094.817 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.094.945 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.097.520 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.097.524 I llama_new_context_with_model: graph nodes  = 601
0.01.097.525 I llama_new_context_with_model: graph splits = 1
0.01.097.548 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.704.357 I main: llama threadpool init, n_threads = 4
0.01.704.371 I 
0.01.704.491 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.704.495 I 
0.01.704.738 I sampler seed: 2934266905
0.01.704.752 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.704.761 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.704.764 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.704.765 I 
 increasities in the media.

In the past, there was a tendency for media outlets to sensationalize these stories, often framing them as isolated incidents rather than

0.15.439.208 I llama_perf_sampler_print:    sampling time =      49.39 ms /    33 runs   (    1.50 ms per token,   668.10 tokens per second)
0.15.439.222 I llama_perf_context_print:        load time =    1703.39 ms
0.15.439.225 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.439.227 I llama_perf_context_print:        eval time =   13642.58 ms /    32 runs   (  426.33 ms per token,     2.35 tokens per second)
0.15.439.228 I llama_perf_context_print:       total time =   13734.86 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.660 I build: 4240 (64ed2091) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.861 I main: llama backend init
0.00.000.869 I main: load the model and apply lora adapter, if any
0.00.023.677 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.687 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.780 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.793 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.795 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.800 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.802 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.803 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.805 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.806 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.808 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.818 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.823 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.824 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.826 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.827 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.960 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.405 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.664 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.676 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.678 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.679 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.680 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.682 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.683 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.687 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.689 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.690 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.691 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.352.693 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.703 I llama_model_loader: - type  f32:   37 tensors
0.00.352.705 I llama_model_loader: - type q8_0:  127 tensors
0.00.632.240 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.761.326 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.762.334 I llm_load_vocab: special tokens cache size = 5
0.00.954.519 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.954.594 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.954.598 I llm_load_print_meta: arch             = gemma
0.00.954.599 I llm_load_print_meta: vocab type       = SPM
0.00.954.600 I llm_load_print_meta: n_vocab          = 256000
0.00.954.602 I llm_load_print_meta: n_merges         = 0
0.00.954.603 I llm_load_print_meta: vocab_only       = 0
0.00.954.603 I llm_load_print_meta: n_ctx_train      = 8192
0.00.954.604 I llm_load_print_meta: n_embd           = 2048
0.00.954.604 I llm_load_print_meta: n_layer          = 18
0.00.954.669 I llm_load_print_meta: n_head           = 8
0.00.954.679 I llm_load_print_meta: n_head_kv        = 1
0.00.954.680 I llm_load_print_meta: n_rot            = 256
0.00.954.681 I llm_load_print_meta: n_swa            = 0
0.00.954.681 I llm_load_print_meta: n_embd_head_k    = 256
0.00.954.681 I llm_load_print_meta: n_embd_head_v    = 256
0.00.954.686 I llm_load_print_meta: n_gqa            = 8
0.00.954.691 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.954.696 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.954.698 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.954.699 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.954.700 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.954.700 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.954.702 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.954.706 I llm_load_print_meta: n_ff             = 16384
0.00.954.707 I llm_load_print_meta: n_expert         = 0
0.00.954.708 I llm_load_print_meta: n_expert_used    = 0
0.00.954.709 I llm_load_print_meta: causal attn      = 1
0.00.954.709 I llm_load_print_meta: pooling type     = 0
0.00.954.709 I llm_load_print_meta: rope type        = 2
0.00.954.710 I llm_load_print_meta: rope scaling     = linear
0.00.954.712 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.954.713 I llm_load_print_meta: freq_scale_train = 1
0.00.954.713 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.954.714 I llm_load_print_meta: rope_finetuned   = unknown
0.00.954.715 I llm_load_print_meta: ssm_d_conv       = 0
0.00.954.715 I llm_load_print_meta: ssm_d_inner      = 0
0.00.954.716 I llm_load_print_meta: ssm_d_state      = 0
0.00.954.716 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.954.716 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.954.717 I llm_load_print_meta: model type       = 2B
0.00.954.718 I llm_load_print_meta: model ftype      = Q8_0
0.00.954.719 I llm_load_print_meta: model params     = 2.51 B
0.00.954.729 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.954.729 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.954.730 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.954.731 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.954.732 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.954.732 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.954.732 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.954.734 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.954.741 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.954.742 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.954.743 I llm_load_print_meta: max token length = 93
0.01.031.896 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.031.904 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.031.905 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.031.905 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.031.906 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.031.907 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.037.870 I llama_new_context_with_model: n_seq_max     = 1
0.01.037.878 I llama_new_context_with_model: n_ctx         = 4096
0.01.037.879 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.037.879 I llama_new_context_with_model: n_batch       = 2048
0.01.037.880 I llama_new_context_with_model: n_ubatch      = 512
0.01.037.880 I llama_new_context_with_model: flash_attn    = 0
0.01.037.884 I llama_new_context_with_model: freq_base     = 10000.0
0.01.037.885 I llama_new_context_with_model: freq_scale    = 1
0.01.037.886 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.053.029 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.053.073 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.053.206 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.055.774 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.055.778 I llama_new_context_with_model: graph nodes  = 601
0.01.055.778 I llama_new_context_with_model: graph splits = 1
0.01.055.803 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.670.442 I main: llama threadpool init, n_threads = 4
0.01.670.460 I 
0.01.670.590 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.670.594 I 
0.01.670.832 I sampler seed: 1593689409
0.01.670.861 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.670.871 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.670.874 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.670.874 I 
 increasities with a vibrant, swirling, hypnotic quality. [end of text]


0.06.760.811 I llama_perf_sampler_print:    sampling time =      18.70 ms /    13 runs   (    1.44 ms per token,   695.11 tokens per second)
0.06.760.814 I llama_perf_context_print:        load time =    1669.47 ms
0.06.760.836 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.760.837 I llama_perf_context_print:        eval time =    5055.39 ms /    12 runs   (  421.28 ms per token,     2.37 tokens per second)
0.06.760.838 I llama_perf_context_print:       total time =    5090.38 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.659 I build: 4240 (64ed2091) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.860 I main: llama backend init
0.00.000.868 I main: load the model and apply lora adapter, if any
0.00.024.231 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.242 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.336 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.348 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.350 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.357 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.361 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.363 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.364 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.374 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.376 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.387 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.392 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.393 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.394 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.396 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.623 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.199 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.361 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.372 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.374 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.375 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.376 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.378 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.379 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.384 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.386 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.387 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.388 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.351.390 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.400 I llama_model_loader: - type  f32:   37 tensors
0.00.351.402 I llama_model_loader: - type q8_0:  127 tensors
0.00.632.911 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.762.728 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.763.833 I llm_load_vocab: special tokens cache size = 5
0.00.955.537 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.955.617 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.955.618 I llm_load_print_meta: arch             = gemma
0.00.955.619 I llm_load_print_meta: vocab type       = SPM
0.00.955.620 I llm_load_print_meta: n_vocab          = 256000
0.00.955.622 I llm_load_print_meta: n_merges         = 0
0.00.955.623 I llm_load_print_meta: vocab_only       = 0
0.00.955.623 I llm_load_print_meta: n_ctx_train      = 8192
0.00.955.623 I llm_load_print_meta: n_embd           = 2048
0.00.955.624 I llm_load_print_meta: n_layer          = 18
0.00.955.691 I llm_load_print_meta: n_head           = 8
0.00.955.698 I llm_load_print_meta: n_head_kv        = 1
0.00.955.699 I llm_load_print_meta: n_rot            = 256
0.00.955.699 I llm_load_print_meta: n_swa            = 0
0.00.955.700 I llm_load_print_meta: n_embd_head_k    = 256
0.00.955.700 I llm_load_print_meta: n_embd_head_v    = 256
0.00.955.704 I llm_load_print_meta: n_gqa            = 8
0.00.955.709 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.955.714 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.955.742 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.955.744 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.955.745 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.955.745 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.955.754 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.955.760 I llm_load_print_meta: n_ff             = 16384
0.00.955.761 I llm_load_print_meta: n_expert         = 0
0.00.955.762 I llm_load_print_meta: n_expert_used    = 0
0.00.955.763 I llm_load_print_meta: causal attn      = 1
0.00.955.763 I llm_load_print_meta: pooling type     = 0
0.00.955.767 I llm_load_print_meta: rope type        = 2
0.00.955.772 I llm_load_print_meta: rope scaling     = linear
0.00.955.774 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.955.783 I llm_load_print_meta: freq_scale_train = 1
0.00.955.783 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.955.784 I llm_load_print_meta: rope_finetuned   = unknown
0.00.955.790 I llm_load_print_meta: ssm_d_conv       = 0
0.00.955.795 I llm_load_print_meta: ssm_d_inner      = 0
0.00.955.796 I llm_load_print_meta: ssm_d_state      = 0
0.00.955.796 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.955.797 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.955.798 I llm_load_print_meta: model type       = 2B
0.00.955.799 I llm_load_print_meta: model ftype      = Q8_0
0.00.955.800 I llm_load_print_meta: model params     = 2.51 B
0.00.955.811 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.955.811 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.955.812 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.955.813 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.955.814 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.955.815 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.955.815 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.955.816 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.955.823 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.955.825 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.955.826 I llm_load_print_meta: max token length = 93
0.01.028.922 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.028.936 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.035.119 I llama_new_context_with_model: n_seq_max     = 1
0.01.035.127 I llama_new_context_with_model: n_ctx         = 4096
0.01.035.128 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.035.128 I llama_new_context_with_model: n_batch       = 2048
0.01.035.129 I llama_new_context_with_model: n_ubatch      = 512
0.01.035.129 I llama_new_context_with_model: flash_attn    = 0
0.01.035.132 I llama_new_context_with_model: freq_base     = 10000.0
0.01.035.133 I llama_new_context_with_model: freq_scale    = 1
0.01.035.134 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.050.004 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.050.046 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.050.174 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.052.810 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.052.814 I llama_new_context_with_model: graph nodes  = 601
0.01.052.815 I llama_new_context_with_model: graph splits = 1
0.01.052.839 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.660.643 I main: llama threadpool init, n_threads = 4
0.01.660.660 I 
0.01.660.782 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.660.786 I 
0.01.661.021 I sampler seed: 3849490085
0.01.661.034 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.661.043 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.661.047 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.661.047 I 
 increasively, leaving the original context behind. [end of text]


0.05.908.805 I llama_perf_sampler_print:    sampling time =      15.62 ms /    11 runs   (    1.42 ms per token,   704.45 tokens per second)
0.05.908.808 I llama_perf_context_print:        load time =    1659.67 ms
0.05.908.810 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.908.824 I llama_perf_context_print:        eval time =    4218.71 ms /    10 runs   (  421.87 ms per token,     2.37 tokens per second)
0.05.908.825 I llama_perf_context_print:       total time =    4248.17 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m47.526s
user	2m17.006s
sys	0m9.604s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4240 (64ed2091)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186508.31 ms
main:    total time = 186508.31 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.622 I build: 4240 (64ed2091) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.825 I main: llama backend init
0.00.000.832 I main: load the model and apply lora adapter, if any
0.00.023.985 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.996 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.098 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.111 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.113 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.122 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.127 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.128 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.129 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.130 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.132 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.143 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.145 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.147 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.148 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.149 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.357 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.471 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.770 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.784 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.786 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.787 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.788 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.790 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.791 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.796 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.797 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.799 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.800 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.352.802 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.813 I llama_model_loader: - type  f32:   37 tensors
0.00.352.815 I llama_model_loader: - type q4_K:  108 tensors
0.00.352.816 I llama_model_loader: - type q6_K:   19 tensors
0.00.641.273 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.770.552 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.771.542 I llm_load_vocab: special tokens cache size = 5
0.00.961.223 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.961.301 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.961.302 I llm_load_print_meta: arch             = gemma
0.00.961.302 I llm_load_print_meta: vocab type       = SPM
0.00.961.304 I llm_load_print_meta: n_vocab          = 256000
0.00.961.306 I llm_load_print_meta: n_merges         = 0
0.00.961.307 I llm_load_print_meta: vocab_only       = 0
0.00.961.307 I llm_load_print_meta: n_ctx_train      = 8192
0.00.961.307 I llm_load_print_meta: n_embd           = 2048
0.00.961.308 I llm_load_print_meta: n_layer          = 18
0.00.961.375 I llm_load_print_meta: n_head           = 8
0.00.961.383 I llm_load_print_meta: n_head_kv        = 1
0.00.961.384 I llm_load_print_meta: n_rot            = 256
0.00.961.384 I llm_load_print_meta: n_swa            = 0
0.00.961.384 I llm_load_print_meta: n_embd_head_k    = 256
0.00.961.385 I llm_load_print_meta: n_embd_head_v    = 256
0.00.961.389 I llm_load_print_meta: n_gqa            = 8
0.00.961.394 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.961.427 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.961.429 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.961.430 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.961.431 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.961.432 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.961.432 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.961.437 I llm_load_print_meta: n_ff             = 16384
0.00.961.438 I llm_load_print_meta: n_expert         = 0
0.00.961.439 I llm_load_print_meta: n_expert_used    = 0
0.00.961.439 I llm_load_print_meta: causal attn      = 1
0.00.961.440 I llm_load_print_meta: pooling type     = 0
0.00.961.440 I llm_load_print_meta: rope type        = 2
0.00.961.448 I llm_load_print_meta: rope scaling     = linear
0.00.961.451 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.961.452 I llm_load_print_meta: freq_scale_train = 1
0.00.961.452 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.961.453 I llm_load_print_meta: rope_finetuned   = unknown
0.00.961.453 I llm_load_print_meta: ssm_d_conv       = 0
0.00.961.454 I llm_load_print_meta: ssm_d_inner      = 0
0.00.961.455 I llm_load_print_meta: ssm_d_state      = 0
0.00.961.455 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.961.456 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.961.464 I llm_load_print_meta: model type       = 2B
0.00.961.466 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.961.467 I llm_load_print_meta: model params     = 2.51 B
0.00.961.478 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.961.478 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.961.479 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.961.484 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.961.485 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.961.485 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.961.485 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.961.486 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.961.492 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.961.493 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.961.493 I llm_load_print_meta: max token length = 93
0.01.024.450 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.024.463 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.024.464 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.024.465 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.024.465 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.024.466 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.030.767 I llama_new_context_with_model: n_seq_max     = 1
0.01.030.779 I llama_new_context_with_model: n_ctx         = 4096
0.01.030.779 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.030.780 I llama_new_context_with_model: n_batch       = 2048
0.01.030.780 I llama_new_context_with_model: n_ubatch      = 512
0.01.030.781 I llama_new_context_with_model: flash_attn    = 0
0.01.030.785 I llama_new_context_with_model: freq_base     = 10000.0
0.01.030.785 I llama_new_context_with_model: freq_scale    = 1
0.01.030.786 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.046.289 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.046.334 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.046.471 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.049.088 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.049.092 I llama_new_context_with_model: graph nodes  = 601
0.01.049.092 I llama_new_context_with_model: graph splits = 1
0.01.049.116 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.634.495 I main: llama threadpool init, n_threads = 4
0.01.634.513 I 
0.01.634.637 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.634.641 I 
0.01.634.890 I sampler seed: 3957830356
0.01.634.904 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.634.913 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.634.916 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.634.917 I 
 seconally.

I understand that the question is asking for a synonym for "secondo", but I am unable to provide a synonym as I do not have

0.12.886.920 I llama_perf_sampler_print:    sampling time =      49.34 ms /    33 runs   (    1.50 ms per token,   668.81 tokens per second)
0.12.886.937 I llama_perf_context_print:        load time =    1633.57 ms
0.12.886.939 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.886.941 I llama_perf_context_print:        eval time =   11161.95 ms /    32 runs   (  348.81 ms per token,     2.87 tokens per second)
0.12.886.942 I llama_perf_context_print:       total time =   11252.43 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4240 (64ed2091)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186462.61 ms
main:    total time = 186462.61 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.635 I build: 4240 (64ed2091) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.860 I main: llama backend init
0.00.000.868 I main: load the model and apply lora adapter, if any
0.00.023.446 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.548 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.563 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.565 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.572 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.576 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.577 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.579 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.580 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.581 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.593 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.594 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.596 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.597 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.598 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.127 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.209 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.449 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.459 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.461 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.462 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.463 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.465 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.466 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.471 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.472 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.482 I llama_model_loader: - type  f32:   37 tensors
0.00.350.484 I llama_model_loader: - type q4_K:  108 tensors
0.00.350.485 I llama_model_loader: - type q6_K:   19 tensors
0.00.643.145 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.771.620 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.772.586 I llm_load_vocab: special tokens cache size = 5
0.00.973.738 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.973.814 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.973.815 I llm_load_print_meta: arch             = gemma
0.00.973.815 I llm_load_print_meta: vocab type       = SPM
0.00.973.816 I llm_load_print_meta: n_vocab          = 256000
0.00.973.818 I llm_load_print_meta: n_merges         = 0
0.00.973.819 I llm_load_print_meta: vocab_only       = 0
0.00.973.819 I llm_load_print_meta: n_ctx_train      = 8192
0.00.973.820 I llm_load_print_meta: n_embd           = 2048
0.00.973.820 I llm_load_print_meta: n_layer          = 18
0.00.973.888 I llm_load_print_meta: n_head           = 8
0.00.973.895 I llm_load_print_meta: n_head_kv        = 1
0.00.973.895 I llm_load_print_meta: n_rot            = 256
0.00.973.896 I llm_load_print_meta: n_swa            = 0
0.00.973.896 I llm_load_print_meta: n_embd_head_k    = 256
0.00.973.897 I llm_load_print_meta: n_embd_head_v    = 256
0.00.973.901 I llm_load_print_meta: n_gqa            = 8
0.00.973.906 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.973.912 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.973.914 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.973.915 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.973.916 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.973.916 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.973.917 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.973.922 I llm_load_print_meta: n_ff             = 16384
0.00.973.922 I llm_load_print_meta: n_expert         = 0
0.00.973.923 I llm_load_print_meta: n_expert_used    = 0
0.00.973.923 I llm_load_print_meta: causal attn      = 1
0.00.973.923 I llm_load_print_meta: pooling type     = 0
0.00.973.923 I llm_load_print_meta: rope type        = 2
0.00.973.924 I llm_load_print_meta: rope scaling     = linear
0.00.973.925 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.973.925 I llm_load_print_meta: freq_scale_train = 1
0.00.973.926 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.973.926 I llm_load_print_meta: rope_finetuned   = unknown
0.00.973.926 I llm_load_print_meta: ssm_d_conv       = 0
0.00.973.927 I llm_load_print_meta: ssm_d_inner      = 0
0.00.973.927 I llm_load_print_meta: ssm_d_state      = 0
0.00.973.927 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.973.928 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.973.928 I llm_load_print_meta: model type       = 2B
0.00.973.929 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.973.930 I llm_load_print_meta: model params     = 2.51 B
0.00.973.940 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.973.940 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.973.941 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.973.962 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.973.963 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.973.964 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.973.965 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.973.965 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.973.972 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.973.973 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.973.974 I llm_load_print_meta: max token length = 93
0.01.032.971 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.038.853 I llama_new_context_with_model: n_seq_max     = 1
0.01.038.861 I llama_new_context_with_model: n_ctx         = 4096
0.01.038.861 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.038.862 I llama_new_context_with_model: n_batch       = 2048
0.01.038.862 I llama_new_context_with_model: n_ubatch      = 512
0.01.038.863 I llama_new_context_with_model: flash_attn    = 0
0.01.038.866 I llama_new_context_with_model: freq_base     = 10000.0
0.01.038.866 I llama_new_context_with_model: freq_scale    = 1
0.01.038.867 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.053.864 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.053.906 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.054.031 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.056.590 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.056.595 I llama_new_context_with_model: graph nodes  = 601
0.01.056.595 I llama_new_context_with_model: graph splits = 1
0.01.056.618 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.645.165 I main: llama threadpool init, n_threads = 4
0.01.645.182 I 
0.01.645.327 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.645.331 I 
0.01.645.566 I sampler seed: 1871272541
0.01.645.579 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.645.588 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.645.592 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.645.592 I 
 encompate,

I am unable to complete the request as I lack the necessary information and context to fulfill it. Please provide me with the necessary details so I

0.12.926.371 I llama_perf_sampler_print:    sampling time =      49.33 ms /    33 runs   (    1.49 ms per token,   668.91 tokens per second)
0.12.926.374 I llama_perf_context_print:        load time =    1644.20 ms
0.12.926.376 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.926.377 I llama_perf_context_print:        eval time =   11192.12 ms /    32 runs   (  349.75 ms per token,     2.86 tokens per second)
0.12.926.378 I llama_perf_context_print:       total time =   11281.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m41.678s
user	46m48.021s
sys	0m6.309s
