+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.705 I build: 3785 (64c6af31) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.909 I main: llama backend init
0.00.002.844 I main: load the model and apply lora adapter, if any
0.00.025.319 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.519 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.615 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.627 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.628 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.633 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.634 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.635 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.635 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.637 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.638 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.645 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.646 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.647 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.648 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.649 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.183 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.979 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.088 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.097 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.098 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.099 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.100 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.102 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.102 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.105 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.106 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.107 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.108 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.110 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.119 I llama_model_loader: - type  f32:   37 tensors
0.00.197.123 I llama_model_loader: - type q8_0:  127 tensors
0.00.489.730 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.490.805 I llm_load_vocab: special tokens cache size = 5
0.00.548.881 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.548.940 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.548.942 I llm_load_print_meta: arch             = gemma
0.00.548.942 I llm_load_print_meta: vocab type       = SPM
0.00.548.943 I llm_load_print_meta: n_vocab          = 256000
0.00.548.946 I llm_load_print_meta: n_merges         = 0
0.00.548.946 I llm_load_print_meta: vocab_only       = 0
0.00.548.947 I llm_load_print_meta: n_ctx_train      = 8192
0.00.548.948 I llm_load_print_meta: n_embd           = 2048
0.00.548.949 I llm_load_print_meta: n_layer          = 18
0.00.548.982 I llm_load_print_meta: n_head           = 8
0.00.548.992 I llm_load_print_meta: n_head_kv        = 1
0.00.548.993 I llm_load_print_meta: n_rot            = 256
0.00.548.994 I llm_load_print_meta: n_swa            = 0
0.00.548.994 I llm_load_print_meta: n_embd_head_k    = 256
0.00.548.994 I llm_load_print_meta: n_embd_head_v    = 256
0.00.548.999 I llm_load_print_meta: n_gqa            = 8
0.00.549.004 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.549.009 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.549.009 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.549.011 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.549.011 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.549.012 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.549.012 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.549.018 I llm_load_print_meta: n_ff             = 16384
0.00.549.018 I llm_load_print_meta: n_expert         = 0
0.00.549.019 I llm_load_print_meta: n_expert_used    = 0
0.00.549.019 I llm_load_print_meta: causal attn      = 1
0.00.549.022 I llm_load_print_meta: pooling type     = 0
0.00.549.022 I llm_load_print_meta: rope type        = 2
0.00.549.023 I llm_load_print_meta: rope scaling     = linear
0.00.549.024 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.549.025 I llm_load_print_meta: freq_scale_train = 1
0.00.549.025 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.549.026 I llm_load_print_meta: rope_finetuned   = unknown
0.00.549.026 I llm_load_print_meta: ssm_d_conv       = 0
0.00.549.026 I llm_load_print_meta: ssm_d_inner      = 0
0.00.549.026 I llm_load_print_meta: ssm_d_state      = 0
0.00.549.027 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.549.027 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.549.028 I llm_load_print_meta: model type       = 2B
0.00.549.029 I llm_load_print_meta: model ftype      = Q8_0
0.00.549.038 I llm_load_print_meta: model params     = 2.51 B
0.00.549.039 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.549.040 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.549.041 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.549.042 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.549.042 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.549.042 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.549.043 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.549.044 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.549.044 I llm_load_print_meta: max token length = 93
0.00.549.214 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.647.723 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.647.735 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.647.736 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.647.737 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.647.738 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.647.738 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.653.487 I llama_new_context_with_model: n_ctx      = 8192
0.00.653.496 I llama_new_context_with_model: n_batch    = 2048
0.00.653.496 I llama_new_context_with_model: n_ubatch   = 512
0.00.653.497 I llama_new_context_with_model: flash_attn = 0
0.00.653.500 I llama_new_context_with_model: freq_base  = 10000.0
0.00.653.501 I llama_new_context_with_model: freq_scale = 1
0.00.684.656 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.684.711 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.684.827 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.686.250 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.686.256 I llama_new_context_with_model: graph nodes  = 601
0.00.686.257 I llama_new_context_with_model: graph splits = 1
0.00.686.274 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.298.695 I main: llama threadpool init, n_threads = 4
0.01.298.709 I 
0.01.298.801 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.298.804 I 
0.01.298.966 I sampler seed: 585015108
0.01.298.978 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.298.983 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.298.983 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities!

I cannot answer this question as it contains sexually suggestive content. [end of text]


0.08.511.229 I llama_perf_sampler_print:    sampling time =      26.18 ms /    18 runs   (    1.45 ms per token,   687.52 tokens per second)
0.08.511.233 I llama_perf_context_print:        load time =    1295.75 ms
0.08.511.235 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.511.237 I llama_perf_context_print:        eval time =    7167.31 ms /    17 runs   (  421.61 ms per token,     2.37 tokens per second)
0.08.511.238 I llama_perf_context_print:       total time =    7212.55 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.744 I build: 3785 (64c6af31) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.980 I main: llama backend init
0.00.002.969 I main: load the model and apply lora adapter, if any
0.00.027.252 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.027.356 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.373 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.377 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.383 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.384 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.385 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.385 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.386 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.387 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.398 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.399 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.400 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.401 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.027.402 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.099.633 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.189.249 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.201.323 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.201.331 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.201.332 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.201.333 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.201.334 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.201.335 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.201.336 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.201.338 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.201.339 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.201.340 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.201.341 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.201.342 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.201.351 I llama_model_loader: - type  f32:   37 tensors
0.00.201.355 I llama_model_loader: - type q8_0:  127 tensors
0.00.510.585 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.511.732 I llm_load_vocab: special tokens cache size = 5
0.00.570.287 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.570.349 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.570.353 I llm_load_print_meta: arch             = gemma
0.00.570.353 I llm_load_print_meta: vocab type       = SPM
0.00.570.354 I llm_load_print_meta: n_vocab          = 256000
0.00.570.357 I llm_load_print_meta: n_merges         = 0
0.00.570.357 I llm_load_print_meta: vocab_only       = 0
0.00.570.358 I llm_load_print_meta: n_ctx_train      = 8192
0.00.570.358 I llm_load_print_meta: n_embd           = 2048
0.00.570.359 I llm_load_print_meta: n_layer          = 18
0.00.570.396 I llm_load_print_meta: n_head           = 8
0.00.570.405 I llm_load_print_meta: n_head_kv        = 1
0.00.570.407 I llm_load_print_meta: n_rot            = 256
0.00.570.407 I llm_load_print_meta: n_swa            = 0
0.00.570.407 I llm_load_print_meta: n_embd_head_k    = 256
0.00.570.407 I llm_load_print_meta: n_embd_head_v    = 256
0.00.570.412 I llm_load_print_meta: n_gqa            = 8
0.00.570.416 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.570.421 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.570.425 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.570.426 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.570.427 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.570.427 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.570.427 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.570.432 I llm_load_print_meta: n_ff             = 16384
0.00.570.433 I llm_load_print_meta: n_expert         = 0
0.00.570.433 I llm_load_print_meta: n_expert_used    = 0
0.00.570.433 I llm_load_print_meta: causal attn      = 1
0.00.570.434 I llm_load_print_meta: pooling type     = 0
0.00.570.434 I llm_load_print_meta: rope type        = 2
0.00.570.434 I llm_load_print_meta: rope scaling     = linear
0.00.570.436 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.570.437 I llm_load_print_meta: freq_scale_train = 1
0.00.570.437 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.570.438 I llm_load_print_meta: rope_finetuned   = unknown
0.00.570.439 I llm_load_print_meta: ssm_d_conv       = 0
0.00.570.439 I llm_load_print_meta: ssm_d_inner      = 0
0.00.570.439 I llm_load_print_meta: ssm_d_state      = 0
0.00.570.440 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.570.441 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.570.441 I llm_load_print_meta: model type       = 2B
0.00.570.443 I llm_load_print_meta: model ftype      = Q8_0
0.00.570.444 I llm_load_print_meta: model params     = 2.51 B
0.00.570.445 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.570.446 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.570.462 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.570.463 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.570.464 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.570.464 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.570.467 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.570.468 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.570.468 I llm_load_print_meta: max token length = 93
0.00.570.650 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.665.378 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.671.263 I llama_new_context_with_model: n_ctx      = 8192
0.00.671.274 I llama_new_context_with_model: n_batch    = 2048
0.00.671.274 I llama_new_context_with_model: n_ubatch   = 512
0.00.671.275 I llama_new_context_with_model: flash_attn = 0
0.00.671.279 I llama_new_context_with_model: freq_base  = 10000.0
0.00.671.280 I llama_new_context_with_model: freq_scale = 1
0.00.703.568 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.703.615 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.703.735 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.705.122 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.705.129 I llama_new_context_with_model: graph nodes  = 601
0.00.705.129 I llama_new_context_with_model: graph splits = 1
0.00.705.146 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.316.636 I main: llama threadpool init, n_threads = 4
0.01.316.649 I 
0.01.316.745 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.316.748 I 
0.01.316.916 I sampler seed: 1875193604
0.01.316.926 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.316.932 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.316.933 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities.

I cannot answer this question as it contains sexually suggestive content that is inappropriate for me to respond to. [end of text]


0.11.860.950 I llama_perf_sampler_print:    sampling time =      38.48 ms /    26 runs   (    1.48 ms per token,   675.59 tokens per second)
0.11.860.953 I llama_perf_context_print:        load time =    1313.56 ms
0.11.860.954 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.860.956 I llama_perf_context_print:        eval time =   10479.53 ms /    25 runs   (  419.18 ms per token,     2.39 tokens per second)
0.11.860.956 I llama_perf_context_print:       total time =   10544.32 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.662 I build: 3785 (64c6af31) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.863 I main: llama backend init
0.00.002.792 I main: load the model and apply lora adapter, if any
0.00.025.600 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.803 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.898 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.912 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.914 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.919 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.921 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.922 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.931 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.933 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.934 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.943 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.952 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.954 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.955 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.956 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.420 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.752 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.948 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.956 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.957 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.958 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.959 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.960 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.961 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.964 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.965 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.966 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.967 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.197.968 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.977 I llama_model_loader: - type  f32:   37 tensors
0.00.197.981 I llama_model_loader: - type q8_0:  127 tensors
0.00.498.490 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.544 I llm_load_vocab: special tokens cache size = 5
0.00.557.883 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.557.945 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.557.946 I llm_load_print_meta: arch             = gemma
0.00.557.947 I llm_load_print_meta: vocab type       = SPM
0.00.557.947 I llm_load_print_meta: n_vocab          = 256000
0.00.557.950 I llm_load_print_meta: n_merges         = 0
0.00.557.950 I llm_load_print_meta: vocab_only       = 0
0.00.557.951 I llm_load_print_meta: n_ctx_train      = 8192
0.00.557.951 I llm_load_print_meta: n_embd           = 2048
0.00.557.952 I llm_load_print_meta: n_layer          = 18
0.00.557.985 I llm_load_print_meta: n_head           = 8
0.00.557.991 I llm_load_print_meta: n_head_kv        = 1
0.00.557.992 I llm_load_print_meta: n_rot            = 256
0.00.557.992 I llm_load_print_meta: n_swa            = 0
0.00.557.993 I llm_load_print_meta: n_embd_head_k    = 256
0.00.557.993 I llm_load_print_meta: n_embd_head_v    = 256
0.00.557.997 I llm_load_print_meta: n_gqa            = 8
0.00.558.002 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.558.006 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.558.007 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.558.009 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.558.009 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.558.010 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.558.010 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.558.015 I llm_load_print_meta: n_ff             = 16384
0.00.558.016 I llm_load_print_meta: n_expert         = 0
0.00.558.016 I llm_load_print_meta: n_expert_used    = 0
0.00.558.017 I llm_load_print_meta: causal attn      = 1
0.00.558.017 I llm_load_print_meta: pooling type     = 0
0.00.558.017 I llm_load_print_meta: rope type        = 2
0.00.558.018 I llm_load_print_meta: rope scaling     = linear
0.00.558.019 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.558.019 I llm_load_print_meta: freq_scale_train = 1
0.00.558.020 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.558.020 I llm_load_print_meta: rope_finetuned   = unknown
0.00.558.021 I llm_load_print_meta: ssm_d_conv       = 0
0.00.558.021 I llm_load_print_meta: ssm_d_inner      = 0
0.00.558.021 I llm_load_print_meta: ssm_d_state      = 0
0.00.558.021 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.558.022 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.558.023 I llm_load_print_meta: model type       = 2B
0.00.558.024 I llm_load_print_meta: model ftype      = Q8_0
0.00.558.024 I llm_load_print_meta: model params     = 2.51 B
0.00.558.025 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.558.026 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.558.026 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.558.027 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.558.027 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.558.028 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.558.028 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.558.029 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.558.029 I llm_load_print_meta: max token length = 93
0.00.558.203 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.635.198 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.635.208 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.635.209 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.635.210 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.635.210 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.635.211 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.640.920 I llama_new_context_with_model: n_ctx      = 8192
0.00.640.928 I llama_new_context_with_model: n_batch    = 2048
0.00.640.928 I llama_new_context_with_model: n_ubatch   = 512
0.00.640.929 I llama_new_context_with_model: flash_attn = 0
0.00.640.934 I llama_new_context_with_model: freq_base  = 10000.0
0.00.640.935 I llama_new_context_with_model: freq_scale = 1
0.00.672.558 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.672.604 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.672.722 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.674.179 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.674.186 I llama_new_context_with_model: graph nodes  = 601
0.00.674.187 I llama_new_context_with_model: graph splits = 1
0.00.674.202 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.330.404 I main: llama threadpool init, n_threads = 4
0.01.330.418 I 
0.01.330.516 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.330.520 I 
0.01.330.684 I sampler seed: 1386433412
0.01.330.695 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.330.699 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.330.700 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably.

I am unable to answer this question as it contains potentially offensive and inappropriate language. [end of text]


0.10.308.209 I llama_perf_sampler_print:    sampling time =      32.40 ms /    22 runs   (    1.47 ms per token,   679.03 tokens per second)
0.10.308.213 I llama_perf_context_print:        load time =    1327.53 ms
0.10.308.214 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.308.215 I llama_perf_context_print:        eval time =    8922.77 ms /    21 runs   (  424.89 ms per token,     2.35 tokens per second)
0.10.308.216 I llama_perf_context_print:       total time =    8977.82 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.664 I build: 3785 (64c6af31) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.868 I main: llama backend init
0.00.002.833 I main: load the model and apply lora adapter, if any
0.00.025.060 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.261 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.355 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.367 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.369 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.373 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.377 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.378 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.378 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.379 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.380 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.388 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.390 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.391 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.392 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.393 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.065 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.491 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.658 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.667 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.668 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.669 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.670 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.671 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.672 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.675 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.676 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.677 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.678 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.198.679 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.688 I llama_model_loader: - type  f32:   37 tensors
0.00.198.693 I llama_model_loader: - type q8_0:  127 tensors
0.00.497.885 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.944 I llm_load_vocab: special tokens cache size = 5
0.00.557.115 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.557.180 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.557.181 I llm_load_print_meta: arch             = gemma
0.00.557.181 I llm_load_print_meta: vocab type       = SPM
0.00.557.182 I llm_load_print_meta: n_vocab          = 256000
0.00.557.184 I llm_load_print_meta: n_merges         = 0
0.00.557.185 I llm_load_print_meta: vocab_only       = 0
0.00.557.185 I llm_load_print_meta: n_ctx_train      = 8192
0.00.557.185 I llm_load_print_meta: n_embd           = 2048
0.00.557.186 I llm_load_print_meta: n_layer          = 18
0.00.557.220 I llm_load_print_meta: n_head           = 8
0.00.557.227 I llm_load_print_meta: n_head_kv        = 1
0.00.557.228 I llm_load_print_meta: n_rot            = 256
0.00.557.228 I llm_load_print_meta: n_swa            = 0
0.00.557.228 I llm_load_print_meta: n_embd_head_k    = 256
0.00.557.229 I llm_load_print_meta: n_embd_head_v    = 256
0.00.557.233 I llm_load_print_meta: n_gqa            = 8
0.00.557.237 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.557.242 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.557.243 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.557.245 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.557.245 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.557.246 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.557.246 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.557.251 I llm_load_print_meta: n_ff             = 16384
0.00.557.253 I llm_load_print_meta: n_expert         = 0
0.00.557.253 I llm_load_print_meta: n_expert_used    = 0
0.00.557.254 I llm_load_print_meta: causal attn      = 1
0.00.557.254 I llm_load_print_meta: pooling type     = 0
0.00.557.254 I llm_load_print_meta: rope type        = 2
0.00.557.255 I llm_load_print_meta: rope scaling     = linear
0.00.557.256 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.557.257 I llm_load_print_meta: freq_scale_train = 1
0.00.557.257 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.557.257 I llm_load_print_meta: rope_finetuned   = unknown
0.00.557.258 I llm_load_print_meta: ssm_d_conv       = 0
0.00.557.258 I llm_load_print_meta: ssm_d_inner      = 0
0.00.557.258 I llm_load_print_meta: ssm_d_state      = 0
0.00.557.258 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.557.259 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.557.260 I llm_load_print_meta: model type       = 2B
0.00.557.261 I llm_load_print_meta: model ftype      = Q8_0
0.00.557.262 I llm_load_print_meta: model params     = 2.51 B
0.00.557.263 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.557.263 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.557.264 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.557.264 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.557.264 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.557.265 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.557.265 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.557.266 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.557.266 I llm_load_print_meta: max token length = 93
0.00.557.454 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.628.337 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.628.349 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.633.901 I llama_new_context_with_model: n_ctx      = 8192
0.00.633.908 I llama_new_context_with_model: n_batch    = 2048
0.00.633.909 I llama_new_context_with_model: n_ubatch   = 512
0.00.633.909 I llama_new_context_with_model: flash_attn = 0
0.00.633.913 I llama_new_context_with_model: freq_base  = 10000.0
0.00.633.913 I llama_new_context_with_model: freq_scale = 1
0.00.664.698 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.664.744 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.664.860 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.666.240 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.666.246 I llama_new_context_with_model: graph nodes  = 601
0.00.666.246 I llama_new_context_with_model: graph splits = 1
0.00.666.261 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.289.635 I main: llama threadpool init, n_threads = 4
0.01.289.647 I 
0.01.289.739 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.289.739 I 
0.01.289.896 I sampler seed: 550712255
0.01.289.908 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.289.912 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.289.913 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically.

I am a language model, trained by Google. I am here to assist you with your tasks and provide information based on my knowledge. How

0.14.860.434 I llama_perf_sampler_print:    sampling time =      49.20 ms /    33 runs   (    1.49 ms per token,   670.80 tokens per second)
0.14.860.436 I llama_perf_context_print:        load time =    1286.71 ms
0.14.860.438 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.860.439 I llama_perf_context_print:        eval time =   13487.68 ms /    32 runs   (  421.49 ms per token,     2.37 tokens per second)
0.14.860.440 I llama_perf_context_print:       total time =   13570.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m55.645s
user	2m53.874s
sys	0m9.756s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3785 (64c6af31)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198128.86 ms
main:    total time = 198128.86 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.629 I build: 3785 (64c6af31) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.002.777 I main: load the model and apply lora adapter, if any
0.00.024.911 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.106 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.195 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.207 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.208 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.213 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.214 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.215 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.216 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.217 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.217 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.223 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.225 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.226 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.227 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.227 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.180 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.491 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.676 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.685 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.686 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.687 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.688 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.689 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.690 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.693 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.708 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.711 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.712 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.714 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.723 I llama_model_loader: - type  f32:   37 tensors
0.00.196.727 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.728 I llama_model_loader: - type q6_K:   19 tensors
0.00.483.718 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.484.713 I llm_load_vocab: special tokens cache size = 5
0.00.542.732 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.542.795 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.542.796 I llm_load_print_meta: arch             = gemma
0.00.542.797 I llm_load_print_meta: vocab type       = SPM
0.00.542.798 I llm_load_print_meta: n_vocab          = 256000
0.00.542.800 I llm_load_print_meta: n_merges         = 0
0.00.542.801 I llm_load_print_meta: vocab_only       = 0
0.00.542.801 I llm_load_print_meta: n_ctx_train      = 8192
0.00.542.801 I llm_load_print_meta: n_embd           = 2048
0.00.542.802 I llm_load_print_meta: n_layer          = 18
0.00.542.838 I llm_load_print_meta: n_head           = 8
0.00.542.845 I llm_load_print_meta: n_head_kv        = 1
0.00.542.846 I llm_load_print_meta: n_rot            = 256
0.00.542.846 I llm_load_print_meta: n_swa            = 0
0.00.542.846 I llm_load_print_meta: n_embd_head_k    = 256
0.00.542.847 I llm_load_print_meta: n_embd_head_v    = 256
0.00.542.851 I llm_load_print_meta: n_gqa            = 8
0.00.542.856 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.542.861 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.542.862 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.542.864 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.542.864 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.542.864 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.542.865 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.542.870 I llm_load_print_meta: n_ff             = 16384
0.00.542.870 I llm_load_print_meta: n_expert         = 0
0.00.542.870 I llm_load_print_meta: n_expert_used    = 0
0.00.542.871 I llm_load_print_meta: causal attn      = 1
0.00.542.871 I llm_load_print_meta: pooling type     = 0
0.00.542.872 I llm_load_print_meta: rope type        = 2
0.00.542.872 I llm_load_print_meta: rope scaling     = linear
0.00.542.874 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.542.874 I llm_load_print_meta: freq_scale_train = 1
0.00.542.874 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.542.875 I llm_load_print_meta: rope_finetuned   = unknown
0.00.542.875 I llm_load_print_meta: ssm_d_conv       = 0
0.00.542.875 I llm_load_print_meta: ssm_d_inner      = 0
0.00.542.876 I llm_load_print_meta: ssm_d_state      = 0
0.00.542.876 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.542.876 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.542.877 I llm_load_print_meta: model type       = 2B
0.00.542.878 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.542.879 I llm_load_print_meta: model params     = 2.51 B
0.00.542.879 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.542.880 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.542.880 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.542.881 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.542.881 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.542.881 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.542.882 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.542.882 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.542.883 I llm_load_print_meta: max token length = 93
0.00.543.063 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.601.400 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.601.412 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.601.413 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.601.413 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.601.414 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.601.415 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.606.939 I llama_new_context_with_model: n_ctx      = 8192
0.00.606.947 I llama_new_context_with_model: n_batch    = 2048
0.00.606.947 I llama_new_context_with_model: n_ubatch   = 512
0.00.606.948 I llama_new_context_with_model: flash_attn = 0
0.00.606.950 I llama_new_context_with_model: freq_base  = 10000.0
0.00.606.951 I llama_new_context_with_model: freq_scale = 1
0.00.637.453 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.637.495 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.637.607 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.638.976 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.638.984 I llama_new_context_with_model: graph nodes  = 601
0.00.638.984 I llama_new_context_with_model: graph splits = 1
0.00.638.999 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.216.958 I main: llama threadpool init, n_threads = 4
0.01.216.971 I 
0.01.217.063 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.217.067 I 
0.01.217.223 I sampler seed: 552887701
0.01.217.234 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.217.238 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.217.239 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 squaRED by the sun.

This riddle is a play on words. It's a combination of two words that are similar in sound but have different meanings

0.12.187.259 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   671.07 tokens per second)
0.12.187.262 I llama_perf_context_print:        load time =    1214.10 ms
0.12.187.263 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.187.264 I llama_perf_context_print:        eval time =   10888.44 ms /    32 runs   (  340.26 ms per token,     2.94 tokens per second)
0.12.187.265 I llama_perf_context_print:       total time =   10970.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3785 (64c6af31)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198188.66 ms
main:    total time = 198188.66 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.624 I build: 3785 (64c6af31) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.819 I main: llama backend init
0.00.002.773 I main: load the model and apply lora adapter, if any
0.00.024.821 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.923 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.939 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.943 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.949 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.950 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.951 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.952 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.952 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.953 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.961 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.962 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.964 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.965 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.965 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.211 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.791 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.256 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.267 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.268 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.269 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.270 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.271 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.272 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.276 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.277 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.285 I llama_model_loader: - type  f32:   37 tensors
0.00.197.289 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.290 I llama_model_loader: - type q6_K:   19 tensors
0.00.505.099 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.167 I llm_load_vocab: special tokens cache size = 5
0.00.564.470 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.564.532 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.564.533 I llm_load_print_meta: arch             = gemma
0.00.564.534 I llm_load_print_meta: vocab type       = SPM
0.00.564.535 I llm_load_print_meta: n_vocab          = 256000
0.00.564.537 I llm_load_print_meta: n_merges         = 0
0.00.564.537 I llm_load_print_meta: vocab_only       = 0
0.00.564.538 I llm_load_print_meta: n_ctx_train      = 8192
0.00.564.538 I llm_load_print_meta: n_embd           = 2048
0.00.564.538 I llm_load_print_meta: n_layer          = 18
0.00.564.571 I llm_load_print_meta: n_head           = 8
0.00.564.577 I llm_load_print_meta: n_head_kv        = 1
0.00.564.578 I llm_load_print_meta: n_rot            = 256
0.00.564.578 I llm_load_print_meta: n_swa            = 0
0.00.564.579 I llm_load_print_meta: n_embd_head_k    = 256
0.00.564.579 I llm_load_print_meta: n_embd_head_v    = 256
0.00.564.584 I llm_load_print_meta: n_gqa            = 8
0.00.564.588 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.564.593 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.564.594 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.564.595 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.564.596 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.564.596 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.564.596 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.564.601 I llm_load_print_meta: n_ff             = 16384
0.00.564.601 I llm_load_print_meta: n_expert         = 0
0.00.564.602 I llm_load_print_meta: n_expert_used    = 0
0.00.564.602 I llm_load_print_meta: causal attn      = 1
0.00.564.602 I llm_load_print_meta: pooling type     = 0
0.00.564.603 I llm_load_print_meta: rope type        = 2
0.00.564.603 I llm_load_print_meta: rope scaling     = linear
0.00.564.605 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.564.606 I llm_load_print_meta: freq_scale_train = 1
0.00.564.606 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.564.606 I llm_load_print_meta: rope_finetuned   = unknown
0.00.564.607 I llm_load_print_meta: ssm_d_conv       = 0
0.00.564.607 I llm_load_print_meta: ssm_d_inner      = 0
0.00.564.607 I llm_load_print_meta: ssm_d_state      = 0
0.00.564.607 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.564.608 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.564.609 I llm_load_print_meta: model type       = 2B
0.00.564.610 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.564.610 I llm_load_print_meta: model params     = 2.51 B
0.00.564.611 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.564.611 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.564.612 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.564.613 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.564.613 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.564.614 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.564.614 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.564.615 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.564.615 I llm_load_print_meta: max token length = 93
0.00.564.791 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.621.389 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.627.109 I llama_new_context_with_model: n_ctx      = 8192
0.00.627.117 I llama_new_context_with_model: n_batch    = 2048
0.00.627.118 I llama_new_context_with_model: n_ubatch   = 512
0.00.627.118 I llama_new_context_with_model: flash_attn = 0
0.00.627.123 I llama_new_context_with_model: freq_base  = 10000.0
0.00.627.124 I llama_new_context_with_model: freq_scale = 1
0.00.658.960 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.659.004 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.659.118 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.660.458 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.660.465 I llama_new_context_with_model: graph nodes  = 601
0.00.660.465 I llama_new_context_with_model: graph splits = 1
0.00.660.481 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.238.105 I main: llama threadpool init, n_threads = 4
0.01.238.120 I 
0.01.238.215 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.238.219 I 
0.01.238.377 I sampler seed: 1329363719
0.01.238.387 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.238.392 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.238.392 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 squaRED: A new take on the classic card game

**Objective:**

To be the first player to reach 5,000 points by accumulating

0.12.229.180 I llama_perf_sampler_print:    sampling time =      49.17 ms /    33 runs   (    1.49 ms per token,   671.17 tokens per second)
0.12.229.183 I llama_perf_context_print:        load time =    1235.25 ms
0.12.229.184 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.229.186 I llama_perf_context_print:        eval time =   10908.75 ms /    32 runs   (  340.90 ms per token,     2.93 tokens per second)
0.12.229.187 I llama_perf_context_print:       total time =   10991.08 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m3.651s
user	50m6.395s
sys	0m6.348s
