+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.163 I build: 4335 (644fd71b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.363 I main: llama backend init
0.00.000.370 I main: load the model and apply lora adapter, if any
0.00.020.755 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.766 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.778 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.789 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.790 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.794 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.796 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.797 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.798 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.798 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.799 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.804 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.805 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.805 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.806 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.807 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.434 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.483 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.563 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.570 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.571 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.572 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.572 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.573 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.574 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.577 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.577 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.578 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.579 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.580 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.584 I llama_model_loader: - type  f32:   37 tensors
0.00.132.586 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.195 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.638 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.173 I llm_load_vocab: special tokens cache size = 5
0.00.267.816 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.831 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.831 I llm_load_print_meta: arch             = gemma
0.00.267.832 I llm_load_print_meta: vocab type       = SPM
0.00.267.832 I llm_load_print_meta: n_vocab          = 256000
0.00.267.833 I llm_load_print_meta: n_merges         = 0
0.00.267.833 I llm_load_print_meta: vocab_only       = 0
0.00.267.833 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.834 I llm_load_print_meta: n_embd           = 2048
0.00.267.834 I llm_load_print_meta: n_layer          = 18
0.00.267.846 I llm_load_print_meta: n_head           = 8
0.00.267.847 I llm_load_print_meta: n_head_kv        = 1
0.00.267.847 I llm_load_print_meta: n_rot            = 256
0.00.267.847 I llm_load_print_meta: n_swa            = 0
0.00.267.847 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.848 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.848 I llm_load_print_meta: n_gqa            = 8
0.00.267.850 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.850 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.851 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.853 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.853 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.853 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.854 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.855 I llm_load_print_meta: n_ff             = 16384
0.00.267.855 I llm_load_print_meta: n_expert         = 0
0.00.267.855 I llm_load_print_meta: n_expert_used    = 0
0.00.267.856 I llm_load_print_meta: causal attn      = 1
0.00.267.856 I llm_load_print_meta: pooling type     = 0
0.00.267.856 I llm_load_print_meta: rope type        = 2
0.00.267.856 I llm_load_print_meta: rope scaling     = linear
0.00.267.858 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.858 I llm_load_print_meta: freq_scale_train = 1
0.00.267.859 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.860 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.860 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.860 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.861 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.861 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.861 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.862 I llm_load_print_meta: model type       = 2B
0.00.267.862 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.863 I llm_load_print_meta: model params     = 2.51 B
0.00.267.864 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.865 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.865 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.865 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.865 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.866 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.866 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.866 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.867 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.867 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.867 I llm_load_print_meta: max token length = 93
0.00.368.269 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.368.277 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.368.278 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.368.278 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.368.279 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.368.280 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.373.435 I llama_new_context_with_model: n_seq_max     = 1
0.00.373.442 I llama_new_context_with_model: n_ctx         = 4096
0.00.373.442 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.373.443 I llama_new_context_with_model: n_batch       = 2048
0.00.373.443 I llama_new_context_with_model: n_ubatch      = 512
0.00.373.444 I llama_new_context_with_model: flash_attn    = 0
0.00.373.446 I llama_new_context_with_model: freq_base     = 10000.0
0.00.373.447 I llama_new_context_with_model: freq_scale    = 1
0.00.373.448 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.387.864 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.873 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.960 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.260 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.267 I llama_new_context_with_model: graph nodes  = 601
0.00.389.268 I llama_new_context_with_model: graph splits = 1
0.00.389.270 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.389.270 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.760 I main: llama threadpool init, n_threads = 4
0.00.474.775 I 
0.00.474.846 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.474.849 I 
0.00.474.890 I sampler seed: 258992591
0.00.474.902 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.914 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.917 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.917 I 
 seconded
## The Power of Storytelling: Engaging People and Shaping Perceptions

**Storytelling has the transformative power to engage, entertain, and inspire.** It possesses

0.02.742.328 I llama_perf_sampler_print:    sampling time =       4.79 ms /    33 runs   (    0.15 ms per token,  6886.48 tokens per second)
0.02.742.332 I llama_perf_context_print:        load time =     474.37 ms
0.02.742.334 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.742.336 I llama_perf_context_print:        eval time =    2247.72 ms /    32 runs   (   70.24 ms per token,    14.24 tokens per second)
0.02.742.337 I llama_perf_context_print:       total time =    2267.58 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.176 I build: 4335 (644fd71b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.390 I main: llama backend init
0.00.000.397 I main: load the model and apply lora adapter, if any
0.00.020.420 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.436 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.443 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.446 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.450 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.451 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.452 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.453 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.454 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.454 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.458 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.459 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.459 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.460 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.460 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.402 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.393 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.254 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.261 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.262 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.263 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.264 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.265 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.266 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.269 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.270 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.271 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.272 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.273 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.276 I llama_model_loader: - type  f32:   37 tensors
0.00.131.277 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.876 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.931 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.651 I llm_load_vocab: special tokens cache size = 5
0.00.275.624 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.645 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.646 I llm_load_print_meta: arch             = gemma
0.00.275.646 I llm_load_print_meta: vocab type       = SPM
0.00.275.647 I llm_load_print_meta: n_vocab          = 256000
0.00.275.648 I llm_load_print_meta: n_merges         = 0
0.00.275.648 I llm_load_print_meta: vocab_only       = 0
0.00.275.648 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.649 I llm_load_print_meta: n_embd           = 2048
0.00.275.649 I llm_load_print_meta: n_layer          = 18
0.00.275.661 I llm_load_print_meta: n_head           = 8
0.00.275.662 I llm_load_print_meta: n_head_kv        = 1
0.00.275.662 I llm_load_print_meta: n_rot            = 256
0.00.275.662 I llm_load_print_meta: n_swa            = 0
0.00.275.663 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.663 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.664 I llm_load_print_meta: n_gqa            = 8
0.00.275.665 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.666 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.666 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.667 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.668 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.668 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.668 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.669 I llm_load_print_meta: n_ff             = 16384
0.00.275.670 I llm_load_print_meta: n_expert         = 0
0.00.275.670 I llm_load_print_meta: n_expert_used    = 0
0.00.275.670 I llm_load_print_meta: causal attn      = 1
0.00.275.670 I llm_load_print_meta: pooling type     = 0
0.00.275.671 I llm_load_print_meta: rope type        = 2
0.00.275.671 I llm_load_print_meta: rope scaling     = linear
0.00.275.672 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.672 I llm_load_print_meta: freq_scale_train = 1
0.00.275.673 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.673 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.673 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.674 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.674 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.674 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.674 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.675 I llm_load_print_meta: model type       = 2B
0.00.275.676 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.676 I llm_load_print_meta: model params     = 2.51 B
0.00.275.677 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.678 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.678 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.679 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.679 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.679 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.679 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.680 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.680 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.681 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.682 I llm_load_print_meta: max token length = 93
0.00.369.637 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.374.681 I llama_new_context_with_model: n_seq_max     = 1
0.00.374.687 I llama_new_context_with_model: n_ctx         = 4096
0.00.374.688 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.374.688 I llama_new_context_with_model: n_batch       = 2048
0.00.374.688 I llama_new_context_with_model: n_ubatch      = 512
0.00.374.689 I llama_new_context_with_model: flash_attn    = 0
0.00.374.691 I llama_new_context_with_model: freq_base     = 10000.0
0.00.374.692 I llama_new_context_with_model: freq_scale    = 1
0.00.374.693 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.389.111 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.389.125 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.210 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.458 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.390.465 I llama_new_context_with_model: graph nodes  = 601
0.00.390.465 I llama_new_context_with_model: graph splits = 1
0.00.390.468 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.390.468 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.758 I main: llama threadpool init, n_threads = 4
0.00.470.773 I 
0.00.470.850 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.470.854 I 
0.00.470.908 I sampler seed: 2124860536
0.00.470.919 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.922 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.924 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.924 I 
 increasively. [end of text]


0.00.741.412 I llama_perf_sampler_print:    sampling time =       0.62 ms /     5 runs   (    0.12 ms per token,  8090.61 tokens per second)
0.00.741.414 I llama_perf_context_print:        load time =     470.34 ms
0.00.741.415 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.741.417 I llama_perf_context_print:        eval time =     267.27 ms /     4 runs   (   66.82 ms per token,    14.97 tokens per second)
0.00.741.417 I llama_perf_context_print:       total time =     270.66 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.174 I build: 4335 (644fd71b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.396 I main: llama backend init
0.00.000.403 I main: load the model and apply lora adapter, if any
0.00.021.596 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.606 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.613 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.618 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.619 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.623 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.623 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.624 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.624 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.626 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.626 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.630 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.631 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.632 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.633 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.634 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.341 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.792 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.735 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.741 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.742 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.743 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.744 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.745 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.746 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.749 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.750 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.751 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.752 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.753 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.757 I llama_model_loader: - type  f32:   37 tensors
0.00.132.758 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.791 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.775 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.303 I llm_load_vocab: special tokens cache size = 5
0.00.266.843 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.858 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.859 I llm_load_print_meta: arch             = gemma
0.00.266.860 I llm_load_print_meta: vocab type       = SPM
0.00.266.860 I llm_load_print_meta: n_vocab          = 256000
0.00.266.861 I llm_load_print_meta: n_merges         = 0
0.00.266.861 I llm_load_print_meta: vocab_only       = 0
0.00.266.861 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.862 I llm_load_print_meta: n_embd           = 2048
0.00.266.862 I llm_load_print_meta: n_layer          = 18
0.00.266.872 I llm_load_print_meta: n_head           = 8
0.00.266.873 I llm_load_print_meta: n_head_kv        = 1
0.00.266.873 I llm_load_print_meta: n_rot            = 256
0.00.266.873 I llm_load_print_meta: n_swa            = 0
0.00.266.874 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.874 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.875 I llm_load_print_meta: n_gqa            = 8
0.00.266.876 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.876 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.877 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.879 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.879 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.879 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.880 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.881 I llm_load_print_meta: n_ff             = 16384
0.00.266.881 I llm_load_print_meta: n_expert         = 0
0.00.266.882 I llm_load_print_meta: n_expert_used    = 0
0.00.266.882 I llm_load_print_meta: causal attn      = 1
0.00.266.883 I llm_load_print_meta: pooling type     = 0
0.00.266.883 I llm_load_print_meta: rope type        = 2
0.00.266.883 I llm_load_print_meta: rope scaling     = linear
0.00.266.884 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.885 I llm_load_print_meta: freq_scale_train = 1
0.00.266.885 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.886 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.886 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.886 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.887 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.887 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.887 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.888 I llm_load_print_meta: model type       = 2B
0.00.266.888 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.889 I llm_load_print_meta: model params     = 2.51 B
0.00.266.890 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.890 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.890 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.891 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.891 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.891 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.891 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.892 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.892 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.893 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.893 I llm_load_print_meta: max token length = 93
0.00.342.740 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.342.746 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.342.746 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.342.747 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.342.748 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.342.748 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.347.969 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.975 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.976 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.976 I llama_new_context_with_model: n_batch       = 2048
0.00.347.977 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.977 I llama_new_context_with_model: flash_attn    = 0
0.00.347.979 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.980 I llama_new_context_with_model: freq_scale    = 1
0.00.347.981 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.433 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.449 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.538 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.806 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.813 I llama_new_context_with_model: graph nodes  = 601
0.00.363.813 I llama_new_context_with_model: graph splits = 1
0.00.363.816 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.363.816 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.448.465 I main: llama threadpool init, n_threads = 4
0.00.448.480 I 
0.00.448.558 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.448.563 I 
0.00.448.619 I sampler seed: 1813507544
0.00.448.631 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.448.634 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.448.635 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.448.636 I 
 increabling:

**Assistant**

I am unable to access real-time information, therefore I am unable to provide assistance with live or up-to-

0.02.741.922 I llama_perf_sampler_print:    sampling time =       5.18 ms /    33 runs   (    0.16 ms per token,  6371.89 tokens per second)
0.02.741.925 I llama_perf_context_print:        load time =     448.04 ms
0.02.741.927 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.741.929 I llama_perf_context_print:        eval time =    2273.37 ms /    32 runs   (   71.04 ms per token,    14.08 tokens per second)
0.02.741.930 I llama_perf_context_print:       total time =    2293.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.549 I build: 4335 (644fd71b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.756 I main: llama backend init
0.00.000.763 I main: load the model and apply lora adapter, if any
0.00.021.184 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.196 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.204 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.209 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.211 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.214 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.215 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.215 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.216 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.216 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.217 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.221 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.223 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.224 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.225 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.226 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.083 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.516 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.696 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.702 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.703 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.704 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.705 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.706 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.707 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.710 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.711 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.712 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.713 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.714 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.717 I llama_model_loader: - type  f32:   37 tensors
0.00.132.718 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.293 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.849 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.371 I llm_load_vocab: special tokens cache size = 5
0.00.268.209 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.224 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.225 I llm_load_print_meta: arch             = gemma
0.00.268.225 I llm_load_print_meta: vocab type       = SPM
0.00.268.226 I llm_load_print_meta: n_vocab          = 256000
0.00.268.226 I llm_load_print_meta: n_merges         = 0
0.00.268.227 I llm_load_print_meta: vocab_only       = 0
0.00.268.227 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.228 I llm_load_print_meta: n_embd           = 2048
0.00.268.228 I llm_load_print_meta: n_layer          = 18
0.00.268.238 I llm_load_print_meta: n_head           = 8
0.00.268.239 I llm_load_print_meta: n_head_kv        = 1
0.00.268.239 I llm_load_print_meta: n_rot            = 256
0.00.268.240 I llm_load_print_meta: n_swa            = 0
0.00.268.240 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.240 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.241 I llm_load_print_meta: n_gqa            = 8
0.00.268.242 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.243 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.244 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.245 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.245 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.246 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.246 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.247 I llm_load_print_meta: n_ff             = 16384
0.00.268.247 I llm_load_print_meta: n_expert         = 0
0.00.268.247 I llm_load_print_meta: n_expert_used    = 0
0.00.268.248 I llm_load_print_meta: causal attn      = 1
0.00.268.248 I llm_load_print_meta: pooling type     = 0
0.00.268.248 I llm_load_print_meta: rope type        = 2
0.00.268.249 I llm_load_print_meta: rope scaling     = linear
0.00.268.250 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.251 I llm_load_print_meta: freq_scale_train = 1
0.00.268.251 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.252 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.252 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.252 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.253 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.253 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.253 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.253 I llm_load_print_meta: model type       = 2B
0.00.268.254 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.255 I llm_load_print_meta: model params     = 2.51 B
0.00.268.256 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.256 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.256 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.257 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.257 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.257 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.257 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.258 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.258 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.259 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.259 I llm_load_print_meta: max token length = 93
0.00.339.652 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.339.660 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.344.840 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.846 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.847 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.847 I llama_new_context_with_model: n_batch       = 2048
0.00.344.848 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.848 I llama_new_context_with_model: flash_attn    = 0
0.00.344.851 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.852 I llama_new_context_with_model: freq_scale    = 1
0.00.344.852 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.186 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.359.200 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.359.293 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.576 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.582 I llama_new_context_with_model: graph nodes  = 601
0.00.360.582 I llama_new_context_with_model: graph splits = 1
0.00.360.585 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.360.585 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.448.973 I main: llama threadpool init, n_threads = 4
0.00.448.989 I 
0.00.449.062 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.449.065 I 
0.00.449.112 I sampler seed: 3752791270
0.00.449.122 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.449.126 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.449.126 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.449.126 I 
 increamically.

I am unable to generate a response as requested as I am unable to access real-time or location-based data. [end of text]


0.02.645.434 I llama_perf_sampler_print:    sampling time =       4.54 ms /    30 runs   (    0.15 ms per token,  6606.47 tokens per second)
0.02.645.437 I llama_perf_context_print:        load time =     448.19 ms
0.02.645.438 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.645.440 I llama_perf_context_print:        eval time =    2179.23 ms /    29 runs   (   75.15 ms per token,    13.31 tokens per second)
0.02.645.440 I llama_perf_context_print:       total time =    2196.47 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.273s
user	0m30.949s
sys	0m9.338s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4335 (644fd71b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40213.60 ms
main:    total time = 40213.60 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.568 I build: 4335 (644fd71b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.774 I main: llama backend init
0.00.000.781 I main: load the model and apply lora adapter, if any
0.00.021.261 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.272 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.285 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.290 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.292 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.297 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.297 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.299 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.300 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.301 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.301 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.306 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.307 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.308 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.309 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.310 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.954 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.298 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.224 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.230 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.231 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.232 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.232 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.233 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.234 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.236 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.237 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.237 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.238 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.239 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.242 I llama_model_loader: - type  f32:   37 tensors
0.00.132.243 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.244 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.062 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.710 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.341 I llm_load_vocab: special tokens cache size = 5
0.00.273.199 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.217 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.217 I llm_load_print_meta: arch             = gemma
0.00.273.218 I llm_load_print_meta: vocab type       = SPM
0.00.273.218 I llm_load_print_meta: n_vocab          = 256000
0.00.273.219 I llm_load_print_meta: n_merges         = 0
0.00.273.219 I llm_load_print_meta: vocab_only       = 0
0.00.273.219 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.219 I llm_load_print_meta: n_embd           = 2048
0.00.273.220 I llm_load_print_meta: n_layer          = 18
0.00.273.231 I llm_load_print_meta: n_head           = 8
0.00.273.232 I llm_load_print_meta: n_head_kv        = 1
0.00.273.233 I llm_load_print_meta: n_rot            = 256
0.00.273.233 I llm_load_print_meta: n_swa            = 0
0.00.273.233 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.234 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.235 I llm_load_print_meta: n_gqa            = 8
0.00.273.236 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.238 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.239 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.241 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.242 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.243 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.243 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.244 I llm_load_print_meta: n_ff             = 16384
0.00.273.245 I llm_load_print_meta: n_expert         = 0
0.00.273.245 I llm_load_print_meta: n_expert_used    = 0
0.00.273.246 I llm_load_print_meta: causal attn      = 1
0.00.273.246 I llm_load_print_meta: pooling type     = 0
0.00.273.247 I llm_load_print_meta: rope type        = 2
0.00.273.247 I llm_load_print_meta: rope scaling     = linear
0.00.273.248 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.249 I llm_load_print_meta: freq_scale_train = 1
0.00.273.249 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.250 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.250 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.251 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.251 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.251 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.251 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.252 I llm_load_print_meta: model type       = 2B
0.00.273.253 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.273.254 I llm_load_print_meta: model params     = 2.51 B
0.00.273.255 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.273.255 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.256 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.256 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.256 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.256 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.257 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.257 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.258 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.258 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.258 I llm_load_print_meta: max token length = 93
0.00.334.077 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.334.084 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.334.084 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.334.085 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.334.086 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.334.086 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.339.380 I llama_new_context_with_model: n_seq_max     = 1
0.00.339.387 I llama_new_context_with_model: n_ctx         = 4096
0.00.339.387 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.339.388 I llama_new_context_with_model: n_batch       = 2048
0.00.339.388 I llama_new_context_with_model: n_ubatch      = 512
0.00.339.389 I llama_new_context_with_model: flash_attn    = 0
0.00.339.393 I llama_new_context_with_model: freq_base     = 10000.0
0.00.339.393 I llama_new_context_with_model: freq_scale    = 1
0.00.339.394 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.354.356 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.354.370 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.354.461 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.355.818 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.355.824 I llama_new_context_with_model: graph nodes  = 601
0.00.355.824 I llama_new_context_with_model: graph splits = 1
0.00.355.827 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.355.827 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.430.840 I main: llama threadpool init, n_threads = 4
0.00.430.857 I 
0.00.430.938 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.430.941 I 
0.00.430.982 I sampler seed: 1597385797
0.00.430.993 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.431.001 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.431.005 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.431.005 I 
 squaRED text

I am unable to generate a response as I am unable to access external websites and APIs. [end of text]


0.01.575.129 I llama_perf_sampler_print:    sampling time =       3.82 ms /    24 runs   (    0.16 ms per token,  6276.15 tokens per second)
0.01.575.131 I llama_perf_context_print:        load time =     430.04 ms
0.01.575.133 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.575.134 I llama_perf_context_print:        eval time =    1130.53 ms /    23 runs   (   49.15 ms per token,    20.34 tokens per second)
0.01.575.137 I llama_perf_context_print:       total time =    1144.30 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4335 (644fd71b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40191.71 ms
main:    total time = 40191.71 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.520 I build: 4335 (644fd71b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.716 I main: llama backend init
0.00.000.722 I main: load the model and apply lora adapter, if any
0.00.021.347 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.363 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.370 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.373 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.377 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.377 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.378 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.379 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.380 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.380 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.383 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.384 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.385 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.385 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.386 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.980 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.113 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.121 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.127 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.128 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.128 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.129 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.130 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.131 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.134 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.134 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.137 I llama_model_loader: - type  f32:   37 tensors
0.00.132.138 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.138 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.534 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.751 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.309 I llm_load_vocab: special tokens cache size = 5
0.00.267.001 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.015 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.016 I llm_load_print_meta: arch             = gemma
0.00.267.016 I llm_load_print_meta: vocab type       = SPM
0.00.267.017 I llm_load_print_meta: n_vocab          = 256000
0.00.267.017 I llm_load_print_meta: n_merges         = 0
0.00.267.017 I llm_load_print_meta: vocab_only       = 0
0.00.267.018 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.018 I llm_load_print_meta: n_embd           = 2048
0.00.267.018 I llm_load_print_meta: n_layer          = 18
0.00.267.028 I llm_load_print_meta: n_head           = 8
0.00.267.030 I llm_load_print_meta: n_head_kv        = 1
0.00.267.030 I llm_load_print_meta: n_rot            = 256
0.00.267.030 I llm_load_print_meta: n_swa            = 0
0.00.267.031 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.031 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.032 I llm_load_print_meta: n_gqa            = 8
0.00.267.033 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.034 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.035 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.037 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.037 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.038 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.038 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.039 I llm_load_print_meta: n_ff             = 16384
0.00.267.040 I llm_load_print_meta: n_expert         = 0
0.00.267.040 I llm_load_print_meta: n_expert_used    = 0
0.00.267.040 I llm_load_print_meta: causal attn      = 1
0.00.267.041 I llm_load_print_meta: pooling type     = 0
0.00.267.041 I llm_load_print_meta: rope type        = 2
0.00.267.041 I llm_load_print_meta: rope scaling     = linear
0.00.267.042 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.043 I llm_load_print_meta: freq_scale_train = 1
0.00.267.043 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.044 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.044 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.044 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.044 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.044 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.045 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.045 I llm_load_print_meta: model type       = 2B
0.00.267.046 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.046 I llm_load_print_meta: model params     = 2.51 B
0.00.267.047 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.047 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.048 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.048 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.048 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.048 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.049 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.049 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.049 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.050 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.050 I llm_load_print_meta: max token length = 93
0.00.324.670 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.329.866 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.872 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.873 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.873 I llama_new_context_with_model: n_batch       = 2048
0.00.329.874 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.874 I llama_new_context_with_model: flash_attn    = 0
0.00.329.876 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.877 I llama_new_context_with_model: freq_scale    = 1
0.00.329.878 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.733 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.344.747 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.344.845 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.346.077 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.346.083 I llama_new_context_with_model: graph nodes  = 601
0.00.346.083 I llama_new_context_with_model: graph splits = 1
0.00.346.086 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.346.086 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.339 I main: llama threadpool init, n_threads = 4
0.00.422.355 I 
0.00.422.437 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.422.440 I 
0.00.422.485 I sampler seed: 2395685357
0.00.422.496 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.507 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.422.511 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.422.511 I 
 increasities, and a general lack of understanding of the challenges and opportunities of digital transformation.

**Challenges:**

* **Technological complexity:** The rapid pace of

0.01.974.534 I llama_perf_sampler_print:    sampling time =       4.85 ms /    33 runs   (    0.15 ms per token,  6808.34 tokens per second)
0.01.974.537 I llama_perf_context_print:        load time =     421.60 ms
0.01.974.546 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.974.548 I llama_perf_context_print:        eval time =    1534.30 ms /    32 runs   (   47.95 ms per token,    20.86 tokens per second)
0.01.974.549 I llama_perf_context_print:       total time =    1552.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.748s
user	10m22.038s
sys	0m6.818s
