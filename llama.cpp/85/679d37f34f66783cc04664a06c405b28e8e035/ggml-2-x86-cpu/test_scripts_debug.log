+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 4002 (85679d37) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.002.789 I main: load the model and apply lora adapter, if any
0.00.025.427 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.436 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.526 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.538 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.540 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.551 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.553 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.554 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.573 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.581 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.582 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.589 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.590 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.591 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.592 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.593 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.648 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.134 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.315 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.325 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.326 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.326 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.327 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.328 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.329 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.333 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.334 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.335 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.336 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.337 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.346 I llama_model_loader: - type  f32:   37 tensors
0.00.265.348 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.031 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.510.138 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.090 I llm_load_vocab: special tokens cache size = 5
0.00.605.651 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.723 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.724 I llm_load_print_meta: arch             = gemma
0.00.605.725 I llm_load_print_meta: vocab type       = SPM
0.00.605.726 I llm_load_print_meta: n_vocab          = 256000
0.00.605.728 I llm_load_print_meta: n_merges         = 0
0.00.605.729 I llm_load_print_meta: vocab_only       = 0
0.00.605.729 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.737 I llm_load_print_meta: n_embd           = 2048
0.00.605.738 I llm_load_print_meta: n_layer          = 18
0.00.605.805 I llm_load_print_meta: n_head           = 8
0.00.605.813 I llm_load_print_meta: n_head_kv        = 1
0.00.605.814 I llm_load_print_meta: n_rot            = 256
0.00.605.814 I llm_load_print_meta: n_swa            = 0
0.00.605.815 I llm_load_print_meta: n_embd_head_k    = 256
0.00.605.815 I llm_load_print_meta: n_embd_head_v    = 256
0.00.605.819 I llm_load_print_meta: n_gqa            = 8
0.00.605.824 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.605.829 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.605.831 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.605.832 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.605.849 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.605.850 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.605.851 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.605.856 I llm_load_print_meta: n_ff             = 16384
0.00.605.858 I llm_load_print_meta: n_expert         = 0
0.00.605.858 I llm_load_print_meta: n_expert_used    = 0
0.00.605.858 I llm_load_print_meta: causal attn      = 1
0.00.605.858 I llm_load_print_meta: pooling type     = 0
0.00.605.859 I llm_load_print_meta: rope type        = 2
0.00.605.860 I llm_load_print_meta: rope scaling     = linear
0.00.605.861 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.605.862 I llm_load_print_meta: freq_scale_train = 1
0.00.605.863 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.605.863 I llm_load_print_meta: rope_finetuned   = unknown
0.00.605.863 I llm_load_print_meta: ssm_d_conv       = 0
0.00.605.863 I llm_load_print_meta: ssm_d_inner      = 0
0.00.605.864 I llm_load_print_meta: ssm_d_state      = 0
0.00.605.865 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.605.865 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.866 I llm_load_print_meta: model type       = 2B
0.00.605.871 I llm_load_print_meta: model ftype      = Q8_0
0.00.605.872 I llm_load_print_meta: model params     = 2.51 B
0.00.605.873 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.605.873 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.874 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.874 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.884 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.885 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.888 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.888 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.894 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.896 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.896 I llm_load_print_meta: max token length = 93
0.00.715.608 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.715.619 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.715.619 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.715.620 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.715.621 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.715.621 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.721.472 I llama_new_context_with_model: n_ctx      = 8192
0.00.721.478 I llama_new_context_with_model: n_batch    = 2048
0.00.721.479 I llama_new_context_with_model: n_ubatch   = 512
0.00.721.479 I llama_new_context_with_model: flash_attn = 0
0.00.721.482 I llama_new_context_with_model: freq_base  = 10000.0
0.00.721.482 I llama_new_context_with_model: freq_scale = 1
0.00.750.140 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.750.180 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.750.326 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.752.823 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.752.827 I llama_new_context_with_model: graph nodes  = 601
0.00.752.827 I llama_new_context_with_model: graph splits = 1
0.00.752.843 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.363.803 I main: llama threadpool init, n_threads = 4
0.01.363.817 I 
0.01.363.927 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.363.931 I 
0.01.364.164 I sampler seed: 2482800765
0.01.364.177 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.364.183 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.364.185 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.364.185 I 
 seconally.

I understand that the question is asking for a summary of a conversation, but I am unable to access the conversation itself. Therefore, I am

0.14.852.517 I llama_perf_sampler_print:    sampling time =      48.26 ms /    33 runs   (    1.46 ms per token,   683.77 tokens per second)
0.14.852.521 I llama_perf_context_print:        load time =    1360.92 ms
0.14.852.522 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.852.525 I llama_perf_context_print:        eval time =   13394.55 ms /    32 runs   (  418.58 ms per token,     2.39 tokens per second)
0.14.852.526 I llama_perf_context_print:       total time =   13488.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4002 (85679d37) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.002.794 I main: load the model and apply lora adapter, if any
0.00.025.308 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.406 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.420 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.421 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.425 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.429 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.430 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.432 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.432 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.433 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.440 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.441 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.443 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.444 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.445 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.164 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.725 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.803 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.811 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.812 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.813 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.814 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.815 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.816 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.820 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.821 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.822 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.823 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.265.825 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.832 I llama_model_loader: - type  f32:   37 tensors
0.00.265.835 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.804 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.285 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.509.206 I llm_load_vocab: special tokens cache size = 5
0.00.604.436 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.502 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.503 I llm_load_print_meta: arch             = gemma
0.00.604.504 I llm_load_print_meta: vocab type       = SPM
0.00.604.505 I llm_load_print_meta: n_vocab          = 256000
0.00.604.507 I llm_load_print_meta: n_merges         = 0
0.00.604.507 I llm_load_print_meta: vocab_only       = 0
0.00.604.508 I llm_load_print_meta: n_ctx_train      = 8192
0.00.604.516 I llm_load_print_meta: n_embd           = 2048
0.00.604.517 I llm_load_print_meta: n_layer          = 18
0.00.604.581 I llm_load_print_meta: n_head           = 8
0.00.604.590 I llm_load_print_meta: n_head_kv        = 1
0.00.604.591 I llm_load_print_meta: n_rot            = 256
0.00.604.591 I llm_load_print_meta: n_swa            = 0
0.00.604.592 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.592 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.597 I llm_load_print_meta: n_gqa            = 8
0.00.604.602 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.607 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.609 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.611 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.611 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.611 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.613 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.617 I llm_load_print_meta: n_ff             = 16384
0.00.604.618 I llm_load_print_meta: n_expert         = 0
0.00.604.618 I llm_load_print_meta: n_expert_used    = 0
0.00.604.620 I llm_load_print_meta: causal attn      = 1
0.00.604.620 I llm_load_print_meta: pooling type     = 0
0.00.604.621 I llm_load_print_meta: rope type        = 2
0.00.604.621 I llm_load_print_meta: rope scaling     = linear
0.00.604.624 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.624 I llm_load_print_meta: freq_scale_train = 1
0.00.604.625 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.626 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.626 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.626 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.626 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.627 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.639 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.641 I llm_load_print_meta: model type       = 2B
0.00.604.642 I llm_load_print_meta: model ftype      = Q8_0
0.00.604.655 I llm_load_print_meta: model params     = 2.51 B
0.00.604.656 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.604.657 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.657 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.661 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.661 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.662 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.662 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.663 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.670 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.671 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.672 I llm_load_print_meta: max token length = 93
0.00.705.156 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.711.049 I llama_new_context_with_model: n_ctx      = 8192
0.00.711.056 I llama_new_context_with_model: n_batch    = 2048
0.00.711.056 I llama_new_context_with_model: n_ubatch   = 512
0.00.711.057 I llama_new_context_with_model: flash_attn = 0
0.00.711.059 I llama_new_context_with_model: freq_base  = 10000.0
0.00.711.060 I llama_new_context_with_model: freq_scale = 1
0.00.740.630 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.740.671 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.740.795 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.743.284 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.743.289 I llama_new_context_with_model: graph nodes  = 601
0.00.743.289 I llama_new_context_with_model: graph splits = 1
0.00.743.305 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.355.382 I main: llama threadpool init, n_threads = 4
0.01.355.395 I 
0.01.355.504 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.355.508 I 
0.01.355.743 I sampler seed: 127407411
0.01.355.755 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.355.763 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.355.764 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.355.764 I 
 increamically with the rise of automation and AI.

**Answer:**

**True**

Automation and AI are leading to rapid advancements in various industries, resulting

0.14.957.590 I llama_perf_sampler_print:    sampling time =      47.84 ms /    33 runs   (    1.45 ms per token,   689.87 tokens per second)
0.14.957.607 I llama_perf_context_print:        load time =    1352.49 ms
0.14.957.609 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.957.610 I llama_perf_context_print:        eval time =   13508.59 ms /    32 runs   (  422.14 ms per token,     2.37 tokens per second)
0.14.957.611 I llama_perf_context_print:       total time =   13602.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.629 I build: 4002 (85679d37) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.002.788 I main: load the model and apply lora adapter, if any
0.00.025.310 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.321 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.408 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.419 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.420 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.424 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.425 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.427 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.428 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.429 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.430 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.436 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.437 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.438 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.439 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.441 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.299 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.644 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.517 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.526 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.527 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.528 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.529 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.531 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.532 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.535 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.536 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.537 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.538 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.265.539 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.548 I llama_model_loader: - type  f32:   37 tensors
0.00.265.551 I llama_model_loader: - type q8_0:  127 tensors
0.00.449.616 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.521.552 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.522.590 I llm_load_vocab: special tokens cache size = 5
0.00.617.742 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.617.812 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.617.814 I llm_load_print_meta: arch             = gemma
0.00.617.814 I llm_load_print_meta: vocab type       = SPM
0.00.617.815 I llm_load_print_meta: n_vocab          = 256000
0.00.617.817 I llm_load_print_meta: n_merges         = 0
0.00.617.818 I llm_load_print_meta: vocab_only       = 0
0.00.617.818 I llm_load_print_meta: n_ctx_train      = 8192
0.00.617.828 I llm_load_print_meta: n_embd           = 2048
0.00.617.828 I llm_load_print_meta: n_layer          = 18
0.00.617.890 I llm_load_print_meta: n_head           = 8
0.00.617.912 I llm_load_print_meta: n_head_kv        = 1
0.00.617.914 I llm_load_print_meta: n_rot            = 256
0.00.617.914 I llm_load_print_meta: n_swa            = 0
0.00.617.915 I llm_load_print_meta: n_embd_head_k    = 256
0.00.617.915 I llm_load_print_meta: n_embd_head_v    = 256
0.00.617.922 I llm_load_print_meta: n_gqa            = 8
0.00.617.926 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.617.931 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.617.933 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.617.935 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.617.936 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.617.936 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.617.937 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.617.941 I llm_load_print_meta: n_ff             = 16384
0.00.617.942 I llm_load_print_meta: n_expert         = 0
0.00.617.942 I llm_load_print_meta: n_expert_used    = 0
0.00.617.943 I llm_load_print_meta: causal attn      = 1
0.00.617.943 I llm_load_print_meta: pooling type     = 0
0.00.617.944 I llm_load_print_meta: rope type        = 2
0.00.617.944 I llm_load_print_meta: rope scaling     = linear
0.00.617.946 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.617.946 I llm_load_print_meta: freq_scale_train = 1
0.00.617.947 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.617.948 I llm_load_print_meta: rope_finetuned   = unknown
0.00.617.948 I llm_load_print_meta: ssm_d_conv       = 0
0.00.617.948 I llm_load_print_meta: ssm_d_inner      = 0
0.00.617.948 I llm_load_print_meta: ssm_d_state      = 0
0.00.617.949 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.617.953 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.617.954 I llm_load_print_meta: model type       = 2B
0.00.617.955 I llm_load_print_meta: model ftype      = Q8_0
0.00.617.956 I llm_load_print_meta: model params     = 2.51 B
0.00.617.957 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.617.957 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.617.965 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.617.966 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.617.967 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.617.967 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.617.968 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.617.969 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.617.975 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.617.976 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.617.977 I llm_load_print_meta: max token length = 93
0.00.717.301 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.717.311 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.717.312 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.717.312 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.717.313 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.717.314 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.723.358 I llama_new_context_with_model: n_ctx      = 8192
0.00.723.365 I llama_new_context_with_model: n_batch    = 2048
0.00.723.366 I llama_new_context_with_model: n_ubatch   = 512
0.00.723.366 I llama_new_context_with_model: flash_attn = 0
0.00.723.369 I llama_new_context_with_model: freq_base  = 10000.0
0.00.723.369 I llama_new_context_with_model: freq_scale = 1
0.00.752.350 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.752.390 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.752.519 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.755.083 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.755.087 I llama_new_context_with_model: graph nodes  = 601
0.00.755.087 I llama_new_context_with_model: graph splits = 1
0.00.755.103 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.366.561 I main: llama threadpool init, n_threads = 4
0.01.366.574 I 
0.01.366.682 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.366.686 I 
0.01.366.917 I sampler seed: 3404010757
0.01.366.930 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.366.936 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.366.937 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.366.938 I 
 increasels is the most common type of _______.

a) Vertebrate
b) Invertebrate
c) Amphibian
d) Reptile


The correct

0.14.871.151 I llama_perf_sampler_print:    sampling time =      48.20 ms /    33 runs   (    1.46 ms per token,   684.62 tokens per second)
0.14.871.155 I llama_perf_context_print:        load time =    1363.68 ms
0.14.871.156 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.871.158 I llama_perf_context_print:        eval time =   13411.18 ms /    32 runs   (  419.10 ms per token,     2.39 tokens per second)
0.14.871.159 I llama_perf_context_print:       total time =   13504.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4002 (85679d37) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.002.798 I main: load the model and apply lora adapter, if any
0.00.025.213 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.224 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.330 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.341 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.342 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.347 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.348 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.349 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.351 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.351 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.352 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.359 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.360 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.361 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.362 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.364 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.942 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.228 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.046 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.054 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.055 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.056 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.057 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.059 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.060 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.064 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.064 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.066 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.066 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.068 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.074 I llama_model_loader: - type  f32:   37 tensors
0.00.266.077 I llama_model_loader: - type q8_0:  127 tensors
0.00.445.522 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.507.940 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.508.850 I llm_load_vocab: special tokens cache size = 5
0.00.603.367 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.603.440 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.603.441 I llm_load_print_meta: arch             = gemma
0.00.603.442 I llm_load_print_meta: vocab type       = SPM
0.00.603.443 I llm_load_print_meta: n_vocab          = 256000
0.00.603.445 I llm_load_print_meta: n_merges         = 0
0.00.603.445 I llm_load_print_meta: vocab_only       = 0
0.00.603.446 I llm_load_print_meta: n_ctx_train      = 8192
0.00.603.455 I llm_load_print_meta: n_embd           = 2048
0.00.603.455 I llm_load_print_meta: n_layer          = 18
0.00.603.520 I llm_load_print_meta: n_head           = 8
0.00.603.552 I llm_load_print_meta: n_head_kv        = 1
0.00.603.553 I llm_load_print_meta: n_rot            = 256
0.00.603.554 I llm_load_print_meta: n_swa            = 0
0.00.603.554 I llm_load_print_meta: n_embd_head_k    = 256
0.00.603.555 I llm_load_print_meta: n_embd_head_v    = 256
0.00.603.560 I llm_load_print_meta: n_gqa            = 8
0.00.603.565 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.603.571 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.603.573 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.603.575 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.603.575 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.603.583 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.603.588 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.603.594 I llm_load_print_meta: n_ff             = 16384
0.00.603.595 I llm_load_print_meta: n_expert         = 0
0.00.603.596 I llm_load_print_meta: n_expert_used    = 0
0.00.603.597 I llm_load_print_meta: causal attn      = 1
0.00.603.597 I llm_load_print_meta: pooling type     = 0
0.00.603.598 I llm_load_print_meta: rope type        = 2
0.00.603.598 I llm_load_print_meta: rope scaling     = linear
0.00.603.600 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.603.601 I llm_load_print_meta: freq_scale_train = 1
0.00.603.601 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.603.601 I llm_load_print_meta: rope_finetuned   = unknown
0.00.603.602 I llm_load_print_meta: ssm_d_conv       = 0
0.00.603.602 I llm_load_print_meta: ssm_d_inner      = 0
0.00.603.603 I llm_load_print_meta: ssm_d_state      = 0
0.00.603.603 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.603.603 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.603.604 I llm_load_print_meta: model type       = 2B
0.00.603.605 I llm_load_print_meta: model ftype      = Q8_0
0.00.603.606 I llm_load_print_meta: model params     = 2.51 B
0.00.603.607 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.603.608 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.603.608 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.603.609 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.603.609 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.603.610 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.603.610 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.603.611 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.603.617 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.603.619 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.603.619 I llm_load_print_meta: max token length = 93
0.00.688.762 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.688.772 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.694.613 I llama_new_context_with_model: n_ctx      = 8192
0.00.694.620 I llama_new_context_with_model: n_batch    = 2048
0.00.694.620 I llama_new_context_with_model: n_ubatch   = 512
0.00.694.621 I llama_new_context_with_model: flash_attn = 0
0.00.694.624 I llama_new_context_with_model: freq_base  = 10000.0
0.00.694.624 I llama_new_context_with_model: freq_scale = 1
0.00.723.557 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.723.596 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.723.721 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.726.138 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.726.142 I llama_new_context_with_model: graph nodes  = 601
0.00.726.142 I llama_new_context_with_model: graph splits = 1
0.00.726.160 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.337.122 I main: llama threadpool init, n_threads = 4
0.01.337.135 I 
0.01.337.240 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.337.243 I 
0.01.337.487 I sampler seed: 1325568813
0.01.337.499 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.337.508 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.337.509 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.337.510 I 
 increably.

I am unable to provide a response that includes sexually suggestive or inappropriate content. [end of text]


0.09.818.794 I llama_perf_sampler_print:    sampling time =      30.12 ms /    21 runs   (    1.43 ms per token,   697.19 tokens per second)
0.09.818.817 I llama_perf_context_print:        load time =    1334.23 ms
0.09.818.819 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.818.822 I llama_perf_context_print:        eval time =    8422.25 ms /    20 runs   (  421.11 ms per token,     2.37 tokens per second)
0.09.818.823 I llama_perf_context_print:       total time =    8481.68 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m4.260s
user	3m28.931s
sys	0m9.652s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4002 (85679d37)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199017.23 ms
main:    total time = 199017.23 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 4002 (85679d37) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.002.780 I main: load the model and apply lora adapter, if any
0.00.025.536 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.545 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.640 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.652 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.654 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.659 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.663 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.664 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.665 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.666 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.667 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.674 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.675 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.676 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.677 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.679 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.668 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.368 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.243 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.250 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.251 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.253 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.254 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.255 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.256 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.260 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.261 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.262 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.263 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.264 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.273 I llama_model_loader: - type  f32:   37 tensors
0.00.265.275 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.276 I llama_model_loader: - type q6_K:   19 tensors
0.00.447.626 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.507.810 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.508.846 I llm_load_vocab: special tokens cache size = 5
0.00.604.692 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.764 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.765 I llm_load_print_meta: arch             = gemma
0.00.604.766 I llm_load_print_meta: vocab type       = SPM
0.00.604.767 I llm_load_print_meta: n_vocab          = 256000
0.00.604.769 I llm_load_print_meta: n_merges         = 0
0.00.604.770 I llm_load_print_meta: vocab_only       = 0
0.00.604.770 I llm_load_print_meta: n_ctx_train      = 8192
0.00.604.778 I llm_load_print_meta: n_embd           = 2048
0.00.604.779 I llm_load_print_meta: n_layer          = 18
0.00.604.845 I llm_load_print_meta: n_head           = 8
0.00.604.852 I llm_load_print_meta: n_head_kv        = 1
0.00.604.853 I llm_load_print_meta: n_rot            = 256
0.00.604.854 I llm_load_print_meta: n_swa            = 0
0.00.604.854 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.855 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.860 I llm_load_print_meta: n_gqa            = 8
0.00.604.865 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.870 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.871 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.873 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.873 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.874 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.874 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.884 I llm_load_print_meta: n_ff             = 16384
0.00.604.884 I llm_load_print_meta: n_expert         = 0
0.00.604.885 I llm_load_print_meta: n_expert_used    = 0
0.00.604.886 I llm_load_print_meta: causal attn      = 1
0.00.604.886 I llm_load_print_meta: pooling type     = 0
0.00.604.887 I llm_load_print_meta: rope type        = 2
0.00.604.887 I llm_load_print_meta: rope scaling     = linear
0.00.604.892 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.892 I llm_load_print_meta: freq_scale_train = 1
0.00.604.893 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.893 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.893 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.894 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.894 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.894 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.895 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.896 I llm_load_print_meta: model type       = 2B
0.00.604.896 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.604.897 I llm_load_print_meta: model params     = 2.51 B
0.00.604.898 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.604.899 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.899 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.901 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.901 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.911 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.912 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.912 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.918 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.920 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.920 I llm_load_print_meta: max token length = 93
0.00.669.261 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.669.268 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.669.269 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.669.270 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.669.271 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.669.271 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.675.051 I llama_new_context_with_model: n_ctx      = 8192
0.00.675.058 I llama_new_context_with_model: n_batch    = 2048
0.00.675.059 I llama_new_context_with_model: n_ubatch   = 512
0.00.675.059 I llama_new_context_with_model: flash_attn = 0
0.00.675.061 I llama_new_context_with_model: freq_base  = 10000.0
0.00.675.062 I llama_new_context_with_model: freq_scale = 1
0.00.704.327 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.704.366 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.704.491 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.706.967 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.706.971 I llama_new_context_with_model: graph nodes  = 601
0.00.706.971 I llama_new_context_with_model: graph splits = 1
0.00.706.988 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.286.402 I main: llama threadpool init, n_threads = 4
0.01.286.415 I 
0.01.286.523 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.286.527 I 
0.01.286.755 I sampler seed: 3022910122
0.01.286.769 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.286.776 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.286.780 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.286.780 I 
 squaIORE, a leading provider of data analytics and business intelligence solutions, today announced the launch of its latest innovation - AI-powered predictive analytics.

**

0.12.097.913 I llama_perf_sampler_print:    sampling time =      48.10 ms /    33 runs   (    1.46 ms per token,   686.13 tokens per second)
0.12.097.916 I llama_perf_context_print:        load time =    1283.53 ms
0.12.097.918 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.097.920 I llama_perf_context_print:        eval time =   10718.19 ms /    32 runs   (  334.94 ms per token,     2.99 tokens per second)
0.12.097.921 I llama_perf_context_print:       total time =   10811.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4002 (85679d37)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199034.66 ms
main:    total time = 199034.66 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.665 I build: 4002 (85679d37) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.870 I main: llama backend init
0.00.002.828 I main: load the model and apply lora adapter, if any
0.00.025.579 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.784 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.801 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.805 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.810 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.812 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.813 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.814 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.817 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.818 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.825 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.826 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.828 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.829 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.832 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.767 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.025 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.125 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.132 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.133 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.134 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.136 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.137 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.138 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.141 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.142 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.150 I llama_model_loader: - type  f32:   37 tensors
0.00.266.152 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.153 I llama_model_loader: - type q6_K:   19 tensors
0.00.444.390 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.169 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.069 I llm_load_vocab: special tokens cache size = 5
0.00.600.621 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.600.690 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.600.691 I llm_load_print_meta: arch             = gemma
0.00.600.692 I llm_load_print_meta: vocab type       = SPM
0.00.600.692 I llm_load_print_meta: n_vocab          = 256000
0.00.600.695 I llm_load_print_meta: n_merges         = 0
0.00.600.696 I llm_load_print_meta: vocab_only       = 0
0.00.600.696 I llm_load_print_meta: n_ctx_train      = 8192
0.00.600.705 I llm_load_print_meta: n_embd           = 2048
0.00.600.706 I llm_load_print_meta: n_layer          = 18
0.00.600.770 I llm_load_print_meta: n_head           = 8
0.00.600.777 I llm_load_print_meta: n_head_kv        = 1
0.00.600.778 I llm_load_print_meta: n_rot            = 256
0.00.600.778 I llm_load_print_meta: n_swa            = 0
0.00.600.779 I llm_load_print_meta: n_embd_head_k    = 256
0.00.600.779 I llm_load_print_meta: n_embd_head_v    = 256
0.00.600.784 I llm_load_print_meta: n_gqa            = 8
0.00.600.788 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.600.793 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.600.795 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.600.809 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.600.810 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.600.811 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.600.811 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.600.816 I llm_load_print_meta: n_ff             = 16384
0.00.600.817 I llm_load_print_meta: n_expert         = 0
0.00.600.817 I llm_load_print_meta: n_expert_used    = 0
0.00.600.818 I llm_load_print_meta: causal attn      = 1
0.00.600.818 I llm_load_print_meta: pooling type     = 0
0.00.600.818 I llm_load_print_meta: rope type        = 2
0.00.600.819 I llm_load_print_meta: rope scaling     = linear
0.00.600.820 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.600.821 I llm_load_print_meta: freq_scale_train = 1
0.00.600.821 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.600.822 I llm_load_print_meta: rope_finetuned   = unknown
0.00.600.822 I llm_load_print_meta: ssm_d_conv       = 0
0.00.600.822 I llm_load_print_meta: ssm_d_inner      = 0
0.00.600.823 I llm_load_print_meta: ssm_d_state      = 0
0.00.600.823 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.600.836 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.600.837 I llm_load_print_meta: model type       = 2B
0.00.600.839 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.600.839 I llm_load_print_meta: model params     = 2.51 B
0.00.600.840 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.600.840 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.600.841 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.600.841 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.600.842 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.600.842 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.600.850 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.600.851 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.600.857 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.600.858 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.600.859 I llm_load_print_meta: max token length = 93
0.00.663.706 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.669.452 I llama_new_context_with_model: n_ctx      = 8192
0.00.669.459 I llama_new_context_with_model: n_batch    = 2048
0.00.669.459 I llama_new_context_with_model: n_ubatch   = 512
0.00.669.460 I llama_new_context_with_model: flash_attn = 0
0.00.669.463 I llama_new_context_with_model: freq_base  = 10000.0
0.00.669.463 I llama_new_context_with_model: freq_scale = 1
0.00.700.047 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.700.087 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.700.215 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.702.796 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.702.800 I llama_new_context_with_model: graph nodes  = 601
0.00.702.800 I llama_new_context_with_model: graph splits = 1
0.00.702.816 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.277.386 I main: llama threadpool init, n_threads = 4
0.01.277.399 I 
0.01.277.506 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.277.510 I 
0.01.277.756 I sampler seed: 526557008
0.01.277.769 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.277.775 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.277.777 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.277.777 I 
 maneutruing, and the historical development of the concept of a scientific revolution.

## Scientific Revolution: Historical Development and Key Concepts

The scientific revolution was a

0.12.142.150 I llama_perf_sampler_print:    sampling time =      48.32 ms /    33 runs   (    1.46 ms per token,   682.93 tokens per second)
0.12.142.154 I llama_perf_context_print:        load time =    1274.44 ms
0.12.142.173 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.142.175 I llama_perf_context_print:        eval time =   10770.69 ms /    32 runs   (  336.58 ms per token,     2.97 tokens per second)
0.12.142.176 I llama_perf_context_print:       total time =   10864.77 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.221s
user	50m7.004s
sys	0m6.421s
