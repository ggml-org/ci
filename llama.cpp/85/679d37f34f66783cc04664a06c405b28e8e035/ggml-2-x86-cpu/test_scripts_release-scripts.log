+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.529 I build: 4002 (85679d37) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.728 I main: llama backend init
0.00.001.804 I main: load the model and apply lora adapter, if any
0.00.022.558 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.566 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.574 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.583 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.587 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.590 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.591 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.592 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.592 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.593 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.594 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.598 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.598 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.599 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.599 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.600 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.908 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.813 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.145 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.153 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.154 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.154 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.155 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.156 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.156 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.159 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.161 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.162 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.162 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.134.163 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.167 I llama_model_loader: - type  f32:   37 tensors
0.00.134.168 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.599 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.721 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.285 I llm_load_vocab: special tokens cache size = 5
0.00.269.324 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.341 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.342 I llm_load_print_meta: arch             = gemma
0.00.269.343 I llm_load_print_meta: vocab type       = SPM
0.00.269.344 I llm_load_print_meta: n_vocab          = 256000
0.00.269.344 I llm_load_print_meta: n_merges         = 0
0.00.269.344 I llm_load_print_meta: vocab_only       = 0
0.00.269.345 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.345 I llm_load_print_meta: n_embd           = 2048
0.00.269.345 I llm_load_print_meta: n_layer          = 18
0.00.269.357 I llm_load_print_meta: n_head           = 8
0.00.269.358 I llm_load_print_meta: n_head_kv        = 1
0.00.269.358 I llm_load_print_meta: n_rot            = 256
0.00.269.359 I llm_load_print_meta: n_swa            = 0
0.00.269.359 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.359 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.360 I llm_load_print_meta: n_gqa            = 8
0.00.269.361 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.362 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.363 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.365 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.365 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.365 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.366 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.366 I llm_load_print_meta: n_ff             = 16384
0.00.269.367 I llm_load_print_meta: n_expert         = 0
0.00.269.367 I llm_load_print_meta: n_expert_used    = 0
0.00.269.368 I llm_load_print_meta: causal attn      = 1
0.00.269.368 I llm_load_print_meta: pooling type     = 0
0.00.269.368 I llm_load_print_meta: rope type        = 2
0.00.269.369 I llm_load_print_meta: rope scaling     = linear
0.00.269.370 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.371 I llm_load_print_meta: freq_scale_train = 1
0.00.269.371 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.372 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.372 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.372 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.372 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.373 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.373 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.373 I llm_load_print_meta: model type       = 2B
0.00.269.374 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.375 I llm_load_print_meta: model params     = 2.51 B
0.00.269.375 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.376 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.376 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.377 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.377 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.377 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.378 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.378 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.378 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.379 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.379 I llm_load_print_meta: max token length = 93
0.00.377.612 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.377.620 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.377.621 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.377.622 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.377.622 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.377.623 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.382.895 I llama_new_context_with_model: n_ctx      = 8192
0.00.382.901 I llama_new_context_with_model: n_batch    = 2048
0.00.382.901 I llama_new_context_with_model: n_ubatch   = 512
0.00.382.902 I llama_new_context_with_model: flash_attn = 0
0.00.382.904 I llama_new_context_with_model: freq_base  = 10000.0
0.00.382.905 I llama_new_context_with_model: freq_scale = 1
0.00.411.401 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.411.417 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.411.507 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.412.768 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.412.774 I llama_new_context_with_model: graph nodes  = 601
0.00.412.775 I llama_new_context_with_model: graph splits = 1
0.00.412.776 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.505.145 I main: llama threadpool init, n_threads = 4
0.00.505.158 I 
0.00.505.235 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.505.238 I 
0.00.505.282 I sampler seed: 3010974061
0.00.505.293 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.505.296 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.505.296 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.505.299 I 
 increably, and then paused.

I pondered, "What does it mean to be alive?"

My reflection stared back at me, enigmatic and distant.

0.02.811.829 I llama_perf_sampler_print:    sampling time =       4.94 ms /    33 runs   (    0.15 ms per token,  6686.93 tokens per second)
0.02.811.833 I llama_perf_context_print:        load time =     503.32 ms
0.02.811.834 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.811.836 I llama_perf_context_print:        eval time =    2285.99 ms /    32 runs   (   71.44 ms per token,    14.00 tokens per second)
0.02.811.838 I llama_perf_context_print:       total time =    2306.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.546 I build: 4002 (85679d37) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.773 I main: llama backend init
0.00.001.848 I main: load the model and apply lora adapter, if any
0.00.022.360 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.376 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.382 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.383 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.387 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.388 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.389 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.389 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.390 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.390 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.395 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.396 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.396 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.397 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.397 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.183 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.682 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.490 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.496 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.497 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.497 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.498 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.499 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.500 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.502 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.503 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.503 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.504 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.505 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.507 I llama_model_loader: - type  f32:   37 tensors
0.00.132.508 I llama_model_loader: - type q8_0:  127 tensors
0.00.215.766 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.328 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.827 I llm_load_vocab: special tokens cache size = 5
0.00.282.689 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.704 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.705 I llm_load_print_meta: arch             = gemma
0.00.282.705 I llm_load_print_meta: vocab type       = SPM
0.00.282.706 I llm_load_print_meta: n_vocab          = 256000
0.00.282.706 I llm_load_print_meta: n_merges         = 0
0.00.282.707 I llm_load_print_meta: vocab_only       = 0
0.00.282.707 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.707 I llm_load_print_meta: n_embd           = 2048
0.00.282.708 I llm_load_print_meta: n_layer          = 18
0.00.282.719 I llm_load_print_meta: n_head           = 8
0.00.282.720 I llm_load_print_meta: n_head_kv        = 1
0.00.282.721 I llm_load_print_meta: n_rot            = 256
0.00.282.721 I llm_load_print_meta: n_swa            = 0
0.00.282.722 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.722 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.723 I llm_load_print_meta: n_gqa            = 8
0.00.282.724 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.725 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.726 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.727 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.727 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.728 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.728 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.729 I llm_load_print_meta: n_ff             = 16384
0.00.282.729 I llm_load_print_meta: n_expert         = 0
0.00.282.729 I llm_load_print_meta: n_expert_used    = 0
0.00.282.730 I llm_load_print_meta: causal attn      = 1
0.00.282.730 I llm_load_print_meta: pooling type     = 0
0.00.282.731 I llm_load_print_meta: rope type        = 2
0.00.282.731 I llm_load_print_meta: rope scaling     = linear
0.00.282.732 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.733 I llm_load_print_meta: freq_scale_train = 1
0.00.282.733 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.734 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.734 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.734 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.735 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.735 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.735 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.736 I llm_load_print_meta: model type       = 2B
0.00.282.736 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.737 I llm_load_print_meta: model params     = 2.51 B
0.00.282.738 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.738 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.739 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.739 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.739 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.740 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.740 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.740 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.741 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.741 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.741 I llm_load_print_meta: max token length = 93
0.00.382.109 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.388.451 I llama_new_context_with_model: n_ctx      = 8192
0.00.388.456 I llama_new_context_with_model: n_batch    = 2048
0.00.388.457 I llama_new_context_with_model: n_ubatch   = 512
0.00.388.457 I llama_new_context_with_model: flash_attn = 0
0.00.388.459 I llama_new_context_with_model: freq_base  = 10000.0
0.00.388.460 I llama_new_context_with_model: freq_scale = 1
0.00.416.885 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.416.901 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.416.991 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.418.223 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.418.230 I llama_new_context_with_model: graph nodes  = 601
0.00.418.230 I llama_new_context_with_model: graph splits = 1
0.00.418.232 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.506.590 I main: llama threadpool init, n_threads = 4
0.00.506.604 I 
0.00.506.681 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.506.684 I 
0.00.506.729 I sampler seed: 3898447627
0.00.506.740 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.506.743 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.506.743 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.506.744 I 
 maneupher.

I'm not able to provide sexually suggestive or inappropriate content. [end of text]


0.01.764.949 I llama_perf_sampler_print:    sampling time =       2.68 ms /    19 runs   (    0.14 ms per token,  7092.20 tokens per second)
0.01.764.951 I llama_perf_context_print:        load time =     504.72 ms
0.01.764.952 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.764.954 I llama_perf_context_print:        eval time =    1246.64 ms /    18 runs   (   69.26 ms per token,    14.44 tokens per second)
0.01.764.955 I llama_perf_context_print:       total time =    1258.37 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.612 I build: 4002 (85679d37) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.835 I main: llama backend init
0.00.001.981 I main: load the model and apply lora adapter, if any
0.00.022.391 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.401 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.409 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.415 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.416 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.419 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.420 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.421 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.421 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.423 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.423 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.428 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.428 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.429 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.430 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.431 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.877 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.408 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.263 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.270 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.271 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.271 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.272 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.273 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.274 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.277 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.278 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.279 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.280 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.281 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.285 I llama_model_loader: - type  f32:   37 tensors
0.00.132.287 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.240 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.742 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.307 I llm_load_vocab: special tokens cache size = 5
0.00.268.419 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.435 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.436 I llm_load_print_meta: arch             = gemma
0.00.268.436 I llm_load_print_meta: vocab type       = SPM
0.00.268.437 I llm_load_print_meta: n_vocab          = 256000
0.00.268.437 I llm_load_print_meta: n_merges         = 0
0.00.268.438 I llm_load_print_meta: vocab_only       = 0
0.00.268.438 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.438 I llm_load_print_meta: n_embd           = 2048
0.00.268.439 I llm_load_print_meta: n_layer          = 18
0.00.268.450 I llm_load_print_meta: n_head           = 8
0.00.268.451 I llm_load_print_meta: n_head_kv        = 1
0.00.268.451 I llm_load_print_meta: n_rot            = 256
0.00.268.452 I llm_load_print_meta: n_swa            = 0
0.00.268.452 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.452 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.453 I llm_load_print_meta: n_gqa            = 8
0.00.268.454 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.455 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.456 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.457 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.457 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.458 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.458 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.459 I llm_load_print_meta: n_ff             = 16384
0.00.268.459 I llm_load_print_meta: n_expert         = 0
0.00.268.459 I llm_load_print_meta: n_expert_used    = 0
0.00.268.460 I llm_load_print_meta: causal attn      = 1
0.00.268.460 I llm_load_print_meta: pooling type     = 0
0.00.268.460 I llm_load_print_meta: rope type        = 2
0.00.268.461 I llm_load_print_meta: rope scaling     = linear
0.00.268.462 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.462 I llm_load_print_meta: freq_scale_train = 1
0.00.268.463 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.463 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.464 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.464 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.464 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.465 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.465 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.465 I llm_load_print_meta: model type       = 2B
0.00.268.466 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.467 I llm_load_print_meta: model params     = 2.51 B
0.00.268.467 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.468 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.468 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.469 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.469 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.469 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.470 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.470 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.470 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.471 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.471 I llm_load_print_meta: max token length = 93
0.00.363.727 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.363.736 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.363.736 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.363.737 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.363.737 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.363.738 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.369.105 I llama_new_context_with_model: n_ctx      = 8192
0.00.369.112 I llama_new_context_with_model: n_batch    = 2048
0.00.369.113 I llama_new_context_with_model: n_ubatch   = 512
0.00.369.113 I llama_new_context_with_model: flash_attn = 0
0.00.369.116 I llama_new_context_with_model: freq_base  = 10000.0
0.00.369.117 I llama_new_context_with_model: freq_scale = 1
0.00.398.711 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.398.727 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.398.833 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.400.137 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.400.142 I llama_new_context_with_model: graph nodes  = 601
0.00.400.142 I llama_new_context_with_model: graph splits = 1
0.00.400.144 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.491.681 I main: llama threadpool init, n_threads = 4
0.00.491.696 I 
0.00.491.793 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.491.797 I 
0.00.491.853 I sampler seed: 3492541591
0.00.491.864 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.491.866 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.491.867 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.491.867 I 
 increably!

I cannot access the text you are referring to. Please provide me with the text so that I can assist you. [end of text]


0.02.402.403 I llama_perf_sampler_print:    sampling time =       4.19 ms /    29 runs   (    0.14 ms per token,  6924.55 tokens per second)
0.02.402.405 I llama_perf_context_print:        load time =     489.68 ms
0.02.402.406 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.402.407 I llama_perf_context_print:        eval time =    1892.94 ms /    28 runs   (   67.61 ms per token,    14.79 tokens per second)
0.02.402.408 I llama_perf_context_print:       total time =    1910.73 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.539 I build: 4002 (85679d37) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.734 I main: llama backend init
0.00.001.796 I main: load the model and apply lora adapter, if any
0.00.022.364 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.375 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.383 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.389 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.389 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.396 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.397 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.398 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.399 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.399 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.400 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.404 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.405 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.405 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.406 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.407 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.371 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.965 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.812 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.818 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.819 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.820 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.821 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.822 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.822 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.824 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.825 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.826 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.827 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.828 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.831 I llama_model_loader: - type  f32:   37 tensors
0.00.132.832 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.683 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.794 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.371 I llm_load_vocab: special tokens cache size = 5
0.00.266.361 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.377 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.378 I llm_load_print_meta: arch             = gemma
0.00.266.378 I llm_load_print_meta: vocab type       = SPM
0.00.266.379 I llm_load_print_meta: n_vocab          = 256000
0.00.266.379 I llm_load_print_meta: n_merges         = 0
0.00.266.380 I llm_load_print_meta: vocab_only       = 0
0.00.266.380 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.380 I llm_load_print_meta: n_embd           = 2048
0.00.266.381 I llm_load_print_meta: n_layer          = 18
0.00.266.391 I llm_load_print_meta: n_head           = 8
0.00.266.392 I llm_load_print_meta: n_head_kv        = 1
0.00.266.393 I llm_load_print_meta: n_rot            = 256
0.00.266.393 I llm_load_print_meta: n_swa            = 0
0.00.266.393 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.393 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.394 I llm_load_print_meta: n_gqa            = 8
0.00.266.395 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.396 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.397 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.398 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.399 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.399 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.399 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.400 I llm_load_print_meta: n_ff             = 16384
0.00.266.400 I llm_load_print_meta: n_expert         = 0
0.00.266.401 I llm_load_print_meta: n_expert_used    = 0
0.00.266.401 I llm_load_print_meta: causal attn      = 1
0.00.266.401 I llm_load_print_meta: pooling type     = 0
0.00.266.402 I llm_load_print_meta: rope type        = 2
0.00.266.402 I llm_load_print_meta: rope scaling     = linear
0.00.266.404 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.405 I llm_load_print_meta: freq_scale_train = 1
0.00.266.405 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.406 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.406 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.406 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.406 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.406 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.407 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.407 I llm_load_print_meta: model type       = 2B
0.00.266.408 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.409 I llm_load_print_meta: model params     = 2.51 B
0.00.266.409 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.410 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.410 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.411 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.411 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.411 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.412 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.412 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.412 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.413 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.413 I llm_load_print_meta: max token length = 93
0.00.350.504 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.350.510 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.355.695 I llama_new_context_with_model: n_ctx      = 8192
0.00.355.701 I llama_new_context_with_model: n_batch    = 2048
0.00.355.702 I llama_new_context_with_model: n_ubatch   = 512
0.00.355.702 I llama_new_context_with_model: flash_attn = 0
0.00.355.704 I llama_new_context_with_model: freq_base  = 10000.0
0.00.355.705 I llama_new_context_with_model: freq_scale = 1
0.00.385.515 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.385.528 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.385.625 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.842 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.386.848 I llama_new_context_with_model: graph nodes  = 601
0.00.386.849 I llama_new_context_with_model: graph splits = 1
0.00.386.851 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.476.920 I main: llama threadpool init, n_threads = 4
0.00.476.931 I 
0.00.477.004 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.477.007 I 
0.00.477.052 I sampler seed: 954794273
0.00.477.064 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.067 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.477.067 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.477.068 I 
 increasively, engulfing the entire world in its insatiable hunger. [end of text]


0.01.449.512 I llama_perf_sampler_print:    sampling time =       2.28 ms /    15 runs   (    0.15 ms per token,  6567.43 tokens per second)
0.01.449.514 I llama_perf_context_print:        load time =     475.10 ms
0.01.449.516 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.449.517 I llama_perf_context_print:        eval time =     962.93 ms /    14 runs   (   68.78 ms per token,    14.54 tokens per second)
0.01.449.518 I llama_perf_context_print:       total time =     972.60 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.141s
user	0m28.567s
sys	0m9.741s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4002 (85679d37)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32012.81 ms
main:    total time = 32012.81 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.518 I build: 4002 (85679d37) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.722 I main: llama backend init
0.00.001.817 I main: load the model and apply lora adapter, if any
0.00.022.558 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.568 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.576 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.585 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.589 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.593 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.594 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.594 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.596 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.596 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.597 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.600 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.601 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.601 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.602 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.603 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.531 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.383 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.197 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.204 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.205 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.205 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.206 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.207 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.209 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.212 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.213 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.214 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.215 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.216 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.219 I llama_model_loader: - type  f32:   37 tensors
0.00.133.220 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.221 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.261 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.671 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.232 I llm_load_vocab: special tokens cache size = 5
0.00.266.020 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.035 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.036 I llm_load_print_meta: arch             = gemma
0.00.266.036 I llm_load_print_meta: vocab type       = SPM
0.00.266.037 I llm_load_print_meta: n_vocab          = 256000
0.00.266.037 I llm_load_print_meta: n_merges         = 0
0.00.266.038 I llm_load_print_meta: vocab_only       = 0
0.00.266.038 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.038 I llm_load_print_meta: n_embd           = 2048
0.00.266.038 I llm_load_print_meta: n_layer          = 18
0.00.266.049 I llm_load_print_meta: n_head           = 8
0.00.266.050 I llm_load_print_meta: n_head_kv        = 1
0.00.266.050 I llm_load_print_meta: n_rot            = 256
0.00.266.050 I llm_load_print_meta: n_swa            = 0
0.00.266.051 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.051 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.052 I llm_load_print_meta: n_gqa            = 8
0.00.266.053 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.054 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.055 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.056 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.057 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.057 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.057 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.058 I llm_load_print_meta: n_ff             = 16384
0.00.266.058 I llm_load_print_meta: n_expert         = 0
0.00.266.059 I llm_load_print_meta: n_expert_used    = 0
0.00.266.059 I llm_load_print_meta: causal attn      = 1
0.00.266.059 I llm_load_print_meta: pooling type     = 0
0.00.266.060 I llm_load_print_meta: rope type        = 2
0.00.266.060 I llm_load_print_meta: rope scaling     = linear
0.00.266.061 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.062 I llm_load_print_meta: freq_scale_train = 1
0.00.266.062 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.063 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.063 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.063 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.063 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.064 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.065 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.065 I llm_load_print_meta: model type       = 2B
0.00.266.065 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.066 I llm_load_print_meta: model params     = 2.51 B
0.00.266.067 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.067 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.068 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.068 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.068 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.069 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.069 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.069 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.069 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.070 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.070 I llm_load_print_meta: max token length = 93
0.00.329.009 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.329.015 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.329.016 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.329.017 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.329.017 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.329.018 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.334.529 I llama_new_context_with_model: n_ctx      = 8192
0.00.334.536 I llama_new_context_with_model: n_batch    = 2048
0.00.334.536 I llama_new_context_with_model: n_ubatch   = 512
0.00.334.537 I llama_new_context_with_model: flash_attn = 0
0.00.334.539 I llama_new_context_with_model: freq_base  = 10000.0
0.00.334.539 I llama_new_context_with_model: freq_scale = 1
0.00.363.715 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.363.729 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.363.819 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.365.056 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.365.062 I llama_new_context_with_model: graph nodes  = 601
0.00.365.063 I llama_new_context_with_model: graph splits = 1
0.00.365.065 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.448.345 I main: llama threadpool init, n_threads = 4
0.00.448.358 I 
0.00.448.432 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.448.436 I 
0.00.448.477 I sampler seed: 2695326999
0.00.448.489 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.448.492 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.448.493 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.448.493 I 
 increasities can occur due to various factors, including:

- **Poor nutrition:** Inadequate intake of essential nutrients can disrupt hormonal balance and contribute to increased cortisol levels

0.02.126.518 I llama_perf_sampler_print:    sampling time =       4.95 ms /    33 runs   (    0.15 ms per token,  6663.97 tokens per second)
0.02.126.521 I llama_perf_context_print:        load time =     446.50 ms
0.02.126.522 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.126.523 I llama_perf_context_print:        eval time =    1657.91 ms /    32 runs   (   51.81 ms per token,    19.30 tokens per second)
0.02.126.524 I llama_perf_context_print:       total time =    1678.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4002 (85679d37)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32140.52 ms
main:    total time = 32140.52 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.581 I build: 4002 (85679d37) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.800 I main: llama backend init
0.00.001.918 I main: load the model and apply lora adapter, if any
0.00.022.762 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.779 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.787 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.788 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.793 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.797 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.798 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.799 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.800 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.801 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.806 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.807 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.808 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.808 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.809 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.133 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.356 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.219 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.226 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.226 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.227 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.227 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.228 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.229 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.231 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.232 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.235 I llama_model_loader: - type  f32:   37 tensors
0.00.132.237 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.237 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.408 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.156 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.658 I llm_load_vocab: special tokens cache size = 5
0.00.267.539 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.557 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.557 I llm_load_print_meta: arch             = gemma
0.00.267.558 I llm_load_print_meta: vocab type       = SPM
0.00.267.559 I llm_load_print_meta: n_vocab          = 256000
0.00.267.559 I llm_load_print_meta: n_merges         = 0
0.00.267.559 I llm_load_print_meta: vocab_only       = 0
0.00.267.560 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.560 I llm_load_print_meta: n_embd           = 2048
0.00.267.561 I llm_load_print_meta: n_layer          = 18
0.00.267.573 I llm_load_print_meta: n_head           = 8
0.00.267.576 I llm_load_print_meta: n_head_kv        = 1
0.00.267.576 I llm_load_print_meta: n_rot            = 256
0.00.267.577 I llm_load_print_meta: n_swa            = 0
0.00.267.577 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.578 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.579 I llm_load_print_meta: n_gqa            = 8
0.00.267.581 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.583 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.584 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.586 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.587 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.587 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.588 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.589 I llm_load_print_meta: n_ff             = 16384
0.00.267.590 I llm_load_print_meta: n_expert         = 0
0.00.267.590 I llm_load_print_meta: n_expert_used    = 0
0.00.267.594 I llm_load_print_meta: causal attn      = 1
0.00.267.594 I llm_load_print_meta: pooling type     = 0
0.00.267.595 I llm_load_print_meta: rope type        = 2
0.00.267.595 I llm_load_print_meta: rope scaling     = linear
0.00.267.597 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.598 I llm_load_print_meta: freq_scale_train = 1
0.00.267.599 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.599 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.600 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.600 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.600 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.601 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.601 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.602 I llm_load_print_meta: model type       = 2B
0.00.267.603 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.604 I llm_load_print_meta: model params     = 2.51 B
0.00.267.606 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.607 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.607 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.608 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.609 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.609 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.610 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.610 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.611 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.612 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.612 I llm_load_print_meta: max token length = 93
0.00.470.094 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.475.300 I llama_new_context_with_model: n_ctx      = 8192
0.00.475.307 I llama_new_context_with_model: n_batch    = 2048
0.00.475.308 I llama_new_context_with_model: n_ubatch   = 512
0.00.475.308 I llama_new_context_with_model: flash_attn = 0
0.00.475.310 I llama_new_context_with_model: freq_base  = 10000.0
0.00.475.311 I llama_new_context_with_model: freq_scale = 1
0.00.504.887 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.504.901 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.504.994 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.506.282 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.506.286 I llama_new_context_with_model: graph nodes  = 601
0.00.506.287 I llama_new_context_with_model: graph splits = 1
0.00.506.288 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.589.567 I main: llama threadpool init, n_threads = 4
0.00.589.580 I 
0.00.589.668 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.589.672 I 
0.00.589.721 I sampler seed: 2053969708
0.00.589.732 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.589.735 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.589.736 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.589.737 I 
 squaRED, the leading AI-powered music generator, has entered the music industry as a revolutionary force. Its innovative algorithms analyze vast datasets of music, enabling it

0.02.251.323 I llama_perf_sampler_print:    sampling time =       4.78 ms /    33 runs   (    0.14 ms per token,  6906.66 tokens per second)
0.02.251.326 I llama_perf_context_print:        load time =     587.62 ms
0.02.251.327 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.251.330 I llama_perf_context_print:        eval time =    1641.56 ms /    32 runs   (   51.30 ms per token,    19.49 tokens per second)
0.02.251.330 I llama_perf_context_print:       total time =    1661.77 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.678s
user	8m14.726s
sys	0m6.925s
