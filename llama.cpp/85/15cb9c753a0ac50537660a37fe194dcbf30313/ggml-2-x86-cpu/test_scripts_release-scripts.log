+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.633 I build: 4017 (8515cb9c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.821 I main: llama backend init
0.00.000.960 I main: load the model and apply lora adapter, if any
0.00.021.720 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.733 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.740 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.746 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.747 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.751 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.751 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.752 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.753 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.754 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.754 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.759 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.759 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.760 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.761 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.761 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.065 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.936 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.744 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.750 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.751 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.751 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.752 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.753 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.753 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.757 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.758 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.759 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.759 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.760 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.764 I llama_model_loader: - type  f32:   37 tensors
0.00.131.765 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.321 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.818 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.373 I llm_load_vocab: special tokens cache size = 5
0.00.264.105 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.122 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.122 I llm_load_print_meta: arch             = gemma
0.00.264.123 I llm_load_print_meta: vocab type       = SPM
0.00.264.124 I llm_load_print_meta: n_vocab          = 256000
0.00.264.124 I llm_load_print_meta: n_merges         = 0
0.00.264.125 I llm_load_print_meta: vocab_only       = 0
0.00.264.125 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.125 I llm_load_print_meta: n_embd           = 2048
0.00.264.126 I llm_load_print_meta: n_layer          = 18
0.00.264.137 I llm_load_print_meta: n_head           = 8
0.00.264.138 I llm_load_print_meta: n_head_kv        = 1
0.00.264.138 I llm_load_print_meta: n_rot            = 256
0.00.264.139 I llm_load_print_meta: n_swa            = 0
0.00.264.139 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.139 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.140 I llm_load_print_meta: n_gqa            = 8
0.00.264.141 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.142 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.143 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.144 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.144 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.145 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.145 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.146 I llm_load_print_meta: n_ff             = 16384
0.00.264.146 I llm_load_print_meta: n_expert         = 0
0.00.264.146 I llm_load_print_meta: n_expert_used    = 0
0.00.264.147 I llm_load_print_meta: causal attn      = 1
0.00.264.147 I llm_load_print_meta: pooling type     = 0
0.00.264.147 I llm_load_print_meta: rope type        = 2
0.00.264.148 I llm_load_print_meta: rope scaling     = linear
0.00.264.149 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.150 I llm_load_print_meta: freq_scale_train = 1
0.00.264.150 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.151 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.151 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.151 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.151 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.151 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.152 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.153 I llm_load_print_meta: model type       = 2B
0.00.264.153 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.154 I llm_load_print_meta: model params     = 2.51 B
0.00.264.155 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.155 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.156 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.156 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.157 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.157 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.157 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.157 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.158 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.158 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.158 I llm_load_print_meta: max token length = 93
0.00.368.299 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.368.307 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.368.308 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.368.309 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.368.309 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.368.310 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.373.600 I llama_new_context_with_model: n_seq_max     = 1
0.00.373.607 I llama_new_context_with_model: n_ctx         = 4096
0.00.373.608 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.373.608 I llama_new_context_with_model: n_batch       = 2048
0.00.373.609 I llama_new_context_with_model: n_ubatch      = 512
0.00.373.609 I llama_new_context_with_model: flash_attn    = 0
0.00.373.612 I llama_new_context_with_model: freq_base     = 10000.0
0.00.373.613 I llama_new_context_with_model: freq_scale    = 1
0.00.373.614 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.389.203 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.389.216 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.308 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.556 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.390.562 I llama_new_context_with_model: graph nodes  = 601
0.00.390.562 I llama_new_context_with_model: graph splits = 1
0.00.390.564 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.476.192 I main: llama threadpool init, n_threads = 4
0.00.476.206 I 
0.00.476.284 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.476.288 I 
0.00.476.329 I sampler seed: 1111031231
0.00.476.341 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.476.349 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.476.350 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.476.350 I 
 increadibly complex problem. [end of text]


0.00.902.785 I llama_perf_sampler_print:    sampling time =       0.94 ms /     7 runs   (    0.13 ms per token,  7454.74 tokens per second)
0.00.902.788 I llama_perf_context_print:        load time =     475.21 ms
0.00.902.789 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.902.791 I llama_perf_context_print:        eval time =     422.27 ms /     6 runs   (   70.38 ms per token,    14.21 tokens per second)
0.00.902.793 I llama_perf_context_print:       total time =     426.60 ms /     7 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.570 I build: 4017 (8515cb9c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.783 I main: llama backend init
0.00.000.950 I main: load the model and apply lora adapter, if any
0.00.021.537 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.550 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.557 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.558 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.564 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.565 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.566 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.567 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.567 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.568 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.572 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.572 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.573 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.574 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.574 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.058 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.493 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.309 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.315 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.316 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.316 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.317 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.318 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.319 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.321 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.322 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.322 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.323 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.324 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.328 I llama_model_loader: - type  f32:   37 tensors
0.00.131.329 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.661 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.105 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.611 I llm_load_vocab: special tokens cache size = 5
0.00.268.385 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.401 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.402 I llm_load_print_meta: arch             = gemma
0.00.268.402 I llm_load_print_meta: vocab type       = SPM
0.00.268.403 I llm_load_print_meta: n_vocab          = 256000
0.00.268.403 I llm_load_print_meta: n_merges         = 0
0.00.268.403 I llm_load_print_meta: vocab_only       = 0
0.00.268.404 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.404 I llm_load_print_meta: n_embd           = 2048
0.00.268.404 I llm_load_print_meta: n_layer          = 18
0.00.268.416 I llm_load_print_meta: n_head           = 8
0.00.268.417 I llm_load_print_meta: n_head_kv        = 1
0.00.268.418 I llm_load_print_meta: n_rot            = 256
0.00.268.418 I llm_load_print_meta: n_swa            = 0
0.00.268.418 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.418 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.419 I llm_load_print_meta: n_gqa            = 8
0.00.268.420 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.421 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.422 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.424 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.424 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.425 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.425 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.426 I llm_load_print_meta: n_ff             = 16384
0.00.268.426 I llm_load_print_meta: n_expert         = 0
0.00.268.426 I llm_load_print_meta: n_expert_used    = 0
0.00.268.427 I llm_load_print_meta: causal attn      = 1
0.00.268.427 I llm_load_print_meta: pooling type     = 0
0.00.268.427 I llm_load_print_meta: rope type        = 2
0.00.268.428 I llm_load_print_meta: rope scaling     = linear
0.00.268.429 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.430 I llm_load_print_meta: freq_scale_train = 1
0.00.268.430 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.431 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.431 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.431 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.431 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.432 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.432 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.432 I llm_load_print_meta: model type       = 2B
0.00.268.433 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.434 I llm_load_print_meta: model params     = 2.51 B
0.00.268.434 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.435 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.435 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.436 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.436 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.436 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.437 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.437 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.438 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.438 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.438 I llm_load_print_meta: max token length = 93
0.00.367.958 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.373.160 I llama_new_context_with_model: n_seq_max     = 1
0.00.373.166 I llama_new_context_with_model: n_ctx         = 4096
0.00.373.167 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.373.167 I llama_new_context_with_model: n_batch       = 2048
0.00.373.168 I llama_new_context_with_model: n_ubatch      = 512
0.00.373.168 I llama_new_context_with_model: flash_attn    = 0
0.00.373.170 I llama_new_context_with_model: freq_base     = 10000.0
0.00.373.171 I llama_new_context_with_model: freq_scale    = 1
0.00.373.172 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.389.200 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.389.216 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.311 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.555 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.390.561 I llama_new_context_with_model: graph nodes  = 601
0.00.390.561 I llama_new_context_with_model: graph splits = 1
0.00.390.562 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.652 I main: llama threadpool init, n_threads = 4
0.00.472.666 I 
0.00.472.742 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.472.746 I 
0.00.472.787 I sampler seed: 978290765
0.00.472.799 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.802 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.472.803 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.804 I 
 increasities.
I am unable to generate responses that are sexually suggestive or inappropriate in nature. Would you like me to try generating something different? [end of text]


0.02.554.432 I llama_perf_sampler_print:    sampling time =       4.57 ms /    31 runs   (    0.15 ms per token,  6780.40 tokens per second)
0.02.554.434 I llama_perf_context_print:        load time =     471.68 ms
0.02.554.435 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.554.437 I llama_perf_context_print:        eval time =    2063.59 ms /    30 runs   (   68.79 ms per token,    14.54 tokens per second)
0.02.554.438 I llama_perf_context_print:       total time =    2081.79 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.585 I build: 4017 (8515cb9c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.792 I main: llama backend init
0.00.000.930 I main: load the model and apply lora adapter, if any
0.00.021.585 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.596 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.605 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.610 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.611 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.615 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.616 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.617 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.617 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.618 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.618 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.623 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.624 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.624 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.625 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.625 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.183 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.516 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.392 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.399 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.400 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.401 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.401 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.402 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.403 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.405 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.405 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.406 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.406 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.407 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.411 I llama_model_loader: - type  f32:   37 tensors
0.00.132.412 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.574 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.110 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.705 I llm_load_vocab: special tokens cache size = 5
0.00.277.575 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.593 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.593 I llm_load_print_meta: arch             = gemma
0.00.277.594 I llm_load_print_meta: vocab type       = SPM
0.00.277.595 I llm_load_print_meta: n_vocab          = 256000
0.00.277.595 I llm_load_print_meta: n_merges         = 0
0.00.277.595 I llm_load_print_meta: vocab_only       = 0
0.00.277.596 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.596 I llm_load_print_meta: n_embd           = 2048
0.00.277.597 I llm_load_print_meta: n_layer          = 18
0.00.277.611 I llm_load_print_meta: n_head           = 8
0.00.277.612 I llm_load_print_meta: n_head_kv        = 1
0.00.277.612 I llm_load_print_meta: n_rot            = 256
0.00.277.612 I llm_load_print_meta: n_swa            = 0
0.00.277.613 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.613 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.614 I llm_load_print_meta: n_gqa            = 8
0.00.277.615 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.616 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.617 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.619 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.619 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.620 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.620 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.621 I llm_load_print_meta: n_ff             = 16384
0.00.277.621 I llm_load_print_meta: n_expert         = 0
0.00.277.622 I llm_load_print_meta: n_expert_used    = 0
0.00.277.622 I llm_load_print_meta: causal attn      = 1
0.00.277.622 I llm_load_print_meta: pooling type     = 0
0.00.277.623 I llm_load_print_meta: rope type        = 2
0.00.277.623 I llm_load_print_meta: rope scaling     = linear
0.00.277.624 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.625 I llm_load_print_meta: freq_scale_train = 1
0.00.277.625 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.626 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.626 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.626 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.626 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.627 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.627 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.628 I llm_load_print_meta: model type       = 2B
0.00.277.628 I llm_load_print_meta: model ftype      = Q8_0
0.00.277.629 I llm_load_print_meta: model params     = 2.51 B
0.00.277.630 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.631 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.631 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.632 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.632 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.632 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.633 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.633 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.633 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.634 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.634 I llm_load_print_meta: max token length = 93
0.00.373.366 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.373.374 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.373.375 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.373.376 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.373.376 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.373.377 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.378.660 I llama_new_context_with_model: n_seq_max     = 1
0.00.378.668 I llama_new_context_with_model: n_ctx         = 4096
0.00.378.669 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.378.669 I llama_new_context_with_model: n_batch       = 2048
0.00.378.670 I llama_new_context_with_model: n_ubatch      = 512
0.00.378.670 I llama_new_context_with_model: flash_attn    = 0
0.00.378.673 I llama_new_context_with_model: freq_base     = 10000.0
0.00.378.674 I llama_new_context_with_model: freq_scale    = 1
0.00.378.675 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.394.806 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.394.820 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.394.921 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.396.183 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.396.188 I llama_new_context_with_model: graph nodes  = 601
0.00.396.189 I llama_new_context_with_model: graph splits = 1
0.00.396.191 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.480.710 I main: llama threadpool init, n_threads = 4
0.00.480.727 I 
0.00.480.801 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.480.805 I 
0.00.480.846 I sampler seed: 1273294167
0.00.480.856 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.480.859 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.480.860 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.480.861 I 
 increasels in the forest, a vibrant tapestry of wildflowers and buzzing insects. [end of text]


0.01.566.780 I llama_perf_sampler_print:    sampling time =       2.44 ms /    17 runs   (    0.14 ms per token,  6961.51 tokens per second)
0.01.566.782 I llama_perf_context_print:        load time =     479.76 ms
0.01.566.783 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.566.785 I llama_perf_context_print:        eval time =    1075.71 ms /    16 runs   (   67.23 ms per token,    14.87 tokens per second)
0.01.566.785 I llama_perf_context_print:       total time =    1086.08 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.556 I build: 4017 (8515cb9c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.000.906 I main: load the model and apply lora adapter, if any
0.00.021.361 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.371 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.379 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.390 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.394 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.397 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.398 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.399 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.400 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.401 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.401 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.406 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.407 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.407 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.408 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.408 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.636 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.231 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.042 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.048 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.049 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.050 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.050 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.051 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.052 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.054 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.054 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.055 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.057 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.058 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.061 I llama_model_loader: - type  f32:   37 tensors
0.00.131.062 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.156 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.204 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.720 I llm_load_vocab: special tokens cache size = 5
0.00.263.529 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.544 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.545 I llm_load_print_meta: arch             = gemma
0.00.263.545 I llm_load_print_meta: vocab type       = SPM
0.00.263.546 I llm_load_print_meta: n_vocab          = 256000
0.00.263.546 I llm_load_print_meta: n_merges         = 0
0.00.263.546 I llm_load_print_meta: vocab_only       = 0
0.00.263.547 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.547 I llm_load_print_meta: n_embd           = 2048
0.00.263.547 I llm_load_print_meta: n_layer          = 18
0.00.263.559 I llm_load_print_meta: n_head           = 8
0.00.263.560 I llm_load_print_meta: n_head_kv        = 1
0.00.263.560 I llm_load_print_meta: n_rot            = 256
0.00.263.560 I llm_load_print_meta: n_swa            = 0
0.00.263.561 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.561 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.562 I llm_load_print_meta: n_gqa            = 8
0.00.263.563 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.564 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.565 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.567 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.567 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.568 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.568 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.569 I llm_load_print_meta: n_ff             = 16384
0.00.263.570 I llm_load_print_meta: n_expert         = 0
0.00.263.570 I llm_load_print_meta: n_expert_used    = 0
0.00.263.571 I llm_load_print_meta: causal attn      = 1
0.00.263.572 I llm_load_print_meta: pooling type     = 0
0.00.263.572 I llm_load_print_meta: rope type        = 2
0.00.263.572 I llm_load_print_meta: rope scaling     = linear
0.00.263.574 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.574 I llm_load_print_meta: freq_scale_train = 1
0.00.263.575 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.576 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.576 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.576 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.576 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.577 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.578 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.578 I llm_load_print_meta: model type       = 2B
0.00.263.579 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.580 I llm_load_print_meta: model params     = 2.51 B
0.00.263.581 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.581 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.581 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.582 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.582 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.583 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.583 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.583 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.584 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.584 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.585 I llm_load_print_meta: max token length = 93
0.00.335.180 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.335.189 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.340.498 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.505 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.505 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.506 I llama_new_context_with_model: n_batch       = 2048
0.00.340.506 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.507 I llama_new_context_with_model: flash_attn    = 0
0.00.340.510 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.511 I llama_new_context_with_model: freq_scale    = 1
0.00.340.512 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.929 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.944 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.044 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.271 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.277 I llama_new_context_with_model: graph nodes  = 601
0.00.358.278 I llama_new_context_with_model: graph splits = 1
0.00.358.279 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.533 I main: llama threadpool init, n_threads = 4
0.00.445.546 I 
0.00.445.621 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.445.624 I 
0.00.445.664 I sampler seed: 1676127334
0.00.445.676 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.681 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.445.682 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.682 I 
 increasities are a form of child sexual abuse. [end of text]


0.01.247.289 I llama_perf_sampler_print:    sampling time =       1.66 ms /    12 runs   (    0.14 ms per token,  7220.22 tokens per second)
0.01.247.292 I llama_perf_context_print:        load time =     444.60 ms
0.01.247.293 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.247.294 I llama_perf_context_print:        eval time =     794.80 ms /    11 runs   (   72.25 ms per token,    13.84 tokens per second)
0.01.247.295 I llama_perf_context_print:       total time =     801.76 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m16.332s
user	0m20.443s
sys	0m9.451s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4017 (8515cb9c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32128.52 ms
main:    total time = 32128.52 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.533 I build: 4017 (8515cb9c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.733 I main: llama backend init
0.00.000.867 I main: load the model and apply lora adapter, if any
0.00.021.688 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.698 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.706 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.714 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.715 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.719 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.720 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.721 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.722 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.722 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.723 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.726 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.727 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.727 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.728 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.729 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.210 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.838 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.658 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.663 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.664 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.664 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.665 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.665 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.666 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.669 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.669 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.670 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.671 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.672 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.675 I llama_model_loader: - type  f32:   37 tensors
0.00.131.676 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.676 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.112 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.462 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.959 I llm_load_vocab: special tokens cache size = 5
0.00.261.791 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.808 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.809 I llm_load_print_meta: arch             = gemma
0.00.261.809 I llm_load_print_meta: vocab type       = SPM
0.00.261.810 I llm_load_print_meta: n_vocab          = 256000
0.00.261.810 I llm_load_print_meta: n_merges         = 0
0.00.261.811 I llm_load_print_meta: vocab_only       = 0
0.00.261.811 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.811 I llm_load_print_meta: n_embd           = 2048
0.00.261.811 I llm_load_print_meta: n_layer          = 18
0.00.261.823 I llm_load_print_meta: n_head           = 8
0.00.261.824 I llm_load_print_meta: n_head_kv        = 1
0.00.261.824 I llm_load_print_meta: n_rot            = 256
0.00.261.824 I llm_load_print_meta: n_swa            = 0
0.00.261.825 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.825 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.826 I llm_load_print_meta: n_gqa            = 8
0.00.261.827 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.828 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.829 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.830 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.830 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.831 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.831 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.832 I llm_load_print_meta: n_ff             = 16384
0.00.261.832 I llm_load_print_meta: n_expert         = 0
0.00.261.833 I llm_load_print_meta: n_expert_used    = 0
0.00.261.833 I llm_load_print_meta: causal attn      = 1
0.00.261.833 I llm_load_print_meta: pooling type     = 0
0.00.261.834 I llm_load_print_meta: rope type        = 2
0.00.261.834 I llm_load_print_meta: rope scaling     = linear
0.00.261.836 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.836 I llm_load_print_meta: freq_scale_train = 1
0.00.261.836 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.837 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.837 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.837 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.837 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.838 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.838 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.838 I llm_load_print_meta: model type       = 2B
0.00.261.839 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.261.840 I llm_load_print_meta: model params     = 2.51 B
0.00.261.840 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.261.841 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.841 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.841 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.842 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.842 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.842 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.843 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.843 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.843 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.844 I llm_load_print_meta: max token length = 93
0.00.324.833 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.324.839 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.324.840 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.324.840 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.324.841 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.324.841 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.330.100 I llama_new_context_with_model: n_seq_max     = 1
0.00.330.106 I llama_new_context_with_model: n_ctx         = 4096
0.00.330.106 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.330.106 I llama_new_context_with_model: n_batch       = 2048
0.00.330.107 I llama_new_context_with_model: n_ubatch      = 512
0.00.330.107 I llama_new_context_with_model: flash_attn    = 0
0.00.330.109 I llama_new_context_with_model: freq_base     = 10000.0
0.00.330.110 I llama_new_context_with_model: freq_scale    = 1
0.00.330.111 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.345.925 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.937 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.346.028 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.244 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.250 I llama_new_context_with_model: graph nodes  = 601
0.00.347.251 I llama_new_context_with_model: graph splits = 1
0.00.347.252 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.423.513 I main: llama threadpool init, n_threads = 4
0.00.423.525 I 
0.00.423.596 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.423.599 I 
0.00.423.639 I sampler seed: 2994091693
0.00.423.650 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.423.655 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.423.655 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.423.656 I 
 fufilling to your ears, you'll hear a rustling in the air. You turn your head, and there it is - a dandelion seed nestled amidst the

0.02.073.738 I llama_perf_sampler_print:    sampling time =       4.64 ms /    33 runs   (    0.14 ms per token,  7109.00 tokens per second)
0.02.073.742 I llama_perf_context_print:        load time =     422.62 ms
0.02.073.743 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.073.745 I llama_perf_context_print:        eval time =    1631.94 ms /    32 runs   (   51.00 ms per token,    19.61 tokens per second)
0.02.073.745 I llama_perf_context_print:       total time =    1650.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4017 (8515cb9c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32081.71 ms
main:    total time = 32081.71 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.543 I build: 4017 (8515cb9c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.731 I main: llama backend init
0.00.000.860 I main: load the model and apply lora adapter, if any
0.00.021.495 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.510 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.517 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.518 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.523 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.523 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.524 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.525 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.525 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.526 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.530 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.530 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.531 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.531 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.532 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.505 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.563 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.407 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.413 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.414 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.414 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.415 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.416 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.416 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.419 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.420 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.423 I llama_model_loader: - type  f32:   37 tensors
0.00.131.424 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.425 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.206 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.522 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.113 I llm_load_vocab: special tokens cache size = 5
0.00.271.786 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.801 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.801 I llm_load_print_meta: arch             = gemma
0.00.271.802 I llm_load_print_meta: vocab type       = SPM
0.00.271.802 I llm_load_print_meta: n_vocab          = 256000
0.00.271.803 I llm_load_print_meta: n_merges         = 0
0.00.271.803 I llm_load_print_meta: vocab_only       = 0
0.00.271.803 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.804 I llm_load_print_meta: n_embd           = 2048
0.00.271.804 I llm_load_print_meta: n_layer          = 18
0.00.271.814 I llm_load_print_meta: n_head           = 8
0.00.271.816 I llm_load_print_meta: n_head_kv        = 1
0.00.271.816 I llm_load_print_meta: n_rot            = 256
0.00.271.816 I llm_load_print_meta: n_swa            = 0
0.00.271.817 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.817 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.818 I llm_load_print_meta: n_gqa            = 8
0.00.271.819 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.820 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.821 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.822 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.822 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.823 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.823 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.824 I llm_load_print_meta: n_ff             = 16384
0.00.271.824 I llm_load_print_meta: n_expert         = 0
0.00.271.824 I llm_load_print_meta: n_expert_used    = 0
0.00.271.825 I llm_load_print_meta: causal attn      = 1
0.00.271.825 I llm_load_print_meta: pooling type     = 0
0.00.271.825 I llm_load_print_meta: rope type        = 2
0.00.271.826 I llm_load_print_meta: rope scaling     = linear
0.00.271.827 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.827 I llm_load_print_meta: freq_scale_train = 1
0.00.271.828 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.828 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.828 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.829 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.829 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.829 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.829 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.830 I llm_load_print_meta: model type       = 2B
0.00.271.830 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.271.831 I llm_load_print_meta: model params     = 2.51 B
0.00.271.832 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.271.832 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.833 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.833 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.834 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.834 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.834 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.835 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.835 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.836 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.836 I llm_load_print_meta: max token length = 93
0.00.330.779 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.335.869 I llama_new_context_with_model: n_seq_max     = 1
0.00.335.875 I llama_new_context_with_model: n_ctx         = 4096
0.00.335.875 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.335.876 I llama_new_context_with_model: n_batch       = 2048
0.00.335.876 I llama_new_context_with_model: n_ubatch      = 512
0.00.335.876 I llama_new_context_with_model: flash_attn    = 0
0.00.335.878 I llama_new_context_with_model: freq_base     = 10000.0
0.00.335.879 I llama_new_context_with_model: freq_scale    = 1
0.00.335.880 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.351.371 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.384 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.492 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.728 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.733 I llama_new_context_with_model: graph nodes  = 601
0.00.352.734 I llama_new_context_with_model: graph splits = 1
0.00.352.736 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.426.435 I main: llama threadpool init, n_threads = 4
0.00.426.449 I 
0.00.426.532 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.426.535 I 
0.00.426.581 I sampler seed: 569665826
0.00.426.591 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.426.594 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.426.595 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.426.596 I 
 seconded, the sky turning an ominous crimson. The wind whipped through the tangled branches of the ancient willow, its leaves rustling like restless spirits.

A feeling

0.02.020.346 I llama_perf_sampler_print:    sampling time =       4.96 ms /    33 runs   (    0.15 ms per token,  6657.25 tokens per second)
0.02.020.348 I llama_perf_context_print:        load time =     425.55 ms
0.02.020.349 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.020.351 I llama_perf_context_print:        eval time =    1575.36 ms /    32 runs   (   49.23 ms per token,    20.31 tokens per second)
0.02.020.351 I llama_perf_context_print:       total time =    1593.92 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.298s
user	8m15.050s
sys	0m6.834s
