+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.527 I build: 4373 (a91a4136) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.715 I main: llama backend init
0.00.000.721 I main: load the model and apply lora adapter, if any
0.00.021.149 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.158 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.169 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.173 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.177 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.181 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.182 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.182 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.183 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.183 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.184 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.187 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.188 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.188 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.189 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.190 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.734 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.320 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.118 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.124 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.125 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.125 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.126 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.127 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.128 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.130 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.130 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.131 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.131 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.133 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.135 I llama_model_loader: - type  f32:   37 tensors
0.00.132.136 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.363 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.951 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.639 I llm_load_vocab: special tokens cache size = 5
0.00.283.688 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.709 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.709 I llm_load_print_meta: arch             = gemma
0.00.283.710 I llm_load_print_meta: vocab type       = SPM
0.00.283.711 I llm_load_print_meta: n_vocab          = 256000
0.00.283.711 I llm_load_print_meta: n_merges         = 0
0.00.283.711 I llm_load_print_meta: vocab_only       = 0
0.00.283.712 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.712 I llm_load_print_meta: n_embd           = 2048
0.00.283.712 I llm_load_print_meta: n_layer          = 18
0.00.283.724 I llm_load_print_meta: n_head           = 8
0.00.283.725 I llm_load_print_meta: n_head_kv        = 1
0.00.283.725 I llm_load_print_meta: n_rot            = 256
0.00.283.725 I llm_load_print_meta: n_swa            = 0
0.00.283.726 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.726 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.727 I llm_load_print_meta: n_gqa            = 8
0.00.283.728 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.728 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.729 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.730 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.731 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.731 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.731 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.732 I llm_load_print_meta: n_ff             = 16384
0.00.283.733 I llm_load_print_meta: n_expert         = 0
0.00.283.733 I llm_load_print_meta: n_expert_used    = 0
0.00.283.733 I llm_load_print_meta: causal attn      = 1
0.00.283.733 I llm_load_print_meta: pooling type     = 0
0.00.283.734 I llm_load_print_meta: rope type        = 2
0.00.283.734 I llm_load_print_meta: rope scaling     = linear
0.00.283.735 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.736 I llm_load_print_meta: freq_scale_train = 1
0.00.283.736 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.736 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.737 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.737 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.737 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.737 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.738 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.738 I llm_load_print_meta: model type       = 2B
0.00.283.739 I llm_load_print_meta: model ftype      = Q8_0
0.00.283.739 I llm_load_print_meta: model params     = 2.51 B
0.00.283.740 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.283.741 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.741 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.742 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.742 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.742 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.742 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.743 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.743 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.744 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.744 I llm_load_print_meta: max token length = 93
0.00.383.282 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.383.292 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.383.292 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.383.293 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.383.294 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.383.294 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.388.659 I llama_new_context_with_model: n_seq_max     = 1
0.00.388.665 I llama_new_context_with_model: n_ctx         = 4096
0.00.388.665 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.388.666 I llama_new_context_with_model: n_batch       = 2048
0.00.388.666 I llama_new_context_with_model: n_ubatch      = 512
0.00.388.667 I llama_new_context_with_model: flash_attn    = 0
0.00.388.669 I llama_new_context_with_model: freq_base     = 10000.0
0.00.388.670 I llama_new_context_with_model: freq_scale    = 1
0.00.388.671 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.388.689 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.403.148 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.403.163 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.403.254 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.404.544 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.404.551 I llama_new_context_with_model: graph nodes  = 601
0.00.404.551 I llama_new_context_with_model: graph splits = 1
0.00.404.553 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.404.554 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.488.986 I main: llama threadpool init, n_threads = 4
0.00.489.000 I 
0.00.489.071 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.489.074 I 
0.00.489.115 I sampler seed: 1467354191
0.00.489.127 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.489.131 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.489.132 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.489.132 I 
 increasities is a common misconception. [end of text]


0.01.048.828 I llama_perf_sampler_print:    sampling time =       1.26 ms /     9 runs   (    0.14 ms per token,  7159.90 tokens per second)
0.01.048.830 I llama_perf_context_print:        load time =     488.25 ms
0.01.048.831 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.048.832 I llama_perf_context_print:        eval time =     554.55 ms /     8 runs   (   69.32 ms per token,    14.43 tokens per second)
0.01.048.833 I llama_perf_context_print:       total time =     559.85 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.534 I build: 4373 (a91a4136) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.739 I main: llama backend init
0.00.000.746 I main: load the model and apply lora adapter, if any
0.00.021.011 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.031 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.038 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.039 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.044 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.049 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.050 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.050 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.051 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.052 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.060 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.061 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.062 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.065 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.066 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.236 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.380 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.665 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.671 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.672 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.673 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.674 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.675 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.676 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.679 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.679 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.680 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.680 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.681 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.685 I llama_model_loader: - type  f32:   37 tensors
0.00.133.686 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.863 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.955 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.519 I llm_load_vocab: special tokens cache size = 5
0.00.268.332 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.349 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.350 I llm_load_print_meta: arch             = gemma
0.00.268.351 I llm_load_print_meta: vocab type       = SPM
0.00.268.351 I llm_load_print_meta: n_vocab          = 256000
0.00.268.352 I llm_load_print_meta: n_merges         = 0
0.00.268.352 I llm_load_print_meta: vocab_only       = 0
0.00.268.352 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.353 I llm_load_print_meta: n_embd           = 2048
0.00.268.353 I llm_load_print_meta: n_layer          = 18
0.00.268.364 I llm_load_print_meta: n_head           = 8
0.00.268.365 I llm_load_print_meta: n_head_kv        = 1
0.00.268.366 I llm_load_print_meta: n_rot            = 256
0.00.268.366 I llm_load_print_meta: n_swa            = 0
0.00.268.366 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.367 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.367 I llm_load_print_meta: n_gqa            = 8
0.00.268.368 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.369 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.370 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.371 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.372 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.372 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.373 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.373 I llm_load_print_meta: n_ff             = 16384
0.00.268.374 I llm_load_print_meta: n_expert         = 0
0.00.268.374 I llm_load_print_meta: n_expert_used    = 0
0.00.268.375 I llm_load_print_meta: causal attn      = 1
0.00.268.375 I llm_load_print_meta: pooling type     = 0
0.00.268.375 I llm_load_print_meta: rope type        = 2
0.00.268.376 I llm_load_print_meta: rope scaling     = linear
0.00.268.377 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.378 I llm_load_print_meta: freq_scale_train = 1
0.00.268.378 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.378 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.378 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.379 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.379 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.379 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.379 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.380 I llm_load_print_meta: model type       = 2B
0.00.268.380 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.381 I llm_load_print_meta: model params     = 2.51 B
0.00.268.382 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.382 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.383 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.383 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.384 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.384 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.384 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.384 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.385 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.386 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.386 I llm_load_print_meta: max token length = 93
0.00.363.853 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.369.007 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.013 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.014 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.014 I llama_new_context_with_model: n_batch       = 2048
0.00.369.015 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.015 I llama_new_context_with_model: flash_attn    = 0
0.00.369.017 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.018 I llama_new_context_with_model: freq_scale    = 1
0.00.369.019 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.369.039 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.384.476 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.492 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.584 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.913 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.919 I llama_new_context_with_model: graph nodes  = 601
0.00.385.919 I llama_new_context_with_model: graph splits = 1
0.00.385.922 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.385.922 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.467.578 I main: llama threadpool init, n_threads = 4
0.00.467.594 I 
0.00.467.673 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.467.677 I 
0.00.467.754 I sampler seed: 2917532143
0.00.467.773 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.467.780 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.467.781 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.467.781 I 
 increasements to the following:
- The primary focus of the research is on the impact of social media on mental health.
- The research aims to explore

0.02.640.564 I llama_perf_sampler_print:    sampling time =       4.91 ms /    33 runs   (    0.15 ms per token,  6726.46 tokens per second)
0.02.640.566 I llama_perf_context_print:        load time =     466.81 ms
0.02.640.568 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.640.570 I llama_perf_context_print:        eval time =    2154.31 ms /    32 runs   (   67.32 ms per token,    14.85 tokens per second)
0.02.640.571 I llama_perf_context_print:       total time =    2172.99 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.554 I build: 4373 (a91a4136) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.765 I main: llama backend init
0.00.000.772 I main: load the model and apply lora adapter, if any
0.00.021.040 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.049 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.061 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.069 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.070 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.075 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.077 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.078 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.080 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.081 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.082 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.086 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.087 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.088 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.089 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.090 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.201 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.611 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.445 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.451 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.452 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.453 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.453 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.454 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.455 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.457 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.458 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.459 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.460 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.461 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.464 I llama_model_loader: - type  f32:   37 tensors
0.00.132.466 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.552 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.569 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.204 I llm_load_vocab: special tokens cache size = 5
0.00.277.185 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.200 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.201 I llm_load_print_meta: arch             = gemma
0.00.277.202 I llm_load_print_meta: vocab type       = SPM
0.00.277.202 I llm_load_print_meta: n_vocab          = 256000
0.00.277.203 I llm_load_print_meta: n_merges         = 0
0.00.277.203 I llm_load_print_meta: vocab_only       = 0
0.00.277.204 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.204 I llm_load_print_meta: n_embd           = 2048
0.00.277.204 I llm_load_print_meta: n_layer          = 18
0.00.277.216 I llm_load_print_meta: n_head           = 8
0.00.277.217 I llm_load_print_meta: n_head_kv        = 1
0.00.277.218 I llm_load_print_meta: n_rot            = 256
0.00.277.218 I llm_load_print_meta: n_swa            = 0
0.00.277.218 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.219 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.220 I llm_load_print_meta: n_gqa            = 8
0.00.277.221 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.222 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.222 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.223 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.224 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.224 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.225 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.226 I llm_load_print_meta: n_ff             = 16384
0.00.277.226 I llm_load_print_meta: n_expert         = 0
0.00.277.227 I llm_load_print_meta: n_expert_used    = 0
0.00.277.227 I llm_load_print_meta: causal attn      = 1
0.00.277.227 I llm_load_print_meta: pooling type     = 0
0.00.277.228 I llm_load_print_meta: rope type        = 2
0.00.277.228 I llm_load_print_meta: rope scaling     = linear
0.00.277.229 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.230 I llm_load_print_meta: freq_scale_train = 1
0.00.277.230 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.231 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.231 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.231 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.231 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.232 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.232 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.232 I llm_load_print_meta: model type       = 2B
0.00.277.233 I llm_load_print_meta: model ftype      = Q8_0
0.00.277.234 I llm_load_print_meta: model params     = 2.51 B
0.00.277.235 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.235 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.236 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.236 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.236 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.236 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.237 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.237 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.237 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.238 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.238 I llm_load_print_meta: max token length = 93
0.00.354.864 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.354.870 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.354.871 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.354.871 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.354.872 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.354.873 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.360.179 I llama_new_context_with_model: n_seq_max     = 1
0.00.360.186 I llama_new_context_with_model: n_ctx         = 4096
0.00.360.187 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.360.187 I llama_new_context_with_model: n_batch       = 2048
0.00.360.188 I llama_new_context_with_model: n_ubatch      = 512
0.00.360.188 I llama_new_context_with_model: flash_attn    = 0
0.00.360.192 I llama_new_context_with_model: freq_base     = 10000.0
0.00.360.192 I llama_new_context_with_model: freq_scale    = 1
0.00.360.193 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.360.220 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.375.270 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.375.283 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.375.378 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.639 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.376.645 I llama_new_context_with_model: graph nodes  = 601
0.00.376.646 I llama_new_context_with_model: graph splits = 1
0.00.376.648 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.376.648 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.466.779 I main: llama threadpool init, n_threads = 4
0.00.466.795 I 
0.00.466.893 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.466.896 I 
0.00.466.946 I sampler seed: 3251018959
0.00.466.956 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.466.967 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.466.971 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.466.972 I 
 increasively in a single step, rather than incrementally. [end of text]


0.01.389.932 I llama_perf_sampler_print:    sampling time =       1.96 ms /    14 runs   (    0.14 ms per token,  7142.86 tokens per second)
0.01.389.934 I llama_perf_context_print:        load time =     465.99 ms
0.01.389.935 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.389.936 I llama_perf_context_print:        eval time =     915.02 ms /    13 runs   (   70.39 ms per token,    14.21 tokens per second)
0.01.389.937 I llama_perf_context_print:       total time =     923.16 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.566 I build: 4373 (a91a4136) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.758 I main: llama backend init
0.00.000.767 I main: load the model and apply lora adapter, if any
0.00.021.347 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.359 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.370 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.379 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.384 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.392 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.393 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.394 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.395 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.396 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.397 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.403 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.404 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.405 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.405 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.406 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.032 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.651 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.491 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.498 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.499 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.500 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.500 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.501 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.502 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.504 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.505 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.506 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.506 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.507 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.510 I llama_model_loader: - type  f32:   37 tensors
0.00.132.513 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.761 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.450 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.041 I llm_load_vocab: special tokens cache size = 5
0.00.271.351 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.367 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.368 I llm_load_print_meta: arch             = gemma
0.00.271.368 I llm_load_print_meta: vocab type       = SPM
0.00.271.369 I llm_load_print_meta: n_vocab          = 256000
0.00.271.369 I llm_load_print_meta: n_merges         = 0
0.00.271.369 I llm_load_print_meta: vocab_only       = 0
0.00.271.370 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.370 I llm_load_print_meta: n_embd           = 2048
0.00.271.370 I llm_load_print_meta: n_layer          = 18
0.00.271.383 I llm_load_print_meta: n_head           = 8
0.00.271.383 I llm_load_print_meta: n_head_kv        = 1
0.00.271.384 I llm_load_print_meta: n_rot            = 256
0.00.271.384 I llm_load_print_meta: n_swa            = 0
0.00.271.384 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.385 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.386 I llm_load_print_meta: n_gqa            = 8
0.00.271.386 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.387 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.388 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.389 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.389 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.390 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.390 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.391 I llm_load_print_meta: n_ff             = 16384
0.00.271.391 I llm_load_print_meta: n_expert         = 0
0.00.271.392 I llm_load_print_meta: n_expert_used    = 0
0.00.271.392 I llm_load_print_meta: causal attn      = 1
0.00.271.392 I llm_load_print_meta: pooling type     = 0
0.00.271.393 I llm_load_print_meta: rope type        = 2
0.00.271.393 I llm_load_print_meta: rope scaling     = linear
0.00.271.394 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.395 I llm_load_print_meta: freq_scale_train = 1
0.00.271.395 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.395 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.396 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.396 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.396 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.396 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.397 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.397 I llm_load_print_meta: model type       = 2B
0.00.271.398 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.398 I llm_load_print_meta: model params     = 2.51 B
0.00.271.399 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.400 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.400 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.401 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.401 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.401 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.401 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.402 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.402 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.403 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.403 I llm_load_print_meta: max token length = 93
0.00.342.747 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.342.755 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.347.834 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.840 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.841 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.841 I llama_new_context_with_model: n_batch       = 2048
0.00.347.841 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.842 I llama_new_context_with_model: flash_attn    = 0
0.00.347.844 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.845 I llama_new_context_with_model: freq_scale    = 1
0.00.347.845 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.347.866 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.361.987 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.361.999 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.088 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.399 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.406 I llama_new_context_with_model: graph nodes  = 601
0.00.363.407 I llama_new_context_with_model: graph splits = 1
0.00.363.409 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.363.409 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.821 I main: llama threadpool init, n_threads = 4
0.00.451.836 I 
0.00.451.914 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.451.919 I 
0.00.451.964 I sampler seed: 1309645180
0.00.451.987 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.994 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.451.995 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.995 I 
 seconally to the text.

**Assistant**

I am unable to access the text provided. Please provide me with the text so I can assist you.

0.02.872.193 I llama_perf_sampler_print:    sampling time =       5.04 ms /    33 runs   (    0.15 ms per token,  6552.82 tokens per second)
0.02.872.195 I llama_perf_context_print:        load time =     451.04 ms
0.02.872.196 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.872.197 I llama_perf_context_print:        eval time =    2400.64 ms /    32 runs   (   75.02 ms per token,    13.33 tokens per second)
0.02.872.198 I llama_perf_context_print:       total time =    2420.38 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.449s
user	0m27.214s
sys	0m9.369s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4373 (a91a4136)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40250.13 ms
main:    total time = 40250.13 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.176 I build: 4373 (a91a4136) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.372 I main: llama backend init
0.00.000.378 I main: load the model and apply lora adapter, if any
0.00.020.928 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.936 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.944 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.952 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.956 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.961 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.962 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.963 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.963 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.964 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.964 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.968 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.969 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.969 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.970 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.971 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.441 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.068 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.893 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.899 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.900 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.900 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.901 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.902 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.903 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.905 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.906 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.907 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.908 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.909 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.912 I llama_model_loader: - type  f32:   37 tensors
0.00.131.914 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.914 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.571 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.991 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.523 I llm_load_vocab: special tokens cache size = 5
0.00.269.379 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.395 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.395 I llm_load_print_meta: arch             = gemma
0.00.269.396 I llm_load_print_meta: vocab type       = SPM
0.00.269.396 I llm_load_print_meta: n_vocab          = 256000
0.00.269.397 I llm_load_print_meta: n_merges         = 0
0.00.269.397 I llm_load_print_meta: vocab_only       = 0
0.00.269.397 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.398 I llm_load_print_meta: n_embd           = 2048
0.00.269.399 I llm_load_print_meta: n_layer          = 18
0.00.269.409 I llm_load_print_meta: n_head           = 8
0.00.269.410 I llm_load_print_meta: n_head_kv        = 1
0.00.269.410 I llm_load_print_meta: n_rot            = 256
0.00.269.411 I llm_load_print_meta: n_swa            = 0
0.00.269.411 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.411 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.412 I llm_load_print_meta: n_gqa            = 8
0.00.269.413 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.414 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.415 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.416 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.416 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.416 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.417 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.418 I llm_load_print_meta: n_ff             = 16384
0.00.269.418 I llm_load_print_meta: n_expert         = 0
0.00.269.419 I llm_load_print_meta: n_expert_used    = 0
0.00.269.419 I llm_load_print_meta: causal attn      = 1
0.00.269.419 I llm_load_print_meta: pooling type     = 0
0.00.269.419 I llm_load_print_meta: rope type        = 2
0.00.269.420 I llm_load_print_meta: rope scaling     = linear
0.00.269.421 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.421 I llm_load_print_meta: freq_scale_train = 1
0.00.269.422 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.422 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.422 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.423 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.423 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.423 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.423 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.424 I llm_load_print_meta: model type       = 2B
0.00.269.424 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.425 I llm_load_print_meta: model params     = 2.51 B
0.00.269.426 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.426 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.427 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.427 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.427 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.428 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.428 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.428 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.429 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.429 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.430 I llm_load_print_meta: max token length = 93
0.00.330.244 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.330.250 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.330.251 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.330.252 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.330.252 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.330.253 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.335.366 I llama_new_context_with_model: n_seq_max     = 1
0.00.335.372 I llama_new_context_with_model: n_ctx         = 4096
0.00.335.373 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.335.373 I llama_new_context_with_model: n_batch       = 2048
0.00.335.374 I llama_new_context_with_model: n_ubatch      = 512
0.00.335.374 I llama_new_context_with_model: flash_attn    = 0
0.00.335.376 I llama_new_context_with_model: freq_base     = 10000.0
0.00.335.377 I llama_new_context_with_model: freq_scale    = 1
0.00.335.378 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.335.397 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.350.096 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.350.109 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.350.209 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.351.494 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.351.500 I llama_new_context_with_model: graph nodes  = 601
0.00.351.501 I llama_new_context_with_model: graph splits = 1
0.00.351.503 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.351.503 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.427.839 I main: llama threadpool init, n_threads = 4
0.00.427.857 I 
0.00.427.936 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.427.939 I 
0.00.427.981 I sampler seed: 3822655050
0.00.427.993 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.427.996 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.428.008 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.428.014 I 
 effe di nuovo.

Il mio nome è [inserire nome] e ho [inserire numero] anni d'età. Sono un [inserire genere

0.02.035.256 I llama_perf_sampler_print:    sampling time =       5.23 ms /    33 runs   (    0.16 ms per token,  6308.55 tokens per second)
0.02.035.258 I llama_perf_context_print:        load time =     427.45 ms
0.02.035.259 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.035.260 I llama_perf_context_print:        eval time =    1588.26 ms /    32 runs   (   49.63 ms per token,    20.15 tokens per second)
0.02.035.261 I llama_perf_context_print:       total time =    1607.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4373 (a91a4136)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40247.72 ms
main:    total time = 40247.72 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.528 I build: 4373 (a91a4136) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.722 I main: llama backend init
0.00.000.729 I main: load the model and apply lora adapter, if any
0.00.021.467 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.485 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.494 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.496 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.500 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.501 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.502 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.503 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.504 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.504 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.508 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.509 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.510 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.510 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.511 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.181 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.983 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.822 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.829 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.830 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.830 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.831 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.832 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.833 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.835 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.835 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.839 I llama_model_loader: - type  f32:   37 tensors
0.00.132.840 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.841 I llama_model_loader: - type q6_K:   19 tensors
0.00.209.500 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.504 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.009 I llm_load_vocab: special tokens cache size = 5
0.00.269.915 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.929 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.930 I llm_load_print_meta: arch             = gemma
0.00.269.931 I llm_load_print_meta: vocab type       = SPM
0.00.269.932 I llm_load_print_meta: n_vocab          = 256000
0.00.269.932 I llm_load_print_meta: n_merges         = 0
0.00.269.932 I llm_load_print_meta: vocab_only       = 0
0.00.269.933 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.933 I llm_load_print_meta: n_embd           = 2048
0.00.269.933 I llm_load_print_meta: n_layer          = 18
0.00.269.943 I llm_load_print_meta: n_head           = 8
0.00.269.944 I llm_load_print_meta: n_head_kv        = 1
0.00.269.945 I llm_load_print_meta: n_rot            = 256
0.00.269.945 I llm_load_print_meta: n_swa            = 0
0.00.269.945 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.946 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.946 I llm_load_print_meta: n_gqa            = 8
0.00.269.947 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.948 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.949 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.950 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.951 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.951 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.951 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.952 I llm_load_print_meta: n_ff             = 16384
0.00.269.952 I llm_load_print_meta: n_expert         = 0
0.00.269.953 I llm_load_print_meta: n_expert_used    = 0
0.00.269.953 I llm_load_print_meta: causal attn      = 1
0.00.269.953 I llm_load_print_meta: pooling type     = 0
0.00.269.954 I llm_load_print_meta: rope type        = 2
0.00.269.954 I llm_load_print_meta: rope scaling     = linear
0.00.269.956 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.957 I llm_load_print_meta: freq_scale_train = 1
0.00.269.957 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.957 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.958 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.959 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.959 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.959 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.960 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.960 I llm_load_print_meta: model type       = 2B
0.00.269.961 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.962 I llm_load_print_meta: model params     = 2.51 B
0.00.269.963 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.963 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.964 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.964 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.965 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.965 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.966 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.966 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.966 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.967 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.967 I llm_load_print_meta: max token length = 93
0.00.327.711 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.332.920 I llama_new_context_with_model: n_seq_max     = 1
0.00.332.925 I llama_new_context_with_model: n_ctx         = 4096
0.00.332.925 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.332.926 I llama_new_context_with_model: n_batch       = 2048
0.00.332.926 I llama_new_context_with_model: n_ubatch      = 512
0.00.332.927 I llama_new_context_with_model: flash_attn    = 0
0.00.332.929 I llama_new_context_with_model: freq_base     = 10000.0
0.00.332.930 I llama_new_context_with_model: freq_scale    = 1
0.00.332.931 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.332.949 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.347.749 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.347.764 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.347.853 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.135 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.349.139 I llama_new_context_with_model: graph nodes  = 601
0.00.349.140 I llama_new_context_with_model: graph splits = 1
0.00.349.142 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.349.142 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.424.641 I main: llama threadpool init, n_threads = 4
0.00.424.661 I 
0.00.424.736 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.424.739 I 
0.00.424.781 I sampler seed: 163243975
0.00.424.809 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.424.815 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.424.815 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.424.816 I 
 strick the following:

a. State the purpose of the study.
b. Identify the population and sample.
c. Describe the data collection method.

0.01.994.757 I llama_perf_sampler_print:    sampling time =       5.03 ms /    33 runs   (    0.15 ms per token,  6555.42 tokens per second)
0.01.994.760 I llama_perf_context_print:        load time =     423.89 ms
0.01.994.761 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.994.762 I llama_perf_context_print:        eval time =    1551.38 ms /    32 runs   (   48.48 ms per token,    20.63 tokens per second)
0.01.994.763 I llama_perf_context_print:       total time =    1570.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.751s
user	10m24.447s
sys	0m6.676s
