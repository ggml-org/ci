+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.699 I build: 4165 (a9a678a6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.441 I main: llama backend init
0.00.001.449 I main: load the model and apply lora adapter, if any
0.00.024.069 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.081 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.175 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.190 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.194 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.200 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.202 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.204 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.205 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.206 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.207 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.217 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.221 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.223 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.224 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.226 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.931 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.330.777 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.223 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.231 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.233 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.234 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.236 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.237 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.239 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.243 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.244 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.245 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.247 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.354.249 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.257 I llama_model_loader: - type  f32:   37 tensors
0.00.354.260 I llama_model_loader: - type q8_0:  127 tensors
0.00.580.454 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.643.052 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.643.999 I llm_load_vocab: special tokens cache size = 5
0.00.834.011 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.834.087 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.834.088 I llm_load_print_meta: arch             = gemma
0.00.834.089 I llm_load_print_meta: vocab type       = SPM
0.00.834.090 I llm_load_print_meta: n_vocab          = 256000
0.00.834.092 I llm_load_print_meta: n_merges         = 0
0.00.834.093 I llm_load_print_meta: vocab_only       = 0
0.00.834.093 I llm_load_print_meta: n_ctx_train      = 8192
0.00.834.094 I llm_load_print_meta: n_embd           = 2048
0.00.834.094 I llm_load_print_meta: n_layer          = 18
0.00.834.163 I llm_load_print_meta: n_head           = 8
0.00.834.170 I llm_load_print_meta: n_head_kv        = 1
0.00.834.172 I llm_load_print_meta: n_rot            = 256
0.00.834.173 I llm_load_print_meta: n_swa            = 0
0.00.834.186 I llm_load_print_meta: n_embd_head_k    = 256
0.00.834.187 I llm_load_print_meta: n_embd_head_v    = 256
0.00.834.194 I llm_load_print_meta: n_gqa            = 8
0.00.834.199 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.834.204 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.834.206 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.834.213 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.834.217 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.834.218 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.834.218 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.834.235 I llm_load_print_meta: n_ff             = 16384
0.00.834.236 I llm_load_print_meta: n_expert         = 0
0.00.834.237 I llm_load_print_meta: n_expert_used    = 0
0.00.834.237 I llm_load_print_meta: causal attn      = 1
0.00.834.237 I llm_load_print_meta: pooling type     = 0
0.00.834.238 I llm_load_print_meta: rope type        = 2
0.00.834.238 I llm_load_print_meta: rope scaling     = linear
0.00.834.239 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.834.240 I llm_load_print_meta: freq_scale_train = 1
0.00.834.241 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.834.241 I llm_load_print_meta: rope_finetuned   = unknown
0.00.834.241 I llm_load_print_meta: ssm_d_conv       = 0
0.00.834.242 I llm_load_print_meta: ssm_d_inner      = 0
0.00.834.250 I llm_load_print_meta: ssm_d_state      = 0
0.00.834.251 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.834.251 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.834.252 I llm_load_print_meta: model type       = 2B
0.00.834.253 I llm_load_print_meta: model ftype      = Q8_0
0.00.834.254 I llm_load_print_meta: model params     = 2.51 B
0.00.834.264 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.834.264 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.834.265 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.834.268 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.834.269 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.834.269 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.834.269 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.834.270 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.834.276 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.834.278 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.834.278 I llm_load_print_meta: max token length = 93
0.00.936.017 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.936.027 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.936.028 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.936.029 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.936.029 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.936.030 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.942.005 I llama_new_context_with_model: n_seq_max     = 1
0.00.942.013 I llama_new_context_with_model: n_ctx         = 4096
0.00.942.014 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.942.014 I llama_new_context_with_model: n_batch       = 2048
0.00.942.015 I llama_new_context_with_model: n_ubatch      = 512
0.00.942.015 I llama_new_context_with_model: flash_attn    = 0
0.00.942.018 I llama_new_context_with_model: freq_base     = 10000.0
0.00.942.019 I llama_new_context_with_model: freq_scale    = 1
0.00.942.020 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.956.545 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.956.585 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.956.714 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.959.308 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.959.311 I llama_new_context_with_model: graph nodes  = 601
0.00.959.312 I llama_new_context_with_model: graph splits = 1
0.00.959.335 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.567.296 I main: llama threadpool init, n_threads = 4
0.01.567.313 I 
0.01.567.428 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.567.432 I 
0.01.567.675 I sampler seed: 3977122926
0.01.567.688 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.567.698 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.567.700 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.567.700 I 
 seconded.

**Assistant**

I understand. I will ensure that the information provided is accurate and relevant to your inquiry. I will also adhere to ethical

0.15.047.080 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.49 tokens per second)
0.15.047.083 I llama_perf_context_print:        load time =    1565.76 ms
0.15.047.097 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.047.099 I llama_perf_context_print:        eval time =   13390.19 ms /    32 runs   (  418.44 ms per token,     2.39 tokens per second)
0.15.047.100 I llama_perf_context_print:       total time =   13479.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.671 I build: 4165 (a9a678a6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.400 I main: llama backend init
0.00.001.408 I main: load the model and apply lora adapter, if any
0.00.023.952 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.059 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.076 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.078 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.087 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.091 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.093 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.094 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.096 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.097 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.108 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.109 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.110 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.112 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.113 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.855 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.619 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.355.165 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.355.176 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.355.178 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.355.179 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.355.181 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.355.182 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.355.183 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.355.188 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.355.189 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.355.190 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.355.191 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.355.193 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.355.203 I llama_model_loader: - type  f32:   37 tensors
0.00.355.205 I llama_model_loader: - type q8_0:  127 tensors
0.00.589.370 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.656.048 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.657.042 I llm_load_vocab: special tokens cache size = 5
0.00.846.587 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.846.662 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.846.663 I llm_load_print_meta: arch             = gemma
0.00.846.664 I llm_load_print_meta: vocab type       = SPM
0.00.846.665 I llm_load_print_meta: n_vocab          = 256000
0.00.846.668 I llm_load_print_meta: n_merges         = 0
0.00.846.668 I llm_load_print_meta: vocab_only       = 0
0.00.846.669 I llm_load_print_meta: n_ctx_train      = 8192
0.00.846.669 I llm_load_print_meta: n_embd           = 2048
0.00.846.670 I llm_load_print_meta: n_layer          = 18
0.00.846.738 I llm_load_print_meta: n_head           = 8
0.00.846.745 I llm_load_print_meta: n_head_kv        = 1
0.00.846.746 I llm_load_print_meta: n_rot            = 256
0.00.846.746 I llm_load_print_meta: n_swa            = 0
0.00.846.747 I llm_load_print_meta: n_embd_head_k    = 256
0.00.846.747 I llm_load_print_meta: n_embd_head_v    = 256
0.00.846.753 I llm_load_print_meta: n_gqa            = 8
0.00.846.758 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.846.774 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.846.776 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.846.778 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.846.792 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.846.793 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.846.794 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.846.799 I llm_load_print_meta: n_ff             = 16384
0.00.846.800 I llm_load_print_meta: n_expert         = 0
0.00.846.801 I llm_load_print_meta: n_expert_used    = 0
0.00.846.802 I llm_load_print_meta: causal attn      = 1
0.00.846.802 I llm_load_print_meta: pooling type     = 0
0.00.846.802 I llm_load_print_meta: rope type        = 2
0.00.846.803 I llm_load_print_meta: rope scaling     = linear
0.00.846.804 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.846.805 I llm_load_print_meta: freq_scale_train = 1
0.00.846.805 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.846.806 I llm_load_print_meta: rope_finetuned   = unknown
0.00.846.806 I llm_load_print_meta: ssm_d_conv       = 0
0.00.846.807 I llm_load_print_meta: ssm_d_inner      = 0
0.00.846.807 I llm_load_print_meta: ssm_d_state      = 0
0.00.846.807 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.846.808 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.846.809 I llm_load_print_meta: model type       = 2B
0.00.846.810 I llm_load_print_meta: model ftype      = Q8_0
0.00.846.811 I llm_load_print_meta: model params     = 2.51 B
0.00.846.825 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.846.840 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.846.841 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.846.849 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.846.851 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.846.852 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.846.852 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.846.853 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.846.859 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.846.860 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.846.861 I llm_load_print_meta: max token length = 93
0.00.942.036 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.947.979 I llama_new_context_with_model: n_seq_max     = 1
0.00.947.987 I llama_new_context_with_model: n_ctx         = 4096
0.00.947.987 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.947.988 I llama_new_context_with_model: n_batch       = 2048
0.00.947.988 I llama_new_context_with_model: n_ubatch      = 512
0.00.947.989 I llama_new_context_with_model: flash_attn    = 0
0.00.947.991 I llama_new_context_with_model: freq_base     = 10000.0
0.00.947.992 I llama_new_context_with_model: freq_scale    = 1
0.00.947.992 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.962.822 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.962.865 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.962.986 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.965.495 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.965.499 I llama_new_context_with_model: graph nodes  = 601
0.00.965.500 I llama_new_context_with_model: graph splits = 1
0.00.965.522 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.575.687 I main: llama threadpool init, n_threads = 4
0.01.575.706 I 
0.01.575.824 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.575.828 I 
0.01.576.065 I sampler seed: 2705758549
0.01.576.079 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.576.091 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.576.092 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.576.092 I 
 increasively.

The answer is:
$$O(n^2)$$

Explanation:
The time complexity of a function is the upper bound on

0.15.187.767 I llama_perf_sampler_print:    sampling time =      49.45 ms /    33 runs   (    1.50 ms per token,   667.30 tokens per second)
0.15.187.773 I llama_perf_context_print:        load time =    1574.19 ms
0.15.187.775 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.187.776 I llama_perf_context_print:        eval time =   13521.28 ms /    32 runs   (  422.54 ms per token,     2.37 tokens per second)
0.15.187.778 I llama_perf_context_print:       total time =   13612.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 4165 (a9a678a6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.370 I main: llama backend init
0.00.001.379 I main: load the model and apply lora adapter, if any
0.00.023.372 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.381 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.467 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.478 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.480 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.486 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.490 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.491 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.493 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.494 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.495 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.501 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.502 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.503 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.505 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.507 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.660 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.172 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.798 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.811 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.812 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.813 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.815 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.816 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.817 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.822 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.823 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.824 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.825 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.354.828 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.836 I llama_model_loader: - type  f32:   37 tensors
0.00.354.839 I llama_model_loader: - type q8_0:  127 tensors
0.00.582.976 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.643.850 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.644.773 I llm_load_vocab: special tokens cache size = 5
0.00.845.818 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.845.893 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.845.893 I llm_load_print_meta: arch             = gemma
0.00.845.894 I llm_load_print_meta: vocab type       = SPM
0.00.845.895 I llm_load_print_meta: n_vocab          = 256000
0.00.845.898 I llm_load_print_meta: n_merges         = 0
0.00.845.898 I llm_load_print_meta: vocab_only       = 0
0.00.845.899 I llm_load_print_meta: n_ctx_train      = 8192
0.00.845.899 I llm_load_print_meta: n_embd           = 2048
0.00.845.899 I llm_load_print_meta: n_layer          = 18
0.00.845.968 I llm_load_print_meta: n_head           = 8
0.00.845.976 I llm_load_print_meta: n_head_kv        = 1
0.00.845.978 I llm_load_print_meta: n_rot            = 256
0.00.845.978 I llm_load_print_meta: n_swa            = 0
0.00.845.978 I llm_load_print_meta: n_embd_head_k    = 256
0.00.845.979 I llm_load_print_meta: n_embd_head_v    = 256
0.00.845.983 I llm_load_print_meta: n_gqa            = 8
0.00.845.988 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.845.993 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.845.994 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.845.998 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.845.999 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.845.999 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.846.000 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.846.005 I llm_load_print_meta: n_ff             = 16384
0.00.846.006 I llm_load_print_meta: n_expert         = 0
0.00.846.006 I llm_load_print_meta: n_expert_used    = 0
0.00.846.007 I llm_load_print_meta: causal attn      = 1
0.00.846.008 I llm_load_print_meta: pooling type     = 0
0.00.846.008 I llm_load_print_meta: rope type        = 2
0.00.846.009 I llm_load_print_meta: rope scaling     = linear
0.00.846.010 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.846.011 I llm_load_print_meta: freq_scale_train = 1
0.00.846.013 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.846.013 I llm_load_print_meta: rope_finetuned   = unknown
0.00.846.014 I llm_load_print_meta: ssm_d_conv       = 0
0.00.846.014 I llm_load_print_meta: ssm_d_inner      = 0
0.00.846.025 I llm_load_print_meta: ssm_d_state      = 0
0.00.846.026 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.846.026 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.846.027 I llm_load_print_meta: model type       = 2B
0.00.846.028 I llm_load_print_meta: model ftype      = Q8_0
0.00.846.029 I llm_load_print_meta: model params     = 2.51 B
0.00.846.043 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.846.043 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.846.044 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.846.044 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.846.047 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.846.047 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.846.047 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.846.048 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.846.054 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.846.055 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.846.058 I llm_load_print_meta: max token length = 93
0.00.922.427 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.922.438 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.922.439 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.922.441 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.922.441 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.922.442 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.928.333 I llama_new_context_with_model: n_seq_max     = 1
0.00.928.341 I llama_new_context_with_model: n_ctx         = 4096
0.00.928.342 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.928.342 I llama_new_context_with_model: n_batch       = 2048
0.00.928.343 I llama_new_context_with_model: n_ubatch      = 512
0.00.928.343 I llama_new_context_with_model: flash_attn    = 0
0.00.928.346 I llama_new_context_with_model: freq_base     = 10000.0
0.00.928.347 I llama_new_context_with_model: freq_scale    = 1
0.00.928.347 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.943.347 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.943.392 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.943.520 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.946.191 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.946.195 I llama_new_context_with_model: graph nodes  = 601
0.00.946.195 I llama_new_context_with_model: graph splits = 1
0.00.946.219 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.561.054 I main: llama threadpool init, n_threads = 4
0.01.561.073 I 
0.01.561.187 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.561.191 I 
0.01.561.429 I sampler seed: 2857541655
0.01.561.443 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.561.454 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.561.455 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.561.455 I 
 seconally in the text.

**The text provided does not contain any information regarding the seconary in the provided text.** [end of text]


0.12.530.980 I llama_perf_sampler_print:    sampling time =      40.12 ms /    27 runs   (    1.49 ms per token,   673.00 tokens per second)
0.12.530.984 I llama_perf_context_print:        load time =    1559.59 ms
0.12.530.986 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.530.988 I llama_perf_context_print:        eval time =   10897.34 ms /    26 runs   (  419.13 ms per token,     2.39 tokens per second)
0.12.530.989 I llama_perf_context_print:       total time =   10969.94 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.659 I build: 4165 (a9a678a6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.422 I main: llama backend init
0.00.001.431 I main: load the model and apply lora adapter, if any
0.00.023.451 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.461 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.559 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.573 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.575 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.582 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.587 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.589 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.592 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.594 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.596 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.610 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.616 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.619 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.621 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.623 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.410 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.983 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.545 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.555 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.556 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.558 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.559 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.561 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.563 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.567 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.569 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.570 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.571 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.353.573 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.581 I llama_model_loader: - type  f32:   37 tensors
0.00.353.583 I llama_model_loader: - type q8_0:  127 tensors
0.00.588.731 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.654.327 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.655.371 I llm_load_vocab: special tokens cache size = 5
0.00.853.303 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.853.378 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.853.379 I llm_load_print_meta: arch             = gemma
0.00.853.380 I llm_load_print_meta: vocab type       = SPM
0.00.853.381 I llm_load_print_meta: n_vocab          = 256000
0.00.853.383 I llm_load_print_meta: n_merges         = 0
0.00.853.384 I llm_load_print_meta: vocab_only       = 0
0.00.853.384 I llm_load_print_meta: n_ctx_train      = 8192
0.00.853.385 I llm_load_print_meta: n_embd           = 2048
0.00.853.385 I llm_load_print_meta: n_layer          = 18
0.00.853.451 I llm_load_print_meta: n_head           = 8
0.00.853.458 I llm_load_print_meta: n_head_kv        = 1
0.00.853.458 I llm_load_print_meta: n_rot            = 256
0.00.853.459 I llm_load_print_meta: n_swa            = 0
0.00.853.459 I llm_load_print_meta: n_embd_head_k    = 256
0.00.853.460 I llm_load_print_meta: n_embd_head_v    = 256
0.00.853.465 I llm_load_print_meta: n_gqa            = 8
0.00.853.469 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.853.474 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.853.475 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.853.477 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.853.477 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.853.478 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.853.478 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.853.483 I llm_load_print_meta: n_ff             = 16384
0.00.853.485 I llm_load_print_meta: n_expert         = 0
0.00.853.485 I llm_load_print_meta: n_expert_used    = 0
0.00.853.485 I llm_load_print_meta: causal attn      = 1
0.00.853.486 I llm_load_print_meta: pooling type     = 0
0.00.853.486 I llm_load_print_meta: rope type        = 2
0.00.853.491 I llm_load_print_meta: rope scaling     = linear
0.00.853.493 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.853.494 I llm_load_print_meta: freq_scale_train = 1
0.00.853.494 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.853.495 I llm_load_print_meta: rope_finetuned   = unknown
0.00.853.495 I llm_load_print_meta: ssm_d_conv       = 0
0.00.853.495 I llm_load_print_meta: ssm_d_inner      = 0
0.00.853.496 I llm_load_print_meta: ssm_d_state      = 0
0.00.853.497 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.853.497 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.853.506 I llm_load_print_meta: model type       = 2B
0.00.853.508 I llm_load_print_meta: model ftype      = Q8_0
0.00.853.512 I llm_load_print_meta: model params     = 2.51 B
0.00.853.521 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.853.521 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.853.522 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.853.523 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.853.523 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.853.524 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.853.524 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.853.525 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.853.531 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.853.533 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.853.533 I llm_load_print_meta: max token length = 93
0.00.925.805 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.925.817 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.932.363 I llama_new_context_with_model: n_seq_max     = 1
0.00.932.372 I llama_new_context_with_model: n_ctx         = 4096
0.00.932.372 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.932.373 I llama_new_context_with_model: n_batch       = 2048
0.00.932.373 I llama_new_context_with_model: n_ubatch      = 512
0.00.932.373 I llama_new_context_with_model: flash_attn    = 0
0.00.932.376 I llama_new_context_with_model: freq_base     = 10000.0
0.00.932.377 I llama_new_context_with_model: freq_scale    = 1
0.00.932.378 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.947.238 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.947.277 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.947.441 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.949.993 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.949.998 I llama_new_context_with_model: graph nodes  = 601
0.00.949.998 I llama_new_context_with_model: graph splits = 1
0.00.950.021 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.565.128 I main: llama threadpool init, n_threads = 4
0.01.565.144 I 
0.01.565.274 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.565.279 I 
0.01.565.520 I sampler seed: 1577264749
0.01.565.536 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.565.545 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.565.550 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.565.550 I 
 seconded,
**The following are some tips for writing a strong business plan:**

**1. Start with a clear and concise purpose.**
**2

0.15.078.094 I llama_perf_sampler_print:    sampling time =      49.14 ms /    33 runs   (    1.49 ms per token,   671.52 tokens per second)
0.15.078.098 I llama_perf_context_print:        load time =    1563.61 ms
0.15.078.099 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.078.101 I llama_perf_context_print:        eval time =   13423.48 ms /    32 runs   (  419.48 ms per token,     2.38 tokens per second)
0.15.078.102 I llama_perf_context_print:       total time =   13512.98 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m8.560s
user	3m40.023s
sys	0m9.421s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4165 (a9a678a6)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185859.83 ms
main:    total time = 185859.83 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 4165 (a9a678a6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.401 I main: llama backend init
0.00.001.410 I main: load the model and apply lora adapter, if any
0.00.023.939 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.952 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.052 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.066 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.068 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.076 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.080 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.081 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.082 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.084 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.085 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.099 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.101 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.102 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.104 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.106 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.181 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.330.922 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.386 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.396 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.397 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.398 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.400 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.401 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.403 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.407 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.409 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.410 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.411 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.354.413 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.422 I llama_model_loader: - type  f32:   37 tensors
0.00.354.424 I llama_model_loader: - type q4_K:  108 tensors
0.00.354.425 I llama_model_loader: - type q6_K:   19 tensors
0.00.587.115 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.655.909 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.656.900 I llm_load_vocab: special tokens cache size = 5
0.00.856.134 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.856.206 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.856.211 I llm_load_print_meta: arch             = gemma
0.00.856.212 I llm_load_print_meta: vocab type       = SPM
0.00.856.212 I llm_load_print_meta: n_vocab          = 256000
0.00.856.215 I llm_load_print_meta: n_merges         = 0
0.00.856.215 I llm_load_print_meta: vocab_only       = 0
0.00.856.218 I llm_load_print_meta: n_ctx_train      = 8192
0.00.856.218 I llm_load_print_meta: n_embd           = 2048
0.00.856.218 I llm_load_print_meta: n_layer          = 18
0.00.856.287 I llm_load_print_meta: n_head           = 8
0.00.856.297 I llm_load_print_meta: n_head_kv        = 1
0.00.856.298 I llm_load_print_meta: n_rot            = 256
0.00.856.298 I llm_load_print_meta: n_swa            = 0
0.00.856.298 I llm_load_print_meta: n_embd_head_k    = 256
0.00.856.299 I llm_load_print_meta: n_embd_head_v    = 256
0.00.856.304 I llm_load_print_meta: n_gqa            = 8
0.00.856.309 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.856.314 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.856.318 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.856.320 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.856.320 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.856.321 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.856.321 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.856.326 I llm_load_print_meta: n_ff             = 16384
0.00.856.326 I llm_load_print_meta: n_expert         = 0
0.00.856.327 I llm_load_print_meta: n_expert_used    = 0
0.00.856.327 I llm_load_print_meta: causal attn      = 1
0.00.856.328 I llm_load_print_meta: pooling type     = 0
0.00.856.328 I llm_load_print_meta: rope type        = 2
0.00.856.329 I llm_load_print_meta: rope scaling     = linear
0.00.856.330 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.856.331 I llm_load_print_meta: freq_scale_train = 1
0.00.856.331 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.856.331 I llm_load_print_meta: rope_finetuned   = unknown
0.00.856.332 I llm_load_print_meta: ssm_d_conv       = 0
0.00.856.332 I llm_load_print_meta: ssm_d_inner      = 0
0.00.856.333 I llm_load_print_meta: ssm_d_state      = 0
0.00.856.333 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.856.334 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.856.334 I llm_load_print_meta: model type       = 2B
0.00.856.338 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.856.338 I llm_load_print_meta: model params     = 2.51 B
0.00.856.347 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.856.348 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.856.349 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.856.349 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.856.350 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.856.351 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.856.351 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.856.352 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.856.358 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.856.360 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.856.360 I llm_load_print_meta: max token length = 93
0.00.918.344 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.918.352 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.918.353 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.918.354 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.918.354 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.918.355 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.924.064 I llama_new_context_with_model: n_seq_max     = 1
0.00.924.071 I llama_new_context_with_model: n_ctx         = 4096
0.00.924.071 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.924.072 I llama_new_context_with_model: n_batch       = 2048
0.00.924.072 I llama_new_context_with_model: n_ubatch      = 512
0.00.924.073 I llama_new_context_with_model: flash_attn    = 0
0.00.924.075 I llama_new_context_with_model: freq_base     = 10000.0
0.00.924.076 I llama_new_context_with_model: freq_scale    = 1
0.00.924.077 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.938.668 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.938.709 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.938.830 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.941.404 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.941.409 I llama_new_context_with_model: graph nodes  = 601
0.00.941.410 I llama_new_context_with_model: graph splits = 1
0.00.941.432 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.525.102 I main: llama threadpool init, n_threads = 4
0.01.525.119 I 
0.01.525.235 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.525.239 I 
0.01.525.472 I sampler seed: 349986275
0.01.525.486 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.525.496 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.525.496 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.525.497 I 
 seconded questions.

**Answer the question:**

The answer is: I cannot generate responses that include personally identifiable information (PII).

**Explanation:**


0.12.637.640 I llama_perf_sampler_print:    sampling time =      49.14 ms /    33 runs   (    1.49 ms per token,   671.56 tokens per second)
0.12.637.658 I llama_perf_context_print:        load time =    1523.60 ms
0.12.637.660 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.637.662 I llama_perf_context_print:        eval time =   11023.16 ms /    32 runs   (  344.47 ms per token,     2.90 tokens per second)
0.12.637.663 I llama_perf_context_print:       total time =   11112.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4165 (a9a678a6)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185842.03 ms
main:    total time = 185842.03 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.679 I build: 4165 (a9a678a6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.438 I main: llama backend init
0.00.001.448 I main: load the model and apply lora adapter, if any
0.00.023.942 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.047 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.062 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.064 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.071 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.075 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.076 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.077 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.079 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.081 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.087 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.088 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.090 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.091 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.092 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.892 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.717 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.270 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.280 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.282 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.283 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.285 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.286 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.288 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.292 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.294 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.303 I llama_model_loader: - type  f32:   37 tensors
0.00.353.305 I llama_model_loader: - type q4_K:  108 tensors
0.00.353.305 I llama_model_loader: - type q6_K:   19 tensors
0.00.594.266 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.661.499 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.662.431 I llm_load_vocab: special tokens cache size = 5
0.00.861.669 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.861.745 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.861.746 I llm_load_print_meta: arch             = gemma
0.00.861.746 I llm_load_print_meta: vocab type       = SPM
0.00.861.747 I llm_load_print_meta: n_vocab          = 256000
0.00.861.750 I llm_load_print_meta: n_merges         = 0
0.00.861.750 I llm_load_print_meta: vocab_only       = 0
0.00.861.751 I llm_load_print_meta: n_ctx_train      = 8192
0.00.861.751 I llm_load_print_meta: n_embd           = 2048
0.00.861.752 I llm_load_print_meta: n_layer          = 18
0.00.861.819 I llm_load_print_meta: n_head           = 8
0.00.861.826 I llm_load_print_meta: n_head_kv        = 1
0.00.861.826 I llm_load_print_meta: n_rot            = 256
0.00.861.828 I llm_load_print_meta: n_swa            = 0
0.00.861.829 I llm_load_print_meta: n_embd_head_k    = 256
0.00.861.829 I llm_load_print_meta: n_embd_head_v    = 256
0.00.861.834 I llm_load_print_meta: n_gqa            = 8
0.00.861.839 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.861.843 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.861.845 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.861.846 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.861.847 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.861.847 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.861.847 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.861.853 I llm_load_print_meta: n_ff             = 16384
0.00.861.854 I llm_load_print_meta: n_expert         = 0
0.00.861.855 I llm_load_print_meta: n_expert_used    = 0
0.00.861.855 I llm_load_print_meta: causal attn      = 1
0.00.861.855 I llm_load_print_meta: pooling type     = 0
0.00.861.879 I llm_load_print_meta: rope type        = 2
0.00.861.880 I llm_load_print_meta: rope scaling     = linear
0.00.861.881 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.861.882 I llm_load_print_meta: freq_scale_train = 1
0.00.861.882 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.861.883 I llm_load_print_meta: rope_finetuned   = unknown
0.00.861.888 I llm_load_print_meta: ssm_d_conv       = 0
0.00.861.889 I llm_load_print_meta: ssm_d_inner      = 0
0.00.861.889 I llm_load_print_meta: ssm_d_state      = 0
0.00.861.890 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.861.890 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.861.891 I llm_load_print_meta: model type       = 2B
0.00.861.892 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.861.893 I llm_load_print_meta: model params     = 2.51 B
0.00.861.908 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.861.909 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.861.916 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.861.917 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.861.918 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.861.918 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.861.918 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.861.919 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.861.927 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.861.928 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.861.929 I llm_load_print_meta: max token length = 93
0.00.918.973 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.924.709 I llama_new_context_with_model: n_seq_max     = 1
0.00.924.717 I llama_new_context_with_model: n_ctx         = 4096
0.00.924.717 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.924.718 I llama_new_context_with_model: n_batch       = 2048
0.00.924.718 I llama_new_context_with_model: n_ubatch      = 512
0.00.924.719 I llama_new_context_with_model: flash_attn    = 0
0.00.924.721 I llama_new_context_with_model: freq_base     = 10000.0
0.00.924.722 I llama_new_context_with_model: freq_scale    = 1
0.00.924.723 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.940.368 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.940.415 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.940.542 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.943.119 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.943.123 I llama_new_context_with_model: graph nodes  = 601
0.00.943.124 I llama_new_context_with_model: graph splits = 1
0.00.943.148 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.527.096 I main: llama threadpool init, n_threads = 4
0.01.527.112 I 
0.01.527.225 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.527.228 I 
0.01.527.468 I sampler seed: 2781488766
0.01.527.481 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.527.490 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.527.492 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.527.492 I 
 squaRED

## The Quest for Meaning: A Journey of Self-Discovery and Purpose

**Introduction:**

The human experience is a tapestry of emotions, experiences

0.12.709.028 I llama_perf_sampler_print:    sampling time =      49.23 ms /    33 runs   (    1.49 ms per token,   670.30 tokens per second)
0.12.709.031 I llama_perf_context_print:        load time =    1525.54 ms
0.12.709.048 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.709.050 I llama_perf_context_print:        eval time =   11093.03 ms /    32 runs   (  346.66 ms per token,     2.88 tokens per second)
0.12.709.051 I llama_perf_context_print:       total time =   11181.94 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.934s
user	46m43.368s
sys	0m6.301s
