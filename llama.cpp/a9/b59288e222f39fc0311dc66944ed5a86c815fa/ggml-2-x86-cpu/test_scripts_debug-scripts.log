+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.738 I build: 4925 (a9b59288) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.956 I main: llama backend init
0.00.000.965 I main: load the model and apply lora adapter, if any
0.00.086.301 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.086.314 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.086.420 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.444 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.446 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.453 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.455 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.456 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.458 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.460 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.462 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.469 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.471 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.473 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.475 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.476 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.294.349 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.395.918 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.419.079 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.419.099 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.419.101 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.419.103 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.419.105 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.419.107 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.419.109 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.419.114 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.419.115 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.419.118 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.419.120 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.419.122 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.419.132 I llama_model_loader: - type  f32:   37 tensors
0.00.419.134 I llama_model_loader: - type q8_0:  127 tensors
0.00.419.153 I print_info: file format = GGUF V3 (latest)
0.00.419.154 I print_info: file type   = Q8_0
0.00.419.157 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.714.901 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.844.170 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.845.226 I load: special tokens cache size = 5
0.01.089.538 I load: token to piece cache size = 1.6014 MB
0.01.089.631 I print_info: arch             = gemma
0.01.089.635 I print_info: vocab_only       = 0
0.01.089.636 I print_info: n_ctx_train      = 8192
0.01.089.636 I print_info: n_embd           = 2048
0.01.089.636 I print_info: n_layer          = 18
0.01.089.720 I print_info: n_head           = 8
0.01.089.730 I print_info: n_head_kv        = 1
0.01.089.731 I print_info: n_rot            = 256
0.01.089.732 I print_info: n_swa            = 0
0.01.089.733 I print_info: n_swa_pattern    = 1
0.01.089.733 I print_info: n_embd_head_k    = 256
0.01.089.733 I print_info: n_embd_head_v    = 256
0.01.089.738 I print_info: n_gqa            = 8
0.01.089.744 I print_info: n_embd_k_gqa     = 256
0.01.089.749 I print_info: n_embd_v_gqa     = 256
0.01.089.753 I print_info: f_norm_eps       = 0.0e+00
0.01.089.754 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.089.754 I print_info: f_clamp_kqv      = 0.0e+00
0.01.089.755 I print_info: f_max_alibi_bias = 0.0e+00
0.01.089.755 I print_info: f_logit_scale    = 0.0e+00
0.01.089.755 I print_info: f_attn_scale     = 0.0e+00
0.01.089.760 I print_info: n_ff             = 16384
0.01.089.761 I print_info: n_expert         = 0
0.01.089.762 I print_info: n_expert_used    = 0
0.01.089.762 I print_info: causal attn      = 1
0.01.089.762 I print_info: pooling type     = 0
0.01.089.762 I print_info: rope type        = 2
0.01.089.763 I print_info: rope scaling     = linear
0.01.089.764 I print_info: freq_base_train  = 10000.0
0.01.089.765 I print_info: freq_scale_train = 1
0.01.089.766 I print_info: n_ctx_orig_yarn  = 8192
0.01.089.767 I print_info: rope_finetuned   = unknown
0.01.089.767 I print_info: ssm_d_conv       = 0
0.01.089.768 I print_info: ssm_d_inner      = 0
0.01.089.768 I print_info: ssm_d_state      = 0
0.01.089.769 I print_info: ssm_dt_rank      = 0
0.01.089.770 I print_info: ssm_dt_b_c_rms   = 0
0.01.089.795 I print_info: model type       = 2B
0.01.089.797 I print_info: model params     = 2.51 B
0.01.089.797 I print_info: general.name     = gemma-1.1-2b-it
0.01.089.802 I print_info: vocab type       = SPM
0.01.089.804 I print_info: n_vocab          = 256000
0.01.089.807 I print_info: n_merges         = 0
0.01.089.807 I print_info: BOS token        = 2 '<bos>'
0.01.089.808 I print_info: EOS token        = 1 '<eos>'
0.01.089.809 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.089.810 I print_info: UNK token        = 3 '<unk>'
0.01.089.810 I print_info: PAD token        = 0 '<pad>'
0.01.089.811 I print_info: LF token         = 227 '<0x0A>'
0.01.089.817 I print_info: EOG token        = 1 '<eos>'
0.01.089.819 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.089.819 I print_info: max token length = 93
0.01.089.822 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.192.989 I load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.193.001 I load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.193.002 I load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.193.003 I load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.193.004 I load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.193.005 I load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.199.644 I llama_context: constructing llama_context
0.01.199.652 I llama_context: n_seq_max     = 1
0.01.199.653 I llama_context: n_ctx         = 4096
0.01.199.653 I llama_context: n_ctx_per_seq = 4096
0.01.199.654 I llama_context: n_batch       = 2048
0.01.199.654 I llama_context: n_ubatch      = 512
0.01.199.654 I llama_context: causal_attn   = 1
0.01.199.655 I llama_context: flash_attn    = 0
0.01.199.658 I llama_context: freq_base     = 10000.0
0.01.199.659 I llama_context: freq_scale    = 1
0.01.199.660 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.199.882 I llama_context:        CPU  output buffer size =     0.98 MiB
0.01.199.930 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.214.815 I init:        CPU KV buffer size =    72.00 MiB
0.01.214.863 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.224.193 I llama_context:        CPU compute buffer size =   509.01 MiB
0.01.224.199 I llama_context: graph nodes  = 637
0.01.224.200 I llama_context: graph splits = 1
0.01.224.213 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.224.214 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.858.099 I main: llama threadpool init, n_threads = 4
0.01.858.116 I 
0.01.858.216 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.858.219 I 
0.01.858.470 I sampler seed: 1254525995
0.01.858.479 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.858.487 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.858.488 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.858.488 I 
 increasities are not limited to romantic relationships. They can also occur between siblings, parents and children, or even between close friends.

**Types of Filial

0.15.307.900 I llama_perf_sampler_print:    sampling time =      48.11 ms /    33 runs   (    1.46 ms per token,   685.99 tokens per second)
0.15.307.906 I llama_perf_context_print:        load time =    1830.44 ms
0.15.307.918 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.307.920 I llama_perf_context_print:        eval time =   13364.01 ms /    32 runs   (  417.63 ms per token,     2.39 tokens per second)
0.15.307.921 I llama_perf_context_print:       total time =   13476.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.659 I build: 4925 (a9b59288) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.870 I main: llama backend init
0.00.000.878 I main: load the model and apply lora adapter, if any
0.00.086.910 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.087.021 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.087.046 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.087.049 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.087.054 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.087.056 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.087.058 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.087.060 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.087.062 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.087.063 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.087.070 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.087.072 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.087.074 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.087.075 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.087.077 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.297.015 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.398.395 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.421.635 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.421.651 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.421.653 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.421.655 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.421.657 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.421.659 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.421.661 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.421.666 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.421.668 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.421.670 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.421.673 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.421.674 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.421.683 I llama_model_loader: - type  f32:   37 tensors
0.00.421.685 I llama_model_loader: - type q8_0:  127 tensors
0.00.421.704 I print_info: file format = GGUF V3 (latest)
0.00.421.704 I print_info: file type   = Q8_0
0.00.421.707 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.716.946 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.846.602 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.847.718 I load: special tokens cache size = 5
0.01.088.631 I load: token to piece cache size = 1.6014 MB
0.01.088.717 I print_info: arch             = gemma
0.01.088.718 I print_info: vocab_only       = 0
0.01.088.719 I print_info: n_ctx_train      = 8192
0.01.088.719 I print_info: n_embd           = 2048
0.01.088.720 I print_info: n_layer          = 18
0.01.088.803 I print_info: n_head           = 8
0.01.088.826 I print_info: n_head_kv        = 1
0.01.088.827 I print_info: n_rot            = 256
0.01.088.827 I print_info: n_swa            = 0
0.01.088.828 I print_info: n_swa_pattern    = 1
0.01.088.829 I print_info: n_embd_head_k    = 256
0.01.088.829 I print_info: n_embd_head_v    = 256
0.01.088.834 I print_info: n_gqa            = 8
0.01.088.840 I print_info: n_embd_k_gqa     = 256
0.01.088.845 I print_info: n_embd_v_gqa     = 256
0.01.088.846 I print_info: f_norm_eps       = 0.0e+00
0.01.088.848 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.088.848 I print_info: f_clamp_kqv      = 0.0e+00
0.01.088.849 I print_info: f_max_alibi_bias = 0.0e+00
0.01.088.866 I print_info: f_logit_scale    = 0.0e+00
0.01.088.867 I print_info: f_attn_scale     = 0.0e+00
0.01.088.873 I print_info: n_ff             = 16384
0.01.088.873 I print_info: n_expert         = 0
0.01.088.874 I print_info: n_expert_used    = 0
0.01.088.875 I print_info: causal attn      = 1
0.01.088.875 I print_info: pooling type     = 0
0.01.088.875 I print_info: rope type        = 2
0.01.088.876 I print_info: rope scaling     = linear
0.01.088.877 I print_info: freq_base_train  = 10000.0
0.01.088.878 I print_info: freq_scale_train = 1
0.01.088.878 I print_info: n_ctx_orig_yarn  = 8192
0.01.088.879 I print_info: rope_finetuned   = unknown
0.01.088.880 I print_info: ssm_d_conv       = 0
0.01.088.880 I print_info: ssm_d_inner      = 0
0.01.088.881 I print_info: ssm_d_state      = 0
0.01.088.888 I print_info: ssm_dt_rank      = 0
0.01.088.889 I print_info: ssm_dt_b_c_rms   = 0
0.01.088.890 I print_info: model type       = 2B
0.01.088.891 I print_info: model params     = 2.51 B
0.01.088.892 I print_info: general.name     = gemma-1.1-2b-it
0.01.088.896 I print_info: vocab type       = SPM
0.01.088.898 I print_info: n_vocab          = 256000
0.01.088.907 I print_info: n_merges         = 0
0.01.088.908 I print_info: BOS token        = 2 '<bos>'
0.01.088.909 I print_info: EOS token        = 1 '<eos>'
0.01.088.910 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.088.911 I print_info: UNK token        = 3 '<unk>'
0.01.088.916 I print_info: PAD token        = 0 '<pad>'
0.01.088.916 I print_info: LF token         = 227 '<0x0A>'
0.01.088.923 I print_info: EOG token        = 1 '<eos>'
0.01.088.925 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.088.925 I print_info: max token length = 93
0.01.088.934 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.175.040 I load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.181.717 I llama_context: constructing llama_context
0.01.181.725 I llama_context: n_seq_max     = 1
0.01.181.725 I llama_context: n_ctx         = 4096
0.01.181.726 I llama_context: n_ctx_per_seq = 4096
0.01.181.726 I llama_context: n_batch       = 2048
0.01.181.726 I llama_context: n_ubatch      = 512
0.01.181.727 I llama_context: causal_attn   = 1
0.01.181.727 I llama_context: flash_attn    = 0
0.01.181.730 I llama_context: freq_base     = 10000.0
0.01.181.730 I llama_context: freq_scale    = 1
0.01.181.731 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.181.950 I llama_context:        CPU  output buffer size =     0.98 MiB
0.01.181.990 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.198.266 I init:        CPU KV buffer size =    72.00 MiB
0.01.198.313 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.207.905 I llama_context:        CPU compute buffer size =   509.01 MiB
0.01.207.910 I llama_context: graph nodes  = 637
0.01.207.911 I llama_context: graph splits = 1
0.01.207.923 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.207.924 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.867.951 I main: llama threadpool init, n_threads = 4
0.01.867.966 I 
0.01.868.065 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.868.068 I 
0.01.868.311 I sampler seed: 2499767967
0.01.868.324 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.868.332 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.868.336 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.868.336 I 
 increably in the 1960s, a cultural phenomenon swept across America that captivated millions of people. This phenomenon was disco music, a vibrant and

0.15.551.900 I llama_perf_sampler_print:    sampling time =      48.44 ms /    33 runs   (    1.47 ms per token,   681.33 tokens per second)
0.15.551.904 I llama_perf_context_print:        load time =    1840.31 ms
0.15.551.916 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.551.919 I llama_perf_context_print:        eval time =   13598.57 ms /    32 runs   (  424.96 ms per token,     2.35 tokens per second)
0.15.551.920 I llama_perf_context_print:       total time =   13710.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.688 I build: 4925 (a9b59288) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.900 I main: llama backend init
0.00.000.908 I main: load the model and apply lora adapter, if any
0.00.086.487 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.086.504 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.086.603 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.623 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.625 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.632 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.634 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.636 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.638 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.640 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.641 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.648 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.650 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.652 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.653 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.655 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.294.604 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.396.436 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.419.719 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.419.738 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.419.740 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.419.742 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.419.743 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.419.745 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.419.747 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.419.753 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.419.754 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.419.757 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.419.759 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.419.760 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.419.772 I llama_model_loader: - type  f32:   37 tensors
0.00.419.775 I llama_model_loader: - type q8_0:  127 tensors
0.00.419.794 I print_info: file format = GGUF V3 (latest)
0.00.419.795 I print_info: file type   = Q8_0
0.00.419.798 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.726.835 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.857.653 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.858.803 I load: special tokens cache size = 5
0.01.110.800 I load: token to piece cache size = 1.6014 MB
0.01.110.895 I print_info: arch             = gemma
0.01.110.904 I print_info: vocab_only       = 0
0.01.110.905 I print_info: n_ctx_train      = 8192
0.01.110.905 I print_info: n_embd           = 2048
0.01.110.905 I print_info: n_layer          = 18
0.01.110.997 I print_info: n_head           = 8
0.01.111.008 I print_info: n_head_kv        = 1
0.01.111.008 I print_info: n_rot            = 256
0.01.111.010 I print_info: n_swa            = 0
0.01.111.010 I print_info: n_swa_pattern    = 1
0.01.111.011 I print_info: n_embd_head_k    = 256
0.01.111.011 I print_info: n_embd_head_v    = 256
0.01.111.018 I print_info: n_gqa            = 8
0.01.111.026 I print_info: n_embd_k_gqa     = 256
0.01.111.034 I print_info: n_embd_v_gqa     = 256
0.01.111.037 I print_info: f_norm_eps       = 0.0e+00
0.01.111.039 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.111.040 I print_info: f_clamp_kqv      = 0.0e+00
0.01.111.041 I print_info: f_max_alibi_bias = 0.0e+00
0.01.111.042 I print_info: f_logit_scale    = 0.0e+00
0.01.111.044 I print_info: f_attn_scale     = 0.0e+00
0.01.111.051 I print_info: n_ff             = 16384
0.01.111.055 I print_info: n_expert         = 0
0.01.111.056 I print_info: n_expert_used    = 0
0.01.111.056 I print_info: causal attn      = 1
0.01.111.057 I print_info: pooling type     = 0
0.01.111.057 I print_info: rope type        = 2
0.01.111.058 I print_info: rope scaling     = linear
0.01.111.060 I print_info: freq_base_train  = 10000.0
0.01.111.061 I print_info: freq_scale_train = 1
0.01.111.061 I print_info: n_ctx_orig_yarn  = 8192
0.01.111.063 I print_info: rope_finetuned   = unknown
0.01.111.064 I print_info: ssm_d_conv       = 0
0.01.111.064 I print_info: ssm_d_inner      = 0
0.01.111.065 I print_info: ssm_d_state      = 0
0.01.111.065 I print_info: ssm_dt_rank      = 0
0.01.111.066 I print_info: ssm_dt_b_c_rms   = 0
0.01.111.068 I print_info: model type       = 2B
0.01.111.069 I print_info: model params     = 2.51 B
0.01.111.070 I print_info: general.name     = gemma-1.1-2b-it
0.01.111.075 I print_info: vocab type       = SPM
0.01.111.087 I print_info: n_vocab          = 256000
0.01.111.092 I print_info: n_merges         = 0
0.01.111.093 I print_info: BOS token        = 2 '<bos>'
0.01.111.097 I print_info: EOS token        = 1 '<eos>'
0.01.111.098 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.111.099 I print_info: UNK token        = 3 '<unk>'
0.01.111.100 I print_info: PAD token        = 0 '<pad>'
0.01.111.100 I print_info: LF token         = 227 '<0x0A>'
0.01.111.109 I print_info: EOG token        = 1 '<eos>'
0.01.111.113 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.111.114 I print_info: max token length = 93
0.01.111.116 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.186.347 I load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.186.356 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.186.357 I load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.186.358 I load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.186.358 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.186.359 I load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.193.614 I llama_context: constructing llama_context
0.01.193.625 I llama_context: n_seq_max     = 1
0.01.193.625 I llama_context: n_ctx         = 4096
0.01.193.626 I llama_context: n_ctx_per_seq = 4096
0.01.193.626 I llama_context: n_batch       = 2048
0.01.193.627 I llama_context: n_ubatch      = 512
0.01.193.627 I llama_context: causal_attn   = 1
0.01.193.627 I llama_context: flash_attn    = 0
0.01.193.631 I llama_context: freq_base     = 10000.0
0.01.193.631 I llama_context: freq_scale    = 1
0.01.193.643 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.193.880 I llama_context:        CPU  output buffer size =     0.98 MiB
0.01.193.931 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.209.302 I init:        CPU KV buffer size =    72.00 MiB
0.01.209.352 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.218.819 I llama_context:        CPU compute buffer size =   509.01 MiB
0.01.218.824 I llama_context: graph nodes  = 637
0.01.218.825 I llama_context: graph splits = 1
0.01.218.837 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.218.838 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.853.775 I main: llama threadpool init, n_threads = 4
0.01.853.792 I 
0.01.853.911 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.853.915 I 
0.01.854.164 I sampler seed: 155637436
0.01.854.176 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.854.187 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.854.188 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.854.189 I 
 increasities from the 18th century. [end of text]


0.06.519.215 I llama_perf_sampler_print:    sampling time =      16.72 ms /    12 runs   (    1.39 ms per token,   717.57 tokens per second)
0.06.519.221 I llama_perf_context_print:        load time =    1826.09 ms
0.06.519.234 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.519.236 I llama_perf_context_print:        eval time =    4634.75 ms /    11 runs   (  421.34 ms per token,     2.37 tokens per second)
0.06.519.237 I llama_perf_context_print:       total time =    4692.07 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.665 I build: 4925 (a9b59288) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.866 I main: llama backend init
0.00.000.875 I main: load the model and apply lora adapter, if any
0.00.086.092 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.086.106 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.086.209 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.229 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.232 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.237 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.239 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.241 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.243 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.245 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.246 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.254 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.256 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.257 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.259 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.260 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.293.850 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.395.817 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.418.965 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.418.982 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.418.984 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.418.986 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.418.987 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.418.990 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.418.992 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.418.997 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.418.999 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.419.001 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.419.003 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.419.005 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.419.014 I llama_model_loader: - type  f32:   37 tensors
0.00.419.017 I llama_model_loader: - type q8_0:  127 tensors
0.00.419.037 I print_info: file format = GGUF V3 (latest)
0.00.419.037 I print_info: file type   = Q8_0
0.00.419.040 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.722.941 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.853.245 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.854.318 I load: special tokens cache size = 5
0.01.100.181 I load: token to piece cache size = 1.6014 MB
0.01.100.270 I print_info: arch             = gemma
0.01.100.271 I print_info: vocab_only       = 0
0.01.100.271 I print_info: n_ctx_train      = 8192
0.01.100.271 I print_info: n_embd           = 2048
0.01.100.272 I print_info: n_layer          = 18
0.01.100.352 I print_info: n_head           = 8
0.01.100.359 I print_info: n_head_kv        = 1
0.01.100.360 I print_info: n_rot            = 256
0.01.100.361 I print_info: n_swa            = 0
0.01.100.361 I print_info: n_swa_pattern    = 1
0.01.100.361 I print_info: n_embd_head_k    = 256
0.01.100.362 I print_info: n_embd_head_v    = 256
0.01.100.368 I print_info: n_gqa            = 8
0.01.100.375 I print_info: n_embd_k_gqa     = 256
0.01.100.380 I print_info: n_embd_v_gqa     = 256
0.01.100.393 I print_info: f_norm_eps       = 0.0e+00
0.01.100.401 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.100.401 I print_info: f_clamp_kqv      = 0.0e+00
0.01.100.402 I print_info: f_max_alibi_bias = 0.0e+00
0.01.100.402 I print_info: f_logit_scale    = 0.0e+00
0.01.100.403 I print_info: f_attn_scale     = 0.0e+00
0.01.100.408 I print_info: n_ff             = 16384
0.01.100.408 I print_info: n_expert         = 0
0.01.100.409 I print_info: n_expert_used    = 0
0.01.100.428 I print_info: causal attn      = 1
0.01.100.429 I print_info: pooling type     = 0
0.01.100.429 I print_info: rope type        = 2
0.01.100.434 I print_info: rope scaling     = linear
0.01.100.436 I print_info: freq_base_train  = 10000.0
0.01.100.437 I print_info: freq_scale_train = 1
0.01.100.445 I print_info: n_ctx_orig_yarn  = 8192
0.01.100.446 I print_info: rope_finetuned   = unknown
0.01.100.447 I print_info: ssm_d_conv       = 0
0.01.100.447 I print_info: ssm_d_inner      = 0
0.01.100.455 I print_info: ssm_d_state      = 0
0.01.100.458 I print_info: ssm_dt_rank      = 0
0.01.100.459 I print_info: ssm_dt_b_c_rms   = 0
0.01.100.460 I print_info: model type       = 2B
0.01.100.461 I print_info: model params     = 2.51 B
0.01.100.461 I print_info: general.name     = gemma-1.1-2b-it
0.01.100.466 I print_info: vocab type       = SPM
0.01.100.468 I print_info: n_vocab          = 256000
0.01.100.470 I print_info: n_merges         = 0
0.01.100.471 I print_info: BOS token        = 2 '<bos>'
0.01.100.472 I print_info: EOS token        = 1 '<eos>'
0.01.100.473 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.100.473 I print_info: UNK token        = 3 '<unk>'
0.01.100.474 I print_info: PAD token        = 0 '<pad>'
0.01.100.475 I print_info: LF token         = 227 '<0x0A>'
0.01.100.482 I print_info: EOG token        = 1 '<eos>'
0.01.100.484 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.100.485 I print_info: max token length = 93
0.01.100.487 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.173.854 I load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.173.862 I load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.180.651 I llama_context: constructing llama_context
0.01.180.662 I llama_context: n_seq_max     = 1
0.01.180.662 I llama_context: n_ctx         = 4096
0.01.180.663 I llama_context: n_ctx_per_seq = 4096
0.01.180.663 I llama_context: n_batch       = 2048
0.01.180.663 I llama_context: n_ubatch      = 512
0.01.180.664 I llama_context: causal_attn   = 1
0.01.180.664 I llama_context: flash_attn    = 0
0.01.180.668 I llama_context: freq_base     = 10000.0
0.01.180.669 I llama_context: freq_scale    = 1
0.01.180.670 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.180.891 I llama_context:        CPU  output buffer size =     0.98 MiB
0.01.180.934 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.196.232 I init:        CPU KV buffer size =    72.00 MiB
0.01.196.276 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.205.309 I llama_context:        CPU compute buffer size =   509.01 MiB
0.01.205.315 I llama_context: graph nodes  = 637
0.01.205.316 I llama_context: graph splits = 1
0.01.205.329 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.205.329 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.840.116 I main: llama threadpool init, n_threads = 4
0.01.840.136 I 
0.01.840.235 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.840.239 I 
0.01.840.496 I sampler seed: 317158876
0.01.840.510 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.840.520 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.840.521 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.840.521 I 
 increasities on the Internet.

I am unable to access the requested website as it appears to be down. I am unable to determine the specific reason for the

0.15.314.083 I llama_perf_sampler_print:    sampling time =      47.89 ms /    33 runs   (    1.45 ms per token,   689.06 tokens per second)
0.15.314.088 I llama_perf_context_print:        load time =    1812.37 ms
0.15.314.090 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.314.092 I llama_perf_context_print:        eval time =   13389.00 ms /    32 runs   (  418.41 ms per token,     2.39 tokens per second)
0.15.314.094 I llama_perf_context_print:       total time =   13500.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m4.265s
user	3m17.470s
sys	0m9.625s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4925 (a9b59288)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186871.37 ms
main:    total time = 186871.37 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.714 I build: 4925 (a9b59288) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.429 I main: llama backend init
0.00.001.444 I main: load the model and apply lora adapter, if any
0.00.086.458 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.086.475 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.086.579 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.602 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.604 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.610 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.612 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.614 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.616 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.618 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.619 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.627 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.629 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.630 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.632 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.296.654 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.398.685 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.421.923 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.421.940 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.421.942 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.421.944 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.421.945 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.421.948 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.421.950 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.421.954 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.421.956 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.421.958 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.421.961 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.421.962 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.421.964 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.421.974 I llama_model_loader: - type  f32:   37 tensors
0.00.421.976 I llama_model_loader: - type q4_K:  108 tensors
0.00.421.977 I llama_model_loader: - type q6_K:   19 tensors
0.00.421.995 I print_info: file format = GGUF V3 (latest)
0.00.421.996 I print_info: file type   = Q4_K - Medium
0.00.421.999 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.710.176 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.842.109 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.843.143 I load: special tokens cache size = 5
0.01.083.802 I load: token to piece cache size = 1.6014 MB
0.01.083.890 I print_info: arch             = gemma
0.01.083.891 I print_info: vocab_only       = 0
0.01.083.891 I print_info: n_ctx_train      = 8192
0.01.083.892 I print_info: n_embd           = 2048
0.01.083.892 I print_info: n_layer          = 18
0.01.083.973 I print_info: n_head           = 8
0.01.083.980 I print_info: n_head_kv        = 1
0.01.083.981 I print_info: n_rot            = 256
0.01.083.981 I print_info: n_swa            = 0
0.01.083.982 I print_info: n_swa_pattern    = 1
0.01.083.982 I print_info: n_embd_head_k    = 256
0.01.083.982 I print_info: n_embd_head_v    = 256
0.01.083.987 I print_info: n_gqa            = 8
0.01.083.992 I print_info: n_embd_k_gqa     = 256
0.01.083.997 I print_info: n_embd_v_gqa     = 256
0.01.083.999 I print_info: f_norm_eps       = 0.0e+00
0.01.084.000 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.084.001 I print_info: f_clamp_kqv      = 0.0e+00
0.01.084.002 I print_info: f_max_alibi_bias = 0.0e+00
0.01.084.003 I print_info: f_logit_scale    = 0.0e+00
0.01.084.004 I print_info: f_attn_scale     = 0.0e+00
0.01.084.009 I print_info: n_ff             = 16384
0.01.084.009 I print_info: n_expert         = 0
0.01.084.011 I print_info: n_expert_used    = 0
0.01.084.011 I print_info: causal attn      = 1
0.01.084.011 I print_info: pooling type     = 0
0.01.084.012 I print_info: rope type        = 2
0.01.084.013 I print_info: rope scaling     = linear
0.01.084.014 I print_info: freq_base_train  = 10000.0
0.01.084.016 I print_info: freq_scale_train = 1
0.01.084.016 I print_info: n_ctx_orig_yarn  = 8192
0.01.084.016 I print_info: rope_finetuned   = unknown
0.01.084.017 I print_info: ssm_d_conv       = 0
0.01.084.018 I print_info: ssm_d_inner      = 0
0.01.084.019 I print_info: ssm_d_state      = 0
0.01.084.019 I print_info: ssm_dt_rank      = 0
0.01.084.019 I print_info: ssm_dt_b_c_rms   = 0
0.01.084.020 I print_info: model type       = 2B
0.01.084.021 I print_info: model params     = 2.51 B
0.01.084.021 I print_info: general.name     = gemma-1.1-2b-it
0.01.084.026 I print_info: vocab type       = SPM
0.01.084.027 I print_info: n_vocab          = 256000
0.01.084.036 I print_info: n_merges         = 0
0.01.084.037 I print_info: BOS token        = 2 '<bos>'
0.01.084.037 I print_info: EOS token        = 1 '<eos>'
0.01.084.038 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.084.038 I print_info: UNK token        = 3 '<unk>'
0.01.084.043 I print_info: PAD token        = 0 '<pad>'
0.01.084.043 I print_info: LF token         = 227 '<0x0A>'
0.01.084.050 I print_info: EOG token        = 1 '<eos>'
0.01.084.052 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.084.052 I print_info: max token length = 93
0.01.084.054 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.144.790 I load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.144.800 I load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.144.801 I load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.144.802 I load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.144.803 I load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.144.803 I load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.151.677 I llama_context: constructing llama_context
0.01.151.686 I llama_context: n_seq_max     = 1
0.01.151.686 I llama_context: n_ctx         = 4096
0.01.151.687 I llama_context: n_ctx_per_seq = 4096
0.01.151.687 I llama_context: n_batch       = 2048
0.01.151.687 I llama_context: n_ubatch      = 512
0.01.151.688 I llama_context: causal_attn   = 1
0.01.151.688 I llama_context: flash_attn    = 0
0.01.151.692 I llama_context: freq_base     = 10000.0
0.01.151.693 I llama_context: freq_scale    = 1
0.01.151.694 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.151.919 I llama_context:        CPU  output buffer size =     0.98 MiB
0.01.151.963 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.167.387 I init:        CPU KV buffer size =    72.00 MiB
0.01.167.430 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.176.392 I llama_context:        CPU compute buffer size =   509.01 MiB
0.01.176.398 I llama_context: graph nodes  = 637
0.01.176.398 I llama_context: graph splits = 1
0.01.176.416 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.176.417 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.781.111 I main: llama threadpool init, n_threads = 4
0.01.781.130 I 
0.01.781.228 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.781.232 I 
0.01.781.482 I sampler seed: 3326418668
0.01.781.495 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.781.505 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.781.506 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.781.508 I 
 increasities is a set of guidelines for writing about historical events. It was developed by the Society for American Archaeology in 1979.

**Guidelines

0.12.877.125 I llama_perf_sampler_print:    sampling time =      48.06 ms /    33 runs   (    1.46 ms per token,   686.67 tokens per second)
0.12.877.142 I llama_perf_context_print:        load time =    1752.81 ms
0.12.877.144 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.877.145 I llama_perf_context_print:        eval time =   11010.30 ms /    32 runs   (  344.07 ms per token,     2.91 tokens per second)
0.12.877.158 I llama_perf_context_print:       total time =   11122.74 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4925 (a9b59288)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186881.11 ms
main:    total time = 186881.11 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.685 I build: 4925 (a9b59288) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.902 I main: llama backend init
0.00.000.920 I main: load the model and apply lora adapter, if any
0.00.084.843 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.084.964 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.084.991 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.084.994 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.000 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.002 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.004 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.006 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.008 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.009 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.016 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.018 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.019 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.021 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.302.021 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.403.553 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.426.770 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.426.788 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.426.790 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.426.792 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.426.794 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.426.796 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.426.798 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.426.802 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.426.804 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.426.806 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.426.816 I llama_model_loader: - type  f32:   37 tensors
0.00.426.819 I llama_model_loader: - type q4_K:  108 tensors
0.00.426.819 I llama_model_loader: - type q6_K:   19 tensors
0.00.426.839 I print_info: file format = GGUF V3 (latest)
0.00.426.840 I print_info: file type   = Q4_K - Medium
0.00.426.842 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.723.345 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.852.026 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.853.052 I load: special tokens cache size = 5
0.01.099.538 I load: token to piece cache size = 1.6014 MB
0.01.099.624 I print_info: arch             = gemma
0.01.099.625 I print_info: vocab_only       = 0
0.01.099.625 I print_info: n_ctx_train      = 8192
0.01.099.626 I print_info: n_embd           = 2048
0.01.099.626 I print_info: n_layer          = 18
0.01.099.705 I print_info: n_head           = 8
0.01.099.712 I print_info: n_head_kv        = 1
0.01.099.717 I print_info: n_rot            = 256
0.01.099.717 I print_info: n_swa            = 0
0.01.099.718 I print_info: n_swa_pattern    = 1
0.01.099.718 I print_info: n_embd_head_k    = 256
0.01.099.718 I print_info: n_embd_head_v    = 256
0.01.099.723 I print_info: n_gqa            = 8
0.01.099.729 I print_info: n_embd_k_gqa     = 256
0.01.099.734 I print_info: n_embd_v_gqa     = 256
0.01.099.735 I print_info: f_norm_eps       = 0.0e+00
0.01.099.736 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.099.736 I print_info: f_clamp_kqv      = 0.0e+00
0.01.099.738 I print_info: f_max_alibi_bias = 0.0e+00
0.01.099.738 I print_info: f_logit_scale    = 0.0e+00
0.01.099.738 I print_info: f_attn_scale     = 0.0e+00
0.01.099.744 I print_info: n_ff             = 16384
0.01.099.744 I print_info: n_expert         = 0
0.01.099.745 I print_info: n_expert_used    = 0
0.01.099.748 I print_info: causal attn      = 1
0.01.099.748 I print_info: pooling type     = 0
0.01.099.749 I print_info: rope type        = 2
0.01.099.749 I print_info: rope scaling     = linear
0.01.099.750 I print_info: freq_base_train  = 10000.0
0.01.099.751 I print_info: freq_scale_train = 1
0.01.099.751 I print_info: n_ctx_orig_yarn  = 8192
0.01.099.752 I print_info: rope_finetuned   = unknown
0.01.099.752 I print_info: ssm_d_conv       = 0
0.01.099.752 I print_info: ssm_d_inner      = 0
0.01.099.753 I print_info: ssm_d_state      = 0
0.01.099.753 I print_info: ssm_dt_rank      = 0
0.01.099.753 I print_info: ssm_dt_b_c_rms   = 0
0.01.099.754 I print_info: model type       = 2B
0.01.099.755 I print_info: model params     = 2.51 B
0.01.099.756 I print_info: general.name     = gemma-1.1-2b-it
0.01.099.759 I print_info: vocab type       = SPM
0.01.099.761 I print_info: n_vocab          = 256000
0.01.099.764 I print_info: n_merges         = 0
0.01.099.765 I print_info: BOS token        = 2 '<bos>'
0.01.099.767 I print_info: EOS token        = 1 '<eos>'
0.01.099.767 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.099.768 I print_info: UNK token        = 3 '<unk>'
0.01.099.769 I print_info: PAD token        = 0 '<pad>'
0.01.099.769 I print_info: LF token         = 227 '<0x0A>'
0.01.099.776 I print_info: EOG token        = 1 '<eos>'
0.01.099.778 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.099.779 I print_info: max token length = 93
0.01.099.781 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.149.020 I load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.155.766 I llama_context: constructing llama_context
0.01.155.775 I llama_context: n_seq_max     = 1
0.01.155.775 I llama_context: n_ctx         = 4096
0.01.155.776 I llama_context: n_ctx_per_seq = 4096
0.01.155.776 I llama_context: n_batch       = 2048
0.01.155.776 I llama_context: n_ubatch      = 512
0.01.155.777 I llama_context: causal_attn   = 1
0.01.155.777 I llama_context: flash_attn    = 0
0.01.155.780 I llama_context: freq_base     = 10000.0
0.01.155.781 I llama_context: freq_scale    = 1
0.01.155.782 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.155.990 I llama_context:        CPU  output buffer size =     0.98 MiB
0.01.156.034 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.171.253 I init:        CPU KV buffer size =    72.00 MiB
0.01.171.299 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.179.732 I llama_context:        CPU compute buffer size =   509.01 MiB
0.01.179.737 I llama_context: graph nodes  = 637
0.01.179.738 I llama_context: graph splits = 1
0.01.179.751 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.179.751 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.787.767 I main: llama threadpool init, n_threads = 4
0.01.787.784 I 
0.01.787.880 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.787.880 I 
0.01.788.122 I sampler seed: 3901918995
0.01.788.137 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.788.166 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.788.167 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.788.168 I 
 squaRED. This is a code snippet that appears to be written in Elixir.

I am unable to execute the code snippet due to a lack of context.

0.12.822.928 I llama_perf_sampler_print:    sampling time =      47.83 ms /    33 runs   (    1.45 ms per token,   689.89 tokens per second)
0.12.822.944 I llama_perf_context_print:        load time =    1760.17 ms
0.12.822.946 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.822.948 I llama_perf_context_print:        eval time =   10950.65 ms /    32 runs   (  342.21 ms per token,     2.92 tokens per second)
0.12.822.949 I llama_perf_context_print:       total time =   11061.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m42.836s
user	46m46.267s
sys	0m6.560s
