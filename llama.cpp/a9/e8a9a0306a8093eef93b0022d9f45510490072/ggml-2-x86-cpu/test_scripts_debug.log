+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.658 I build: 4033 (a9e8a9a0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.880 I main: llama backend init
0.00.001.140 I main: load the model and apply lora adapter, if any
0.00.023.886 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.896 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.990 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.003 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.006 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.011 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.017 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.018 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.019 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.020 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.021 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.028 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.029 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.030 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.031 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.032 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.559 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.141 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.328 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.337 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.338 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.339 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.340 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.342 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.343 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.347 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.348 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.349 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.350 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.351 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.359 I llama_model_loader: - type  f32:   37 tensors
0.00.265.362 I llama_model_loader: - type q8_0:  127 tensors
0.00.456.406 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.521.045 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.521.999 I llm_load_vocab: special tokens cache size = 5
0.00.615.751 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.820 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.824 I llm_load_print_meta: arch             = gemma
0.00.615.825 I llm_load_print_meta: vocab type       = SPM
0.00.615.826 I llm_load_print_meta: n_vocab          = 256000
0.00.615.828 I llm_load_print_meta: n_merges         = 0
0.00.615.829 I llm_load_print_meta: vocab_only       = 0
0.00.615.829 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.830 I llm_load_print_meta: n_embd           = 2048
0.00.615.830 I llm_load_print_meta: n_layer          = 18
0.00.615.895 I llm_load_print_meta: n_head           = 8
0.00.615.906 I llm_load_print_meta: n_head_kv        = 1
0.00.615.907 I llm_load_print_meta: n_rot            = 256
0.00.615.910 I llm_load_print_meta: n_swa            = 0
0.00.615.910 I llm_load_print_meta: n_embd_head_k    = 256
0.00.615.911 I llm_load_print_meta: n_embd_head_v    = 256
0.00.615.916 I llm_load_print_meta: n_gqa            = 8
0.00.615.921 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.615.926 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.615.928 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.615.929 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.615.930 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.615.930 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.615.933 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.615.938 I llm_load_print_meta: n_ff             = 16384
0.00.615.939 I llm_load_print_meta: n_expert         = 0
0.00.615.939 I llm_load_print_meta: n_expert_used    = 0
0.00.615.939 I llm_load_print_meta: causal attn      = 1
0.00.615.940 I llm_load_print_meta: pooling type     = 0
0.00.615.940 I llm_load_print_meta: rope type        = 2
0.00.615.940 I llm_load_print_meta: rope scaling     = linear
0.00.615.942 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.615.943 I llm_load_print_meta: freq_scale_train = 1
0.00.615.945 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.615.945 I llm_load_print_meta: rope_finetuned   = unknown
0.00.615.946 I llm_load_print_meta: ssm_d_conv       = 0
0.00.615.946 I llm_load_print_meta: ssm_d_inner      = 0
0.00.615.946 I llm_load_print_meta: ssm_d_state      = 0
0.00.615.946 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.947 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.947 I llm_load_print_meta: model type       = 2B
0.00.615.948 I llm_load_print_meta: model ftype      = Q8_0
0.00.615.949 I llm_load_print_meta: model params     = 2.51 B
0.00.615.959 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.615.959 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.615.960 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.615.961 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.615.961 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.615.962 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.615.964 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.615.965 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.615.971 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.615.972 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.615.973 I llm_load_print_meta: max token length = 93
0.00.718.113 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.718.121 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.718.122 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.718.123 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.718.124 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.718.124 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.724.166 I llama_new_context_with_model: n_seq_max     = 1
0.00.724.173 I llama_new_context_with_model: n_ctx         = 4096
0.00.724.174 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.724.174 I llama_new_context_with_model: n_batch       = 2048
0.00.724.175 I llama_new_context_with_model: n_ubatch      = 512
0.00.724.175 I llama_new_context_with_model: flash_attn    = 0
0.00.724.178 I llama_new_context_with_model: freq_base     = 10000.0
0.00.724.179 I llama_new_context_with_model: freq_scale    = 1
0.00.724.179 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.740.669 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.740.716 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.740.839 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.743.344 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.743.348 I llama_new_context_with_model: graph nodes  = 601
0.00.743.349 I llama_new_context_with_model: graph splits = 1
0.00.743.372 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.349.155 I main: llama threadpool init, n_threads = 4
0.01.349.167 I 
0.01.349.277 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.349.281 I 
0.01.349.521 I sampler seed: 4200594622
0.01.349.534 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.349.541 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.349.544 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.349.544 I 
 increasities, and other sexual fantasies are all normal and healthy parts of life. It is important to respect and accept others for who they are and not judge them

0.14.798.228 I llama_perf_sampler_print:    sampling time =      49.04 ms /    33 runs   (    1.49 ms per token,   672.87 tokens per second)
0.14.798.249 I llama_perf_context_print:        load time =    1347.92 ms
0.14.798.251 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.798.253 I llama_perf_context_print:        eval time =   13358.75 ms /    32 runs   (  417.46 ms per token,     2.40 tokens per second)
0.14.798.253 I llama_perf_context_print:       total time =   13449.08 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 4033 (a9e8a9a0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.826 I main: llama backend init
0.00.001.097 I main: load the model and apply lora adapter, if any
0.00.023.504 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.602 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.617 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.619 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.623 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.627 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.628 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.629 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.630 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.631 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.639 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.640 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.641 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.642 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.643 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.085 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.961 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.342 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.355 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.356 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.357 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.358 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.359 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.360 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.364 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.365 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.366 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.367 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.264.368 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.378 I llama_model_loader: - type  f32:   37 tensors
0.00.264.380 I llama_model_loader: - type q8_0:  127 tensors
0.00.451.018 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.692 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.532 I llm_load_vocab: special tokens cache size = 5
0.00.604.032 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.101 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.102 I llm_load_print_meta: arch             = gemma
0.00.604.103 I llm_load_print_meta: vocab type       = SPM
0.00.604.104 I llm_load_print_meta: n_vocab          = 256000
0.00.604.106 I llm_load_print_meta: n_merges         = 0
0.00.604.106 I llm_load_print_meta: vocab_only       = 0
0.00.604.107 I llm_load_print_meta: n_ctx_train      = 8192
0.00.604.108 I llm_load_print_meta: n_embd           = 2048
0.00.604.108 I llm_load_print_meta: n_layer          = 18
0.00.604.176 I llm_load_print_meta: n_head           = 8
0.00.604.183 I llm_load_print_meta: n_head_kv        = 1
0.00.604.183 I llm_load_print_meta: n_rot            = 256
0.00.604.184 I llm_load_print_meta: n_swa            = 0
0.00.604.184 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.184 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.189 I llm_load_print_meta: n_gqa            = 8
0.00.604.193 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.199 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.201 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.203 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.203 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.203 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.204 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.208 I llm_load_print_meta: n_ff             = 16384
0.00.604.209 I llm_load_print_meta: n_expert         = 0
0.00.604.209 I llm_load_print_meta: n_expert_used    = 0
0.00.604.210 I llm_load_print_meta: causal attn      = 1
0.00.604.211 I llm_load_print_meta: pooling type     = 0
0.00.604.211 I llm_load_print_meta: rope type        = 2
0.00.604.211 I llm_load_print_meta: rope scaling     = linear
0.00.604.213 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.214 I llm_load_print_meta: freq_scale_train = 1
0.00.604.214 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.215 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.216 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.217 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.217 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.217 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.217 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.218 I llm_load_print_meta: model type       = 2B
0.00.604.219 I llm_load_print_meta: model ftype      = Q8_0
0.00.604.228 I llm_load_print_meta: model params     = 2.51 B
0.00.604.238 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.604.238 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.239 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.239 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.240 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.241 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.242 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.254 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.260 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.266 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.266 I llm_load_print_meta: max token length = 93
0.00.701.659 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.707.558 I llama_new_context_with_model: n_seq_max     = 1
0.00.707.567 I llama_new_context_with_model: n_ctx         = 4096
0.00.707.567 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.707.568 I llama_new_context_with_model: n_batch       = 2048
0.00.707.568 I llama_new_context_with_model: n_ubatch      = 512
0.00.707.569 I llama_new_context_with_model: flash_attn    = 0
0.00.707.571 I llama_new_context_with_model: freq_base     = 10000.0
0.00.707.572 I llama_new_context_with_model: freq_scale    = 1
0.00.707.572 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.724.337 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.724.377 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.724.499 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.726.979 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.726.983 I llama_new_context_with_model: graph nodes  = 601
0.00.726.984 I llama_new_context_with_model: graph splits = 1
0.00.727.007 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.332.496 I main: llama threadpool init, n_threads = 4
0.01.332.510 I 
0.01.332.618 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.332.622 I 
0.01.332.858 I sampler seed: 2844961395
0.01.332.870 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.332.880 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.332.880 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.332.880 I 
 increasities from the Bible.

The Bible contains numerous accounts of miraculous events that are attributed to God's power. Some of these events include healings,

0.14.871.333 I llama_perf_sampler_print:    sampling time =      48.78 ms /    33 runs   (    1.48 ms per token,   676.45 tokens per second)
0.14.871.338 I llama_perf_context_print:        load time =    1331.30 ms
0.14.871.340 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.871.342 I llama_perf_context_print:        eval time =   13449.10 ms /    32 runs   (  420.28 ms per token,     2.38 tokens per second)
0.14.871.343 I llama_perf_context_print:       total time =   13538.85 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.628 I build: 4033 (a9e8a9a0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.001.092 I main: load the model and apply lora adapter, if any
0.00.023.497 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.508 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.679 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.690 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.692 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.696 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.698 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.700 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.701 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.702 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.703 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.709 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.717 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.719 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.720 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.721 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.469 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.088 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.410 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.422 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.423 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.424 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.425 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.427 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.429 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.433 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.434 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.435 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.436 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.264.438 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.446 I llama_model_loader: - type  f32:   37 tensors
0.00.264.448 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.420 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.518.440 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.519.407 I llm_load_vocab: special tokens cache size = 5
0.00.612.615 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.684 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.685 I llm_load_print_meta: arch             = gemma
0.00.612.686 I llm_load_print_meta: vocab type       = SPM
0.00.612.687 I llm_load_print_meta: n_vocab          = 256000
0.00.612.689 I llm_load_print_meta: n_merges         = 0
0.00.612.690 I llm_load_print_meta: vocab_only       = 0
0.00.612.690 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.690 I llm_load_print_meta: n_embd           = 2048
0.00.612.691 I llm_load_print_meta: n_layer          = 18
0.00.612.755 I llm_load_print_meta: n_head           = 8
0.00.612.762 I llm_load_print_meta: n_head_kv        = 1
0.00.612.763 I llm_load_print_meta: n_rot            = 256
0.00.612.763 I llm_load_print_meta: n_swa            = 0
0.00.612.765 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.765 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.770 I llm_load_print_meta: n_gqa            = 8
0.00.612.774 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.779 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.781 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.782 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.783 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.784 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.784 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.789 I llm_load_print_meta: n_ff             = 16384
0.00.612.790 I llm_load_print_meta: n_expert         = 0
0.00.612.790 I llm_load_print_meta: n_expert_used    = 0
0.00.612.791 I llm_load_print_meta: causal attn      = 1
0.00.612.792 I llm_load_print_meta: pooling type     = 0
0.00.612.792 I llm_load_print_meta: rope type        = 2
0.00.612.792 I llm_load_print_meta: rope scaling     = linear
0.00.612.794 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.795 I llm_load_print_meta: freq_scale_train = 1
0.00.612.795 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.795 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.796 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.796 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.796 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.796 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.797 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.808 I llm_load_print_meta: model type       = 2B
0.00.612.821 I llm_load_print_meta: model ftype      = Q8_0
0.00.612.822 I llm_load_print_meta: model params     = 2.51 B
0.00.612.831 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.612.831 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.832 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.833 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.833 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.834 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.834 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.834 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.840 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.842 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.842 I llm_load_print_meta: max token length = 93
0.00.705.824 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.705.834 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.705.835 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.705.836 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.705.837 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.705.837 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.711.794 I llama_new_context_with_model: n_seq_max     = 1
0.00.711.801 I llama_new_context_with_model: n_ctx         = 4096
0.00.711.801 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.711.802 I llama_new_context_with_model: n_batch       = 2048
0.00.711.802 I llama_new_context_with_model: n_ubatch      = 512
0.00.711.803 I llama_new_context_with_model: flash_attn    = 0
0.00.711.805 I llama_new_context_with_model: freq_base     = 10000.0
0.00.711.806 I llama_new_context_with_model: freq_scale    = 1
0.00.711.807 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.728.468 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.728.508 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.728.634 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.731.139 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.731.143 I llama_new_context_with_model: graph nodes  = 601
0.00.731.144 I llama_new_context_with_model: graph splits = 1
0.00.731.168 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.341.231 I main: llama threadpool init, n_threads = 4
0.01.341.245 I 
0.01.341.357 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.341.361 I 
0.01.341.591 I sampler seed: 962852578
0.01.341.603 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.341.610 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.341.613 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.341.614 I 
 increably. [end of text]


0.03.024.876 I llama_perf_sampler_print:    sampling time =       6.25 ms /     5 runs   (    1.25 ms per token,   800.51 tokens per second)
0.03.024.879 I llama_perf_context_print:        load time =    1340.05 ms
0.03.024.880 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.024.896 I llama_perf_context_print:        eval time =    1670.54 ms /     4 runs   (  417.64 ms per token,     2.39 tokens per second)
0.03.024.897 I llama_perf_context_print:       total time =    1683.65 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 4033 (a9e8a9a0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.840 I main: llama backend init
0.00.001.101 I main: load the model and apply lora adapter, if any
0.00.025.183 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.195 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.285 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.298 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.300 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.305 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.306 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.307 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.308 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.309 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.311 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.318 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.319 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.320 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.321 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.322 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.885 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.799 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.071 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.081 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.082 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.083 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.084 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.086 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.098 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.104 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.105 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.107 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.108 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.269.110 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.119 I llama_model_loader: - type  f32:   37 tensors
0.00.269.122 I llama_model_loader: - type q8_0:  127 tensors
0.00.468.148 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.535.917 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.536.870 I llm_load_vocab: special tokens cache size = 5
0.00.630.019 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.630.090 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.630.094 I llm_load_print_meta: arch             = gemma
0.00.630.095 I llm_load_print_meta: vocab type       = SPM
0.00.630.095 I llm_load_print_meta: n_vocab          = 256000
0.00.630.098 I llm_load_print_meta: n_merges         = 0
0.00.630.098 I llm_load_print_meta: vocab_only       = 0
0.00.630.099 I llm_load_print_meta: n_ctx_train      = 8192
0.00.630.099 I llm_load_print_meta: n_embd           = 2048
0.00.630.100 I llm_load_print_meta: n_layer          = 18
0.00.630.165 I llm_load_print_meta: n_head           = 8
0.00.630.175 I llm_load_print_meta: n_head_kv        = 1
0.00.630.176 I llm_load_print_meta: n_rot            = 256
0.00.630.177 I llm_load_print_meta: n_swa            = 0
0.00.630.177 I llm_load_print_meta: n_embd_head_k    = 256
0.00.630.177 I llm_load_print_meta: n_embd_head_v    = 256
0.00.630.182 I llm_load_print_meta: n_gqa            = 8
0.00.630.186 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.630.191 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.630.209 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.630.213 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.630.213 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.630.214 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.630.214 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.630.220 I llm_load_print_meta: n_ff             = 16384
0.00.630.220 I llm_load_print_meta: n_expert         = 0
0.00.630.229 I llm_load_print_meta: n_expert_used    = 0
0.00.630.229 I llm_load_print_meta: causal attn      = 1
0.00.630.230 I llm_load_print_meta: pooling type     = 0
0.00.630.230 I llm_load_print_meta: rope type        = 2
0.00.630.231 I llm_load_print_meta: rope scaling     = linear
0.00.630.232 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.630.233 I llm_load_print_meta: freq_scale_train = 1
0.00.630.236 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.630.237 I llm_load_print_meta: rope_finetuned   = unknown
0.00.630.237 I llm_load_print_meta: ssm_d_conv       = 0
0.00.630.237 I llm_load_print_meta: ssm_d_inner      = 0
0.00.630.237 I llm_load_print_meta: ssm_d_state      = 0
0.00.630.238 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.630.238 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.630.240 I llm_load_print_meta: model type       = 2B
0.00.630.241 I llm_load_print_meta: model ftype      = Q8_0
0.00.630.241 I llm_load_print_meta: model params     = 2.51 B
0.00.630.249 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.630.250 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.630.258 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.630.263 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.630.264 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.630.264 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.630.265 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.630.265 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.630.271 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.630.275 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.630.276 I llm_load_print_meta: max token length = 93
0.00.703.335 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.703.342 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.709.097 I llama_new_context_with_model: n_seq_max     = 1
0.00.709.105 I llama_new_context_with_model: n_ctx         = 4096
0.00.709.105 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.709.105 I llama_new_context_with_model: n_batch       = 2048
0.00.709.106 I llama_new_context_with_model: n_ubatch      = 512
0.00.709.107 I llama_new_context_with_model: flash_attn    = 0
0.00.709.109 I llama_new_context_with_model: freq_base     = 10000.0
0.00.709.109 I llama_new_context_with_model: freq_scale    = 1
0.00.709.110 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.725.808 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.725.847 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.725.973 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.728.535 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.728.539 I llama_new_context_with_model: graph nodes  = 601
0.00.728.539 I llama_new_context_with_model: graph splits = 1
0.00.728.563 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.338.958 I main: llama threadpool init, n_threads = 4
0.01.338.971 I 
0.01.339.083 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.339.086 I 
0.01.339.333 I sampler seed: 4158295178
0.01.339.346 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.339.353 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.339.356 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.339.357 I 
 increadibly. 

I am unable to generate text that is sexually suggestive in nature. [end of text]


0.09.416.817 I llama_perf_sampler_print:    sampling time =      29.19 ms /    20 runs   (    1.46 ms per token,   685.14 tokens per second)
0.09.416.821 I llama_perf_context_print:        load time =    1337.76 ms
0.09.416.823 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.416.825 I llama_perf_context_print:        eval time =    8022.63 ms /    19 runs   (  422.24 ms per token,     2.37 tokens per second)
0.09.416.827 I llama_perf_context_print:       total time =    8077.87 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m51.907s
user	2m39.675s
sys	0m9.479s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4033 (a9e8a9a0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199348.36 ms
main:    total time = 199348.36 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.635 I build: 4033 (a9e8a9a0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.001.113 I main: load the model and apply lora adapter, if any
0.00.023.585 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.595 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.684 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.696 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.698 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.702 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.704 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.705 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.706 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.707 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.708 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.714 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.716 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.717 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.718 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.719 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.621 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.319 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.263.581 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.263.590 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.263.591 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.263.592 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.263.593 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.263.594 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.263.596 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.263.600 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.263.601 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.263.602 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.263.603 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.263.605 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.263.614 I llama_model_loader: - type  f32:   37 tensors
0.00.263.616 I llama_model_loader: - type q4_K:  108 tensors
0.00.263.617 I llama_model_loader: - type q6_K:   19 tensors
0.00.448.418 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.096 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.048 I llm_load_vocab: special tokens cache size = 5
0.00.608.450 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.524 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.528 I llm_load_print_meta: arch             = gemma
0.00.608.529 I llm_load_print_meta: vocab type       = SPM
0.00.608.530 I llm_load_print_meta: n_vocab          = 256000
0.00.608.532 I llm_load_print_meta: n_merges         = 0
0.00.608.533 I llm_load_print_meta: vocab_only       = 0
0.00.608.533 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.533 I llm_load_print_meta: n_embd           = 2048
0.00.608.534 I llm_load_print_meta: n_layer          = 18
0.00.608.597 I llm_load_print_meta: n_head           = 8
0.00.608.608 I llm_load_print_meta: n_head_kv        = 1
0.00.608.609 I llm_load_print_meta: n_rot            = 256
0.00.608.609 I llm_load_print_meta: n_swa            = 0
0.00.608.609 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.610 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.615 I llm_load_print_meta: n_gqa            = 8
0.00.608.620 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.627 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.628 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.630 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.631 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.632 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.632 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.638 I llm_load_print_meta: n_ff             = 16384
0.00.608.639 I llm_load_print_meta: n_expert         = 0
0.00.608.639 I llm_load_print_meta: n_expert_used    = 0
0.00.608.640 I llm_load_print_meta: causal attn      = 1
0.00.608.641 I llm_load_print_meta: pooling type     = 0
0.00.608.641 I llm_load_print_meta: rope type        = 2
0.00.608.641 I llm_load_print_meta: rope scaling     = linear
0.00.608.643 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.667 I llm_load_print_meta: freq_scale_train = 1
0.00.608.670 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.670 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.671 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.671 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.671 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.672 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.672 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.673 I llm_load_print_meta: model type       = 2B
0.00.608.674 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.608.674 I llm_load_print_meta: model params     = 2.51 B
0.00.608.684 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.608.685 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.685 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.686 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.687 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.687 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.688 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.689 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.695 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.696 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.697 I llm_load_print_meta: max token length = 93
0.00.673.017 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.673.024 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.673.025 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.673.026 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.673.027 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.673.027 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.679.013 I llama_new_context_with_model: n_seq_max     = 1
0.00.679.022 I llama_new_context_with_model: n_ctx         = 4096
0.00.679.022 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.679.022 I llama_new_context_with_model: n_batch       = 2048
0.00.679.023 I llama_new_context_with_model: n_ubatch      = 512
0.00.679.023 I llama_new_context_with_model: flash_attn    = 0
0.00.679.026 I llama_new_context_with_model: freq_base     = 10000.0
0.00.679.027 I llama_new_context_with_model: freq_scale    = 1
0.00.679.028 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.696.129 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.696.166 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.696.293 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.698.865 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.698.869 I llama_new_context_with_model: graph nodes  = 601
0.00.698.870 I llama_new_context_with_model: graph splits = 1
0.00.698.893 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.270.681 I main: llama threadpool init, n_threads = 4
0.01.270.693 I 
0.01.270.803 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.270.807 I 
0.01.271.034 I sampler seed: 4280391405
0.01.271.046 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.271.051 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.271.055 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.271.055 I 
 seconally to the question.

I am unable to locate the requested information in the provided context. Please provide additional context or specify the location of the information you

0.12.125.957 I llama_perf_sampler_print:    sampling time =      49.04 ms /    33 runs   (    1.49 ms per token,   672.93 tokens per second)
0.12.125.974 I llama_perf_context_print:        load time =    1269.47 ms
0.12.125.976 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.125.978 I llama_perf_context_print:        eval time =   10765.55 ms /    32 runs   (  336.42 ms per token,     2.97 tokens per second)
0.12.125.979 I llama_perf_context_print:       total time =   10855.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4033 (a9e8a9a0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199300.10 ms
main:    total time = 199300.10 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.625 I build: 4033 (a9e8a9a0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.826 I main: llama backend init
0.00.001.102 I main: load the model and apply lora adapter, if any
0.00.023.438 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.540 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.554 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.556 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.560 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.564 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.565 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.566 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.567 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.568 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.574 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.576 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.577 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.578 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.580 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.894 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.971 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.073 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.081 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.082 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.083 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.084 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.086 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.088 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.092 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.093 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.100 I llama_model_loader: - type  f32:   37 tensors
0.00.264.102 I llama_model_loader: - type q4_K:  108 tensors
0.00.264.103 I llama_model_loader: - type q6_K:   19 tensors
0.00.449.796 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.019 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.509.852 I llm_load_vocab: special tokens cache size = 5
0.00.603.019 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.603.086 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.603.087 I llm_load_print_meta: arch             = gemma
0.00.603.088 I llm_load_print_meta: vocab type       = SPM
0.00.603.089 I llm_load_print_meta: n_vocab          = 256000
0.00.603.091 I llm_load_print_meta: n_merges         = 0
0.00.603.092 I llm_load_print_meta: vocab_only       = 0
0.00.603.092 I llm_load_print_meta: n_ctx_train      = 8192
0.00.603.092 I llm_load_print_meta: n_embd           = 2048
0.00.603.093 I llm_load_print_meta: n_layer          = 18
0.00.603.154 I llm_load_print_meta: n_head           = 8
0.00.603.161 I llm_load_print_meta: n_head_kv        = 1
0.00.603.162 I llm_load_print_meta: n_rot            = 256
0.00.603.162 I llm_load_print_meta: n_swa            = 0
0.00.603.163 I llm_load_print_meta: n_embd_head_k    = 256
0.00.603.163 I llm_load_print_meta: n_embd_head_v    = 256
0.00.603.168 I llm_load_print_meta: n_gqa            = 8
0.00.603.173 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.603.178 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.603.180 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.603.181 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.603.182 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.603.182 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.603.183 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.603.187 I llm_load_print_meta: n_ff             = 16384
0.00.603.188 I llm_load_print_meta: n_expert         = 0
0.00.603.188 I llm_load_print_meta: n_expert_used    = 0
0.00.603.189 I llm_load_print_meta: causal attn      = 1
0.00.603.193 I llm_load_print_meta: pooling type     = 0
0.00.603.194 I llm_load_print_meta: rope type        = 2
0.00.603.194 I llm_load_print_meta: rope scaling     = linear
0.00.603.195 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.603.196 I llm_load_print_meta: freq_scale_train = 1
0.00.603.197 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.603.197 I llm_load_print_meta: rope_finetuned   = unknown
0.00.603.198 I llm_load_print_meta: ssm_d_conv       = 0
0.00.603.199 I llm_load_print_meta: ssm_d_inner      = 0
0.00.603.200 I llm_load_print_meta: ssm_d_state      = 0
0.00.603.203 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.603.203 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.603.204 I llm_load_print_meta: model type       = 2B
0.00.603.205 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.603.205 I llm_load_print_meta: model params     = 2.51 B
0.00.603.215 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.603.216 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.603.216 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.603.217 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.603.218 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.603.218 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.603.228 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.603.230 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.603.235 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.603.237 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.603.237 I llm_load_print_meta: max token length = 93
0.00.663.186 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.668.940 I llama_new_context_with_model: n_seq_max     = 1
0.00.668.947 I llama_new_context_with_model: n_ctx         = 4096
0.00.668.947 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.668.947 I llama_new_context_with_model: n_batch       = 2048
0.00.668.948 I llama_new_context_with_model: n_ubatch      = 512
0.00.668.948 I llama_new_context_with_model: flash_attn    = 0
0.00.668.961 I llama_new_context_with_model: freq_base     = 10000.0
0.00.668.961 I llama_new_context_with_model: freq_scale    = 1
0.00.668.962 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.685.624 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.685.664 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.685.786 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.688.367 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.688.371 I llama_new_context_with_model: graph nodes  = 601
0.00.688.371 I llama_new_context_with_model: graph splits = 1
0.00.688.396 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.260.722 I main: llama threadpool init, n_threads = 4
0.01.260.735 I 
0.01.260.849 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.260.853 I 
0.01.261.108 I sampler seed: 2460574508
0.01.261.122 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.261.130 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.261.132 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.261.132 I 
 seconded by the wind.

**Answer:** The wind.

The wind is a moving mass of air that blows through the atmosphere. It can cause trees

0.12.143.145 I llama_perf_sampler_print:    sampling time =      48.97 ms /    33 runs   (    1.48 ms per token,   673.85 tokens per second)
0.12.143.148 I llama_perf_context_print:        load time =    1259.52 ms
0.12.143.150 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.143.151 I llama_perf_context_print:        eval time =   10792.47 ms /    32 runs   (  337.26 ms per token,     2.97 tokens per second)
0.12.143.152 I llama_perf_context_print:       total time =   10882.43 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.844s
user	50m13.904s
sys	0m6.491s
