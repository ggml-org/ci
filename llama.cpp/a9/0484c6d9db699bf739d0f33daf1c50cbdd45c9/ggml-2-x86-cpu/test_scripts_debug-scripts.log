+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.636 I build: 3855 (a90484c6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.002.786 I main: load the model and apply lora adapter, if any
0.00.024.891 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.072 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.172 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.183 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.184 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.188 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.190 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.192 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.193 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.194 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.194 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.200 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.202 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.210 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.218 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.222 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.093.177 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.180.669 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.192.729 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.192.737 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.192.738 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.192.739 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.192.740 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.192.741 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.192.742 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.192.745 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.192.746 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.192.747 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.192.748 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.192.749 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.192.757 I llama_model_loader: - type  f32:   37 tensors
0.00.192.761 I llama_model_loader: - type q8_0:  127 tensors
0.00.325.292 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.346.752 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.347.757 I llm_load_vocab: special tokens cache size = 5
0.00.405.243 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.405.298 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.405.299 I llm_load_print_meta: arch             = gemma
0.00.405.300 I llm_load_print_meta: vocab type       = SPM
0.00.405.301 I llm_load_print_meta: n_vocab          = 256000
0.00.405.304 I llm_load_print_meta: n_merges         = 0
0.00.405.305 I llm_load_print_meta: vocab_only       = 0
0.00.405.305 I llm_load_print_meta: n_ctx_train      = 8192
0.00.405.306 I llm_load_print_meta: n_embd           = 2048
0.00.405.306 I llm_load_print_meta: n_layer          = 18
0.00.405.371 I llm_load_print_meta: n_head           = 8
0.00.405.377 I llm_load_print_meta: n_head_kv        = 1
0.00.405.378 I llm_load_print_meta: n_rot            = 256
0.00.405.379 I llm_load_print_meta: n_swa            = 0
0.00.405.379 I llm_load_print_meta: n_embd_head_k    = 256
0.00.405.380 I llm_load_print_meta: n_embd_head_v    = 256
0.00.405.384 I llm_load_print_meta: n_gqa            = 8
0.00.405.389 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.405.394 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.405.395 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.405.397 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.405.397 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.405.398 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.405.398 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.405.403 I llm_load_print_meta: n_ff             = 16384
0.00.405.403 I llm_load_print_meta: n_expert         = 0
0.00.405.404 I llm_load_print_meta: n_expert_used    = 0
0.00.405.405 I llm_load_print_meta: causal attn      = 1
0.00.405.405 I llm_load_print_meta: pooling type     = 0
0.00.405.405 I llm_load_print_meta: rope type        = 2
0.00.405.406 I llm_load_print_meta: rope scaling     = linear
0.00.405.407 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.405.430 I llm_load_print_meta: freq_scale_train = 1
0.00.405.434 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.405.434 I llm_load_print_meta: rope_finetuned   = unknown
0.00.405.434 I llm_load_print_meta: ssm_d_conv       = 0
0.00.405.435 I llm_load_print_meta: ssm_d_inner      = 0
0.00.405.435 I llm_load_print_meta: ssm_d_state      = 0
0.00.405.442 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.405.443 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.405.444 I llm_load_print_meta: model type       = 2B
0.00.405.445 I llm_load_print_meta: model ftype      = Q8_0
0.00.405.446 I llm_load_print_meta: model params     = 2.51 B
0.00.405.447 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.405.448 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.405.449 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.405.449 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.405.450 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.405.450 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.405.451 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.405.452 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.405.457 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.405.458 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.405.459 I llm_load_print_meta: max token length = 93
0.00.405.634 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.505.399 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.505.408 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.505.409 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.505.410 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.505.411 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.505.411 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.511.027 I llama_new_context_with_model: n_ctx      = 8192
0.00.511.035 I llama_new_context_with_model: n_batch    = 2048
0.00.511.035 I llama_new_context_with_model: n_ubatch   = 512
0.00.511.036 I llama_new_context_with_model: flash_attn = 0
0.00.511.039 I llama_new_context_with_model: freq_base  = 10000.0
0.00.511.040 I llama_new_context_with_model: freq_scale = 1
0.00.540.731 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.540.775 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.540.897 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.542.320 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.542.327 I llama_new_context_with_model: graph nodes  = 601
0.00.542.327 I llama_new_context_with_model: graph splits = 1
0.00.542.342 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.157.233 I main: llama threadpool init, n_threads = 4
0.01.157.244 I 
0.01.157.339 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.157.343 I 
0.01.157.516 I sampler seed: 2894171734
0.01.157.526 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.157.531 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.157.532 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.157.532 I 
 increasities with a focus on their potential to disrupt the normal functioning of society.

**Discussion Points:**

* What are the specific ways in which narcissistic personality

0.14.589.289 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   671.02 tokens per second)
0.14.589.292 I llama_perf_context_print:        load time =    1154.36 ms
0.14.589.294 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.589.295 I llama_perf_context_print:        eval time =   13350.79 ms /    32 runs   (  417.21 ms per token,     2.40 tokens per second)
0.14.589.297 I llama_perf_context_print:       total time =   13432.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.616 I build: 3855 (a90484c6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.806 I main: llama backend init
0.00.002.747 I main: load the model and apply lora adapter, if any
0.00.024.840 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.932 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.947 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.951 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.954 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.956 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.957 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.958 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.959 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.960 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.967 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.968 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.969 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.970 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.970 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.092.730 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.180.026 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.192.060 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.192.066 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.192.067 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.192.067 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.192.068 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.192.069 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.192.070 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.192.073 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.192.074 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.192.075 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.192.076 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.192.077 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.192.084 I llama_model_loader: - type  f32:   37 tensors
0.00.192.087 I llama_model_loader: - type q8_0:  127 tensors
0.00.328.093 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.351.324 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.352.328 I llm_load_vocab: special tokens cache size = 5
0.00.409.859 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.409.915 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.409.916 I llm_load_print_meta: arch             = gemma
0.00.409.917 I llm_load_print_meta: vocab type       = SPM
0.00.409.918 I llm_load_print_meta: n_vocab          = 256000
0.00.409.920 I llm_load_print_meta: n_merges         = 0
0.00.409.921 I llm_load_print_meta: vocab_only       = 0
0.00.409.921 I llm_load_print_meta: n_ctx_train      = 8192
0.00.409.922 I llm_load_print_meta: n_embd           = 2048
0.00.409.922 I llm_load_print_meta: n_layer          = 18
0.00.409.986 I llm_load_print_meta: n_head           = 8
0.00.409.993 I llm_load_print_meta: n_head_kv        = 1
0.00.409.994 I llm_load_print_meta: n_rot            = 256
0.00.409.994 I llm_load_print_meta: n_swa            = 0
0.00.409.995 I llm_load_print_meta: n_embd_head_k    = 256
0.00.409.995 I llm_load_print_meta: n_embd_head_v    = 256
0.00.409.999 I llm_load_print_meta: n_gqa            = 8
0.00.410.005 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.410.010 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.410.011 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.410.016 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.410.017 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.410.018 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.410.019 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.410.023 I llm_load_print_meta: n_ff             = 16384
0.00.410.024 I llm_load_print_meta: n_expert         = 0
0.00.410.024 I llm_load_print_meta: n_expert_used    = 0
0.00.410.024 I llm_load_print_meta: causal attn      = 1
0.00.410.024 I llm_load_print_meta: pooling type     = 0
0.00.410.025 I llm_load_print_meta: rope type        = 2
0.00.410.025 I llm_load_print_meta: rope scaling     = linear
0.00.410.027 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.410.029 I llm_load_print_meta: freq_scale_train = 1
0.00.410.029 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.410.030 I llm_load_print_meta: rope_finetuned   = unknown
0.00.410.030 I llm_load_print_meta: ssm_d_conv       = 0
0.00.410.031 I llm_load_print_meta: ssm_d_inner      = 0
0.00.410.031 I llm_load_print_meta: ssm_d_state      = 0
0.00.410.032 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.410.032 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.410.033 I llm_load_print_meta: model type       = 2B
0.00.410.034 I llm_load_print_meta: model ftype      = Q8_0
0.00.410.034 I llm_load_print_meta: model params     = 2.51 B
0.00.410.038 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.410.038 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.410.039 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.410.039 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.410.040 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.410.040 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.410.041 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.410.041 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.410.047 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.410.050 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.410.050 I llm_load_print_meta: max token length = 93
0.00.410.216 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.506.625 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.512.358 I llama_new_context_with_model: n_ctx      = 8192
0.00.512.365 I llama_new_context_with_model: n_batch    = 2048
0.00.512.365 I llama_new_context_with_model: n_ubatch   = 512
0.00.512.366 I llama_new_context_with_model: flash_attn = 0
0.00.512.369 I llama_new_context_with_model: freq_base  = 10000.0
0.00.512.370 I llama_new_context_with_model: freq_scale = 1
0.00.542.489 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.542.535 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.542.648 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.544.090 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.544.096 I llama_new_context_with_model: graph nodes  = 601
0.00.544.097 I llama_new_context_with_model: graph splits = 1
0.00.544.113 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.159.095 I main: llama threadpool init, n_threads = 4
0.01.159.107 I 
0.01.159.203 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.159.207 I 
0.01.159.377 I sampler seed: 2794844224
0.01.159.387 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.159.391 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.159.392 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.159.393 I 
 increadibly. [end of text]


0.02.879.745 I llama_perf_sampler_print:    sampling time =       6.24 ms /     5 runs   (    1.25 ms per token,   800.90 tokens per second)
0.02.879.748 I llama_perf_context_print:        load time =    1156.27 ms
0.02.879.763 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.879.765 I llama_perf_context_print:        eval time =    1709.07 ms /     4 runs   (  427.27 ms per token,     2.34 tokens per second)
0.02.879.766 I llama_perf_context_print:       total time =    1720.66 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.628 I build: 3855 (a90484c6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.002.786 I main: load the model and apply lora adapter, if any
0.00.024.784 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.967 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.055 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.066 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.068 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.072 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.073 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.074 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.075 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.076 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.077 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.083 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.084 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.084 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.085 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.086 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.093.441 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.180.823 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.192.784 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.192.791 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.192.792 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.192.793 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.192.794 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.192.795 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.192.796 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.192.799 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.192.799 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.192.800 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.192.801 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.192.802 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.192.812 I llama_model_loader: - type  f32:   37 tensors
0.00.192.816 I llama_model_loader: - type q8_0:  127 tensors
0.00.328.845 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.351.094 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.352.156 I llm_load_vocab: special tokens cache size = 5
0.00.409.629 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.409.685 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.409.689 I llm_load_print_meta: arch             = gemma
0.00.409.690 I llm_load_print_meta: vocab type       = SPM
0.00.409.690 I llm_load_print_meta: n_vocab          = 256000
0.00.409.692 I llm_load_print_meta: n_merges         = 0
0.00.409.693 I llm_load_print_meta: vocab_only       = 0
0.00.409.693 I llm_load_print_meta: n_ctx_train      = 8192
0.00.409.694 I llm_load_print_meta: n_embd           = 2048
0.00.409.694 I llm_load_print_meta: n_layer          = 18
0.00.409.757 I llm_load_print_meta: n_head           = 8
0.00.409.768 I llm_load_print_meta: n_head_kv        = 1
0.00.409.769 I llm_load_print_meta: n_rot            = 256
0.00.409.770 I llm_load_print_meta: n_swa            = 0
0.00.409.770 I llm_load_print_meta: n_embd_head_k    = 256
0.00.409.770 I llm_load_print_meta: n_embd_head_v    = 256
0.00.409.775 I llm_load_print_meta: n_gqa            = 8
0.00.409.779 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.409.784 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.409.786 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.409.787 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.409.797 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.409.799 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.409.799 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.409.805 I llm_load_print_meta: n_ff             = 16384
0.00.409.805 I llm_load_print_meta: n_expert         = 0
0.00.409.806 I llm_load_print_meta: n_expert_used    = 0
0.00.409.819 I llm_load_print_meta: causal attn      = 1
0.00.409.819 I llm_load_print_meta: pooling type     = 0
0.00.409.820 I llm_load_print_meta: rope type        = 2
0.00.409.820 I llm_load_print_meta: rope scaling     = linear
0.00.409.822 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.409.823 I llm_load_print_meta: freq_scale_train = 1
0.00.409.823 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.409.823 I llm_load_print_meta: rope_finetuned   = unknown
0.00.409.833 I llm_load_print_meta: ssm_d_conv       = 0
0.00.409.834 I llm_load_print_meta: ssm_d_inner      = 0
0.00.409.834 I llm_load_print_meta: ssm_d_state      = 0
0.00.409.847 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.409.848 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.409.849 I llm_load_print_meta: model type       = 2B
0.00.409.850 I llm_load_print_meta: model ftype      = Q8_0
0.00.409.850 I llm_load_print_meta: model params     = 2.51 B
0.00.409.852 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.409.852 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.409.853 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.409.853 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.409.853 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.409.854 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.409.861 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.409.862 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.409.869 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.409.870 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.409.871 I llm_load_print_meta: max token length = 93
0.00.410.048 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.486.947 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.486.955 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.486.956 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.486.957 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.486.957 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.486.958 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.492.449 I llama_new_context_with_model: n_ctx      = 8192
0.00.492.456 I llama_new_context_with_model: n_batch    = 2048
0.00.492.456 I llama_new_context_with_model: n_ubatch   = 512
0.00.492.457 I llama_new_context_with_model: flash_attn = 0
0.00.492.460 I llama_new_context_with_model: freq_base  = 10000.0
0.00.492.461 I llama_new_context_with_model: freq_scale = 1
0.00.521.085 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.521.125 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.521.241 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.522.615 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.522.621 I llama_new_context_with_model: graph nodes  = 601
0.00.522.621 I llama_new_context_with_model: graph splits = 1
0.00.522.636 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.138.361 I main: llama threadpool init, n_threads = 4
0.01.138.373 I 
0.01.138.465 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.138.469 I 
0.01.138.638 I sampler seed: 2997972997
0.01.138.649 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.138.653 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.138.654 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.138.654 I 
 increasities and societal critiques of the modern world.

**Answer:**

**1. The Erosion of Traditional Values and Beliefs:**

- The rapid decline of

0.14.650.902 I llama_perf_sampler_print:    sampling time =      48.68 ms /    33 runs   (    1.48 ms per token,   677.87 tokens per second)
0.14.650.923 I llama_perf_context_print:        load time =    1135.49 ms
0.14.650.926 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.650.928 I llama_perf_context_print:        eval time =   13431.24 ms /    32 runs   (  419.73 ms per token,     2.38 tokens per second)
0.14.650.929 I llama_perf_context_print:       total time =   13512.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.626 I build: 3855 (a90484c6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.002.777 I main: load the model and apply lora adapter, if any
0.00.026.920 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.027.097 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.027.186 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.197 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.201 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.205 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.206 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.207 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.208 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.209 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.209 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.217 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.218 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.219 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.220 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.027.221 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.968 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.440 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.419 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.425 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.426 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.427 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.427 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.428 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.429 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.432 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.433 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.434 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.194.435 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.194.435 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.194.443 I llama_model_loader: - type  f32:   37 tensors
0.00.194.446 I llama_model_loader: - type q8_0:  127 tensors
0.00.333.281 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.359.781 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.360.859 I llm_load_vocab: special tokens cache size = 5
0.00.419.102 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.419.161 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.419.164 I llm_load_print_meta: arch             = gemma
0.00.419.165 I llm_load_print_meta: vocab type       = SPM
0.00.419.166 I llm_load_print_meta: n_vocab          = 256000
0.00.419.168 I llm_load_print_meta: n_merges         = 0
0.00.419.169 I llm_load_print_meta: vocab_only       = 0
0.00.419.169 I llm_load_print_meta: n_ctx_train      = 8192
0.00.419.169 I llm_load_print_meta: n_embd           = 2048
0.00.419.170 I llm_load_print_meta: n_layer          = 18
0.00.419.234 I llm_load_print_meta: n_head           = 8
0.00.419.244 I llm_load_print_meta: n_head_kv        = 1
0.00.419.244 I llm_load_print_meta: n_rot            = 256
0.00.419.246 I llm_load_print_meta: n_swa            = 0
0.00.419.246 I llm_load_print_meta: n_embd_head_k    = 256
0.00.419.247 I llm_load_print_meta: n_embd_head_v    = 256
0.00.419.254 I llm_load_print_meta: n_gqa            = 8
0.00.419.258 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.419.264 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.419.277 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.419.279 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.419.280 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.419.280 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.419.280 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.419.285 I llm_load_print_meta: n_ff             = 16384
0.00.419.286 I llm_load_print_meta: n_expert         = 0
0.00.419.287 I llm_load_print_meta: n_expert_used    = 0
0.00.419.287 I llm_load_print_meta: causal attn      = 1
0.00.419.287 I llm_load_print_meta: pooling type     = 0
0.00.419.288 I llm_load_print_meta: rope type        = 2
0.00.419.288 I llm_load_print_meta: rope scaling     = linear
0.00.419.290 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.419.290 I llm_load_print_meta: freq_scale_train = 1
0.00.419.291 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.419.291 I llm_load_print_meta: rope_finetuned   = unknown
0.00.419.292 I llm_load_print_meta: ssm_d_conv       = 0
0.00.419.293 I llm_load_print_meta: ssm_d_inner      = 0
0.00.419.293 I llm_load_print_meta: ssm_d_state      = 0
0.00.419.293 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.419.294 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.419.295 I llm_load_print_meta: model type       = 2B
0.00.419.296 I llm_load_print_meta: model ftype      = Q8_0
0.00.419.297 I llm_load_print_meta: model params     = 2.51 B
0.00.419.297 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.419.298 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.419.298 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.419.299 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.419.299 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.419.299 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.419.300 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.419.300 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.419.306 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.419.307 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.419.308 I llm_load_print_meta: max token length = 93
0.00.419.484 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.490.299 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.490.310 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.495.817 I llama_new_context_with_model: n_ctx      = 8192
0.00.495.824 I llama_new_context_with_model: n_batch    = 2048
0.00.495.825 I llama_new_context_with_model: n_ubatch   = 512
0.00.495.825 I llama_new_context_with_model: flash_attn = 0
0.00.495.828 I llama_new_context_with_model: freq_base  = 10000.0
0.00.495.829 I llama_new_context_with_model: freq_scale = 1
0.00.524.910 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.524.955 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.525.066 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.526.478 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.526.484 I llama_new_context_with_model: graph nodes  = 601
0.00.526.484 I llama_new_context_with_model: graph splits = 1
0.00.526.501 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.137.739 I main: llama threadpool init, n_threads = 4
0.01.137.752 I 
0.01.137.843 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.137.846 I 
0.01.138.013 I sampler seed: 3950421418
0.01.138.023 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.138.028 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.138.029 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.138.029 I 
 increasities on the internet. [end of text]


0.04.100.708 I llama_perf_sampler_print:    sampling time =      10.86 ms /     8 runs   (    1.36 ms per token,   736.65 tokens per second)
0.04.100.711 I llama_perf_context_print:        load time =    1134.88 ms
0.04.100.713 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.100.714 I llama_perf_context_print:        eval time =    2943.40 ms /     7 runs   (  420.49 ms per token,     2.38 tokens per second)
0.04.100.715 I llama_perf_context_print:       total time =    2962.98 ms /     8 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m45.837s
user	2m18.359s
sys	0m9.464s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3855 (a90484c6)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199510.51 ms
main:    total time = 199510.51 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.621 I build: 3855 (a90484c6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.811 I main: llama backend init
0.00.002.738 I main: load the model and apply lora adapter, if any
0.00.024.593 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.781 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.865 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.876 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.877 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.882 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.885 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.886 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.887 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.889 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.889 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.894 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.896 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.897 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.897 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.898 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.092.595 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.180.205 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.192.308 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.192.315 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.192.316 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.192.317 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.192.318 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.192.319 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.192.320 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.192.323 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.192.324 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.192.325 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.192.325 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.192.326 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.192.335 I llama_model_loader: - type  f32:   37 tensors
0.00.192.339 I llama_model_loader: - type q4_K:  108 tensors
0.00.192.340 I llama_model_loader: - type q6_K:   19 tensors
0.00.332.642 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.359.982 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.361.033 I llm_load_vocab: special tokens cache size = 5
0.00.418.654 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.418.714 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.418.715 I llm_load_print_meta: arch             = gemma
0.00.418.716 I llm_load_print_meta: vocab type       = SPM
0.00.418.717 I llm_load_print_meta: n_vocab          = 256000
0.00.418.720 I llm_load_print_meta: n_merges         = 0
0.00.418.721 I llm_load_print_meta: vocab_only       = 0
0.00.418.721 I llm_load_print_meta: n_ctx_train      = 8192
0.00.418.721 I llm_load_print_meta: n_embd           = 2048
0.00.418.722 I llm_load_print_meta: n_layer          = 18
0.00.418.784 I llm_load_print_meta: n_head           = 8
0.00.418.812 I llm_load_print_meta: n_head_kv        = 1
0.00.418.813 I llm_load_print_meta: n_rot            = 256
0.00.418.813 I llm_load_print_meta: n_swa            = 0
0.00.418.814 I llm_load_print_meta: n_embd_head_k    = 256
0.00.418.814 I llm_load_print_meta: n_embd_head_v    = 256
0.00.418.820 I llm_load_print_meta: n_gqa            = 8
0.00.418.825 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.418.830 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.418.832 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.418.833 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.418.834 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.418.834 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.418.835 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.418.839 I llm_load_print_meta: n_ff             = 16384
0.00.418.840 I llm_load_print_meta: n_expert         = 0
0.00.418.840 I llm_load_print_meta: n_expert_used    = 0
0.00.418.840 I llm_load_print_meta: causal attn      = 1
0.00.418.841 I llm_load_print_meta: pooling type     = 0
0.00.418.841 I llm_load_print_meta: rope type        = 2
0.00.418.842 I llm_load_print_meta: rope scaling     = linear
0.00.418.844 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.418.849 I llm_load_print_meta: freq_scale_train = 1
0.00.418.849 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.418.850 I llm_load_print_meta: rope_finetuned   = unknown
0.00.418.850 I llm_load_print_meta: ssm_d_conv       = 0
0.00.418.858 I llm_load_print_meta: ssm_d_inner      = 0
0.00.418.858 I llm_load_print_meta: ssm_d_state      = 0
0.00.418.866 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.418.870 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.418.870 I llm_load_print_meta: model type       = 2B
0.00.418.871 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.418.872 I llm_load_print_meta: model params     = 2.51 B
0.00.418.873 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.418.873 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.418.874 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.418.874 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.418.874 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.418.875 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.418.875 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.418.876 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.418.881 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.418.883 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.418.883 I llm_load_print_meta: max token length = 93
0.00.419.067 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.479.114 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.479.126 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.479.127 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.479.127 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.479.128 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.479.129 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.484.762 I llama_new_context_with_model: n_ctx      = 8192
0.00.484.769 I llama_new_context_with_model: n_batch    = 2048
0.00.484.770 I llama_new_context_with_model: n_ubatch   = 512
0.00.484.770 I llama_new_context_with_model: flash_attn = 0
0.00.484.775 I llama_new_context_with_model: freq_base  = 10000.0
0.00.484.775 I llama_new_context_with_model: freq_scale = 1
0.00.515.090 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.515.133 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.515.242 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.516.622 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.516.628 I llama_new_context_with_model: graph nodes  = 601
0.00.516.628 I llama_new_context_with_model: graph splits = 1
0.00.516.644 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.098.022 I main: llama threadpool init, n_threads = 4
0.01.098.033 I 
0.01.098.130 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.098.134 I 
0.01.098.302 I sampler seed: 1862341895
0.01.098.312 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.098.316 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.098.317 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.098.317 I 
 increasively, and carelessly, until he reached the porch, where he was met by his neighbor with a stern expression.

**What happened?**

The

0.11.997.431 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   671.05 tokens per second)
0.11.997.435 I llama_perf_context_print:        load time =    1095.21 ms
0.11.997.437 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.997.439 I llama_perf_context_print:        eval time =   10817.75 ms /    32 runs   (  338.05 ms per token,     2.96 tokens per second)
0.11.997.440 I llama_perf_context_print:       total time =   10899.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3855 (a90484c6)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199409.47 ms
main:    total time = 199409.47 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.619 I build: 3855 (a90484c6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.817 I main: llama backend init
0.00.002.749 I main: load the model and apply lora adapter, if any
0.00.024.595 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.684 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.698 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.707 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.712 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.713 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.714 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.716 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.716 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.717 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.723 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.724 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.725 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.725 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.726 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.093.192 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.180.579 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.192.600 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.192.607 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.192.608 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.192.609 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.192.610 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.192.612 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.192.612 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.192.615 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.192.616 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.192.624 I llama_model_loader: - type  f32:   37 tensors
0.00.192.629 I llama_model_loader: - type q4_K:  108 tensors
0.00.192.629 I llama_model_loader: - type q6_K:   19 tensors
0.00.322.643 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.345.078 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.346.061 I llm_load_vocab: special tokens cache size = 5
0.00.403.417 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.403.483 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.403.484 I llm_load_print_meta: arch             = gemma
0.00.403.485 I llm_load_print_meta: vocab type       = SPM
0.00.403.486 I llm_load_print_meta: n_vocab          = 256000
0.00.403.488 I llm_load_print_meta: n_merges         = 0
0.00.403.489 I llm_load_print_meta: vocab_only       = 0
0.00.403.489 I llm_load_print_meta: n_ctx_train      = 8192
0.00.403.489 I llm_load_print_meta: n_embd           = 2048
0.00.403.490 I llm_load_print_meta: n_layer          = 18
0.00.403.552 I llm_load_print_meta: n_head           = 8
0.00.403.559 I llm_load_print_meta: n_head_kv        = 1
0.00.403.559 I llm_load_print_meta: n_rot            = 256
0.00.403.560 I llm_load_print_meta: n_swa            = 0
0.00.403.560 I llm_load_print_meta: n_embd_head_k    = 256
0.00.403.560 I llm_load_print_meta: n_embd_head_v    = 256
0.00.403.565 I llm_load_print_meta: n_gqa            = 8
0.00.403.569 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.403.574 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.403.575 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.403.576 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.403.577 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.403.577 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.403.578 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.403.582 I llm_load_print_meta: n_ff             = 16384
0.00.403.583 I llm_load_print_meta: n_expert         = 0
0.00.403.584 I llm_load_print_meta: n_expert_used    = 0
0.00.403.584 I llm_load_print_meta: causal attn      = 1
0.00.403.585 I llm_load_print_meta: pooling type     = 0
0.00.403.585 I llm_load_print_meta: rope type        = 2
0.00.403.586 I llm_load_print_meta: rope scaling     = linear
0.00.403.588 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.403.589 I llm_load_print_meta: freq_scale_train = 1
0.00.403.600 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.403.600 I llm_load_print_meta: rope_finetuned   = unknown
0.00.403.601 I llm_load_print_meta: ssm_d_conv       = 0
0.00.403.601 I llm_load_print_meta: ssm_d_inner      = 0
0.00.403.601 I llm_load_print_meta: ssm_d_state      = 0
0.00.403.602 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.403.603 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.403.604 I llm_load_print_meta: model type       = 2B
0.00.403.605 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.403.606 I llm_load_print_meta: model params     = 2.51 B
0.00.403.607 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.403.607 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.403.608 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.403.609 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.403.609 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.403.610 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.403.611 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.403.612 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.403.617 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.403.619 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.403.619 I llm_load_print_meta: max token length = 93
0.00.403.789 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.462.032 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.467.505 I llama_new_context_with_model: n_ctx      = 8192
0.00.467.511 I llama_new_context_with_model: n_batch    = 2048
0.00.467.511 I llama_new_context_with_model: n_ubatch   = 512
0.00.467.512 I llama_new_context_with_model: flash_attn = 0
0.00.467.514 I llama_new_context_with_model: freq_base  = 10000.0
0.00.467.515 I llama_new_context_with_model: freq_scale = 1
0.00.496.651 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.496.698 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.496.809 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.498.138 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.498.144 I llama_new_context_with_model: graph nodes  = 601
0.00.498.145 I llama_new_context_with_model: graph splits = 1
0.00.498.162 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.079.660 I main: llama threadpool init, n_threads = 4
0.01.079.672 I 
0.01.079.773 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.079.777 I 
0.01.079.946 I sampler seed: 3431564068
0.01.079.957 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.079.962 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.079.962 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.079.979 I 
 seconally with the following questions:

**a) Explain the difference between the terms "high-level" and "low-level" in software development.**

0.12.096.201 I llama_perf_sampler_print:    sampling time =      49.14 ms /    33 runs   (    1.49 ms per token,   671.51 tokens per second)
0.12.096.205 I llama_perf_context_print:        load time =    1076.84 ms
0.12.096.206 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.096.207 I llama_perf_context_print:        eval time =   10934.90 ms /    32 runs   (  341.72 ms per token,     2.93 tokens per second)
0.12.096.208 I llama_perf_context_print:       total time =   11016.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.865s
user	50m16.118s
sys	0m6.374s
