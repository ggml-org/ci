+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.636 I build: 3821 (70392f1f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.002.791 I main: load the model and apply lora adapter, if any
0.00.024.698 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.891 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.977 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.988 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.989 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.992 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.993 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.994 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.996 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.997 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.997 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.004 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.005 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.005 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.010 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.011 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.065 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.557 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.762 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.770 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.771 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.772 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.773 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.774 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.775 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.778 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.779 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.780 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.781 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.782 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.789 I llama_model_loader: - type  f32:   37 tensors
0.00.197.794 I llama_model_loader: - type q8_0:  127 tensors
0.00.489.488 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.304 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.346 I llm_load_vocab: special tokens cache size = 5
0.00.576.180 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.576.241 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.576.242 I llm_load_print_meta: arch             = gemma
0.00.576.243 I llm_load_print_meta: vocab type       = SPM
0.00.576.244 I llm_load_print_meta: n_vocab          = 256000
0.00.576.246 I llm_load_print_meta: n_merges         = 0
0.00.576.247 I llm_load_print_meta: vocab_only       = 0
0.00.576.247 I llm_load_print_meta: n_ctx_train      = 8192
0.00.576.247 I llm_load_print_meta: n_embd           = 2048
0.00.576.248 I llm_load_print_meta: n_layer          = 18
0.00.576.283 I llm_load_print_meta: n_head           = 8
0.00.576.290 I llm_load_print_meta: n_head_kv        = 1
0.00.576.290 I llm_load_print_meta: n_rot            = 256
0.00.576.291 I llm_load_print_meta: n_swa            = 0
0.00.576.291 I llm_load_print_meta: n_embd_head_k    = 256
0.00.576.291 I llm_load_print_meta: n_embd_head_v    = 256
0.00.576.297 I llm_load_print_meta: n_gqa            = 8
0.00.576.303 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.576.308 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.576.309 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.576.310 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.576.311 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.576.311 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.576.311 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.576.316 I llm_load_print_meta: n_ff             = 16384
0.00.576.317 I llm_load_print_meta: n_expert         = 0
0.00.576.317 I llm_load_print_meta: n_expert_used    = 0
0.00.576.318 I llm_load_print_meta: causal attn      = 1
0.00.576.318 I llm_load_print_meta: pooling type     = 0
0.00.576.320 I llm_load_print_meta: rope type        = 2
0.00.576.320 I llm_load_print_meta: rope scaling     = linear
0.00.576.322 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.576.323 I llm_load_print_meta: freq_scale_train = 1
0.00.576.323 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.576.324 I llm_load_print_meta: rope_finetuned   = unknown
0.00.576.324 I llm_load_print_meta: ssm_d_conv       = 0
0.00.576.325 I llm_load_print_meta: ssm_d_inner      = 0
0.00.576.325 I llm_load_print_meta: ssm_d_state      = 0
0.00.576.326 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.576.326 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.576.327 I llm_load_print_meta: model type       = 2B
0.00.576.328 I llm_load_print_meta: model ftype      = Q8_0
0.00.576.329 I llm_load_print_meta: model params     = 2.51 B
0.00.576.330 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.576.331 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.576.332 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.576.333 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.576.333 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.576.333 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.576.334 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.576.334 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.576.340 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.576.342 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.576.342 I llm_load_print_meta: max token length = 93
0.00.576.524 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.674.080 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.674.091 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.674.091 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.674.092 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.674.093 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.674.093 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.679.795 I llama_new_context_with_model: n_ctx      = 8192
0.00.679.802 I llama_new_context_with_model: n_batch    = 2048
0.00.679.803 I llama_new_context_with_model: n_ubatch   = 512
0.00.679.803 I llama_new_context_with_model: flash_attn = 0
0.00.679.806 I llama_new_context_with_model: freq_base  = 10000.0
0.00.679.807 I llama_new_context_with_model: freq_scale = 1
0.00.709.412 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.709.459 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.709.579 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.710.954 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.710.960 I llama_new_context_with_model: graph nodes  = 601
0.00.710.961 I llama_new_context_with_model: graph splits = 1
0.00.710.977 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.324.342 I main: llama threadpool init, n_threads = 4
0.01.324.354 I 
0.01.324.454 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.324.460 I 
0.01.324.656 I sampler seed: 1820140870
0.01.324.670 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.324.677 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.324.681 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.324.681 I 
 increasities for the opportunity to enter the domain of magic.

As a beginner, I am eager to learn the basics of magic. What are some good resources

0.14.917.670 I llama_perf_sampler_print:    sampling time =      49.39 ms /    33 runs   (    1.50 ms per token,   668.12 tokens per second)
0.14.917.674 I llama_perf_context_print:        load time =    1321.46 ms
0.14.917.678 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.917.680 I llama_perf_context_print:        eval time =   13511.44 ms /    32 runs   (  422.23 ms per token,     2.37 tokens per second)
0.14.917.682 I llama_perf_context_print:       total time =   13593.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.644 I build: 3821 (70392f1f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.859 I main: llama backend init
0.00.002.793 I main: load the model and apply lora adapter, if any
0.00.026.606 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.026.694 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.708 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.709 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.713 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.715 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.716 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.717 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.718 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.719 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.725 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.726 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.727 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.736 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.737 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.836 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.791 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.905 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.911 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.912 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.913 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.914 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.915 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.916 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.919 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.920 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.922 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.922 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.198.924 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.931 I llama_model_loader: - type  f32:   37 tensors
0.00.198.935 I llama_model_loader: - type q8_0:  127 tensors
0.00.480.069 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.066 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.057 I llm_load_vocab: special tokens cache size = 5
0.00.561.965 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.562.023 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.562.024 I llm_load_print_meta: arch             = gemma
0.00.562.025 I llm_load_print_meta: vocab type       = SPM
0.00.562.025 I llm_load_print_meta: n_vocab          = 256000
0.00.562.028 I llm_load_print_meta: n_merges         = 0
0.00.562.028 I llm_load_print_meta: vocab_only       = 0
0.00.562.028 I llm_load_print_meta: n_ctx_train      = 8192
0.00.562.029 I llm_load_print_meta: n_embd           = 2048
0.00.562.029 I llm_load_print_meta: n_layer          = 18
0.00.562.065 I llm_load_print_meta: n_head           = 8
0.00.562.072 I llm_load_print_meta: n_head_kv        = 1
0.00.562.072 I llm_load_print_meta: n_rot            = 256
0.00.562.073 I llm_load_print_meta: n_swa            = 0
0.00.562.073 I llm_load_print_meta: n_embd_head_k    = 256
0.00.562.073 I llm_load_print_meta: n_embd_head_v    = 256
0.00.562.078 I llm_load_print_meta: n_gqa            = 8
0.00.562.083 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.562.088 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.562.089 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.562.090 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.562.090 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.562.091 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.562.091 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.562.096 I llm_load_print_meta: n_ff             = 16384
0.00.562.097 I llm_load_print_meta: n_expert         = 0
0.00.562.097 I llm_load_print_meta: n_expert_used    = 0
0.00.562.098 I llm_load_print_meta: causal attn      = 1
0.00.562.099 I llm_load_print_meta: pooling type     = 0
0.00.562.100 I llm_load_print_meta: rope type        = 2
0.00.562.100 I llm_load_print_meta: rope scaling     = linear
0.00.562.102 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.562.103 I llm_load_print_meta: freq_scale_train = 1
0.00.562.123 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.562.124 I llm_load_print_meta: rope_finetuned   = unknown
0.00.562.124 I llm_load_print_meta: ssm_d_conv       = 0
0.00.562.125 I llm_load_print_meta: ssm_d_inner      = 0
0.00.562.126 I llm_load_print_meta: ssm_d_state      = 0
0.00.562.127 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.562.127 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.562.128 I llm_load_print_meta: model type       = 2B
0.00.562.129 I llm_load_print_meta: model ftype      = Q8_0
0.00.562.130 I llm_load_print_meta: model params     = 2.51 B
0.00.562.131 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.562.131 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.562.132 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.562.132 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.562.133 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.562.134 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.562.134 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.562.135 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.562.142 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.562.143 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.562.144 I llm_load_print_meta: max token length = 93
0.00.562.326 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.656.727 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.662.356 I llama_new_context_with_model: n_ctx      = 8192
0.00.662.363 I llama_new_context_with_model: n_batch    = 2048
0.00.662.363 I llama_new_context_with_model: n_ubatch   = 512
0.00.662.364 I llama_new_context_with_model: flash_attn = 0
0.00.662.366 I llama_new_context_with_model: freq_base  = 10000.0
0.00.662.367 I llama_new_context_with_model: freq_scale = 1
0.00.691.893 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.691.938 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.692.054 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.693.408 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.693.415 I llama_new_context_with_model: graph nodes  = 601
0.00.693.415 I llama_new_context_with_model: graph splits = 1
0.00.693.432 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.305.053 I main: llama threadpool init, n_threads = 4
0.01.305.065 I 
0.01.305.158 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.305.162 I 
0.01.305.324 I sampler seed: 1731219586
0.01.305.334 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.305.339 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.305.340 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.305.350 I 
 increasities, and the like. 

I am unable to find the requested information. [end of text]


0.09.342.345 I llama_perf_sampler_print:    sampling time =      29.31 ms /    20 runs   (    1.47 ms per token,   682.43 tokens per second)
0.09.342.350 I llama_perf_context_print:        load time =    1302.18 ms
0.09.342.352 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.342.353 I llama_perf_context_print:        eval time =    7987.30 ms /    19 runs   (  420.38 ms per token,     2.38 tokens per second)
0.09.342.354 I llama_perf_context_print:       total time =    8037.30 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.651 I build: 3821 (70392f1f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.860 I main: llama backend init
0.00.002.805 I main: load the model and apply lora adapter, if any
0.00.024.778 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.981 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.071 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.082 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.083 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.087 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.088 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.089 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.090 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.091 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.092 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.098 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.099 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.100 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.101 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.102 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.174 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.338 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.571 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.579 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.580 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.581 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.582 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.583 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.585 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.588 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.589 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.590 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.591 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.197.592 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.601 I llama_model_loader: - type  f32:   37 tensors
0.00.197.605 I llama_model_loader: - type q8_0:  127 tensors
0.00.483.868 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.507.921 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.508.934 I llm_load_vocab: special tokens cache size = 5
0.00.566.879 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.566.932 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.566.936 I llm_load_print_meta: arch             = gemma
0.00.566.937 I llm_load_print_meta: vocab type       = SPM
0.00.566.937 I llm_load_print_meta: n_vocab          = 256000
0.00.566.939 I llm_load_print_meta: n_merges         = 0
0.00.566.940 I llm_load_print_meta: vocab_only       = 0
0.00.566.941 I llm_load_print_meta: n_ctx_train      = 8192
0.00.566.941 I llm_load_print_meta: n_embd           = 2048
0.00.566.942 I llm_load_print_meta: n_layer          = 18
0.00.566.975 I llm_load_print_meta: n_head           = 8
0.00.566.985 I llm_load_print_meta: n_head_kv        = 1
0.00.566.986 I llm_load_print_meta: n_rot            = 256
0.00.566.987 I llm_load_print_meta: n_swa            = 0
0.00.566.987 I llm_load_print_meta: n_embd_head_k    = 256
0.00.566.987 I llm_load_print_meta: n_embd_head_v    = 256
0.00.566.993 I llm_load_print_meta: n_gqa            = 8
0.00.566.998 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.567.004 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.567.005 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.567.006 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.567.007 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.567.007 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.567.008 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.567.013 I llm_load_print_meta: n_ff             = 16384
0.00.567.014 I llm_load_print_meta: n_expert         = 0
0.00.567.015 I llm_load_print_meta: n_expert_used    = 0
0.00.567.015 I llm_load_print_meta: causal attn      = 1
0.00.567.016 I llm_load_print_meta: pooling type     = 0
0.00.567.016 I llm_load_print_meta: rope type        = 2
0.00.567.017 I llm_load_print_meta: rope scaling     = linear
0.00.567.019 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.567.019 I llm_load_print_meta: freq_scale_train = 1
0.00.567.020 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.567.020 I llm_load_print_meta: rope_finetuned   = unknown
0.00.567.020 I llm_load_print_meta: ssm_d_conv       = 0
0.00.567.021 I llm_load_print_meta: ssm_d_inner      = 0
0.00.567.021 I llm_load_print_meta: ssm_d_state      = 0
0.00.567.022 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.567.022 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.567.023 I llm_load_print_meta: model type       = 2B
0.00.567.024 I llm_load_print_meta: model ftype      = Q8_0
0.00.567.026 I llm_load_print_meta: model params     = 2.51 B
0.00.567.026 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.567.027 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.567.028 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.567.029 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.567.030 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.567.030 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.567.031 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.567.031 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.567.036 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.567.038 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.567.039 I llm_load_print_meta: max token length = 93
0.00.567.223 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.645.382 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.645.393 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.645.394 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.645.394 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.645.395 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.645.396 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.651.116 I llama_new_context_with_model: n_ctx      = 8192
0.00.651.124 I llama_new_context_with_model: n_batch    = 2048
0.00.651.124 I llama_new_context_with_model: n_ubatch   = 512
0.00.651.125 I llama_new_context_with_model: flash_attn = 0
0.00.651.128 I llama_new_context_with_model: freq_base  = 10000.0
0.00.651.129 I llama_new_context_with_model: freq_scale = 1
0.00.680.473 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.680.516 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.680.641 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.682.063 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.682.071 I llama_new_context_with_model: graph nodes  = 601
0.00.682.072 I llama_new_context_with_model: graph splits = 1
0.00.682.095 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.322.130 I main: llama threadpool init, n_threads = 4
0.01.322.141 I 
0.01.322.244 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.322.248 I 
0.01.322.419 I sampler seed: 428654528
0.01.322.430 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.322.434 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.322.435 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.322.436 I 
 increadibly!

I am unable to understand the provided sentence as it contains nonsensical and irrelevant words and phrases. [end of text]


0.11.475.130 I llama_perf_sampler_print:    sampling time =      36.99 ms /    25 runs   (    1.48 ms per token,   675.82 tokens per second)
0.11.475.133 I llama_perf_context_print:        load time =    1319.24 ms
0.11.475.134 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.475.150 I llama_perf_context_print:        eval time =   10090.19 ms /    24 runs   (  420.42 ms per token,     2.38 tokens per second)
0.11.475.151 I llama_perf_context_print:       total time =   10153.01 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.661 I build: 3821 (70392f1f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.886 I main: llama backend init
0.00.002.858 I main: load the model and apply lora adapter, if any
0.00.024.562 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.765 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.858 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.869 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.870 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.874 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.875 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.876 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.876 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.877 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.878 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.885 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.887 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.888 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.890 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.891 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.199 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.796 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.043 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.053 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.054 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.055 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.056 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.056 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.057 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.061 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.061 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.063 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.063 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.197.065 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.073 I llama_model_loader: - type  f32:   37 tensors
0.00.197.077 I llama_model_loader: - type q8_0:  127 tensors
0.00.489.798 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.520.284 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.521.320 I llm_load_vocab: special tokens cache size = 5
0.00.579.707 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.579.765 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.579.766 I llm_load_print_meta: arch             = gemma
0.00.579.767 I llm_load_print_meta: vocab type       = SPM
0.00.579.768 I llm_load_print_meta: n_vocab          = 256000
0.00.579.771 I llm_load_print_meta: n_merges         = 0
0.00.579.771 I llm_load_print_meta: vocab_only       = 0
0.00.579.772 I llm_load_print_meta: n_ctx_train      = 8192
0.00.579.772 I llm_load_print_meta: n_embd           = 2048
0.00.579.772 I llm_load_print_meta: n_layer          = 18
0.00.579.808 I llm_load_print_meta: n_head           = 8
0.00.579.814 I llm_load_print_meta: n_head_kv        = 1
0.00.579.815 I llm_load_print_meta: n_rot            = 256
0.00.579.815 I llm_load_print_meta: n_swa            = 0
0.00.579.816 I llm_load_print_meta: n_embd_head_k    = 256
0.00.579.816 I llm_load_print_meta: n_embd_head_v    = 256
0.00.579.821 I llm_load_print_meta: n_gqa            = 8
0.00.579.826 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.579.831 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.579.832 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.579.834 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.579.835 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.579.835 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.579.846 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.579.853 I llm_load_print_meta: n_ff             = 16384
0.00.579.854 I llm_load_print_meta: n_expert         = 0
0.00.579.855 I llm_load_print_meta: n_expert_used    = 0
0.00.579.856 I llm_load_print_meta: causal attn      = 1
0.00.579.856 I llm_load_print_meta: pooling type     = 0
0.00.579.857 I llm_load_print_meta: rope type        = 2
0.00.579.858 I llm_load_print_meta: rope scaling     = linear
0.00.579.863 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.579.863 I llm_load_print_meta: freq_scale_train = 1
0.00.579.864 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.579.865 I llm_load_print_meta: rope_finetuned   = unknown
0.00.579.865 I llm_load_print_meta: ssm_d_conv       = 0
0.00.579.865 I llm_load_print_meta: ssm_d_inner      = 0
0.00.579.865 I llm_load_print_meta: ssm_d_state      = 0
0.00.579.866 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.579.867 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.579.868 I llm_load_print_meta: model type       = 2B
0.00.579.869 I llm_load_print_meta: model ftype      = Q8_0
0.00.579.870 I llm_load_print_meta: model params     = 2.51 B
0.00.579.870 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.579.871 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.579.872 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.579.873 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.579.873 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.579.873 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.579.877 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.579.877 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.579.884 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.579.885 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.579.886 I llm_load_print_meta: max token length = 93
0.00.580.080 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.650.996 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.651.007 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.656.711 I llama_new_context_with_model: n_ctx      = 8192
0.00.656.717 I llama_new_context_with_model: n_batch    = 2048
0.00.656.718 I llama_new_context_with_model: n_ubatch   = 512
0.00.656.718 I llama_new_context_with_model: flash_attn = 0
0.00.656.721 I llama_new_context_with_model: freq_base  = 10000.0
0.00.656.722 I llama_new_context_with_model: freq_scale = 1
0.00.685.933 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.685.972 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.686.088 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.687.466 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.687.474 I llama_new_context_with_model: graph nodes  = 601
0.00.687.475 I llama_new_context_with_model: graph splits = 1
0.00.687.494 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.299.364 I main: llama threadpool init, n_threads = 4
0.01.299.374 I 
0.01.299.472 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.299.478 I 
0.01.299.643 I sampler seed: 952866869
0.01.299.657 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.299.662 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.299.664 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.299.664 I 
 increasels, and a giant serpent.

The story takes place in a lush forest.

**Scene:**

Deep within a lush forest, sunlight filters through

0.14.816.291 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.78 tokens per second)
0.14.816.294 I llama_perf_context_print:        load time =    1296.42 ms
0.14.816.296 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.816.297 I llama_perf_context_print:        eval time =   13434.41 ms /    32 runs   (  419.83 ms per token,     2.38 tokens per second)
0.14.816.298 I llama_perf_context_print:       total time =   13516.94 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m0.112s
user	3m13.788s
sys	0m9.383s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3821 (70392f1f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199568.29 ms
main:    total time = 199568.29 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.629 I build: 3821 (70392f1f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.002.790 I main: load the model and apply lora adapter, if any
0.00.024.669 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.847 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.945 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.955 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.958 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.961 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.962 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.963 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.964 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.971 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.973 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.978 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.979 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.980 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.981 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.982 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.647 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.653 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.971 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.980 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.981 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.982 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.983 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.984 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.985 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.988 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.989 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.990 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.991 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.992 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.001 I llama_model_loader: - type  f32:   37 tensors
0.00.197.006 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.007 I llama_model_loader: - type q6_K:   19 tensors
0.00.480.438 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.945 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.982 I llm_load_vocab: special tokens cache size = 5
0.00.563.750 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.563.805 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.563.806 I llm_load_print_meta: arch             = gemma
0.00.563.807 I llm_load_print_meta: vocab type       = SPM
0.00.563.808 I llm_load_print_meta: n_vocab          = 256000
0.00.563.810 I llm_load_print_meta: n_merges         = 0
0.00.563.811 I llm_load_print_meta: vocab_only       = 0
0.00.563.811 I llm_load_print_meta: n_ctx_train      = 8192
0.00.563.812 I llm_load_print_meta: n_embd           = 2048
0.00.563.812 I llm_load_print_meta: n_layer          = 18
0.00.563.848 I llm_load_print_meta: n_head           = 8
0.00.563.855 I llm_load_print_meta: n_head_kv        = 1
0.00.563.856 I llm_load_print_meta: n_rot            = 256
0.00.563.856 I llm_load_print_meta: n_swa            = 0
0.00.563.856 I llm_load_print_meta: n_embd_head_k    = 256
0.00.563.857 I llm_load_print_meta: n_embd_head_v    = 256
0.00.563.862 I llm_load_print_meta: n_gqa            = 8
0.00.563.866 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.563.871 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.563.872 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.563.874 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.563.874 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.563.875 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.563.876 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.563.882 I llm_load_print_meta: n_ff             = 16384
0.00.563.883 I llm_load_print_meta: n_expert         = 0
0.00.563.894 I llm_load_print_meta: n_expert_used    = 0
0.00.563.895 I llm_load_print_meta: causal attn      = 1
0.00.563.896 I llm_load_print_meta: pooling type     = 0
0.00.563.896 I llm_load_print_meta: rope type        = 2
0.00.563.897 I llm_load_print_meta: rope scaling     = linear
0.00.563.898 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.563.899 I llm_load_print_meta: freq_scale_train = 1
0.00.563.899 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.563.900 I llm_load_print_meta: rope_finetuned   = unknown
0.00.563.913 I llm_load_print_meta: ssm_d_conv       = 0
0.00.563.914 I llm_load_print_meta: ssm_d_inner      = 0
0.00.563.915 I llm_load_print_meta: ssm_d_state      = 0
0.00.563.915 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.563.916 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.563.916 I llm_load_print_meta: model type       = 2B
0.00.563.917 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.563.918 I llm_load_print_meta: model params     = 2.51 B
0.00.563.919 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.563.920 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.563.921 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.563.921 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.563.930 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.563.931 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.563.931 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.563.932 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.563.938 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.563.939 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.563.940 I llm_load_print_meta: max token length = 93
0.00.564.117 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.624.402 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.624.411 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.624.412 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.624.412 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.624.413 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.624.414 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.630.120 I llama_new_context_with_model: n_ctx      = 8192
0.00.630.127 I llama_new_context_with_model: n_batch    = 2048
0.00.630.127 I llama_new_context_with_model: n_ubatch   = 512
0.00.630.128 I llama_new_context_with_model: flash_attn = 0
0.00.630.130 I llama_new_context_with_model: freq_base  = 10000.0
0.00.630.131 I llama_new_context_with_model: freq_scale = 1
0.00.659.381 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.659.421 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.659.551 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.660.954 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.660.960 I llama_new_context_with_model: graph nodes  = 601
0.00.660.961 I llama_new_context_with_model: graph splits = 1
0.00.660.977 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.242.130 I main: llama threadpool init, n_threads = 4
0.01.242.143 I 
0.01.242.234 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.242.238 I 
0.01.242.401 I sampler seed: 2712294650
0.01.242.412 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.242.417 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.242.418 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.242.418 I 
 secon.

I'm not sure how to properly format this string.

I apologize for the inconvenience. I'm still learning how to properly format strings

0.12.220.587 I llama_perf_sampler_print:    sampling time =      49.14 ms /    33 runs   (    1.49 ms per token,   671.56 tokens per second)
0.12.220.602 I llama_perf_context_print:        load time =    1239.26 ms
0.12.220.604 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.220.606 I llama_perf_context_print:        eval time =   10896.09 ms /    32 runs   (  340.50 ms per token,     2.94 tokens per second)
0.12.220.608 I llama_perf_context_print:       total time =   10978.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3821 (70392f1f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199568.98 ms
main:    total time = 199568.98 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.621 I build: 3821 (70392f1f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.819 I main: llama backend init
0.00.002.762 I main: load the model and apply lora adapter, if any
0.00.024.726 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.823 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.838 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.843 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.846 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.848 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.849 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.849 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.851 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.852 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.858 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.859 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.860 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.860 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.862 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.301 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.439 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.525 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.532 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.533 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.534 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.535 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.536 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.536 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.539 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.540 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.548 I llama_model_loader: - type  f32:   37 tensors
0.00.197.553 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.554 I llama_model_loader: - type q6_K:   19 tensors
0.00.488.954 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.022 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.034 I llm_load_vocab: special tokens cache size = 5
0.00.572.072 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.572.128 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.572.129 I llm_load_print_meta: arch             = gemma
0.00.572.130 I llm_load_print_meta: vocab type       = SPM
0.00.572.131 I llm_load_print_meta: n_vocab          = 256000
0.00.572.133 I llm_load_print_meta: n_merges         = 0
0.00.572.134 I llm_load_print_meta: vocab_only       = 0
0.00.572.134 I llm_load_print_meta: n_ctx_train      = 8192
0.00.572.135 I llm_load_print_meta: n_embd           = 2048
0.00.572.135 I llm_load_print_meta: n_layer          = 18
0.00.572.168 I llm_load_print_meta: n_head           = 8
0.00.572.176 I llm_load_print_meta: n_head_kv        = 1
0.00.572.177 I llm_load_print_meta: n_rot            = 256
0.00.572.177 I llm_load_print_meta: n_swa            = 0
0.00.572.178 I llm_load_print_meta: n_embd_head_k    = 256
0.00.572.178 I llm_load_print_meta: n_embd_head_v    = 256
0.00.572.183 I llm_load_print_meta: n_gqa            = 8
0.00.572.188 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.572.193 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.572.194 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.572.195 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.572.195 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.572.196 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.572.196 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.572.201 I llm_load_print_meta: n_ff             = 16384
0.00.572.202 I llm_load_print_meta: n_expert         = 0
0.00.572.202 I llm_load_print_meta: n_expert_used    = 0
0.00.572.203 I llm_load_print_meta: causal attn      = 1
0.00.572.204 I llm_load_print_meta: pooling type     = 0
0.00.572.204 I llm_load_print_meta: rope type        = 2
0.00.572.205 I llm_load_print_meta: rope scaling     = linear
0.00.572.206 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.572.207 I llm_load_print_meta: freq_scale_train = 1
0.00.572.208 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.572.209 I llm_load_print_meta: rope_finetuned   = unknown
0.00.572.209 I llm_load_print_meta: ssm_d_conv       = 0
0.00.572.209 I llm_load_print_meta: ssm_d_inner      = 0
0.00.572.210 I llm_load_print_meta: ssm_d_state      = 0
0.00.572.210 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.572.211 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.572.211 I llm_load_print_meta: model type       = 2B
0.00.572.213 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.572.213 I llm_load_print_meta: model params     = 2.51 B
0.00.572.218 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.572.219 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.572.219 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.572.220 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.572.221 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.572.222 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.572.222 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.572.223 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.572.228 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.572.229 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.572.230 I llm_load_print_meta: max token length = 93
0.00.572.408 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.631.867 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.637.310 I llama_new_context_with_model: n_ctx      = 8192
0.00.637.317 I llama_new_context_with_model: n_batch    = 2048
0.00.637.318 I llama_new_context_with_model: n_ubatch   = 512
0.00.637.318 I llama_new_context_with_model: flash_attn = 0
0.00.637.321 I llama_new_context_with_model: freq_base  = 10000.0
0.00.637.322 I llama_new_context_with_model: freq_scale = 1
0.00.667.804 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.667.846 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.667.964 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.669.397 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.669.404 I llama_new_context_with_model: graph nodes  = 601
0.00.669.404 I llama_new_context_with_model: graph splits = 1
0.00.669.421 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.249.288 I main: llama threadpool init, n_threads = 4
0.01.249.300 I 
0.01.249.391 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.249.395 I 
0.01.249.554 I sampler seed: 112870429
0.01.249.564 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.249.569 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.249.570 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.249.570 I 
 encompassing the entire population of Earth.

This is an ambitious goal, requiring a comprehensive understanding of human nature, societal structures, and the intricate web of interactions

0.12.282.190 I llama_perf_sampler_print:    sampling time =      49.28 ms /    33 runs   (    1.49 ms per token,   669.70 tokens per second)
0.12.282.194 I llama_perf_context_print:        load time =    1246.44 ms
0.12.282.195 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.282.197 I llama_perf_context_print:        eval time =   10951.24 ms /    32 runs   (  342.23 ms per token,     2.92 tokens per second)
0.12.282.222 I llama_perf_context_print:       total time =   11032.91 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.629s
user	50m18.011s
sys	0m6.350s
