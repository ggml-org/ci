+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.565 I build: 4243 (70b98fad) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.759 I main: llama backend init
0.00.000.766 I main: load the model and apply lora adapter, if any
0.00.021.003 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.012 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.019 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.024 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.025 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.028 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.029 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.030 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.031 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.031 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.032 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.035 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.036 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.036 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.037 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.038 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.940 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.250 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.121 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.127 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.128 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.129 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.129 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.130 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.131 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.134 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.135 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.136 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.137 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.137 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.140 I llama_model_loader: - type  f32:   37 tensors
0.00.131.142 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.703 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.019 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.619 I llm_load_vocab: special tokens cache size = 5
0.00.266.913 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.932 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.933 I llm_load_print_meta: arch             = gemma
0.00.266.933 I llm_load_print_meta: vocab type       = SPM
0.00.266.934 I llm_load_print_meta: n_vocab          = 256000
0.00.266.935 I llm_load_print_meta: n_merges         = 0
0.00.266.935 I llm_load_print_meta: vocab_only       = 0
0.00.266.935 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.936 I llm_load_print_meta: n_embd           = 2048
0.00.266.936 I llm_load_print_meta: n_layer          = 18
0.00.266.948 I llm_load_print_meta: n_head           = 8
0.00.266.949 I llm_load_print_meta: n_head_kv        = 1
0.00.266.949 I llm_load_print_meta: n_rot            = 256
0.00.266.950 I llm_load_print_meta: n_swa            = 0
0.00.266.950 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.950 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.951 I llm_load_print_meta: n_gqa            = 8
0.00.266.952 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.953 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.954 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.956 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.956 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.957 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.957 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.958 I llm_load_print_meta: n_ff             = 16384
0.00.266.958 I llm_load_print_meta: n_expert         = 0
0.00.266.959 I llm_load_print_meta: n_expert_used    = 0
0.00.266.959 I llm_load_print_meta: causal attn      = 1
0.00.266.959 I llm_load_print_meta: pooling type     = 0
0.00.266.959 I llm_load_print_meta: rope type        = 2
0.00.266.959 I llm_load_print_meta: rope scaling     = linear
0.00.266.961 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.962 I llm_load_print_meta: freq_scale_train = 1
0.00.266.962 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.962 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.963 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.963 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.963 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.963 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.964 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.964 I llm_load_print_meta: model type       = 2B
0.00.266.965 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.965 I llm_load_print_meta: model params     = 2.51 B
0.00.266.966 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.966 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.967 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.967 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.967 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.968 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.968 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.969 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.969 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.969 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.970 I llm_load_print_meta: max token length = 93
0.00.367.434 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.367.441 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.367.442 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.367.442 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.367.443 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.367.444 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.372.681 I llama_new_context_with_model: n_seq_max     = 1
0.00.372.687 I llama_new_context_with_model: n_ctx         = 4096
0.00.372.687 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.372.688 I llama_new_context_with_model: n_batch       = 2048
0.00.372.688 I llama_new_context_with_model: n_ubatch      = 512
0.00.372.689 I llama_new_context_with_model: flash_attn    = 0
0.00.372.691 I llama_new_context_with_model: freq_base     = 10000.0
0.00.372.692 I llama_new_context_with_model: freq_scale    = 1
0.00.372.693 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.387.226 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.239 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.330 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.549 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.388.556 I llama_new_context_with_model: graph nodes  = 601
0.00.388.556 I llama_new_context_with_model: graph splits = 1
0.00.388.558 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.979 I main: llama threadpool init, n_threads = 4
0.00.472.994 I 
0.00.473.069 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.473.072 I 
0.00.473.121 I sampler seed: 248334747
0.00.473.132 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.473.144 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.473.148 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.473.148 I 
 increasities, and complex interactions between different systems and species within a forest ecosystem. [end of text]


0.01.661.483 I llama_perf_sampler_print:    sampling time =       2.65 ms /    18 runs   (    0.15 ms per token,  6787.33 tokens per second)
0.01.661.486 I llama_perf_context_print:        load time =     472.19 ms
0.01.661.487 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.661.488 I llama_perf_context_print:        eval time =    1177.63 ms /    17 runs   (   69.27 ms per token,    14.44 tokens per second)
0.01.661.489 I llama_perf_context_print:       total time =    1188.51 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.487 I build: 4243 (70b98fad) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.680 I main: llama backend init
0.00.000.686 I main: load the model and apply lora adapter, if any
0.00.020.840 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.852 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.863 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.865 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.868 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.869 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.869 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.870 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.870 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.871 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.875 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.875 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.876 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.876 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.877 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.609 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.845 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.083 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.089 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.090 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.090 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.091 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.092 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.093 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.095 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.096 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.097 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.097 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.098 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.102 I llama_model_loader: - type  f32:   37 tensors
0.00.133.103 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.671 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.231 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.681 I llm_load_vocab: special tokens cache size = 5
0.00.260.216 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.230 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.231 I llm_load_print_meta: arch             = gemma
0.00.260.231 I llm_load_print_meta: vocab type       = SPM
0.00.260.231 I llm_load_print_meta: n_vocab          = 256000
0.00.260.232 I llm_load_print_meta: n_merges         = 0
0.00.260.232 I llm_load_print_meta: vocab_only       = 0
0.00.260.232 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.233 I llm_load_print_meta: n_embd           = 2048
0.00.260.233 I llm_load_print_meta: n_layer          = 18
0.00.260.244 I llm_load_print_meta: n_head           = 8
0.00.260.245 I llm_load_print_meta: n_head_kv        = 1
0.00.260.245 I llm_load_print_meta: n_rot            = 256
0.00.260.245 I llm_load_print_meta: n_swa            = 0
0.00.260.246 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.246 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.247 I llm_load_print_meta: n_gqa            = 8
0.00.260.248 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.249 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.249 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.251 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.251 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.251 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.252 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.253 I llm_load_print_meta: n_ff             = 16384
0.00.260.253 I llm_load_print_meta: n_expert         = 0
0.00.260.253 I llm_load_print_meta: n_expert_used    = 0
0.00.260.253 I llm_load_print_meta: causal attn      = 1
0.00.260.254 I llm_load_print_meta: pooling type     = 0
0.00.260.254 I llm_load_print_meta: rope type        = 2
0.00.260.254 I llm_load_print_meta: rope scaling     = linear
0.00.260.255 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.256 I llm_load_print_meta: freq_scale_train = 1
0.00.260.256 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.257 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.257 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.257 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.258 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.258 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.258 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.259 I llm_load_print_meta: model type       = 2B
0.00.260.259 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.260 I llm_load_print_meta: model params     = 2.51 B
0.00.260.261 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.261 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.261 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.261 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.262 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.262 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.263 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.263 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.263 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.264 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.264 I llm_load_print_meta: max token length = 93
0.00.355.867 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.360.944 I llama_new_context_with_model: n_seq_max     = 1
0.00.360.951 I llama_new_context_with_model: n_ctx         = 4096
0.00.360.951 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.360.952 I llama_new_context_with_model: n_batch       = 2048
0.00.360.952 I llama_new_context_with_model: n_ubatch      = 512
0.00.360.953 I llama_new_context_with_model: flash_attn    = 0
0.00.360.955 I llama_new_context_with_model: freq_base     = 10000.0
0.00.360.956 I llama_new_context_with_model: freq_scale    = 1
0.00.360.957 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.375.751 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.375.766 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.375.859 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.377.095 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.377.101 I llama_new_context_with_model: graph nodes  = 601
0.00.377.102 I llama_new_context_with_model: graph splits = 1
0.00.377.104 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.458.171 I main: llama threadpool init, n_threads = 4
0.00.458.185 I 
0.00.458.254 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.458.258 I 
0.00.458.299 I sampler seed: 1131581619
0.00.458.311 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.458.313 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.458.324 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.458.328 I 
 increasities of the past, while the present and future unfold in their own unique ways. [end of text]


0.01.745.821 I llama_perf_sampler_print:    sampling time =       2.84 ms /    20 runs   (    0.14 ms per token,  7032.35 tokens per second)
0.01.745.824 I llama_perf_context_print:        load time =     457.47 ms
0.01.745.825 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.745.827 I llama_perf_context_print:        eval time =    1276.46 ms /    19 runs   (   67.18 ms per token,    14.88 tokens per second)
0.01.745.828 I llama_perf_context_print:       total time =    1287.66 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.557 I build: 4243 (70b98fad) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.752 I main: llama backend init
0.00.000.758 I main: load the model and apply lora adapter, if any
0.00.021.402 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.414 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.422 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.428 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.429 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.434 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.435 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.435 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.436 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.437 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.437 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.451 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.452 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.453 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.453 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.454 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.550 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.446 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.488 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.495 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.496 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.497 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.498 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.499 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.500 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.503 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.504 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.505 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.505 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.506 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.511 I llama_model_loader: - type  f32:   37 tensors
0.00.132.512 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.578 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.284 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.875 I llm_load_vocab: special tokens cache size = 5
0.00.265.071 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.092 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.092 I llm_load_print_meta: arch             = gemma
0.00.265.093 I llm_load_print_meta: vocab type       = SPM
0.00.265.094 I llm_load_print_meta: n_vocab          = 256000
0.00.265.094 I llm_load_print_meta: n_merges         = 0
0.00.265.095 I llm_load_print_meta: vocab_only       = 0
0.00.265.095 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.095 I llm_load_print_meta: n_embd           = 2048
0.00.265.096 I llm_load_print_meta: n_layer          = 18
0.00.265.107 I llm_load_print_meta: n_head           = 8
0.00.265.108 I llm_load_print_meta: n_head_kv        = 1
0.00.265.108 I llm_load_print_meta: n_rot            = 256
0.00.265.108 I llm_load_print_meta: n_swa            = 0
0.00.265.108 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.109 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.110 I llm_load_print_meta: n_gqa            = 8
0.00.265.111 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.111 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.112 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.114 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.114 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.114 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.115 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.116 I llm_load_print_meta: n_ff             = 16384
0.00.265.116 I llm_load_print_meta: n_expert         = 0
0.00.265.116 I llm_load_print_meta: n_expert_used    = 0
0.00.265.116 I llm_load_print_meta: causal attn      = 1
0.00.265.117 I llm_load_print_meta: pooling type     = 0
0.00.265.117 I llm_load_print_meta: rope type        = 2
0.00.265.117 I llm_load_print_meta: rope scaling     = linear
0.00.265.118 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.119 I llm_load_print_meta: freq_scale_train = 1
0.00.265.119 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.120 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.120 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.120 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.121 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.121 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.121 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.122 I llm_load_print_meta: model type       = 2B
0.00.265.123 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.124 I llm_load_print_meta: model params     = 2.51 B
0.00.265.124 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.125 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.125 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.126 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.126 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.126 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.127 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.127 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.127 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.128 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.128 I llm_load_print_meta: max token length = 93
0.00.341.669 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.341.677 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.341.678 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.341.678 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.341.679 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.341.680 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.346.855 I llama_new_context_with_model: n_seq_max     = 1
0.00.346.862 I llama_new_context_with_model: n_ctx         = 4096
0.00.346.863 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.346.863 I llama_new_context_with_model: n_batch       = 2048
0.00.346.864 I llama_new_context_with_model: n_ubatch      = 512
0.00.346.864 I llama_new_context_with_model: flash_attn    = 0
0.00.346.866 I llama_new_context_with_model: freq_base     = 10000.0
0.00.346.867 I llama_new_context_with_model: freq_scale    = 1
0.00.346.868 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.361.209 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.361.223 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.361.320 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.362.602 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.362.608 I llama_new_context_with_model: graph nodes  = 601
0.00.362.609 I llama_new_context_with_model: graph splits = 1
0.00.362.611 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.925 I main: llama threadpool init, n_threads = 4
0.00.446.941 I 
0.00.447.015 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.447.018 I 
0.00.447.061 I sampler seed: 3963613557
0.00.447.071 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.447.074 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.447.074 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.447.074 I 
 increasities with a youthful exuberance that is both captivating and refreshing. [end of text]


0.01.509.610 I llama_perf_sampler_print:    sampling time =       2.27 ms /    16 runs   (    0.14 ms per token,  7057.79 tokens per second)
0.01.509.612 I llama_perf_context_print:        load time =     446.15 ms
0.01.509.613 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.509.615 I llama_perf_context_print:        eval time =    1053.03 ms /    15 runs   (   70.20 ms per token,    14.24 tokens per second)
0.01.509.615 I llama_perf_context_print:       total time =    1062.69 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.538 I build: 4243 (70b98fad) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.741 I main: llama backend init
0.00.000.748 I main: load the model and apply lora adapter, if any
0.00.021.085 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.094 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.102 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.110 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.111 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.115 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.117 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.117 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.118 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.118 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.119 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.126 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.126 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.127 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.127 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.128 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.726 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.297 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.068 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.074 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.075 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.076 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.076 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.077 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.078 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.079 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.080 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.080 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.081 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.083 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.086 I llama_model_loader: - type  f32:   37 tensors
0.00.131.088 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.186 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.236.450 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.236.955 I llm_load_vocab: special tokens cache size = 5
0.00.258.429 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.258.445 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.258.445 I llm_load_print_meta: arch             = gemma
0.00.258.446 I llm_load_print_meta: vocab type       = SPM
0.00.258.447 I llm_load_print_meta: n_vocab          = 256000
0.00.258.447 I llm_load_print_meta: n_merges         = 0
0.00.258.448 I llm_load_print_meta: vocab_only       = 0
0.00.258.448 I llm_load_print_meta: n_ctx_train      = 8192
0.00.258.448 I llm_load_print_meta: n_embd           = 2048
0.00.258.449 I llm_load_print_meta: n_layer          = 18
0.00.258.461 I llm_load_print_meta: n_head           = 8
0.00.258.462 I llm_load_print_meta: n_head_kv        = 1
0.00.258.462 I llm_load_print_meta: n_rot            = 256
0.00.258.462 I llm_load_print_meta: n_swa            = 0
0.00.258.462 I llm_load_print_meta: n_embd_head_k    = 256
0.00.258.463 I llm_load_print_meta: n_embd_head_v    = 256
0.00.258.463 I llm_load_print_meta: n_gqa            = 8
0.00.258.464 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.258.466 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.258.466 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.258.468 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.258.468 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.258.469 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.258.469 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.258.470 I llm_load_print_meta: n_ff             = 16384
0.00.258.470 I llm_load_print_meta: n_expert         = 0
0.00.258.471 I llm_load_print_meta: n_expert_used    = 0
0.00.258.471 I llm_load_print_meta: causal attn      = 1
0.00.258.471 I llm_load_print_meta: pooling type     = 0
0.00.258.471 I llm_load_print_meta: rope type        = 2
0.00.258.472 I llm_load_print_meta: rope scaling     = linear
0.00.258.473 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.258.474 I llm_load_print_meta: freq_scale_train = 1
0.00.258.474 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.258.474 I llm_load_print_meta: rope_finetuned   = unknown
0.00.258.475 I llm_load_print_meta: ssm_d_conv       = 0
0.00.258.475 I llm_load_print_meta: ssm_d_inner      = 0
0.00.258.475 I llm_load_print_meta: ssm_d_state      = 0
0.00.258.475 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.258.476 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.258.476 I llm_load_print_meta: model type       = 2B
0.00.258.477 I llm_load_print_meta: model ftype      = Q8_0
0.00.258.478 I llm_load_print_meta: model params     = 2.51 B
0.00.258.479 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.258.479 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.258.480 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.258.480 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.258.481 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.258.481 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.258.482 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.258.482 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.258.482 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.258.483 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.258.483 I llm_load_print_meta: max token length = 93
0.00.329.364 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.329.371 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.334.713 I llama_new_context_with_model: n_seq_max     = 1
0.00.334.719 I llama_new_context_with_model: n_ctx         = 4096
0.00.334.719 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.334.720 I llama_new_context_with_model: n_batch       = 2048
0.00.334.720 I llama_new_context_with_model: n_ubatch      = 512
0.00.334.721 I llama_new_context_with_model: flash_attn    = 0
0.00.334.723 I llama_new_context_with_model: freq_base     = 10000.0
0.00.334.725 I llama_new_context_with_model: freq_scale    = 1
0.00.334.726 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.349.309 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.349.322 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.349.420 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.350.659 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.350.665 I llama_new_context_with_model: graph nodes  = 601
0.00.350.665 I llama_new_context_with_model: graph splits = 1
0.00.350.667 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.437.629 I main: llama threadpool init, n_threads = 4
0.00.437.643 I 
0.00.437.712 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.437.715 I 
0.00.437.762 I sampler seed: 4202728773
0.00.437.773 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.437.785 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.437.789 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.437.789 I 
 increasities, and other forms of flattery.

Flattery is a powerful tool that can be used to build relationships, express appreciation, and gain favor. However

0.02.856.738 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6773.40 tokens per second)
0.02.856.741 I llama_perf_context_print:        load time =     436.87 ms
0.02.856.742 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.856.744 I llama_perf_context_print:        eval time =    2399.49 ms /    32 runs   (   74.98 ms per token,    13.34 tokens per second)
0.02.856.745 I llama_perf_context_print:       total time =    2419.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.471s
user	0m26.609s
sys	0m9.301s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4243 (70b98fad)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40193.70 ms
main:    total time = 40193.70 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.573 I build: 4243 (70b98fad) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.762 I main: llama backend init
0.00.000.769 I main: load the model and apply lora adapter, if any
0.00.021.057 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.066 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.074 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.079 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.079 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.083 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.085 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.086 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.086 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.087 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.087 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.091 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.091 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.092 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.092 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.093 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.398 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.572 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.375 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.381 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.381 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.382 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.383 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.383 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.384 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.386 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.386 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.387 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.388 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.389 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.391 I llama_model_loader: - type  f32:   37 tensors
0.00.130.392 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.393 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.223 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.359 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.837 I llm_load_vocab: special tokens cache size = 5
0.00.260.678 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.693 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.693 I llm_load_print_meta: arch             = gemma
0.00.260.694 I llm_load_print_meta: vocab type       = SPM
0.00.260.695 I llm_load_print_meta: n_vocab          = 256000
0.00.260.695 I llm_load_print_meta: n_merges         = 0
0.00.260.695 I llm_load_print_meta: vocab_only       = 0
0.00.260.695 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.696 I llm_load_print_meta: n_embd           = 2048
0.00.260.696 I llm_load_print_meta: n_layer          = 18
0.00.260.708 I llm_load_print_meta: n_head           = 8
0.00.260.709 I llm_load_print_meta: n_head_kv        = 1
0.00.260.709 I llm_load_print_meta: n_rot            = 256
0.00.260.710 I llm_load_print_meta: n_swa            = 0
0.00.260.710 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.710 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.711 I llm_load_print_meta: n_gqa            = 8
0.00.260.712 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.713 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.714 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.716 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.716 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.716 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.717 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.718 I llm_load_print_meta: n_ff             = 16384
0.00.260.718 I llm_load_print_meta: n_expert         = 0
0.00.260.718 I llm_load_print_meta: n_expert_used    = 0
0.00.260.718 I llm_load_print_meta: causal attn      = 1
0.00.260.719 I llm_load_print_meta: pooling type     = 0
0.00.260.719 I llm_load_print_meta: rope type        = 2
0.00.260.719 I llm_load_print_meta: rope scaling     = linear
0.00.260.721 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.721 I llm_load_print_meta: freq_scale_train = 1
0.00.260.721 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.722 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.722 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.722 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.723 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.723 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.723 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.724 I llm_load_print_meta: model type       = 2B
0.00.260.724 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.260.725 I llm_load_print_meta: model params     = 2.51 B
0.00.260.726 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.260.726 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.727 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.727 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.727 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.728 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.728 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.728 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.729 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.729 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.729 I llm_load_print_meta: max token length = 93
0.00.321.245 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.321.251 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.321.252 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.321.252 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.321.253 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.321.253 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.326.307 I llama_new_context_with_model: n_seq_max     = 1
0.00.326.313 I llama_new_context_with_model: n_ctx         = 4096
0.00.326.314 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.326.314 I llama_new_context_with_model: n_batch       = 2048
0.00.326.315 I llama_new_context_with_model: n_ubatch      = 512
0.00.326.315 I llama_new_context_with_model: flash_attn    = 0
0.00.326.317 I llama_new_context_with_model: freq_base     = 10000.0
0.00.326.318 I llama_new_context_with_model: freq_scale    = 1
0.00.326.319 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.340.034 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.340.046 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.340.135 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.341.349 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.341.355 I llama_new_context_with_model: graph nodes  = 601
0.00.341.356 I llama_new_context_with_model: graph splits = 1
0.00.341.358 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.416.072 I main: llama threadpool init, n_threads = 4
0.00.416.088 I 
0.00.416.163 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.416.166 I 
0.00.416.211 I sampler seed: 3162873669
0.00.416.222 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.416.230 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.416.233 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.416.233 I 
 maneuvled tree. This is a picture of a tree in distress, with a broken trunk and leaning branches.

**Possible causes of the distress:**



0.02.010.930 I llama_perf_sampler_print:    sampling time =       5.46 ms /    33 runs   (    0.17 ms per token,  6048.39 tokens per second)
0.02.010.933 I llama_perf_context_print:        load time =     415.29 ms
0.02.010.934 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.010.935 I llama_perf_context_print:        eval time =    1575.96 ms /    32 runs   (   49.25 ms per token,    20.31 tokens per second)
0.02.010.936 I llama_perf_context_print:       total time =    1594.86 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4243 (70b98fad)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40166.81 ms
main:    total time = 40166.82 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.526 I build: 4243 (70b98fad) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.717 I main: llama backend init
0.00.000.723 I main: load the model and apply lora adapter, if any
0.00.021.085 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.101 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.107 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.108 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.112 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.113 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.114 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.114 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.115 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.115 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.119 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.119 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.120 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.120 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.121 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.473 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.783 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.670 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.676 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.677 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.677 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.678 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.678 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.679 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.682 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.682 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.686 I llama_model_loader: - type  f32:   37 tensors
0.00.130.687 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.687 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.623 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.884 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.437 I llm_load_vocab: special tokens cache size = 5
0.00.265.421 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.435 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.436 I llm_load_print_meta: arch             = gemma
0.00.265.437 I llm_load_print_meta: vocab type       = SPM
0.00.265.437 I llm_load_print_meta: n_vocab          = 256000
0.00.265.437 I llm_load_print_meta: n_merges         = 0
0.00.265.438 I llm_load_print_meta: vocab_only       = 0
0.00.265.438 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.439 I llm_load_print_meta: n_embd           = 2048
0.00.265.439 I llm_load_print_meta: n_layer          = 18
0.00.265.450 I llm_load_print_meta: n_head           = 8
0.00.265.451 I llm_load_print_meta: n_head_kv        = 1
0.00.265.451 I llm_load_print_meta: n_rot            = 256
0.00.265.452 I llm_load_print_meta: n_swa            = 0
0.00.265.452 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.452 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.453 I llm_load_print_meta: n_gqa            = 8
0.00.265.454 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.454 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.455 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.457 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.458 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.458 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.459 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.460 I llm_load_print_meta: n_ff             = 16384
0.00.265.460 I llm_load_print_meta: n_expert         = 0
0.00.265.460 I llm_load_print_meta: n_expert_used    = 0
0.00.265.460 I llm_load_print_meta: causal attn      = 1
0.00.265.461 I llm_load_print_meta: pooling type     = 0
0.00.265.461 I llm_load_print_meta: rope type        = 2
0.00.265.461 I llm_load_print_meta: rope scaling     = linear
0.00.265.463 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.463 I llm_load_print_meta: freq_scale_train = 1
0.00.265.463 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.464 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.464 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.464 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.465 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.465 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.465 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.466 I llm_load_print_meta: model type       = 2B
0.00.265.466 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.467 I llm_load_print_meta: model params     = 2.51 B
0.00.265.468 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.469 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.469 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.469 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.469 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.470 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.470 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.470 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.471 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.471 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.471 I llm_load_print_meta: max token length = 93
0.00.323.800 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.328.972 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.978 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.979 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.979 I llama_new_context_with_model: n_batch       = 2048
0.00.328.979 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.980 I llama_new_context_with_model: flash_attn    = 0
0.00.328.982 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.983 I llama_new_context_with_model: freq_scale    = 1
0.00.328.984 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.343.564 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.343.578 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.343.668 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.923 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.344.930 I llama_new_context_with_model: graph nodes  = 601
0.00.344.930 I llama_new_context_with_model: graph splits = 1
0.00.344.933 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.675 I main: llama threadpool init, n_threads = 4
0.00.418.691 I 
0.00.418.765 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.418.768 I 
0.00.418.811 I sampler seed: 3049017106
0.00.418.822 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.829 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.418.832 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.418.832 I 
 effe nathu!

I am unable to access the internet to retrieve the requested data. Please check your internet connection or try again later. [end of text]


0.01.882.898 I llama_perf_sampler_print:    sampling time =       4.61 ms /    31 runs   (    0.15 ms per token,  6730.35 tokens per second)
0.01.882.900 I llama_perf_context_print:        load time =     417.94 ms
0.01.882.901 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.882.902 I llama_perf_context_print:        eval time =    1446.42 ms /    30 runs   (   48.21 ms per token,    20.74 tokens per second)
0.01.882.903 I llama_perf_context_print:       total time =    1464.23 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.086s
user	10m23.457s
sys	0m6.792s
