+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.174 I build: 4378 (7024d59e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.376 I main: llama backend init
0.00.000.382 I main: load the model and apply lora adapter, if any
0.00.020.752 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.762 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.769 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.774 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.775 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.778 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.779 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.780 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.781 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.781 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.782 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.786 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.786 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.787 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.788 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.789 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.168 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.942 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.761 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.768 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.769 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.770 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.771 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.772 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.773 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.776 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.777 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.778 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.779 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.781 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.784 I llama_model_loader: - type  f32:   37 tensors
0.00.130.785 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.343 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.573 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.172 I llm_load_vocab: special tokens cache size = 5
0.00.277.506 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.524 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.524 I llm_load_print_meta: arch             = gemma
0.00.277.525 I llm_load_print_meta: vocab type       = SPM
0.00.277.525 I llm_load_print_meta: n_vocab          = 256000
0.00.277.525 I llm_load_print_meta: n_merges         = 0
0.00.277.526 I llm_load_print_meta: vocab_only       = 0
0.00.277.526 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.526 I llm_load_print_meta: n_embd           = 2048
0.00.277.527 I llm_load_print_meta: n_layer          = 18
0.00.277.560 I llm_load_print_meta: n_head           = 8
0.00.277.562 I llm_load_print_meta: n_head_kv        = 1
0.00.277.562 I llm_load_print_meta: n_rot            = 256
0.00.277.563 I llm_load_print_meta: n_swa            = 0
0.00.277.564 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.564 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.566 I llm_load_print_meta: n_gqa            = 8
0.00.277.568 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.569 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.570 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.572 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.572 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.573 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.573 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.574 I llm_load_print_meta: n_ff             = 16384
0.00.277.574 I llm_load_print_meta: n_expert         = 0
0.00.277.575 I llm_load_print_meta: n_expert_used    = 0
0.00.277.575 I llm_load_print_meta: causal attn      = 1
0.00.277.576 I llm_load_print_meta: pooling type     = 0
0.00.277.577 I llm_load_print_meta: rope type        = 2
0.00.277.577 I llm_load_print_meta: rope scaling     = linear
0.00.277.578 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.579 I llm_load_print_meta: freq_scale_train = 1
0.00.277.579 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.580 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.581 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.581 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.581 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.581 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.582 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.586 I llm_load_print_meta: model type       = 2B
0.00.277.587 I llm_load_print_meta: model ftype      = Q8_0
0.00.277.587 I llm_load_print_meta: model params     = 2.51 B
0.00.277.588 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.589 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.589 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.589 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.590 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.590 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.590 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.590 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.591 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.591 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.592 I llm_load_print_meta: max token length = 93
0.00.377.579 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.377.585 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.377.586 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.377.587 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.377.588 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.377.588 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.382.760 I llama_new_context_with_model: n_seq_max     = 1
0.00.382.767 I llama_new_context_with_model: n_ctx         = 4096
0.00.382.767 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.382.768 I llama_new_context_with_model: n_batch       = 2048
0.00.382.768 I llama_new_context_with_model: n_ubatch      = 512
0.00.382.769 I llama_new_context_with_model: flash_attn    = 0
0.00.382.771 I llama_new_context_with_model: freq_base     = 10000.0
0.00.382.772 I llama_new_context_with_model: freq_scale    = 1
0.00.382.773 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.794 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.397.692 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.397.707 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.397.805 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.399.051 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.399.058 I llama_new_context_with_model: graph nodes  = 601
0.00.399.058 I llama_new_context_with_model: graph splits = 1
0.00.399.061 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.399.061 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.484.361 I main: llama threadpool init, n_threads = 4
0.00.484.378 I 
0.00.484.451 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.484.454 I 
0.00.484.499 I sampler seed: 2643543604
0.00.484.510 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.484.522 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.484.526 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.484.526 I 
 increasities with the words "I love you" or "I miss you."

"I love you."

"I miss you."

"I can

0.02.735.103 I llama_perf_sampler_print:    sampling time =       4.80 ms /    33 runs   (    0.15 ms per token,  6880.73 tokens per second)
0.02.735.105 I llama_perf_context_print:        load time =     483.96 ms
0.02.735.107 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.735.109 I llama_perf_context_print:        eval time =    2230.97 ms /    32 runs   (   69.72 ms per token,    14.34 tokens per second)
0.02.735.110 I llama_perf_context_print:       total time =    2250.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.545 I build: 4378 (7024d59e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.733 I main: llama backend init
0.00.000.740 I main: load the model and apply lora adapter, if any
0.00.021.421 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.441 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.448 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.452 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.458 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.459 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.460 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.461 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.461 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.462 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.470 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.471 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.472 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.472 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.473 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.306 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.888 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.766 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.774 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.775 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.776 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.777 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.778 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.779 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.783 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.784 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.785 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.786 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.787 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.793 I llama_model_loader: - type  f32:   37 tensors
0.00.132.794 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.422 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.561 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.182 I llm_load_vocab: special tokens cache size = 5
0.00.279.402 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.419 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.420 I llm_load_print_meta: arch             = gemma
0.00.279.420 I llm_load_print_meta: vocab type       = SPM
0.00.279.421 I llm_load_print_meta: n_vocab          = 256000
0.00.279.421 I llm_load_print_meta: n_merges         = 0
0.00.279.421 I llm_load_print_meta: vocab_only       = 0
0.00.279.422 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.422 I llm_load_print_meta: n_embd           = 2048
0.00.279.422 I llm_load_print_meta: n_layer          = 18
0.00.279.434 I llm_load_print_meta: n_head           = 8
0.00.279.435 I llm_load_print_meta: n_head_kv        = 1
0.00.279.435 I llm_load_print_meta: n_rot            = 256
0.00.279.436 I llm_load_print_meta: n_swa            = 0
0.00.279.436 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.436 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.437 I llm_load_print_meta: n_gqa            = 8
0.00.279.438 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.439 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.440 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.442 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.442 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.442 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.443 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.444 I llm_load_print_meta: n_ff             = 16384
0.00.279.444 I llm_load_print_meta: n_expert         = 0
0.00.279.444 I llm_load_print_meta: n_expert_used    = 0
0.00.279.445 I llm_load_print_meta: causal attn      = 1
0.00.279.445 I llm_load_print_meta: pooling type     = 0
0.00.279.445 I llm_load_print_meta: rope type        = 2
0.00.279.446 I llm_load_print_meta: rope scaling     = linear
0.00.279.447 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.447 I llm_load_print_meta: freq_scale_train = 1
0.00.279.448 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.448 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.448 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.448 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.449 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.449 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.449 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.450 I llm_load_print_meta: model type       = 2B
0.00.279.450 I llm_load_print_meta: model ftype      = Q8_0
0.00.279.451 I llm_load_print_meta: model params     = 2.51 B
0.00.279.452 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.279.452 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.453 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.453 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.454 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.454 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.454 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.454 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.455 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.455 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.456 I llm_load_print_meta: max token length = 93
0.00.376.335 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.381.548 I llama_new_context_with_model: n_seq_max     = 1
0.00.381.555 I llama_new_context_with_model: n_ctx         = 4096
0.00.381.555 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.381.556 I llama_new_context_with_model: n_batch       = 2048
0.00.381.556 I llama_new_context_with_model: n_ubatch      = 512
0.00.381.557 I llama_new_context_with_model: flash_attn    = 0
0.00.381.559 I llama_new_context_with_model: freq_base     = 10000.0
0.00.381.560 I llama_new_context_with_model: freq_scale    = 1
0.00.381.561 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.381.581 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.396.333 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.396.347 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.396.437 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.397.687 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.397.704 I llama_new_context_with_model: graph nodes  = 601
0.00.397.704 I llama_new_context_with_model: graph splits = 1
0.00.397.707 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.397.707 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.479.542 I main: llama threadpool init, n_threads = 4
0.00.479.557 I 
0.00.479.632 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.479.635 I 
0.00.479.678 I sampler seed: 2928178979
0.00.479.688 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.479.699 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.479.703 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.479.703 I 
 increadibly, and the crowd roared.

This scene is from a movie. What is the genre of the movie?

A) Thriller
B) Action

0.02.654.986 I llama_perf_sampler_print:    sampling time =       4.99 ms /    33 runs   (    0.15 ms per token,  6615.88 tokens per second)
0.02.654.989 I llama_perf_context_print:        load time =     478.79 ms
0.02.654.991 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.654.993 I llama_perf_context_print:        eval time =    2156.75 ms /    32 runs   (   67.40 ms per token,    14.84 tokens per second)
0.02.654.994 I llama_perf_context_print:       total time =    2175.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.171 I build: 4378 (7024d59e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.360 I main: llama backend init
0.00.000.365 I main: load the model and apply lora adapter, if any
0.00.021.518 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.528 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.535 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.544 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.545 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.549 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.550 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.551 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.551 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.552 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.560 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.565 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.565 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.566 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.566 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.567 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.174 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.466 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.300 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.305 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.306 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.306 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.307 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.308 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.309 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.311 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.312 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.312 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.313 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.314 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.317 I llama_model_loader: - type  f32:   37 tensors
0.00.132.318 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.822 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.470 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.010 I llm_load_vocab: special tokens cache size = 5
0.00.271.327 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.342 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.343 I llm_load_print_meta: arch             = gemma
0.00.271.343 I llm_load_print_meta: vocab type       = SPM
0.00.271.344 I llm_load_print_meta: n_vocab          = 256000
0.00.271.344 I llm_load_print_meta: n_merges         = 0
0.00.271.345 I llm_load_print_meta: vocab_only       = 0
0.00.271.345 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.345 I llm_load_print_meta: n_embd           = 2048
0.00.271.346 I llm_load_print_meta: n_layer          = 18
0.00.271.355 I llm_load_print_meta: n_head           = 8
0.00.271.356 I llm_load_print_meta: n_head_kv        = 1
0.00.271.357 I llm_load_print_meta: n_rot            = 256
0.00.271.357 I llm_load_print_meta: n_swa            = 0
0.00.271.357 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.358 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.358 I llm_load_print_meta: n_gqa            = 8
0.00.271.359 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.360 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.361 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.362 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.363 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.363 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.363 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.364 I llm_load_print_meta: n_ff             = 16384
0.00.271.365 I llm_load_print_meta: n_expert         = 0
0.00.271.365 I llm_load_print_meta: n_expert_used    = 0
0.00.271.365 I llm_load_print_meta: causal attn      = 1
0.00.271.366 I llm_load_print_meta: pooling type     = 0
0.00.271.366 I llm_load_print_meta: rope type        = 2
0.00.271.366 I llm_load_print_meta: rope scaling     = linear
0.00.271.368 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.368 I llm_load_print_meta: freq_scale_train = 1
0.00.271.368 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.369 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.369 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.370 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.370 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.370 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.370 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.371 I llm_load_print_meta: model type       = 2B
0.00.271.372 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.373 I llm_load_print_meta: model params     = 2.51 B
0.00.271.373 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.374 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.374 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.375 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.375 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.375 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.375 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.376 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.376 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.377 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.377 I llm_load_print_meta: max token length = 93
0.00.349.973 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.349.980 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.349.981 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.349.982 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.349.982 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.349.983 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.355.040 I llama_new_context_with_model: n_seq_max     = 1
0.00.355.046 I llama_new_context_with_model: n_ctx         = 4096
0.00.355.046 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.355.047 I llama_new_context_with_model: n_batch       = 2048
0.00.355.047 I llama_new_context_with_model: n_ubatch      = 512
0.00.355.048 I llama_new_context_with_model: flash_attn    = 0
0.00.355.050 I llama_new_context_with_model: freq_base     = 10000.0
0.00.355.050 I llama_new_context_with_model: freq_scale    = 1
0.00.355.051 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.070 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.369.946 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.369.962 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.370.066 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.371.369 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.371.376 I llama_new_context_with_model: graph nodes  = 601
0.00.371.376 I llama_new_context_with_model: graph splits = 1
0.00.371.378 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.371.379 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.198 I main: llama threadpool init, n_threads = 4
0.00.463.216 I 
0.00.463.295 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.463.298 I 
0.00.463.343 I sampler seed: 3778112989
0.00.463.354 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.356 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.357 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.358 I 
 increasels, and other colorful characters adorn the dress.

**What is the clothing style?**

A) Victorian
B) Edgy
C)

0.02.723.019 I llama_perf_sampler_print:    sampling time =       4.80 ms /    33 runs   (    0.15 ms per token,  6870.71 tokens per second)
0.02.723.022 I llama_perf_context_print:        load time =     462.81 ms
0.02.723.023 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.723.025 I llama_perf_context_print:        eval time =    2241.47 ms /    32 runs   (   70.05 ms per token,    14.28 tokens per second)
0.02.723.026 I llama_perf_context_print:       total time =    2259.83 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.528 I build: 4378 (7024d59e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.710 I main: llama backend init
0.00.000.716 I main: load the model and apply lora adapter, if any
0.00.020.983 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.993 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.004 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.011 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.012 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.018 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.018 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.019 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.020 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.020 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.021 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.025 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.025 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.026 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.026 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.027 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.221 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.152 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.981 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.987 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.988 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.989 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.990 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.991 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.992 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.996 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.997 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.997 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.998 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.999 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.003 I llama_model_loader: - type  f32:   37 tensors
0.00.131.004 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.942 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.509 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.033 I llm_load_vocab: special tokens cache size = 5
0.00.273.164 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.181 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.181 I llm_load_print_meta: arch             = gemma
0.00.273.182 I llm_load_print_meta: vocab type       = SPM
0.00.273.183 I llm_load_print_meta: n_vocab          = 256000
0.00.273.183 I llm_load_print_meta: n_merges         = 0
0.00.273.184 I llm_load_print_meta: vocab_only       = 0
0.00.273.184 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.184 I llm_load_print_meta: n_embd           = 2048
0.00.273.185 I llm_load_print_meta: n_layer          = 18
0.00.273.196 I llm_load_print_meta: n_head           = 8
0.00.273.197 I llm_load_print_meta: n_head_kv        = 1
0.00.273.197 I llm_load_print_meta: n_rot            = 256
0.00.273.198 I llm_load_print_meta: n_swa            = 0
0.00.273.198 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.198 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.199 I llm_load_print_meta: n_gqa            = 8
0.00.273.200 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.201 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.202 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.204 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.204 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.204 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.205 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.206 I llm_load_print_meta: n_ff             = 16384
0.00.273.206 I llm_load_print_meta: n_expert         = 0
0.00.273.206 I llm_load_print_meta: n_expert_used    = 0
0.00.273.207 I llm_load_print_meta: causal attn      = 1
0.00.273.207 I llm_load_print_meta: pooling type     = 0
0.00.273.207 I llm_load_print_meta: rope type        = 2
0.00.273.208 I llm_load_print_meta: rope scaling     = linear
0.00.273.209 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.210 I llm_load_print_meta: freq_scale_train = 1
0.00.273.210 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.210 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.210 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.211 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.211 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.211 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.211 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.212 I llm_load_print_meta: model type       = 2B
0.00.273.212 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.213 I llm_load_print_meta: model params     = 2.51 B
0.00.273.214 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.214 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.215 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.215 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.215 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.216 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.216 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.216 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.217 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.217 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.217 I llm_load_print_meta: max token length = 93
0.00.345.490 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.345.497 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.350.635 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.640 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.640 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.640 I llama_new_context_with_model: n_batch       = 2048
0.00.350.641 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.641 I llama_new_context_with_model: flash_attn    = 0
0.00.350.644 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.644 I llama_new_context_with_model: freq_scale    = 1
0.00.350.645 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.665 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.365.508 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.365.521 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.365.609 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.891 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.366.895 I llama_new_context_with_model: graph nodes  = 601
0.00.366.895 I llama_new_context_with_model: graph splits = 1
0.00.366.897 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.366.897 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.456.036 I main: llama threadpool init, n_threads = 4
0.00.456.051 I 
0.00.456.124 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.456.127 I 
0.00.456.166 I sampler seed: 3985882543
0.00.456.177 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.185 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.456.185 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.456.186 I 
 increasities?

I cannot find the requested information in the context. Please provide more context or specify the information you are looking for. [end of text]


0.02.573.045 I llama_perf_sampler_print:    sampling time =       4.40 ms /    29 runs   (    0.15 ms per token,  6584.92 tokens per second)
0.02.573.047 I llama_perf_context_print:        load time =     455.30 ms
0.02.573.048 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.573.050 I llama_perf_context_print:        eval time =    2100.15 ms /    28 runs   (   75.01 ms per token,    13.33 tokens per second)
0.02.573.051 I llama_perf_context_print:       total time =    2117.02 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.122s
user	0m38.120s
sys	0m9.359s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4378 (7024d59e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40266.72 ms
main:    total time = 40266.72 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.764 I build: 4378 (7024d59e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.955 I main: llama backend init
0.00.000.962 I main: load the model and apply lora adapter, if any
0.00.021.965 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.977 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.989 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.994 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.995 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.999 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.002 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.003 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.004 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.004 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.005 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.009 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.010 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.011 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.012 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.013 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.494 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.352 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.209 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.216 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.217 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.217 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.218 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.219 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.220 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.223 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.223 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.224 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.225 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.226 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.231 I llama_model_loader: - type  f32:   37 tensors
0.00.132.232 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.234 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.324 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.868 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.347 I llm_load_vocab: special tokens cache size = 5
0.00.269.637 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.655 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.656 I llm_load_print_meta: arch             = gemma
0.00.269.656 I llm_load_print_meta: vocab type       = SPM
0.00.269.657 I llm_load_print_meta: n_vocab          = 256000
0.00.269.657 I llm_load_print_meta: n_merges         = 0
0.00.269.657 I llm_load_print_meta: vocab_only       = 0
0.00.269.658 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.658 I llm_load_print_meta: n_embd           = 2048
0.00.269.658 I llm_load_print_meta: n_layer          = 18
0.00.269.670 I llm_load_print_meta: n_head           = 8
0.00.269.671 I llm_load_print_meta: n_head_kv        = 1
0.00.269.671 I llm_load_print_meta: n_rot            = 256
0.00.269.672 I llm_load_print_meta: n_swa            = 0
0.00.269.672 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.672 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.673 I llm_load_print_meta: n_gqa            = 8
0.00.269.674 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.675 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.676 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.677 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.678 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.678 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.679 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.680 I llm_load_print_meta: n_ff             = 16384
0.00.269.680 I llm_load_print_meta: n_expert         = 0
0.00.269.680 I llm_load_print_meta: n_expert_used    = 0
0.00.269.681 I llm_load_print_meta: causal attn      = 1
0.00.269.681 I llm_load_print_meta: pooling type     = 0
0.00.269.681 I llm_load_print_meta: rope type        = 2
0.00.269.681 I llm_load_print_meta: rope scaling     = linear
0.00.269.683 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.684 I llm_load_print_meta: freq_scale_train = 1
0.00.269.684 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.685 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.685 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.685 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.685 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.686 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.686 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.687 I llm_load_print_meta: model type       = 2B
0.00.269.687 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.688 I llm_load_print_meta: model params     = 2.51 B
0.00.269.689 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.689 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.689 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.690 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.690 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.690 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.690 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.691 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.691 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.692 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.692 I llm_load_print_meta: max token length = 93
0.00.330.990 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.330.997 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.330.998 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.330.999 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.330.999 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.331.000 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.336.229 I llama_new_context_with_model: n_seq_max     = 1
0.00.336.235 I llama_new_context_with_model: n_ctx         = 4096
0.00.336.236 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.336.236 I llama_new_context_with_model: n_batch       = 2048
0.00.336.237 I llama_new_context_with_model: n_ubatch      = 512
0.00.336.237 I llama_new_context_with_model: flash_attn    = 0
0.00.336.239 I llama_new_context_with_model: freq_base     = 10000.0
0.00.336.240 I llama_new_context_with_model: freq_scale    = 1
0.00.336.241 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.336.261 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.350.913 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.350.926 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.015 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.282 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.289 I llama_new_context_with_model: graph nodes  = 601
0.00.352.289 I llama_new_context_with_model: graph splits = 1
0.00.352.292 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.352.292 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.427.096 I main: llama threadpool init, n_threads = 4
0.00.427.112 I 
0.00.427.187 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.427.190 I 
0.00.427.231 I sampler seed: 1386251707
0.00.427.242 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.427.245 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.427.254 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.427.257 I 
 squaRED, a powerful AI language model with a unique focus on creative storytelling. It can generate captivating narratives, poetry, scripts, and even song lyrics.



0.02.068.813 I llama_perf_sampler_print:    sampling time =       5.47 ms /    33 runs   (    0.17 ms per token,  6035.11 tokens per second)
0.02.068.816 I llama_perf_context_print:        load time =     426.12 ms
0.02.068.817 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.068.819 I llama_perf_context_print:        eval time =    1621.76 ms /    32 runs   (   50.68 ms per token,    19.73 tokens per second)
0.02.068.820 I llama_perf_context_print:       total time =    1641.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4378 (7024d59e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40230.94 ms
main:    total time = 40230.94 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.573 I build: 4378 (7024d59e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.780 I main: llama backend init
0.00.000.786 I main: load the model and apply lora adapter, if any
0.00.021.737 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.754 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.764 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.767 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.771 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.771 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.772 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.773 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.776 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.776 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.779 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.780 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.781 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.781 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.783 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.088 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.151 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.013 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.020 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.020 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.021 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.022 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.023 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.024 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.028 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.029 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.032 I llama_model_loader: - type  f32:   37 tensors
0.00.132.034 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.034 I llama_model_loader: - type q6_K:   19 tensors
0.00.211.130 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.139 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.737 I llm_load_vocab: special tokens cache size = 5
0.00.282.125 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.142 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.142 I llm_load_print_meta: arch             = gemma
0.00.282.143 I llm_load_print_meta: vocab type       = SPM
0.00.282.144 I llm_load_print_meta: n_vocab          = 256000
0.00.282.145 I llm_load_print_meta: n_merges         = 0
0.00.282.145 I llm_load_print_meta: vocab_only       = 0
0.00.282.145 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.145 I llm_load_print_meta: n_embd           = 2048
0.00.282.146 I llm_load_print_meta: n_layer          = 18
0.00.282.158 I llm_load_print_meta: n_head           = 8
0.00.282.159 I llm_load_print_meta: n_head_kv        = 1
0.00.282.159 I llm_load_print_meta: n_rot            = 256
0.00.282.159 I llm_load_print_meta: n_swa            = 0
0.00.282.160 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.160 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.162 I llm_load_print_meta: n_gqa            = 8
0.00.282.163 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.164 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.165 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.166 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.167 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.167 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.167 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.168 I llm_load_print_meta: n_ff             = 16384
0.00.282.169 I llm_load_print_meta: n_expert         = 0
0.00.282.170 I llm_load_print_meta: n_expert_used    = 0
0.00.282.170 I llm_load_print_meta: causal attn      = 1
0.00.282.171 I llm_load_print_meta: pooling type     = 0
0.00.282.172 I llm_load_print_meta: rope type        = 2
0.00.282.172 I llm_load_print_meta: rope scaling     = linear
0.00.282.174 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.174 I llm_load_print_meta: freq_scale_train = 1
0.00.282.175 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.175 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.176 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.176 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.176 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.176 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.177 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.178 I llm_load_print_meta: model type       = 2B
0.00.282.179 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.282.180 I llm_load_print_meta: model params     = 2.51 B
0.00.282.180 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.282.181 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.181 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.182 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.182 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.182 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.182 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.183 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.183 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.183 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.184 I llm_load_print_meta: max token length = 93
0.00.340.971 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.346.144 I llama_new_context_with_model: n_seq_max     = 1
0.00.346.149 I llama_new_context_with_model: n_ctx         = 4096
0.00.346.150 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.346.150 I llama_new_context_with_model: n_batch       = 2048
0.00.346.151 I llama_new_context_with_model: n_ubatch      = 512
0.00.346.151 I llama_new_context_with_model: flash_attn    = 0
0.00.346.153 I llama_new_context_with_model: freq_base     = 10000.0
0.00.346.154 I llama_new_context_with_model: freq_scale    = 1
0.00.346.155 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.346.176 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.361.041 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.361.056 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.361.144 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.362.399 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.362.405 I llama_new_context_with_model: graph nodes  = 601
0.00.362.406 I llama_new_context_with_model: graph splits = 1
0.00.362.408 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.362.408 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.436.708 I main: llama threadpool init, n_threads = 4
0.00.436.723 I 
0.00.436.798 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.436.801 I 
0.00.436.843 I sampler seed: 2371109347
0.00.436.854 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.436.867 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.436.871 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.436.871 I 
 squaRED

I am unable to provide assistance with sexually suggestive or inappropriate content. My purpose is to assist with tasks and questions within the boundaries of ethical and lawful

0.02.030.390 I llama_perf_sampler_print:    sampling time =       5.06 ms /    33 runs   (    0.15 ms per token,  6516.59 tokens per second)
0.02.030.392 I llama_perf_context_print:        load time =     435.91 ms
0.02.030.393 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.030.395 I llama_perf_context_print:        eval time =    1574.08 ms /    32 runs   (   49.19 ms per token,    20.33 tokens per second)
0.02.030.396 I llama_perf_context_print:       total time =    1593.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.421s
user	10m24.354s
sys	0m6.948s
